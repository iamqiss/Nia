// This file is @generated by prost-build.
/// Mention in a note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteMention {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
    /// Character offset in text
    #[prost(int32, tag = "3")]
    pub start_offset: i32,
    #[prost(int32, tag = "4")]
    pub end_offset: i32,
}
/// Hashtag in a note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteHashtag {
    /// Without # prefix
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub start_offset: i32,
    #[prost(int32, tag = "3")]
    pub end_offset: i32,
}
/// URL/link in a note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteLink {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    /// Extracted title
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    /// Extracted description
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Preview image
    #[prost(string, tag = "4")]
    pub image_url: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub start_offset: i32,
    #[prost(int32, tag = "6")]
    pub end_offset: i32,
}
/// Rich content entities in note text
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteEntities {
    #[prost(message, repeated, tag = "1")]
    pub mentions: ::prost::alloc::vec::Vec<NoteMention>,
    #[prost(message, repeated, tag = "2")]
    pub hashtags: ::prost::alloc::vec::Vec<NoteHashtag>,
    #[prost(message, repeated, tag = "3")]
    pub links: ::prost::alloc::vec::Vec<NoteLink>,
}
/// Geographic location
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoLocation {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
    /// Human readable name
    #[prost(string, tag = "3")]
    pub place_name: ::prost::alloc::string::String,
    /// ISO country code
    #[prost(string, tag = "4")]
    pub country_code: ::prost::alloc::string::String,
}
/// Engagement metrics
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NoteMetrics {
    #[prost(int64, tag = "1")]
    pub like_count: i64,
    /// formerly renote_count
    #[prost(int64, tag = "2")]
    pub renote_count: i64,
    #[prost(int64, tag = "3")]
    pub reply_count: i64,
    /// Quote renotes with commentary
    #[prost(int64, tag = "4")]
    pub quote_count: i64,
    #[prost(int64, tag = "5")]
    pub bookmark_count: i64,
    #[prost(int64, tag = "6")]
    pub view_count: i64,
    /// Calculated engagement score
    #[prost(double, tag = "7")]
    pub engagement_rate: f64,
}
/// Core Note model
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Note {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub author_id: ::prost::alloc::string::String,
    /// Note content (max 280 chars)
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
    #[prost(enumeration = "NoteVisibility", tag = "4")]
    pub visibility: i32,
    #[prost(enumeration = "ContentWarning", tag = "5")]
    pub content_warning: i32,
    /// Media attachments
    ///
    /// References to media service
    #[prost(string, repeated, tag = "6")]
    pub media_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Rich content
    #[prost(message, optional, tag = "7")]
    pub entities: ::core::option::Option<NoteEntities>,
    #[prost(message, optional, tag = "8")]
    pub location: ::core::option::Option<GeoLocation>,
    /// Thread/reply context
    ///
    /// If this is a reply
    #[prost(string, tag = "9")]
    pub reply_to_note_id: ::prost::alloc::string::String,
    /// User being replied to
    #[prost(string, tag = "10")]
    pub reply_to_user_id: ::prost::alloc::string::String,
    /// Root note of thread
    #[prost(string, tag = "11")]
    pub thread_root_id: ::prost::alloc::string::String,
    /// Renote context (share)
    ///
    /// If this is a renote
    #[prost(string, tag = "12")]
    pub renoted_note_id: ::prost::alloc::string::String,
    /// Original author
    #[prost(string, tag = "13")]
    pub renoted_user_id: ::prost::alloc::string::String,
    /// Has additional commentary
    #[prost(bool, tag = "14")]
    pub is_quote_renote: bool,
    /// Metadata
    #[prost(message, optional, tag = "15")]
    pub created_at: ::core::option::Option<super::common::Timestamp>,
    #[prost(message, optional, tag = "16")]
    pub updated_at: ::core::option::Option<super::common::Timestamp>,
    /// Soft delete
    #[prost(message, optional, tag = "17")]
    pub deleted_at: ::core::option::Option<super::common::Timestamp>,
    /// Analytics & moderation
    #[prost(message, optional, tag = "18")]
    pub metrics: ::core::option::Option<NoteMetrics>,
    /// Detected language (ISO 639-1)
    #[prost(string, tag = "19")]
    pub language_code: ::prost::alloc::string::String,
    /// Moderation flags
    #[prost(string, repeated, tag = "20")]
    pub flags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// From verified account
    #[prost(bool, tag = "21")]
    pub is_verified_content: bool,
    /// App/client used to create
    #[prost(string, tag = "22")]
    pub client_name: ::prost::alloc::string::String,
}
/// User's interaction with a note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserNoteInteraction {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub has_liked: bool,
    #[prost(bool, tag = "4")]
    pub has_renoted: bool,
    #[prost(bool, tag = "5")]
    pub has_bookmarked: bool,
    #[prost(bool, tag = "6")]
    pub has_reported: bool,
    #[prost(message, optional, tag = "7")]
    pub last_viewed_at: ::core::option::Option<super::common::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub interacted_at: ::core::option::Option<super::common::Timestamp>,
}
/// Create note request
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateNoteRequest {
    #[prost(string, tag = "1")]
    pub author_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    #[prost(enumeration = "NoteVisibility", tag = "3")]
    pub visibility: i32,
    #[prost(enumeration = "ContentWarning", tag = "4")]
    pub content_warning: i32,
    #[prost(string, repeated, tag = "5")]
    pub media_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "6")]
    pub location: ::core::option::Option<GeoLocation>,
    /// Reply context
    #[prost(string, tag = "7")]
    pub reply_to_note_id: ::prost::alloc::string::String,
    /// Renote context
    #[prost(string, tag = "8")]
    pub renoted_note_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "9")]
    pub is_quote_renote: bool,
    #[prost(string, tag = "10")]
    pub client_name: ::prost::alloc::string::String,
    /// For retries
    #[prost(string, tag = "11")]
    pub idempotency_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateNoteResponse {
    #[prost(message, optional, tag = "1")]
    pub note: ::core::option::Option<Note>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
/// Get note by ID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNoteRequest {
    #[prost(string, tag = "1")]
    pub note_id: ::prost::alloc::string::String,
    /// For privacy checks
    #[prost(string, tag = "2")]
    pub requesting_user_id: ::prost::alloc::string::String,
    /// Include full thread context
    #[prost(bool, tag = "3")]
    pub include_thread: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNoteResponse {
    #[prost(message, optional, tag = "1")]
    pub note: ::core::option::Option<Note>,
    /// Requesting user's interaction
    #[prost(message, optional, tag = "2")]
    pub user_interaction: ::core::option::Option<UserNoteInteraction>,
    /// If include_thread = true
    #[prost(message, repeated, tag = "3")]
    pub thread_notes: ::prost::alloc::vec::Vec<Note>,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
}
/// Delete note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteNoteRequest {
    #[prost(string, tag = "1")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteNoteResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
/// Like/unlike note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeNoteRequest {
    #[prost(string, tag = "1")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// true = like, false = unlike
    #[prost(bool, tag = "3")]
    pub like: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeNoteResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(int64, tag = "2")]
    pub new_like_count: i64,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
/// Renote (share) note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenoteNoteRequest {
    #[prost(string, tag = "1")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_quote_renote: bool,
    /// If quote renote
    #[prost(string, tag = "4")]
    pub quote_text: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenoteNoteResponse {
    /// The new renote created
    #[prost(message, optional, tag = "1")]
    pub renote_note: ::core::option::Option<Note>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
/// Get user's notes (profile timeline)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserNotesRequest {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub requesting_user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<super::common::PaginationRequest>,
    #[prost(bool, tag = "4")]
    pub include_replies: bool,
    #[prost(bool, tag = "5")]
    pub include_renotes: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserNotesResponse {
    #[prost(message, repeated, tag = "1")]
    pub notes: ::prost::alloc::vec::Vec<Note>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::common::PaginationResponse>,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub error_message: ::prost::alloc::string::String,
}
/// Get note thread (replies)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNoteThreadRequest {
    #[prost(string, tag = "1")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub requesting_user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<super::common::PaginationRequest>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNoteThreadResponse {
    #[prost(message, optional, tag = "1")]
    pub root_note: ::core::option::Option<Note>,
    #[prost(message, repeated, tag = "2")]
    pub replies: ::prost::alloc::vec::Vec<Note>,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<super::common::PaginationResponse>,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
}
/// Search notes
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchNotesRequest {
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub requesting_user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<super::common::PaginationRequest>,
    /// Filters
    #[prost(string, tag = "4")]
    pub language: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub author_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "6")]
    pub hashtags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub since: ::core::option::Option<super::common::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub until: ::core::option::Option<super::common::Timestamp>,
    #[prost(bool, tag = "9")]
    pub verified_only: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchNotesResponse {
    #[prost(message, repeated, tag = "1")]
    pub notes: ::prost::alloc::vec::Vec<Note>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::common::PaginationResponse>,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub error_message: ::prost::alloc::string::String,
}
/// Health check
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HealthCheckRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Note visibility levels (privacy)
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NoteVisibility {
    Unknown = 0,
    /// Visible to everyone
    Public = 1,
    /// Visible to followers only
    Followers = 2,
    /// Visible to mutual followers only
    Friends = 3,
    /// Only visible to author
    Private = 4,
    /// Visible to mentioned users + author
    Mentioned = 5,
}
impl NoteVisibility {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "NOTE_VISIBILITY_UNKNOWN",
            Self::Public => "NOTE_VISIBILITY_PUBLIC",
            Self::Followers => "NOTE_VISIBILITY_FOLLOWERS",
            Self::Friends => "NOTE_VISIBILITY_FRIENDS",
            Self::Private => "NOTE_VISIBILITY_PRIVATE",
            Self::Mentioned => "NOTE_VISIBILITY_MENTIONED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOTE_VISIBILITY_UNKNOWN" => Some(Self::Unknown),
            "NOTE_VISIBILITY_PUBLIC" => Some(Self::Public),
            "NOTE_VISIBILITY_FOLLOWERS" => Some(Self::Followers),
            "NOTE_VISIBILITY_FRIENDS" => Some(Self::Friends),
            "NOTE_VISIBILITY_PRIVATE" => Some(Self::Private),
            "NOTE_VISIBILITY_MENTIONED" => Some(Self::Mentioned),
            _ => None,
        }
    }
}
/// Content warning/sensitivity types
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentWarning {
    None = 0,
    Sensitive = 1,
    Adult = 2,
    Violence = 3,
    Political = 4,
}
impl ContentWarning {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CONTENT_WARNING_NONE",
            Self::Sensitive => "CONTENT_WARNING_SENSITIVE",
            Self::Adult => "CONTENT_WARNING_ADULT",
            Self::Violence => "CONTENT_WARNING_VIOLENCE",
            Self::Political => "CONTENT_WARNING_POLITICAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONTENT_WARNING_NONE" => Some(Self::None),
            "CONTENT_WARNING_SENSITIVE" => Some(Self::Sensitive),
            "CONTENT_WARNING_ADULT" => Some(Self::Adult),
            "CONTENT_WARNING_VIOLENCE" => Some(Self::Violence),
            "CONTENT_WARNING_POLITICAL" => Some(Self::Political),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod note_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ============= NOTE SERVICE =============
    #[derive(Debug, Clone)]
    pub struct NoteServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NoteServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NoteServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NoteServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NoteServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Core operations
        pub async fn create_note(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateNoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/CreateNote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "CreateNote"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_note(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/GetNote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "GetNote"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_note(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteNoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/DeleteNote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "DeleteNote"));
            self.inner.unary(req, path, codec).await
        }
        /// Interactions
        pub async fn like_note(
            &mut self,
            request: impl tonic::IntoRequest<super::LikeNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LikeNoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/LikeNote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "LikeNote"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn renote_note(
            &mut self,
            request: impl tonic::IntoRequest<super::RenoteNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RenoteNoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/RenoteNote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "RenoteNote"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries
        pub async fn get_user_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/GetUserNotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "GetUserNotes"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_note_thread(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNoteThreadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNoteThreadResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/GetNoteThread",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "GetNoteThread"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/SearchNotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "SearchNotes"));
            self.inner.unary(req, path, codec).await
        }
        /// Health
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.note.NoteService/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.note.NoteService", "HealthCheck"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod note_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with NoteServiceServer.
    #[async_trait]
    pub trait NoteService: std::marker::Send + std::marker::Sync + 'static {
        /// Core operations
        async fn create_note(
            &self,
            request: tonic::Request<super::CreateNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateNoteResponse>,
            tonic::Status,
        >;
        async fn get_note(
            &self,
            request: tonic::Request<super::GetNoteRequest>,
        ) -> std::result::Result<tonic::Response<super::GetNoteResponse>, tonic::Status>;
        async fn delete_note(
            &self,
            request: tonic::Request<super::DeleteNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteNoteResponse>,
            tonic::Status,
        >;
        /// Interactions
        async fn like_note(
            &self,
            request: tonic::Request<super::LikeNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LikeNoteResponse>,
            tonic::Status,
        >;
        async fn renote_note(
            &self,
            request: tonic::Request<super::RenoteNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RenoteNoteResponse>,
            tonic::Status,
        >;
        /// Queries
        async fn get_user_notes(
            &self,
            request: tonic::Request<super::GetUserNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserNotesResponse>,
            tonic::Status,
        >;
        async fn get_note_thread(
            &self,
            request: tonic::Request<super::GetNoteThreadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNoteThreadResponse>,
            tonic::Status,
        >;
        async fn search_notes(
            &self,
            request: tonic::Request<super::SearchNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchNotesResponse>,
            tonic::Status,
        >;
        /// Health
        async fn health_check(
            &self,
            request: tonic::Request<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        >;
    }
    /// ============= NOTE SERVICE =============
    #[derive(Debug)]
    pub struct NoteServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> NoteServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for NoteServiceServer<T>
    where
        T: NoteService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/sonet.note.NoteService/CreateNote" => {
                    #[allow(non_camel_case_types)]
                    struct CreateNoteSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::CreateNoteRequest>
                    for CreateNoteSvc<T> {
                        type Response = super::CreateNoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateNoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::create_note(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateNoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/GetNote" => {
                    #[allow(non_camel_case_types)]
                    struct GetNoteSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetNoteRequest>
                    for GetNoteSvc<T> {
                        type Response = super::GetNoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_note(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/DeleteNote" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteNoteSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::DeleteNoteRequest>
                    for DeleteNoteSvc<T> {
                        type Response = super::DeleteNoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteNoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::delete_note(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteNoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/LikeNote" => {
                    #[allow(non_camel_case_types)]
                    struct LikeNoteSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::LikeNoteRequest>
                    for LikeNoteSvc<T> {
                        type Response = super::LikeNoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LikeNoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::like_note(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LikeNoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/RenoteNote" => {
                    #[allow(non_camel_case_types)]
                    struct RenoteNoteSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::RenoteNoteRequest>
                    for RenoteNoteSvc<T> {
                        type Response = super::RenoteNoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RenoteNoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::renote_note(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RenoteNoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/GetUserNotes" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserNotesSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetUserNotesRequest>
                    for GetUserNotesSvc<T> {
                        type Response = super::GetUserNotesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUserNotesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_user_notes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUserNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/GetNoteThread" => {
                    #[allow(non_camel_case_types)]
                    struct GetNoteThreadSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetNoteThreadRequest>
                    for GetNoteThreadSvc<T> {
                        type Response = super::GetNoteThreadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNoteThreadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_note_thread(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNoteThreadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/SearchNotes" => {
                    #[allow(non_camel_case_types)]
                    struct SearchNotesSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::SearchNotesRequest>
                    for SearchNotesSvc<T> {
                        type Response = super::SearchNotesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchNotesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::search_notes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.note.NoteService/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::HealthCheckRequest>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthCheckResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthCheckRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::health_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for NoteServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "sonet.note.NoteService";
    impl<T> tonic::server::NamedService for NoteServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
