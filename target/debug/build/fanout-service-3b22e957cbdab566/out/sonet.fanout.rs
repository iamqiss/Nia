// This file is @generated by prost-build.
/// Fanout job for processing
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FanoutJob {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub author_id: ::prost::alloc::string::String,
    #[prost(enumeration = "UserTier", tag = "4")]
    pub author_tier: i32,
    #[prost(enumeration = "FanoutStrategy", tag = "5")]
    pub strategy: i32,
    #[prost(message, optional, tag = "6")]
    pub created_at: ::core::option::Option<super::common::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub started_at: ::core::option::Option<super::common::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub completed_at: ::core::option::Option<super::common::Timestamp>,
    #[prost(enumeration = "fanout_job::JobStatus", tag = "9")]
    pub status: i32,
    /// Processing metrics
    #[prost(int32, tag = "10")]
    pub total_followers: i32,
    #[prost(int32, tag = "11")]
    pub processed_followers: i32,
    #[prost(int32, tag = "12")]
    pub failed_deliveries: i32,
    #[prost(double, tag = "13")]
    pub processing_time_ms: f64,
    #[prost(string, tag = "14")]
    pub error_message: ::prost::alloc::string::String,
}
/// Nested message and enum types in `FanoutJob`.
pub mod fanout_job {
    /// Job status
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum JobStatus {
        Unknown = 0,
        Pending = 1,
        Processing = 2,
        Completed = 3,
        Failed = 4,
        Cancelled = 5,
    }
    impl JobStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "JOB_STATUS_UNKNOWN",
                Self::Pending => "JOB_STATUS_PENDING",
                Self::Processing => "JOB_STATUS_PROCESSING",
                Self::Completed => "JOB_STATUS_COMPLETED",
                Self::Failed => "JOB_STATUS_FAILED",
                Self::Cancelled => "JOB_STATUS_CANCELLED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "JOB_STATUS_UNKNOWN" => Some(Self::Unknown),
                "JOB_STATUS_PENDING" => Some(Self::Pending),
                "JOB_STATUS_PROCESSING" => Some(Self::Processing),
                "JOB_STATUS_COMPLETED" => Some(Self::Completed),
                "JOB_STATUS_FAILED" => Some(Self::Failed),
                "JOB_STATUS_CANCELLED" => Some(Self::Cancelled),
                _ => None,
            }
        }
    }
}
/// Follower batch for processing
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FollowerBatch {
    #[prost(string, tag = "1")]
    pub batch_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub follower_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "4")]
    pub batch_size: i32,
    #[prost(int32, tag = "5")]
    pub batch_number: i32,
    #[prost(enumeration = "FanoutStrategy", tag = "6")]
    pub strategy: i32,
}
/// Timeline delivery target
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeliveryTarget {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    /// Redis key for user's timeline
    #[prost(string, tag = "2")]
    pub timeline_key: ::prost::alloc::string::String,
    /// Recently active user
    #[prost(bool, tag = "3")]
    pub is_active_user: bool,
    #[prost(message, optional, tag = "4")]
    pub last_seen: ::core::option::Option<super::common::Timestamp>,
    /// 1=close friend, 2=regular, 3=distant
    #[prost(int32, tag = "5")]
    pub follower_tier: i32,
}
/// Fanout metrics and analytics
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FanoutMetrics {
    #[prost(string, tag = "1")]
    pub author_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub total_deliveries: i64,
    #[prost(int64, tag = "4")]
    pub successful_deliveries: i64,
    #[prost(int64, tag = "5")]
    pub failed_deliveries: i64,
    #[prost(double, tag = "6")]
    pub avg_delivery_time_ms: f64,
    /// Deliveries by user tier
    #[prost(map = "string, int64", tag = "7")]
    pub delivery_by_tier: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i64,
    >,
    #[prost(message, optional, tag = "8")]
    pub completed_at: ::core::option::Option<super::common::Timestamp>,
}
/// Initiate fanout for a new note
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateFanoutRequest {
    #[prost(message, optional, tag = "1")]
    pub note: ::core::option::Option<super::note::Note>,
    /// Override automatic strategy
    #[prost(enumeration = "FanoutStrategy", tag = "2")]
    pub strategy: i32,
    /// High priority processing
    #[prost(bool, tag = "3")]
    pub urgent: bool,
    /// Target specific followers only
    #[prost(string, repeated, tag = "4")]
    pub specific_followers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateFanoutResponse {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(enumeration = "FanoutStrategy", tag = "2")]
    pub strategy_used: i32,
    #[prost(int32, tag = "3")]
    pub estimated_deliveries: i32,
    #[prost(double, tag = "4")]
    pub estimated_completion_time_ms: f64,
    #[prost(bool, tag = "5")]
    pub success: bool,
    #[prost(string, tag = "6")]
    pub error_message: ::prost::alloc::string::String,
}
/// Get fanout job status
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFanoutJobStatusRequest {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFanoutJobStatusResponse {
    #[prost(message, optional, tag = "1")]
    pub job: ::core::option::Option<FanoutJob>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
/// Cancel fanout job
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelFanoutJobRequest {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelFanoutJobResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
/// Get user's fanout tier
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserTierRequest {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserTierResponse {
    #[prost(enumeration = "UserTier", tag = "1")]
    pub tier: i32,
    #[prost(int32, tag = "2")]
    pub follower_count: i32,
    #[prost(enumeration = "FanoutStrategy", tag = "3")]
    pub recommended_strategy: i32,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
}
/// Batch process followers
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessFollowerBatchRequest {
    #[prost(message, optional, tag = "1")]
    pub batch: ::core::option::Option<FollowerBatch>,
    #[prost(message, optional, tag = "2")]
    pub note: ::core::option::Option<super::note::Note>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessFollowerBatchResponse {
    #[prost(string, tag = "1")]
    pub batch_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub successful_deliveries: i32,
    #[prost(int32, tag = "3")]
    pub failed_deliveries: i32,
    #[prost(string, repeated, tag = "4")]
    pub failed_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "5")]
    pub success: bool,
    #[prost(string, tag = "6")]
    pub error_message: ::prost::alloc::string::String,
}
/// Get fanout metrics
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFanoutMetricsRequest {
    #[prost(string, tag = "1")]
    pub author_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub note_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub since: ::core::option::Option<super::common::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub until: ::core::option::Option<super::common::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFanoutMetricsResponse {
    #[prost(message, repeated, tag = "1")]
    pub metrics: ::prost::alloc::vec::Vec<FanoutMetrics>,
    #[prost(map = "string, double", tag = "2")]
    pub summary_stats: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub error_message: ::prost::alloc::string::String,
}
/// Health check
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HealthCheckRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(int32, tag = "3")]
    pub pending_jobs: i32,
    #[prost(int32, tag = "4")]
    pub active_workers: i32,
}
/// Fanout strategies for different user tiers
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FanoutStrategy {
    Unknown = 0,
    /// Pre-compute and push to followers' timelines
    Push = 1,
    /// Compute on-demand when timeline requested
    Pull = 2,
    /// Push to active users, pull for others
    Hybrid = 3,
}
impl FanoutStrategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "FANOUT_STRATEGY_UNKNOWN",
            Self::Push => "FANOUT_STRATEGY_PUSH",
            Self::Pull => "FANOUT_STRATEGY_PULL",
            Self::Hybrid => "FANOUT_STRATEGY_HYBRID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FANOUT_STRATEGY_UNKNOWN" => Some(Self::Unknown),
            "FANOUT_STRATEGY_PUSH" => Some(Self::Push),
            "FANOUT_STRATEGY_PULL" => Some(Self::Pull),
            "FANOUT_STRATEGY_HYBRID" => Some(Self::Hybrid),
            _ => None,
        }
    }
}
/// User tier for fanout strategy selection
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserTier {
    Unknown = 0,
    /// < 1K followers - push fanout
    Regular = 1,
    /// 1K - 100K followers - hybrid
    Popular = 2,
    /// > 100K followers - pull only
    Celebrity = 3,
    /// Verified users - special handling
    Verified = 4,
}
impl UserTier {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "USER_TIER_UNKNOWN",
            Self::Regular => "USER_TIER_REGULAR",
            Self::Popular => "USER_TIER_POPULAR",
            Self::Celebrity => "USER_TIER_CELEBRITY",
            Self::Verified => "USER_TIER_VERIFIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_TIER_UNKNOWN" => Some(Self::Unknown),
            "USER_TIER_REGULAR" => Some(Self::Regular),
            "USER_TIER_POPULAR" => Some(Self::Popular),
            "USER_TIER_CELEBRITY" => Some(Self::Celebrity),
            "USER_TIER_VERIFIED" => Some(Self::Verified),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod fanout_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ============= FANOUT SERVICE =============
    #[derive(Debug, Clone)]
    pub struct FanoutServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FanoutServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FanoutServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FanoutServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FanoutServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Job management
        pub async fn initiate_fanout(
            &mut self,
            request: impl tonic::IntoRequest<super::InitiateFanoutRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateFanoutResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/InitiateFanout",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.fanout.FanoutService", "InitiateFanout"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_fanout_job_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFanoutJobStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFanoutJobStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/GetFanoutJobStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sonet.fanout.FanoutService", "GetFanoutJobStatus"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn cancel_fanout_job(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelFanoutJobRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelFanoutJobResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/CancelFanoutJob",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sonet.fanout.FanoutService", "CancelFanoutJob"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// User tier management
        pub async fn get_user_tier(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserTierRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserTierResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/GetUserTier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.fanout.FanoutService", "GetUserTier"));
            self.inner.unary(req, path, codec).await
        }
        /// Batch processing (internal)
        pub async fn process_follower_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::ProcessFollowerBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProcessFollowerBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/ProcessFollowerBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sonet.fanout.FanoutService", "ProcessFollowerBatch"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Analytics
        pub async fn get_fanout_metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFanoutMetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFanoutMetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/GetFanoutMetrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sonet.fanout.FanoutService", "GetFanoutMetrics"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Health
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sonet.fanout.FanoutService/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sonet.fanout.FanoutService", "HealthCheck"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod fanout_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FanoutServiceServer.
    #[async_trait]
    pub trait FanoutService: std::marker::Send + std::marker::Sync + 'static {
        /// Job management
        async fn initiate_fanout(
            &self,
            request: tonic::Request<super::InitiateFanoutRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateFanoutResponse>,
            tonic::Status,
        >;
        async fn get_fanout_job_status(
            &self,
            request: tonic::Request<super::GetFanoutJobStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFanoutJobStatusResponse>,
            tonic::Status,
        >;
        async fn cancel_fanout_job(
            &self,
            request: tonic::Request<super::CancelFanoutJobRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelFanoutJobResponse>,
            tonic::Status,
        >;
        /// User tier management
        async fn get_user_tier(
            &self,
            request: tonic::Request<super::GetUserTierRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserTierResponse>,
            tonic::Status,
        >;
        /// Batch processing (internal)
        async fn process_follower_batch(
            &self,
            request: tonic::Request<super::ProcessFollowerBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProcessFollowerBatchResponse>,
            tonic::Status,
        >;
        /// Analytics
        async fn get_fanout_metrics(
            &self,
            request: tonic::Request<super::GetFanoutMetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFanoutMetricsResponse>,
            tonic::Status,
        >;
        /// Health
        async fn health_check(
            &self,
            request: tonic::Request<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        >;
    }
    /// ============= FANOUT SERVICE =============
    #[derive(Debug)]
    pub struct FanoutServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> FanoutServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for FanoutServiceServer<T>
    where
        T: FanoutService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/sonet.fanout.FanoutService/InitiateFanout" => {
                    #[allow(non_camel_case_types)]
                    struct InitiateFanoutSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::InitiateFanoutRequest>
                    for InitiateFanoutSvc<T> {
                        type Response = super::InitiateFanoutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitiateFanoutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::initiate_fanout(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InitiateFanoutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.fanout.FanoutService/GetFanoutJobStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetFanoutJobStatusSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::GetFanoutJobStatusRequest>
                    for GetFanoutJobStatusSvc<T> {
                        type Response = super::GetFanoutJobStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFanoutJobStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::get_fanout_job_status(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFanoutJobStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.fanout.FanoutService/CancelFanoutJob" => {
                    #[allow(non_camel_case_types)]
                    struct CancelFanoutJobSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::CancelFanoutJobRequest>
                    for CancelFanoutJobSvc<T> {
                        type Response = super::CancelFanoutJobResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelFanoutJobRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::cancel_fanout_job(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CancelFanoutJobSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.fanout.FanoutService/GetUserTier" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserTierSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::GetUserTierRequest>
                    for GetUserTierSvc<T> {
                        type Response = super::GetUserTierResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUserTierRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::get_user_tier(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUserTierSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.fanout.FanoutService/ProcessFollowerBatch" => {
                    #[allow(non_camel_case_types)]
                    struct ProcessFollowerBatchSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::ProcessFollowerBatchRequest>
                    for ProcessFollowerBatchSvc<T> {
                        type Response = super::ProcessFollowerBatchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ProcessFollowerBatchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::process_follower_batch(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ProcessFollowerBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.fanout.FanoutService/GetFanoutMetrics" => {
                    #[allow(non_camel_case_types)]
                    struct GetFanoutMetricsSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::GetFanoutMetricsRequest>
                    for GetFanoutMetricsSvc<T> {
                        type Response = super::GetFanoutMetricsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFanoutMetricsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::get_fanout_metrics(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFanoutMetricsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sonet.fanout.FanoutService/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: FanoutService>(pub Arc<T>);
                    impl<
                        T: FanoutService,
                    > tonic::server::UnaryService<super::HealthCheckRequest>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthCheckResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthCheckRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FanoutService>::health_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for FanoutServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "sonet.fanout.FanoutService";
    impl<T> tonic::server::NamedService for FanoutServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
