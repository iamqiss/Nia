// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/fanout.proto

#include "services/fanout.pb.h"
#include "services/fanout.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace fanout {

static const char* FanoutService_method_names[] = {
  "/sonet.fanout.FanoutService/InitiateFanout",
  "/sonet.fanout.FanoutService/GetFanoutJobStatus",
  "/sonet.fanout.FanoutService/CancelFanoutJob",
  "/sonet.fanout.FanoutService/GetUserTier",
  "/sonet.fanout.FanoutService/ProcessFollowerBatch",
  "/sonet.fanout.FanoutService/GetFanoutMetrics",
  "/sonet.fanout.FanoutService/HealthCheck",
};

std::unique_ptr< FanoutService::Stub> FanoutService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FanoutService::Stub> stub(new FanoutService::Stub(channel, options));
  return stub;
}

FanoutService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InitiateFanout_(FanoutService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFanoutJobStatus_(FanoutService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelFanoutJob_(FanoutService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserTier_(FanoutService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessFollowerBatch_(FanoutService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFanoutMetrics_(FanoutService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(FanoutService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FanoutService::Stub::InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::sonet::fanout::InitiateFanoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitiateFanout_, context, request, response);
}

void FanoutService::Stub::async::InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitiateFanout_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitiateFanout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>* FanoutService::Stub::PrepareAsyncInitiateFanoutRaw(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::InitiateFanoutResponse, ::sonet::fanout::InitiateFanoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitiateFanout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>* FanoutService::Stub::AsyncInitiateFanoutRaw(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitiateFanoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FanoutService::Stub::GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::sonet::fanout::GetFanoutJobStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFanoutJobStatus_, context, request, response);
}

void FanoutService::Stub::async::GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFanoutJobStatus_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFanoutJobStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>* FanoutService::Stub::PrepareAsyncGetFanoutJobStatusRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::GetFanoutJobStatusResponse, ::sonet::fanout::GetFanoutJobStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFanoutJobStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>* FanoutService::Stub::AsyncGetFanoutJobStatusRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFanoutJobStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FanoutService::Stub::CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::sonet::fanout::CancelFanoutJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelFanoutJob_, context, request, response);
}

void FanoutService::Stub::async::CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelFanoutJob_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelFanoutJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>* FanoutService::Stub::PrepareAsyncCancelFanoutJobRaw(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::CancelFanoutJobResponse, ::sonet::fanout::CancelFanoutJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelFanoutJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>* FanoutService::Stub::AsyncCancelFanoutJobRaw(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelFanoutJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FanoutService::Stub::GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::sonet::fanout::GetUserTierResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserTier_, context, request, response);
}

void FanoutService::Stub::async::GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserTier_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserTier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>* FanoutService::Stub::PrepareAsyncGetUserTierRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::GetUserTierResponse, ::sonet::fanout::GetUserTierRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserTier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>* FanoutService::Stub::AsyncGetUserTierRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserTierRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FanoutService::Stub::ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::sonet::fanout::ProcessFollowerBatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessFollowerBatch_, context, request, response);
}

void FanoutService::Stub::async::ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessFollowerBatch_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessFollowerBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>* FanoutService::Stub::PrepareAsyncProcessFollowerBatchRaw(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::ProcessFollowerBatchResponse, ::sonet::fanout::ProcessFollowerBatchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessFollowerBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>* FanoutService::Stub::AsyncProcessFollowerBatchRaw(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessFollowerBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FanoutService::Stub::GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::sonet::fanout::GetFanoutMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFanoutMetrics_, context, request, response);
}

void FanoutService::Stub::async::GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFanoutMetrics_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFanoutMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>* FanoutService::Stub::PrepareAsyncGetFanoutMetricsRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::GetFanoutMetricsResponse, ::sonet::fanout::GetFanoutMetricsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFanoutMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>* FanoutService::Stub::AsyncGetFanoutMetricsRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFanoutMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FanoutService::Stub::HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::sonet::fanout::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void FanoutService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void FanoutService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>* FanoutService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::fanout::HealthCheckResponse, ::sonet::fanout::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>* FanoutService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

FanoutService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::InitiateFanoutRequest* req,
             ::sonet::fanout::InitiateFanoutResponse* resp) {
               return service->InitiateFanout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::GetFanoutJobStatusRequest* req,
             ::sonet::fanout::GetFanoutJobStatusResponse* resp) {
               return service->GetFanoutJobStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::CancelFanoutJobRequest* req,
             ::sonet::fanout::CancelFanoutJobResponse* resp) {
               return service->CancelFanoutJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::GetUserTierRequest* req,
             ::sonet::fanout::GetUserTierResponse* resp) {
               return service->GetUserTier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::ProcessFollowerBatchRequest* req,
             ::sonet::fanout::ProcessFollowerBatchResponse* resp) {
               return service->ProcessFollowerBatch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::GetFanoutMetricsRequest* req,
             ::sonet::fanout::GetFanoutMetricsResponse* resp) {
               return service->GetFanoutMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FanoutService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FanoutService::Service, ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FanoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::fanout::HealthCheckRequest* req,
             ::sonet::fanout::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

FanoutService::Service::~Service() {
}

::grpc::Status FanoutService::Service::InitiateFanout(::grpc::ServerContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FanoutService::Service::GetFanoutJobStatus(::grpc::ServerContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FanoutService::Service::CancelFanoutJob(::grpc::ServerContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FanoutService::Service::GetUserTier(::grpc::ServerContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FanoutService::Service::ProcessFollowerBatch(::grpc::ServerContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FanoutService::Service::GetFanoutMetrics(::grpc::ServerContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FanoutService::Service::HealthCheck(::grpc::ServerContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace fanout

