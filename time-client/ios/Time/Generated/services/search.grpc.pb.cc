// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/search.proto

#include "services/search.pb.h"
#include "services/search.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace search {

static const char* SearchService_method_names[] = {
  "/sonet.search.SearchService/SearchUsers",
  "/sonet.search.SearchService/SearchNotes",
};

std::unique_ptr< SearchService::Stub> SearchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SearchService::Stub> stub(new SearchService::Stub(channel, options));
  return stub;
}

SearchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SearchUsers_(SearchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchNotes_(SearchService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SearchService::Stub::SearchUsers(::grpc::ClientContext* context, const ::sonet::search::SearchUserRequest& request, ::sonet::search::SearchUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::search::SearchUserRequest, ::sonet::search::SearchUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchUsers_, context, request, response);
}

void SearchService::Stub::async::SearchUsers(::grpc::ClientContext* context, const ::sonet::search::SearchUserRequest* request, ::sonet::search::SearchUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::search::SearchUserRequest, ::sonet::search::SearchUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchUsers_, context, request, response, std::move(f));
}

void SearchService::Stub::async::SearchUsers(::grpc::ClientContext* context, const ::sonet::search::SearchUserRequest* request, ::sonet::search::SearchUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::search::SearchUserResponse>* SearchService::Stub::PrepareAsyncSearchUsersRaw(::grpc::ClientContext* context, const ::sonet::search::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::search::SearchUserResponse, ::sonet::search::SearchUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::search::SearchUserResponse>* SearchService::Stub::AsyncSearchUsersRaw(::grpc::ClientContext* context, const ::sonet::search::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SearchService::Stub::SearchNotes(::grpc::ClientContext* context, const ::sonet::search::SearchNoteRequest& request, ::sonet::search::SearchNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::search::SearchNoteRequest, ::sonet::search::SearchNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchNotes_, context, request, response);
}

void SearchService::Stub::async::SearchNotes(::grpc::ClientContext* context, const ::sonet::search::SearchNoteRequest* request, ::sonet::search::SearchNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::search::SearchNoteRequest, ::sonet::search::SearchNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchNotes_, context, request, response, std::move(f));
}

void SearchService::Stub::async::SearchNotes(::grpc::ClientContext* context, const ::sonet::search::SearchNoteRequest* request, ::sonet::search::SearchNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchNotes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::search::SearchNoteResponse>* SearchService::Stub::PrepareAsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::search::SearchNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::search::SearchNoteResponse, ::sonet::search::SearchNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchNotes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::search::SearchNoteResponse>* SearchService::Stub::AsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::search::SearchNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchNotesRaw(context, request, cq);
  result->StartCall();
  return result;
}

SearchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SearchService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SearchService::Service, ::sonet::search::SearchUserRequest, ::sonet::search::SearchUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SearchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::search::SearchUserRequest* req,
             ::sonet::search::SearchUserResponse* resp) {
               return service->SearchUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SearchService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SearchService::Service, ::sonet::search::SearchNoteRequest, ::sonet::search::SearchNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SearchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::search::SearchNoteRequest* req,
             ::sonet::search::SearchNoteResponse* resp) {
               return service->SearchNotes(ctx, req, resp);
             }, this)));
}

SearchService::Service::~Service() {
}

::grpc::Status SearchService::Service::SearchUsers(::grpc::ServerContext* context, const ::sonet::search::SearchUserRequest* request, ::sonet::search::SearchUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SearchService::Service::SearchNotes(::grpc::ServerContext* context, const ::sonet::search::SearchNoteRequest* request, ::sonet::search::SearchNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace search

