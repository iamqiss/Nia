// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/note.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fnote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fnote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/timestamp.pb.h"
#include "common/pagination.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fnote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fnote_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fnote_2eproto;
namespace sonet {
namespace note {
class CreateNoteRequest;
struct CreateNoteRequestDefaultTypeInternal;
extern CreateNoteRequestDefaultTypeInternal _CreateNoteRequest_default_instance_;
class CreateNoteResponse;
struct CreateNoteResponseDefaultTypeInternal;
extern CreateNoteResponseDefaultTypeInternal _CreateNoteResponse_default_instance_;
class DeleteNoteRequest;
struct DeleteNoteRequestDefaultTypeInternal;
extern DeleteNoteRequestDefaultTypeInternal _DeleteNoteRequest_default_instance_;
class DeleteNoteResponse;
struct DeleteNoteResponseDefaultTypeInternal;
extern DeleteNoteResponseDefaultTypeInternal _DeleteNoteResponse_default_instance_;
class GeoLocation;
struct GeoLocationDefaultTypeInternal;
extern GeoLocationDefaultTypeInternal _GeoLocation_default_instance_;
class GetNoteRequest;
struct GetNoteRequestDefaultTypeInternal;
extern GetNoteRequestDefaultTypeInternal _GetNoteRequest_default_instance_;
class GetNoteResponse;
struct GetNoteResponseDefaultTypeInternal;
extern GetNoteResponseDefaultTypeInternal _GetNoteResponse_default_instance_;
class GetNoteThreadRequest;
struct GetNoteThreadRequestDefaultTypeInternal;
extern GetNoteThreadRequestDefaultTypeInternal _GetNoteThreadRequest_default_instance_;
class GetNoteThreadResponse;
struct GetNoteThreadResponseDefaultTypeInternal;
extern GetNoteThreadResponseDefaultTypeInternal _GetNoteThreadResponse_default_instance_;
class GetUserNotesRequest;
struct GetUserNotesRequestDefaultTypeInternal;
extern GetUserNotesRequestDefaultTypeInternal _GetUserNotesRequest_default_instance_;
class GetUserNotesResponse;
struct GetUserNotesResponseDefaultTypeInternal;
extern GetUserNotesResponseDefaultTypeInternal _GetUserNotesResponse_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class HealthCheckResponse_DetailsEntry_DoNotUse;
struct HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal;
extern HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal _HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_;
class LikeNoteRequest;
struct LikeNoteRequestDefaultTypeInternal;
extern LikeNoteRequestDefaultTypeInternal _LikeNoteRequest_default_instance_;
class LikeNoteResponse;
struct LikeNoteResponseDefaultTypeInternal;
extern LikeNoteResponseDefaultTypeInternal _LikeNoteResponse_default_instance_;
class Note;
struct NoteDefaultTypeInternal;
extern NoteDefaultTypeInternal _Note_default_instance_;
class NoteEntities;
struct NoteEntitiesDefaultTypeInternal;
extern NoteEntitiesDefaultTypeInternal _NoteEntities_default_instance_;
class NoteHashtag;
struct NoteHashtagDefaultTypeInternal;
extern NoteHashtagDefaultTypeInternal _NoteHashtag_default_instance_;
class NoteLink;
struct NoteLinkDefaultTypeInternal;
extern NoteLinkDefaultTypeInternal _NoteLink_default_instance_;
class NoteMention;
struct NoteMentionDefaultTypeInternal;
extern NoteMentionDefaultTypeInternal _NoteMention_default_instance_;
class NoteMetrics;
struct NoteMetricsDefaultTypeInternal;
extern NoteMetricsDefaultTypeInternal _NoteMetrics_default_instance_;
class RenoteNoteRequest;
struct RenoteNoteRequestDefaultTypeInternal;
extern RenoteNoteRequestDefaultTypeInternal _RenoteNoteRequest_default_instance_;
class RenoteNoteResponse;
struct RenoteNoteResponseDefaultTypeInternal;
extern RenoteNoteResponseDefaultTypeInternal _RenoteNoteResponse_default_instance_;
class SearchNotesRequest;
struct SearchNotesRequestDefaultTypeInternal;
extern SearchNotesRequestDefaultTypeInternal _SearchNotesRequest_default_instance_;
class SearchNotesResponse;
struct SearchNotesResponseDefaultTypeInternal;
extern SearchNotesResponseDefaultTypeInternal _SearchNotesResponse_default_instance_;
class UserNoteInteraction;
struct UserNoteInteractionDefaultTypeInternal;
extern UserNoteInteractionDefaultTypeInternal _UserNoteInteraction_default_instance_;
}  // namespace note
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::note::CreateNoteRequest* Arena::CreateMaybeMessage<::sonet::note::CreateNoteRequest>(Arena*);
template<> ::sonet::note::CreateNoteResponse* Arena::CreateMaybeMessage<::sonet::note::CreateNoteResponse>(Arena*);
template<> ::sonet::note::DeleteNoteRequest* Arena::CreateMaybeMessage<::sonet::note::DeleteNoteRequest>(Arena*);
template<> ::sonet::note::DeleteNoteResponse* Arena::CreateMaybeMessage<::sonet::note::DeleteNoteResponse>(Arena*);
template<> ::sonet::note::GeoLocation* Arena::CreateMaybeMessage<::sonet::note::GeoLocation>(Arena*);
template<> ::sonet::note::GetNoteRequest* Arena::CreateMaybeMessage<::sonet::note::GetNoteRequest>(Arena*);
template<> ::sonet::note::GetNoteResponse* Arena::CreateMaybeMessage<::sonet::note::GetNoteResponse>(Arena*);
template<> ::sonet::note::GetNoteThreadRequest* Arena::CreateMaybeMessage<::sonet::note::GetNoteThreadRequest>(Arena*);
template<> ::sonet::note::GetNoteThreadResponse* Arena::CreateMaybeMessage<::sonet::note::GetNoteThreadResponse>(Arena*);
template<> ::sonet::note::GetUserNotesRequest* Arena::CreateMaybeMessage<::sonet::note::GetUserNotesRequest>(Arena*);
template<> ::sonet::note::GetUserNotesResponse* Arena::CreateMaybeMessage<::sonet::note::GetUserNotesResponse>(Arena*);
template<> ::sonet::note::HealthCheckRequest* Arena::CreateMaybeMessage<::sonet::note::HealthCheckRequest>(Arena*);
template<> ::sonet::note::HealthCheckResponse* Arena::CreateMaybeMessage<::sonet::note::HealthCheckResponse>(Arena*);
template<> ::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse* Arena::CreateMaybeMessage<::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse>(Arena*);
template<> ::sonet::note::LikeNoteRequest* Arena::CreateMaybeMessage<::sonet::note::LikeNoteRequest>(Arena*);
template<> ::sonet::note::LikeNoteResponse* Arena::CreateMaybeMessage<::sonet::note::LikeNoteResponse>(Arena*);
template<> ::sonet::note::Note* Arena::CreateMaybeMessage<::sonet::note::Note>(Arena*);
template<> ::sonet::note::NoteEntities* Arena::CreateMaybeMessage<::sonet::note::NoteEntities>(Arena*);
template<> ::sonet::note::NoteHashtag* Arena::CreateMaybeMessage<::sonet::note::NoteHashtag>(Arena*);
template<> ::sonet::note::NoteLink* Arena::CreateMaybeMessage<::sonet::note::NoteLink>(Arena*);
template<> ::sonet::note::NoteMention* Arena::CreateMaybeMessage<::sonet::note::NoteMention>(Arena*);
template<> ::sonet::note::NoteMetrics* Arena::CreateMaybeMessage<::sonet::note::NoteMetrics>(Arena*);
template<> ::sonet::note::RenoteNoteRequest* Arena::CreateMaybeMessage<::sonet::note::RenoteNoteRequest>(Arena*);
template<> ::sonet::note::RenoteNoteResponse* Arena::CreateMaybeMessage<::sonet::note::RenoteNoteResponse>(Arena*);
template<> ::sonet::note::SearchNotesRequest* Arena::CreateMaybeMessage<::sonet::note::SearchNotesRequest>(Arena*);
template<> ::sonet::note::SearchNotesResponse* Arena::CreateMaybeMessage<::sonet::note::SearchNotesResponse>(Arena*);
template<> ::sonet::note::UserNoteInteraction* Arena::CreateMaybeMessage<::sonet::note::UserNoteInteraction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace note {

enum NoteVisibility : int {
  NOTE_VISIBILITY_UNKNOWN = 0,
  NOTE_VISIBILITY_PUBLIC = 1,
  NOTE_VISIBILITY_FOLLOWERS = 2,
  NOTE_VISIBILITY_FRIENDS = 3,
  NOTE_VISIBILITY_PRIVATE = 4,
  NOTE_VISIBILITY_MENTIONED = 5,
  NoteVisibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NoteVisibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NoteVisibility_IsValid(int value);
constexpr NoteVisibility NoteVisibility_MIN = NOTE_VISIBILITY_UNKNOWN;
constexpr NoteVisibility NoteVisibility_MAX = NOTE_VISIBILITY_MENTIONED;
constexpr int NoteVisibility_ARRAYSIZE = NoteVisibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NoteVisibility_descriptor();
template<typename T>
inline const std::string& NoteVisibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NoteVisibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NoteVisibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NoteVisibility_descriptor(), enum_t_value);
}
inline bool NoteVisibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NoteVisibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NoteVisibility>(
    NoteVisibility_descriptor(), name, value);
}
enum ContentWarning : int {
  CONTENT_WARNING_NONE = 0,
  CONTENT_WARNING_SENSITIVE = 1,
  CONTENT_WARNING_ADULT = 2,
  CONTENT_WARNING_VIOLENCE = 3,
  CONTENT_WARNING_POLITICAL = 4,
  ContentWarning_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ContentWarning_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ContentWarning_IsValid(int value);
constexpr ContentWarning ContentWarning_MIN = CONTENT_WARNING_NONE;
constexpr ContentWarning ContentWarning_MAX = CONTENT_WARNING_POLITICAL;
constexpr int ContentWarning_ARRAYSIZE = ContentWarning_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentWarning_descriptor();
template<typename T>
inline const std::string& ContentWarning_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentWarning>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentWarning_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContentWarning_descriptor(), enum_t_value);
}
inline bool ContentWarning_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentWarning* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContentWarning>(
    ContentWarning_descriptor(), name, value);
}
// ===================================================================

class NoteMention final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.NoteMention) */ {
 public:
  inline NoteMention() : NoteMention(nullptr) {}
  ~NoteMention() override;
  explicit PROTOBUF_CONSTEXPR NoteMention(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteMention(const NoteMention& from);
  NoteMention(NoteMention&& from) noexcept
    : NoteMention() {
    *this = ::std::move(from);
  }

  inline NoteMention& operator=(const NoteMention& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteMention& operator=(NoteMention&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteMention& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteMention* internal_default_instance() {
    return reinterpret_cast<const NoteMention*>(
               &_NoteMention_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NoteMention& a, NoteMention& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteMention* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteMention* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteMention* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteMention>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteMention& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteMention& from) {
    NoteMention::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteMention* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.NoteMention";
  }
  protected:
  explicit NoteMention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kStartOffsetFieldNumber = 3,
    kEndOffsetFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 start_offset = 3;
  void clear_start_offset();
  int32_t start_offset() const;
  void set_start_offset(int32_t value);
  private:
  int32_t _internal_start_offset() const;
  void _internal_set_start_offset(int32_t value);
  public:

  // int32 end_offset = 4;
  void clear_end_offset();
  int32_t end_offset() const;
  void set_end_offset(int32_t value);
  private:
  int32_t _internal_end_offset() const;
  void _internal_set_end_offset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.NoteMention)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int32_t start_offset_;
    int32_t end_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class NoteHashtag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.NoteHashtag) */ {
 public:
  inline NoteHashtag() : NoteHashtag(nullptr) {}
  ~NoteHashtag() override;
  explicit PROTOBUF_CONSTEXPR NoteHashtag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteHashtag(const NoteHashtag& from);
  NoteHashtag(NoteHashtag&& from) noexcept
    : NoteHashtag() {
    *this = ::std::move(from);
  }

  inline NoteHashtag& operator=(const NoteHashtag& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteHashtag& operator=(NoteHashtag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteHashtag& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteHashtag* internal_default_instance() {
    return reinterpret_cast<const NoteHashtag*>(
               &_NoteHashtag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NoteHashtag& a, NoteHashtag& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteHashtag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteHashtag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteHashtag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteHashtag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteHashtag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteHashtag& from) {
    NoteHashtag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteHashtag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.NoteHashtag";
  }
  protected:
  explicit NoteHashtag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kStartOffsetFieldNumber = 2,
    kEndOffsetFieldNumber = 3,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // int32 start_offset = 2;
  void clear_start_offset();
  int32_t start_offset() const;
  void set_start_offset(int32_t value);
  private:
  int32_t _internal_start_offset() const;
  void _internal_set_start_offset(int32_t value);
  public:

  // int32 end_offset = 3;
  void clear_end_offset();
  int32_t end_offset() const;
  void set_end_offset(int32_t value);
  private:
  int32_t _internal_end_offset() const;
  void _internal_set_end_offset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.NoteHashtag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    int32_t start_offset_;
    int32_t end_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class NoteLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.NoteLink) */ {
 public:
  inline NoteLink() : NoteLink(nullptr) {}
  ~NoteLink() override;
  explicit PROTOBUF_CONSTEXPR NoteLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteLink(const NoteLink& from);
  NoteLink(NoteLink&& from) noexcept
    : NoteLink() {
    *this = ::std::move(from);
  }

  inline NoteLink& operator=(const NoteLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteLink& operator=(NoteLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteLink* internal_default_instance() {
    return reinterpret_cast<const NoteLink*>(
               &_NoteLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NoteLink& a, NoteLink& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteLink& from) {
    NoteLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.NoteLink";
  }
  protected:
  explicit NoteLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kImageUrlFieldNumber = 4,
    kStartOffsetFieldNumber = 5,
    kEndOffsetFieldNumber = 6,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string image_url = 4;
  void clear_image_url();
  const std::string& image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // int32 start_offset = 5;
  void clear_start_offset();
  int32_t start_offset() const;
  void set_start_offset(int32_t value);
  private:
  int32_t _internal_start_offset() const;
  void _internal_set_start_offset(int32_t value);
  public:

  // int32 end_offset = 6;
  void clear_end_offset();
  int32_t end_offset() const;
  void set_end_offset(int32_t value);
  private:
  int32_t _internal_end_offset() const;
  void _internal_set_end_offset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.NoteLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
    int32_t start_offset_;
    int32_t end_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class NoteEntities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.NoteEntities) */ {
 public:
  inline NoteEntities() : NoteEntities(nullptr) {}
  ~NoteEntities() override;
  explicit PROTOBUF_CONSTEXPR NoteEntities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteEntities(const NoteEntities& from);
  NoteEntities(NoteEntities&& from) noexcept
    : NoteEntities() {
    *this = ::std::move(from);
  }

  inline NoteEntities& operator=(const NoteEntities& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteEntities& operator=(NoteEntities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteEntities& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteEntities* internal_default_instance() {
    return reinterpret_cast<const NoteEntities*>(
               &_NoteEntities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NoteEntities& a, NoteEntities& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteEntities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteEntities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteEntities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteEntities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteEntities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteEntities& from) {
    NoteEntities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteEntities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.NoteEntities";
  }
  protected:
  explicit NoteEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMentionsFieldNumber = 1,
    kHashtagsFieldNumber = 2,
    kLinksFieldNumber = 3,
  };
  // repeated .sonet.note.NoteMention mentions = 1;
  int mentions_size() const;
  private:
  int _internal_mentions_size() const;
  public:
  void clear_mentions();
  ::sonet::note::NoteMention* mutable_mentions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteMention >*
      mutable_mentions();
  private:
  const ::sonet::note::NoteMention& _internal_mentions(int index) const;
  ::sonet::note::NoteMention* _internal_add_mentions();
  public:
  const ::sonet::note::NoteMention& mentions(int index) const;
  ::sonet::note::NoteMention* add_mentions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteMention >&
      mentions() const;

  // repeated .sonet.note.NoteHashtag hashtags = 2;
  int hashtags_size() const;
  private:
  int _internal_hashtags_size() const;
  public:
  void clear_hashtags();
  ::sonet::note::NoteHashtag* mutable_hashtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteHashtag >*
      mutable_hashtags();
  private:
  const ::sonet::note::NoteHashtag& _internal_hashtags(int index) const;
  ::sonet::note::NoteHashtag* _internal_add_hashtags();
  public:
  const ::sonet::note::NoteHashtag& hashtags(int index) const;
  ::sonet::note::NoteHashtag* add_hashtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteHashtag >&
      hashtags() const;

  // repeated .sonet.note.NoteLink links = 3;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::sonet::note::NoteLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteLink >*
      mutable_links();
  private:
  const ::sonet::note::NoteLink& _internal_links(int index) const;
  ::sonet::note::NoteLink* _internal_add_links();
  public:
  const ::sonet::note::NoteLink& links(int index) const;
  ::sonet::note::NoteLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteLink >&
      links() const;

  // @@protoc_insertion_point(class_scope:sonet.note.NoteEntities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteMention > mentions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteHashtag > hashtags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteLink > links_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GeoLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GeoLocation) */ {
 public:
  inline GeoLocation() : GeoLocation(nullptr) {}
  ~GeoLocation() override;
  explicit PROTOBUF_CONSTEXPR GeoLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoLocation(const GeoLocation& from);
  GeoLocation(GeoLocation&& from) noexcept
    : GeoLocation() {
    *this = ::std::move(from);
  }

  inline GeoLocation& operator=(const GeoLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoLocation& operator=(GeoLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeoLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoLocation* internal_default_instance() {
    return reinterpret_cast<const GeoLocation*>(
               &_GeoLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeoLocation& a, GeoLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeoLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeoLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeoLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeoLocation& from) {
    GeoLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GeoLocation";
  }
  protected:
  explicit GeoLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceNameFieldNumber = 3,
    kCountryCodeFieldNumber = 4,
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // string place_name = 3;
  void clear_place_name();
  const std::string& place_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_place_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_place_name();
  PROTOBUF_NODISCARD std::string* release_place_name();
  void set_allocated_place_name(std::string* place_name);
  private:
  const std::string& _internal_place_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_place_name(const std::string& value);
  std::string* _internal_mutable_place_name();
  public:

  // string country_code = 4;
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.GeoLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr place_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class NoteMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.NoteMetrics) */ {
 public:
  inline NoteMetrics() : NoteMetrics(nullptr) {}
  ~NoteMetrics() override;
  explicit PROTOBUF_CONSTEXPR NoteMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteMetrics(const NoteMetrics& from);
  NoteMetrics(NoteMetrics&& from) noexcept
    : NoteMetrics() {
    *this = ::std::move(from);
  }

  inline NoteMetrics& operator=(const NoteMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteMetrics& operator=(NoteMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteMetrics* internal_default_instance() {
    return reinterpret_cast<const NoteMetrics*>(
               &_NoteMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NoteMetrics& a, NoteMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteMetrics& from) {
    NoteMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.NoteMetrics";
  }
  protected:
  explicit NoteMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLikeCountFieldNumber = 1,
    kRenoteCountFieldNumber = 2,
    kReplyCountFieldNumber = 3,
    kQuoteCountFieldNumber = 4,
    kBookmarkCountFieldNumber = 5,
    kViewCountFieldNumber = 6,
    kEngagementRateFieldNumber = 7,
  };
  // int64 like_count = 1;
  void clear_like_count();
  int64_t like_count() const;
  void set_like_count(int64_t value);
  private:
  int64_t _internal_like_count() const;
  void _internal_set_like_count(int64_t value);
  public:

  // int64 renote_count = 2;
  void clear_renote_count();
  int64_t renote_count() const;
  void set_renote_count(int64_t value);
  private:
  int64_t _internal_renote_count() const;
  void _internal_set_renote_count(int64_t value);
  public:

  // int64 reply_count = 3;
  void clear_reply_count();
  int64_t reply_count() const;
  void set_reply_count(int64_t value);
  private:
  int64_t _internal_reply_count() const;
  void _internal_set_reply_count(int64_t value);
  public:

  // int64 quote_count = 4;
  void clear_quote_count();
  int64_t quote_count() const;
  void set_quote_count(int64_t value);
  private:
  int64_t _internal_quote_count() const;
  void _internal_set_quote_count(int64_t value);
  public:

  // int64 bookmark_count = 5;
  void clear_bookmark_count();
  int64_t bookmark_count() const;
  void set_bookmark_count(int64_t value);
  private:
  int64_t _internal_bookmark_count() const;
  void _internal_set_bookmark_count(int64_t value);
  public:

  // int64 view_count = 6;
  void clear_view_count();
  int64_t view_count() const;
  void set_view_count(int64_t value);
  private:
  int64_t _internal_view_count() const;
  void _internal_set_view_count(int64_t value);
  public:

  // double engagement_rate = 7;
  void clear_engagement_rate();
  double engagement_rate() const;
  void set_engagement_rate(double value);
  private:
  double _internal_engagement_rate() const;
  void _internal_set_engagement_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.NoteMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t like_count_;
    int64_t renote_count_;
    int64_t reply_count_;
    int64_t quote_count_;
    int64_t bookmark_count_;
    int64_t view_count_;
    double engagement_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class Note final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.Note) */ {
 public:
  inline Note() : Note(nullptr) {}
  ~Note() override;
  explicit PROTOBUF_CONSTEXPR Note(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Note(const Note& from);
  Note(Note&& from) noexcept
    : Note() {
    *this = ::std::move(from);
  }

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }
  inline Note& operator=(Note&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Note& default_instance() {
    return *internal_default_instance();
  }
  static inline const Note* internal_default_instance() {
    return reinterpret_cast<const Note*>(
               &_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Note& a, Note& b) {
    a.Swap(&b);
  }
  inline void Swap(Note* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Note* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Note* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Note>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Note& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Note& from) {
    Note::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Note* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.Note";
  }
  protected:
  explicit Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdsFieldNumber = 6,
    kFlagsFieldNumber = 20,
    kIdFieldNumber = 1,
    kAuthorIdFieldNumber = 2,
    kTextFieldNumber = 3,
    kReplyToNoteIdFieldNumber = 9,
    kReplyToUserIdFieldNumber = 10,
    kThreadRootIdFieldNumber = 11,
    kRenotedNoteIdFieldNumber = 12,
    kRenotedUserIdFieldNumber = 13,
    kLanguageCodeFieldNumber = 19,
    kClientNameFieldNumber = 22,
    kEntitiesFieldNumber = 7,
    kLocationFieldNumber = 8,
    kCreatedAtFieldNumber = 15,
    kUpdatedAtFieldNumber = 16,
    kDeletedAtFieldNumber = 17,
    kMetricsFieldNumber = 18,
    kVisibilityFieldNumber = 4,
    kContentWarningFieldNumber = 5,
    kIsQuoteRenoteFieldNumber = 14,
    kIsVerifiedContentFieldNumber = 21,
  };
  // repeated string media_ids = 6;
  int media_ids_size() const;
  private:
  int _internal_media_ids_size() const;
  public:
  void clear_media_ids();
  const std::string& media_ids(int index) const;
  std::string* mutable_media_ids(int index);
  void set_media_ids(int index, const std::string& value);
  void set_media_ids(int index, std::string&& value);
  void set_media_ids(int index, const char* value);
  void set_media_ids(int index, const char* value, size_t size);
  std::string* add_media_ids();
  void add_media_ids(const std::string& value);
  void add_media_ids(std::string&& value);
  void add_media_ids(const char* value);
  void add_media_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& media_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_media_ids();
  private:
  const std::string& _internal_media_ids(int index) const;
  std::string* _internal_add_media_ids();
  public:

  // repeated string flags = 20;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  const std::string& flags(int index) const;
  std::string* mutable_flags(int index);
  void set_flags(int index, const std::string& value);
  void set_flags(int index, std::string&& value);
  void set_flags(int index, const char* value);
  void set_flags(int index, const char* value, size_t size);
  std::string* add_flags();
  void add_flags(const std::string& value);
  void add_flags(std::string&& value);
  void add_flags(const char* value);
  void add_flags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_flags();
  private:
  const std::string& _internal_flags(int index) const;
  std::string* _internal_add_flags();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string author_id = 2;
  void clear_author_id();
  const std::string& author_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author_id();
  PROTOBUF_NODISCARD std::string* release_author_id();
  void set_allocated_author_id(std::string* author_id);
  private:
  const std::string& _internal_author_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author_id(const std::string& value);
  std::string* _internal_mutable_author_id();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string reply_to_note_id = 9;
  void clear_reply_to_note_id();
  const std::string& reply_to_note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_note_id();
  PROTOBUF_NODISCARD std::string* release_reply_to_note_id();
  void set_allocated_reply_to_note_id(std::string* reply_to_note_id);
  private:
  const std::string& _internal_reply_to_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_note_id(const std::string& value);
  std::string* _internal_mutable_reply_to_note_id();
  public:

  // string reply_to_user_id = 10;
  void clear_reply_to_user_id();
  const std::string& reply_to_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_user_id();
  PROTOBUF_NODISCARD std::string* release_reply_to_user_id();
  void set_allocated_reply_to_user_id(std::string* reply_to_user_id);
  private:
  const std::string& _internal_reply_to_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_user_id(const std::string& value);
  std::string* _internal_mutable_reply_to_user_id();
  public:

  // string thread_root_id = 11;
  void clear_thread_root_id();
  const std::string& thread_root_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thread_root_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thread_root_id();
  PROTOBUF_NODISCARD std::string* release_thread_root_id();
  void set_allocated_thread_root_id(std::string* thread_root_id);
  private:
  const std::string& _internal_thread_root_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thread_root_id(const std::string& value);
  std::string* _internal_mutable_thread_root_id();
  public:

  // string renoted_note_id = 12;
  void clear_renoted_note_id();
  const std::string& renoted_note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_renoted_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_renoted_note_id();
  PROTOBUF_NODISCARD std::string* release_renoted_note_id();
  void set_allocated_renoted_note_id(std::string* renoted_note_id);
  private:
  const std::string& _internal_renoted_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_renoted_note_id(const std::string& value);
  std::string* _internal_mutable_renoted_note_id();
  public:

  // string renoted_user_id = 13;
  void clear_renoted_user_id();
  const std::string& renoted_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_renoted_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_renoted_user_id();
  PROTOBUF_NODISCARD std::string* release_renoted_user_id();
  void set_allocated_renoted_user_id(std::string* renoted_user_id);
  private:
  const std::string& _internal_renoted_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_renoted_user_id(const std::string& value);
  std::string* _internal_mutable_renoted_user_id();
  public:

  // string language_code = 19;
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string client_name = 22;
  void clear_client_name();
  const std::string& client_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_name();
  PROTOBUF_NODISCARD std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // .sonet.note.NoteEntities entities = 7;
  bool has_entities() const;
  private:
  bool _internal_has_entities() const;
  public:
  void clear_entities();
  const ::sonet::note::NoteEntities& entities() const;
  PROTOBUF_NODISCARD ::sonet::note::NoteEntities* release_entities();
  ::sonet::note::NoteEntities* mutable_entities();
  void set_allocated_entities(::sonet::note::NoteEntities* entities);
  private:
  const ::sonet::note::NoteEntities& _internal_entities() const;
  ::sonet::note::NoteEntities* _internal_mutable_entities();
  public:
  void unsafe_arena_set_allocated_entities(
      ::sonet::note::NoteEntities* entities);
  ::sonet::note::NoteEntities* unsafe_arena_release_entities();

  // .sonet.note.GeoLocation location = 8;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::sonet::note::GeoLocation& location() const;
  PROTOBUF_NODISCARD ::sonet::note::GeoLocation* release_location();
  ::sonet::note::GeoLocation* mutable_location();
  void set_allocated_location(::sonet::note::GeoLocation* location);
  private:
  const ::sonet::note::GeoLocation& _internal_location() const;
  ::sonet::note::GeoLocation* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::sonet::note::GeoLocation* location);
  ::sonet::note::GeoLocation* unsafe_arena_release_location();

  // .sonet.common.Timestamp created_at = 15;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::sonet::common::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_created_at();
  ::sonet::common::Timestamp* mutable_created_at();
  void set_allocated_created_at(::sonet::common::Timestamp* created_at);
  private:
  const ::sonet::common::Timestamp& _internal_created_at() const;
  ::sonet::common::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::sonet::common::Timestamp* created_at);
  ::sonet::common::Timestamp* unsafe_arena_release_created_at();

  // .sonet.common.Timestamp updated_at = 16;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::sonet::common::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_updated_at();
  ::sonet::common::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::sonet::common::Timestamp* updated_at);
  private:
  const ::sonet::common::Timestamp& _internal_updated_at() const;
  ::sonet::common::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::sonet::common::Timestamp* updated_at);
  ::sonet::common::Timestamp* unsafe_arena_release_updated_at();

  // .sonet.common.Timestamp deleted_at = 17;
  bool has_deleted_at() const;
  private:
  bool _internal_has_deleted_at() const;
  public:
  void clear_deleted_at();
  const ::sonet::common::Timestamp& deleted_at() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_deleted_at();
  ::sonet::common::Timestamp* mutable_deleted_at();
  void set_allocated_deleted_at(::sonet::common::Timestamp* deleted_at);
  private:
  const ::sonet::common::Timestamp& _internal_deleted_at() const;
  ::sonet::common::Timestamp* _internal_mutable_deleted_at();
  public:
  void unsafe_arena_set_allocated_deleted_at(
      ::sonet::common::Timestamp* deleted_at);
  ::sonet::common::Timestamp* unsafe_arena_release_deleted_at();

  // .sonet.note.NoteMetrics metrics = 18;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::sonet::note::NoteMetrics& metrics() const;
  PROTOBUF_NODISCARD ::sonet::note::NoteMetrics* release_metrics();
  ::sonet::note::NoteMetrics* mutable_metrics();
  void set_allocated_metrics(::sonet::note::NoteMetrics* metrics);
  private:
  const ::sonet::note::NoteMetrics& _internal_metrics() const;
  ::sonet::note::NoteMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::sonet::note::NoteMetrics* metrics);
  ::sonet::note::NoteMetrics* unsafe_arena_release_metrics();

  // .sonet.note.NoteVisibility visibility = 4;
  void clear_visibility();
  ::sonet::note::NoteVisibility visibility() const;
  void set_visibility(::sonet::note::NoteVisibility value);
  private:
  ::sonet::note::NoteVisibility _internal_visibility() const;
  void _internal_set_visibility(::sonet::note::NoteVisibility value);
  public:

  // .sonet.note.ContentWarning content_warning = 5;
  void clear_content_warning();
  ::sonet::note::ContentWarning content_warning() const;
  void set_content_warning(::sonet::note::ContentWarning value);
  private:
  ::sonet::note::ContentWarning _internal_content_warning() const;
  void _internal_set_content_warning(::sonet::note::ContentWarning value);
  public:

  // bool is_quote_renote = 14;
  void clear_is_quote_renote();
  bool is_quote_renote() const;
  void set_is_quote_renote(bool value);
  private:
  bool _internal_is_quote_renote() const;
  void _internal_set_is_quote_renote(bool value);
  public:

  // bool is_verified_content = 21;
  void clear_is_verified_content();
  bool is_verified_content() const;
  void set_is_verified_content(bool value);
  private:
  bool _internal_is_verified_content() const;
  void _internal_set_is_verified_content(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.Note)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> media_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> flags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thread_root_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr renoted_note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr renoted_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
    ::sonet::note::NoteEntities* entities_;
    ::sonet::note::GeoLocation* location_;
    ::sonet::common::Timestamp* created_at_;
    ::sonet::common::Timestamp* updated_at_;
    ::sonet::common::Timestamp* deleted_at_;
    ::sonet::note::NoteMetrics* metrics_;
    int visibility_;
    int content_warning_;
    bool is_quote_renote_;
    bool is_verified_content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class UserNoteInteraction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.UserNoteInteraction) */ {
 public:
  inline UserNoteInteraction() : UserNoteInteraction(nullptr) {}
  ~UserNoteInteraction() override;
  explicit PROTOBUF_CONSTEXPR UserNoteInteraction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserNoteInteraction(const UserNoteInteraction& from);
  UserNoteInteraction(UserNoteInteraction&& from) noexcept
    : UserNoteInteraction() {
    *this = ::std::move(from);
  }

  inline UserNoteInteraction& operator=(const UserNoteInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserNoteInteraction& operator=(UserNoteInteraction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserNoteInteraction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserNoteInteraction* internal_default_instance() {
    return reinterpret_cast<const UserNoteInteraction*>(
               &_UserNoteInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserNoteInteraction& a, UserNoteInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(UserNoteInteraction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserNoteInteraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserNoteInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserNoteInteraction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserNoteInteraction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserNoteInteraction& from) {
    UserNoteInteraction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserNoteInteraction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.UserNoteInteraction";
  }
  protected:
  explicit UserNoteInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNoteIdFieldNumber = 2,
    kLastViewedAtFieldNumber = 7,
    kInteractedAtFieldNumber = 8,
    kHasLikedFieldNumber = 3,
    kHasRenotedFieldNumber = 4,
    kHasBookmarkedFieldNumber = 5,
    kHasReportedFieldNumber = 6,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string note_id = 2;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // .sonet.common.Timestamp last_viewed_at = 7;
  bool has_last_viewed_at() const;
  private:
  bool _internal_has_last_viewed_at() const;
  public:
  void clear_last_viewed_at();
  const ::sonet::common::Timestamp& last_viewed_at() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_last_viewed_at();
  ::sonet::common::Timestamp* mutable_last_viewed_at();
  void set_allocated_last_viewed_at(::sonet::common::Timestamp* last_viewed_at);
  private:
  const ::sonet::common::Timestamp& _internal_last_viewed_at() const;
  ::sonet::common::Timestamp* _internal_mutable_last_viewed_at();
  public:
  void unsafe_arena_set_allocated_last_viewed_at(
      ::sonet::common::Timestamp* last_viewed_at);
  ::sonet::common::Timestamp* unsafe_arena_release_last_viewed_at();

  // .sonet.common.Timestamp interacted_at = 8;
  bool has_interacted_at() const;
  private:
  bool _internal_has_interacted_at() const;
  public:
  void clear_interacted_at();
  const ::sonet::common::Timestamp& interacted_at() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_interacted_at();
  ::sonet::common::Timestamp* mutable_interacted_at();
  void set_allocated_interacted_at(::sonet::common::Timestamp* interacted_at);
  private:
  const ::sonet::common::Timestamp& _internal_interacted_at() const;
  ::sonet::common::Timestamp* _internal_mutable_interacted_at();
  public:
  void unsafe_arena_set_allocated_interacted_at(
      ::sonet::common::Timestamp* interacted_at);
  ::sonet::common::Timestamp* unsafe_arena_release_interacted_at();

  // bool has_liked = 3;
  void clear_has_liked();
  bool has_liked() const;
  void set_has_liked(bool value);
  private:
  bool _internal_has_liked() const;
  void _internal_set_has_liked(bool value);
  public:

  // bool has_renoted = 4;
  void clear_has_renoted();
  bool has_renoted() const;
  void set_has_renoted(bool value);
  private:
  bool _internal_has_renoted() const;
  void _internal_set_has_renoted(bool value);
  public:

  // bool has_bookmarked = 5;
  void clear_has_bookmarked();
  bool has_bookmarked() const;
  void set_has_bookmarked(bool value);
  private:
  bool _internal_has_bookmarked() const;
  void _internal_set_has_bookmarked(bool value);
  public:

  // bool has_reported = 6;
  void clear_has_reported();
  bool has_reported() const;
  void set_has_reported(bool value);
  private:
  bool _internal_has_reported() const;
  void _internal_set_has_reported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.UserNoteInteraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::sonet::common::Timestamp* last_viewed_at_;
    ::sonet::common::Timestamp* interacted_at_;
    bool has_liked_;
    bool has_renoted_;
    bool has_bookmarked_;
    bool has_reported_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class CreateNoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.CreateNoteRequest) */ {
 public:
  inline CreateNoteRequest() : CreateNoteRequest(nullptr) {}
  ~CreateNoteRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateNoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNoteRequest(const CreateNoteRequest& from);
  CreateNoteRequest(CreateNoteRequest&& from) noexcept
    : CreateNoteRequest() {
    *this = ::std::move(from);
  }

  inline CreateNoteRequest& operator=(const CreateNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNoteRequest& operator=(CreateNoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNoteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNoteRequest*>(
               &_CreateNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateNoteRequest& a, CreateNoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateNoteRequest& from) {
    CreateNoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.CreateNoteRequest";
  }
  protected:
  explicit CreateNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdsFieldNumber = 5,
    kAuthorIdFieldNumber = 1,
    kTextFieldNumber = 2,
    kReplyToNoteIdFieldNumber = 7,
    kRenotedNoteIdFieldNumber = 8,
    kClientNameFieldNumber = 10,
    kIdempotencyKeyFieldNumber = 11,
    kLocationFieldNumber = 6,
    kVisibilityFieldNumber = 3,
    kContentWarningFieldNumber = 4,
    kIsQuoteRenoteFieldNumber = 9,
  };
  // repeated string media_ids = 5;
  int media_ids_size() const;
  private:
  int _internal_media_ids_size() const;
  public:
  void clear_media_ids();
  const std::string& media_ids(int index) const;
  std::string* mutable_media_ids(int index);
  void set_media_ids(int index, const std::string& value);
  void set_media_ids(int index, std::string&& value);
  void set_media_ids(int index, const char* value);
  void set_media_ids(int index, const char* value, size_t size);
  std::string* add_media_ids();
  void add_media_ids(const std::string& value);
  void add_media_ids(std::string&& value);
  void add_media_ids(const char* value);
  void add_media_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& media_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_media_ids();
  private:
  const std::string& _internal_media_ids(int index) const;
  std::string* _internal_add_media_ids();
  public:

  // string author_id = 1;
  void clear_author_id();
  const std::string& author_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author_id();
  PROTOBUF_NODISCARD std::string* release_author_id();
  void set_allocated_author_id(std::string* author_id);
  private:
  const std::string& _internal_author_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author_id(const std::string& value);
  std::string* _internal_mutable_author_id();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string reply_to_note_id = 7;
  void clear_reply_to_note_id();
  const std::string& reply_to_note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_note_id();
  PROTOBUF_NODISCARD std::string* release_reply_to_note_id();
  void set_allocated_reply_to_note_id(std::string* reply_to_note_id);
  private:
  const std::string& _internal_reply_to_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_note_id(const std::string& value);
  std::string* _internal_mutable_reply_to_note_id();
  public:

  // string renoted_note_id = 8;
  void clear_renoted_note_id();
  const std::string& renoted_note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_renoted_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_renoted_note_id();
  PROTOBUF_NODISCARD std::string* release_renoted_note_id();
  void set_allocated_renoted_note_id(std::string* renoted_note_id);
  private:
  const std::string& _internal_renoted_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_renoted_note_id(const std::string& value);
  std::string* _internal_mutable_renoted_note_id();
  public:

  // string client_name = 10;
  void clear_client_name();
  const std::string& client_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_name();
  PROTOBUF_NODISCARD std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string idempotency_key = 11;
  void clear_idempotency_key();
  const std::string& idempotency_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idempotency_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idempotency_key();
  PROTOBUF_NODISCARD std::string* release_idempotency_key();
  void set_allocated_idempotency_key(std::string* idempotency_key);
  private:
  const std::string& _internal_idempotency_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idempotency_key(const std::string& value);
  std::string* _internal_mutable_idempotency_key();
  public:

  // .sonet.note.GeoLocation location = 6;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::sonet::note::GeoLocation& location() const;
  PROTOBUF_NODISCARD ::sonet::note::GeoLocation* release_location();
  ::sonet::note::GeoLocation* mutable_location();
  void set_allocated_location(::sonet::note::GeoLocation* location);
  private:
  const ::sonet::note::GeoLocation& _internal_location() const;
  ::sonet::note::GeoLocation* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::sonet::note::GeoLocation* location);
  ::sonet::note::GeoLocation* unsafe_arena_release_location();

  // .sonet.note.NoteVisibility visibility = 3;
  void clear_visibility();
  ::sonet::note::NoteVisibility visibility() const;
  void set_visibility(::sonet::note::NoteVisibility value);
  private:
  ::sonet::note::NoteVisibility _internal_visibility() const;
  void _internal_set_visibility(::sonet::note::NoteVisibility value);
  public:

  // .sonet.note.ContentWarning content_warning = 4;
  void clear_content_warning();
  ::sonet::note::ContentWarning content_warning() const;
  void set_content_warning(::sonet::note::ContentWarning value);
  private:
  ::sonet::note::ContentWarning _internal_content_warning() const;
  void _internal_set_content_warning(::sonet::note::ContentWarning value);
  public:

  // bool is_quote_renote = 9;
  void clear_is_quote_renote();
  bool is_quote_renote() const;
  void set_is_quote_renote(bool value);
  private:
  bool _internal_is_quote_renote() const;
  void _internal_set_is_quote_renote(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.CreateNoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> media_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr renoted_note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idempotency_key_;
    ::sonet::note::GeoLocation* location_;
    int visibility_;
    int content_warning_;
    bool is_quote_renote_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class CreateNoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.CreateNoteResponse) */ {
 public:
  inline CreateNoteResponse() : CreateNoteResponse(nullptr) {}
  ~CreateNoteResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateNoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNoteResponse(const CreateNoteResponse& from);
  CreateNoteResponse(CreateNoteResponse&& from) noexcept
    : CreateNoteResponse() {
    *this = ::std::move(from);
  }

  inline CreateNoteResponse& operator=(const CreateNoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNoteResponse& operator=(CreateNoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNoteResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNoteResponse*>(
               &_CreateNoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateNoteResponse& a, CreateNoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateNoteResponse& from) {
    CreateNoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.CreateNoteResponse";
  }
  protected:
  explicit CreateNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kNoteFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.note.Note note = 1;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const ::sonet::note::Note& note() const;
  PROTOBUF_NODISCARD ::sonet::note::Note* release_note();
  ::sonet::note::Note* mutable_note();
  void set_allocated_note(::sonet::note::Note* note);
  private:
  const ::sonet::note::Note& _internal_note() const;
  ::sonet::note::Note* _internal_mutable_note();
  public:
  void unsafe_arena_set_allocated_note(
      ::sonet::note::Note* note);
  ::sonet::note::Note* unsafe_arena_release_note();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.CreateNoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::note::Note* note_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GetNoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GetNoteRequest) */ {
 public:
  inline GetNoteRequest() : GetNoteRequest(nullptr) {}
  ~GetNoteRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoteRequest(const GetNoteRequest& from);
  GetNoteRequest(GetNoteRequest&& from) noexcept
    : GetNoteRequest() {
    *this = ::std::move(from);
  }

  inline GetNoteRequest& operator=(const GetNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoteRequest& operator=(GetNoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoteRequest* internal_default_instance() {
    return reinterpret_cast<const GetNoteRequest*>(
               &_GetNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetNoteRequest& a, GetNoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoteRequest& from) {
    GetNoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GetNoteRequest";
  }
  protected:
  explicit GetNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kIncludeThreadFieldNumber = 3,
  };
  // string note_id = 1;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // bool include_thread = 3;
  void clear_include_thread();
  bool include_thread() const;
  void set_include_thread(bool value);
  private:
  bool _internal_include_thread() const;
  void _internal_set_include_thread(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.GetNoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    bool include_thread_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GetNoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GetNoteResponse) */ {
 public:
  inline GetNoteResponse() : GetNoteResponse(nullptr) {}
  ~GetNoteResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoteResponse(const GetNoteResponse& from);
  GetNoteResponse(GetNoteResponse&& from) noexcept
    : GetNoteResponse() {
    *this = ::std::move(from);
  }

  inline GetNoteResponse& operator=(const GetNoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoteResponse& operator=(GetNoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoteResponse* internal_default_instance() {
    return reinterpret_cast<const GetNoteResponse*>(
               &_GetNoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetNoteResponse& a, GetNoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoteResponse& from) {
    GetNoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GetNoteResponse";
  }
  protected:
  explicit GetNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadNotesFieldNumber = 3,
    kErrorMessageFieldNumber = 5,
    kNoteFieldNumber = 1,
    kUserInteractionFieldNumber = 2,
    kSuccessFieldNumber = 4,
  };
  // repeated .sonet.note.Note thread_notes = 3;
  int thread_notes_size() const;
  private:
  int _internal_thread_notes_size() const;
  public:
  void clear_thread_notes();
  ::sonet::note::Note* mutable_thread_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
      mutable_thread_notes();
  private:
  const ::sonet::note::Note& _internal_thread_notes(int index) const;
  ::sonet::note::Note* _internal_add_thread_notes();
  public:
  const ::sonet::note::Note& thread_notes(int index) const;
  ::sonet::note::Note* add_thread_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
      thread_notes() const;

  // string error_message = 5;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.note.Note note = 1;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const ::sonet::note::Note& note() const;
  PROTOBUF_NODISCARD ::sonet::note::Note* release_note();
  ::sonet::note::Note* mutable_note();
  void set_allocated_note(::sonet::note::Note* note);
  private:
  const ::sonet::note::Note& _internal_note() const;
  ::sonet::note::Note* _internal_mutable_note();
  public:
  void unsafe_arena_set_allocated_note(
      ::sonet::note::Note* note);
  ::sonet::note::Note* unsafe_arena_release_note();

  // .sonet.note.UserNoteInteraction user_interaction = 2;
  bool has_user_interaction() const;
  private:
  bool _internal_has_user_interaction() const;
  public:
  void clear_user_interaction();
  const ::sonet::note::UserNoteInteraction& user_interaction() const;
  PROTOBUF_NODISCARD ::sonet::note::UserNoteInteraction* release_user_interaction();
  ::sonet::note::UserNoteInteraction* mutable_user_interaction();
  void set_allocated_user_interaction(::sonet::note::UserNoteInteraction* user_interaction);
  private:
  const ::sonet::note::UserNoteInteraction& _internal_user_interaction() const;
  ::sonet::note::UserNoteInteraction* _internal_mutable_user_interaction();
  public:
  void unsafe_arena_set_allocated_user_interaction(
      ::sonet::note::UserNoteInteraction* user_interaction);
  ::sonet::note::UserNoteInteraction* unsafe_arena_release_user_interaction();

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.GetNoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note > thread_notes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::note::Note* note_;
    ::sonet::note::UserNoteInteraction* user_interaction_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class DeleteNoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.DeleteNoteRequest) */ {
 public:
  inline DeleteNoteRequest() : DeleteNoteRequest(nullptr) {}
  ~DeleteNoteRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteNoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNoteRequest(const DeleteNoteRequest& from);
  DeleteNoteRequest(DeleteNoteRequest&& from) noexcept
    : DeleteNoteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNoteRequest& operator=(const DeleteNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNoteRequest& operator=(DeleteNoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNoteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNoteRequest*>(
               &_DeleteNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteNoteRequest& a, DeleteNoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteNoteRequest& from) {
    DeleteNoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.DeleteNoteRequest";
  }
  protected:
  explicit DeleteNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string note_id = 1;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.DeleteNoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class DeleteNoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.DeleteNoteResponse) */ {
 public:
  inline DeleteNoteResponse() : DeleteNoteResponse(nullptr) {}
  ~DeleteNoteResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteNoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNoteResponse(const DeleteNoteResponse& from);
  DeleteNoteResponse(DeleteNoteResponse&& from) noexcept
    : DeleteNoteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteNoteResponse& operator=(const DeleteNoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNoteResponse& operator=(DeleteNoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNoteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteNoteResponse*>(
               &_DeleteNoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteNoteResponse& a, DeleteNoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteNoteResponse& from) {
    DeleteNoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.DeleteNoteResponse";
  }
  protected:
  explicit DeleteNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.DeleteNoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class LikeNoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.LikeNoteRequest) */ {
 public:
  inline LikeNoteRequest() : LikeNoteRequest(nullptr) {}
  ~LikeNoteRequest() override;
  explicit PROTOBUF_CONSTEXPR LikeNoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LikeNoteRequest(const LikeNoteRequest& from);
  LikeNoteRequest(LikeNoteRequest&& from) noexcept
    : LikeNoteRequest() {
    *this = ::std::move(from);
  }

  inline LikeNoteRequest& operator=(const LikeNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LikeNoteRequest& operator=(LikeNoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LikeNoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LikeNoteRequest* internal_default_instance() {
    return reinterpret_cast<const LikeNoteRequest*>(
               &_LikeNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LikeNoteRequest& a, LikeNoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LikeNoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LikeNoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LikeNoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LikeNoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LikeNoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LikeNoteRequest& from) {
    LikeNoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LikeNoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.LikeNoteRequest";
  }
  protected:
  explicit LikeNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kLikeFieldNumber = 3,
  };
  // string note_id = 1;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool like = 3;
  void clear_like();
  bool like() const;
  void set_like(bool value);
  private:
  bool _internal_like() const;
  void _internal_set_like(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.LikeNoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    bool like_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class LikeNoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.LikeNoteResponse) */ {
 public:
  inline LikeNoteResponse() : LikeNoteResponse(nullptr) {}
  ~LikeNoteResponse() override;
  explicit PROTOBUF_CONSTEXPR LikeNoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LikeNoteResponse(const LikeNoteResponse& from);
  LikeNoteResponse(LikeNoteResponse&& from) noexcept
    : LikeNoteResponse() {
    *this = ::std::move(from);
  }

  inline LikeNoteResponse& operator=(const LikeNoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LikeNoteResponse& operator=(LikeNoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LikeNoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LikeNoteResponse* internal_default_instance() {
    return reinterpret_cast<const LikeNoteResponse*>(
               &_LikeNoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LikeNoteResponse& a, LikeNoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LikeNoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LikeNoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LikeNoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LikeNoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LikeNoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LikeNoteResponse& from) {
    LikeNoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LikeNoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.LikeNoteResponse";
  }
  protected:
  explicit LikeNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kNewLikeCountFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int64 new_like_count = 2;
  void clear_new_like_count();
  int64_t new_like_count() const;
  void set_new_like_count(int64_t value);
  private:
  int64_t _internal_new_like_count() const;
  void _internal_set_new_like_count(int64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.LikeNoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int64_t new_like_count_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class RenoteNoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.RenoteNoteRequest) */ {
 public:
  inline RenoteNoteRequest() : RenoteNoteRequest(nullptr) {}
  ~RenoteNoteRequest() override;
  explicit PROTOBUF_CONSTEXPR RenoteNoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenoteNoteRequest(const RenoteNoteRequest& from);
  RenoteNoteRequest(RenoteNoteRequest&& from) noexcept
    : RenoteNoteRequest() {
    *this = ::std::move(from);
  }

  inline RenoteNoteRequest& operator=(const RenoteNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenoteNoteRequest& operator=(RenoteNoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenoteNoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenoteNoteRequest* internal_default_instance() {
    return reinterpret_cast<const RenoteNoteRequest*>(
               &_RenoteNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RenoteNoteRequest& a, RenoteNoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenoteNoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenoteNoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenoteNoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenoteNoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenoteNoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenoteNoteRequest& from) {
    RenoteNoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenoteNoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.RenoteNoteRequest";
  }
  protected:
  explicit RenoteNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kQuoteTextFieldNumber = 4,
    kIsQuoteRenoteFieldNumber = 3,
  };
  // string note_id = 1;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string quote_text = 4;
  void clear_quote_text();
  const std::string& quote_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_text();
  PROTOBUF_NODISCARD std::string* release_quote_text();
  void set_allocated_quote_text(std::string* quote_text);
  private:
  const std::string& _internal_quote_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_text(const std::string& value);
  std::string* _internal_mutable_quote_text();
  public:

  // bool is_quote_renote = 3;
  void clear_is_quote_renote();
  bool is_quote_renote() const;
  void set_is_quote_renote(bool value);
  private:
  bool _internal_is_quote_renote() const;
  void _internal_set_is_quote_renote(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.RenoteNoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_text_;
    bool is_quote_renote_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class RenoteNoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.RenoteNoteResponse) */ {
 public:
  inline RenoteNoteResponse() : RenoteNoteResponse(nullptr) {}
  ~RenoteNoteResponse() override;
  explicit PROTOBUF_CONSTEXPR RenoteNoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenoteNoteResponse(const RenoteNoteResponse& from);
  RenoteNoteResponse(RenoteNoteResponse&& from) noexcept
    : RenoteNoteResponse() {
    *this = ::std::move(from);
  }

  inline RenoteNoteResponse& operator=(const RenoteNoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenoteNoteResponse& operator=(RenoteNoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenoteNoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenoteNoteResponse* internal_default_instance() {
    return reinterpret_cast<const RenoteNoteResponse*>(
               &_RenoteNoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RenoteNoteResponse& a, RenoteNoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RenoteNoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenoteNoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenoteNoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenoteNoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenoteNoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenoteNoteResponse& from) {
    RenoteNoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenoteNoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.RenoteNoteResponse";
  }
  protected:
  explicit RenoteNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kRenoteNoteFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.note.Note renote_note = 1;
  bool has_renote_note() const;
  private:
  bool _internal_has_renote_note() const;
  public:
  void clear_renote_note();
  const ::sonet::note::Note& renote_note() const;
  PROTOBUF_NODISCARD ::sonet::note::Note* release_renote_note();
  ::sonet::note::Note* mutable_renote_note();
  void set_allocated_renote_note(::sonet::note::Note* renote_note);
  private:
  const ::sonet::note::Note& _internal_renote_note() const;
  ::sonet::note::Note* _internal_mutable_renote_note();
  public:
  void unsafe_arena_set_allocated_renote_note(
      ::sonet::note::Note* renote_note);
  ::sonet::note::Note* unsafe_arena_release_renote_note();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.RenoteNoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::note::Note* renote_note_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GetUserNotesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GetUserNotesRequest) */ {
 public:
  inline GetUserNotesRequest() : GetUserNotesRequest(nullptr) {}
  ~GetUserNotesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserNotesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserNotesRequest(const GetUserNotesRequest& from);
  GetUserNotesRequest(GetUserNotesRequest&& from) noexcept
    : GetUserNotesRequest() {
    *this = ::std::move(from);
  }

  inline GetUserNotesRequest& operator=(const GetUserNotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserNotesRequest& operator=(GetUserNotesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserNotesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserNotesRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserNotesRequest*>(
               &_GetUserNotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetUserNotesRequest& a, GetUserNotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserNotesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserNotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserNotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserNotesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserNotesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserNotesRequest& from) {
    GetUserNotesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserNotesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GetUserNotesRequest";
  }
  protected:
  explicit GetUserNotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kPaginationFieldNumber = 3,
    kIncludeRepliesFieldNumber = 4,
    kIncludeRenotesFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // .sonet.common.PaginationRequest pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::PaginationRequest& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::PaginationRequest* release_pagination();
  ::sonet::common::PaginationRequest* mutable_pagination();
  void set_allocated_pagination(::sonet::common::PaginationRequest* pagination);
  private:
  const ::sonet::common::PaginationRequest& _internal_pagination() const;
  ::sonet::common::PaginationRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::PaginationRequest* pagination);
  ::sonet::common::PaginationRequest* unsafe_arena_release_pagination();

  // bool include_replies = 4;
  void clear_include_replies();
  bool include_replies() const;
  void set_include_replies(bool value);
  private:
  bool _internal_include_replies() const;
  void _internal_set_include_replies(bool value);
  public:

  // bool include_renotes = 5;
  void clear_include_renotes();
  bool include_renotes() const;
  void set_include_renotes(bool value);
  private:
  bool _internal_include_renotes() const;
  void _internal_set_include_renotes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.GetUserNotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::sonet::common::PaginationRequest* pagination_;
    bool include_replies_;
    bool include_renotes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GetUserNotesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GetUserNotesResponse) */ {
 public:
  inline GetUserNotesResponse() : GetUserNotesResponse(nullptr) {}
  ~GetUserNotesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUserNotesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserNotesResponse(const GetUserNotesResponse& from);
  GetUserNotesResponse(GetUserNotesResponse&& from) noexcept
    : GetUserNotesResponse() {
    *this = ::std::move(from);
  }

  inline GetUserNotesResponse& operator=(const GetUserNotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserNotesResponse& operator=(GetUserNotesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserNotesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserNotesResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserNotesResponse*>(
               &_GetUserNotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetUserNotesResponse& a, GetUserNotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserNotesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserNotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserNotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserNotesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserNotesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserNotesResponse& from) {
    GetUserNotesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserNotesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GetUserNotesResponse";
  }
  protected:
  explicit GetUserNotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 1,
    kErrorMessageFieldNumber = 4,
    kPaginationFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .sonet.note.Note notes = 1;
  int notes_size() const;
  private:
  int _internal_notes_size() const;
  public:
  void clear_notes();
  ::sonet::note::Note* mutable_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
      mutable_notes();
  private:
  const ::sonet::note::Note& _internal_notes(int index) const;
  ::sonet::note::Note* _internal_add_notes();
  public:
  const ::sonet::note::Note& notes(int index) const;
  ::sonet::note::Note* add_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
      notes() const;

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.common.PaginationResponse pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::PaginationResponse& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::PaginationResponse* release_pagination();
  ::sonet::common::PaginationResponse* mutable_pagination();
  void set_allocated_pagination(::sonet::common::PaginationResponse* pagination);
  private:
  const ::sonet::common::PaginationResponse& _internal_pagination() const;
  ::sonet::common::PaginationResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::PaginationResponse* pagination);
  ::sonet::common::PaginationResponse* unsafe_arena_release_pagination();

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.GetUserNotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note > notes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::common::PaginationResponse* pagination_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GetNoteThreadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GetNoteThreadRequest) */ {
 public:
  inline GetNoteThreadRequest() : GetNoteThreadRequest(nullptr) {}
  ~GetNoteThreadRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNoteThreadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoteThreadRequest(const GetNoteThreadRequest& from);
  GetNoteThreadRequest(GetNoteThreadRequest&& from) noexcept
    : GetNoteThreadRequest() {
    *this = ::std::move(from);
  }

  inline GetNoteThreadRequest& operator=(const GetNoteThreadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoteThreadRequest& operator=(GetNoteThreadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoteThreadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoteThreadRequest* internal_default_instance() {
    return reinterpret_cast<const GetNoteThreadRequest*>(
               &_GetNoteThreadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetNoteThreadRequest& a, GetNoteThreadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoteThreadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoteThreadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoteThreadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoteThreadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoteThreadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoteThreadRequest& from) {
    GetNoteThreadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoteThreadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GetNoteThreadRequest";
  }
  protected:
  explicit GetNoteThreadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // string note_id = 1;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // .sonet.common.PaginationRequest pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::PaginationRequest& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::PaginationRequest* release_pagination();
  ::sonet::common::PaginationRequest* mutable_pagination();
  void set_allocated_pagination(::sonet::common::PaginationRequest* pagination);
  private:
  const ::sonet::common::PaginationRequest& _internal_pagination() const;
  ::sonet::common::PaginationRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::PaginationRequest* pagination);
  ::sonet::common::PaginationRequest* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sonet.note.GetNoteThreadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::sonet::common::PaginationRequest* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class GetNoteThreadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.GetNoteThreadResponse) */ {
 public:
  inline GetNoteThreadResponse() : GetNoteThreadResponse(nullptr) {}
  ~GetNoteThreadResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNoteThreadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoteThreadResponse(const GetNoteThreadResponse& from);
  GetNoteThreadResponse(GetNoteThreadResponse&& from) noexcept
    : GetNoteThreadResponse() {
    *this = ::std::move(from);
  }

  inline GetNoteThreadResponse& operator=(const GetNoteThreadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoteThreadResponse& operator=(GetNoteThreadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoteThreadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoteThreadResponse* internal_default_instance() {
    return reinterpret_cast<const GetNoteThreadResponse*>(
               &_GetNoteThreadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetNoteThreadResponse& a, GetNoteThreadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoteThreadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoteThreadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoteThreadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoteThreadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoteThreadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoteThreadResponse& from) {
    GetNoteThreadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoteThreadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.GetNoteThreadResponse";
  }
  protected:
  explicit GetNoteThreadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepliesFieldNumber = 2,
    kErrorMessageFieldNumber = 5,
    kRootNoteFieldNumber = 1,
    kPaginationFieldNumber = 3,
    kSuccessFieldNumber = 4,
  };
  // repeated .sonet.note.Note replies = 2;
  int replies_size() const;
  private:
  int _internal_replies_size() const;
  public:
  void clear_replies();
  ::sonet::note::Note* mutable_replies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
      mutable_replies();
  private:
  const ::sonet::note::Note& _internal_replies(int index) const;
  ::sonet::note::Note* _internal_add_replies();
  public:
  const ::sonet::note::Note& replies(int index) const;
  ::sonet::note::Note* add_replies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
      replies() const;

  // string error_message = 5;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.note.Note root_note = 1;
  bool has_root_note() const;
  private:
  bool _internal_has_root_note() const;
  public:
  void clear_root_note();
  const ::sonet::note::Note& root_note() const;
  PROTOBUF_NODISCARD ::sonet::note::Note* release_root_note();
  ::sonet::note::Note* mutable_root_note();
  void set_allocated_root_note(::sonet::note::Note* root_note);
  private:
  const ::sonet::note::Note& _internal_root_note() const;
  ::sonet::note::Note* _internal_mutable_root_note();
  public:
  void unsafe_arena_set_allocated_root_note(
      ::sonet::note::Note* root_note);
  ::sonet::note::Note* unsafe_arena_release_root_note();

  // .sonet.common.PaginationResponse pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::PaginationResponse& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::PaginationResponse* release_pagination();
  ::sonet::common::PaginationResponse* mutable_pagination();
  void set_allocated_pagination(::sonet::common::PaginationResponse* pagination);
  private:
  const ::sonet::common::PaginationResponse& _internal_pagination() const;
  ::sonet::common::PaginationResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::PaginationResponse* pagination);
  ::sonet::common::PaginationResponse* unsafe_arena_release_pagination();

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.GetNoteThreadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note > replies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::note::Note* root_note_;
    ::sonet::common::PaginationResponse* pagination_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class SearchNotesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.SearchNotesRequest) */ {
 public:
  inline SearchNotesRequest() : SearchNotesRequest(nullptr) {}
  ~SearchNotesRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchNotesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchNotesRequest(const SearchNotesRequest& from);
  SearchNotesRequest(SearchNotesRequest&& from) noexcept
    : SearchNotesRequest() {
    *this = ::std::move(from);
  }

  inline SearchNotesRequest& operator=(const SearchNotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchNotesRequest& operator=(SearchNotesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchNotesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchNotesRequest* internal_default_instance() {
    return reinterpret_cast<const SearchNotesRequest*>(
               &_SearchNotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SearchNotesRequest& a, SearchNotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchNotesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchNotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchNotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchNotesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchNotesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchNotesRequest& from) {
    SearchNotesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchNotesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.SearchNotesRequest";
  }
  protected:
  explicit SearchNotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashtagsFieldNumber = 6,
    kQueryFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kLanguageFieldNumber = 4,
    kAuthorIdFieldNumber = 5,
    kPaginationFieldNumber = 3,
    kSinceFieldNumber = 7,
    kUntilFieldNumber = 8,
    kVerifiedOnlyFieldNumber = 9,
  };
  // repeated string hashtags = 6;
  int hashtags_size() const;
  private:
  int _internal_hashtags_size() const;
  public:
  void clear_hashtags();
  const std::string& hashtags(int index) const;
  std::string* mutable_hashtags(int index);
  void set_hashtags(int index, const std::string& value);
  void set_hashtags(int index, std::string&& value);
  void set_hashtags(int index, const char* value);
  void set_hashtags(int index, const char* value, size_t size);
  std::string* add_hashtags();
  void add_hashtags(const std::string& value);
  void add_hashtags(std::string&& value);
  void add_hashtags(const char* value);
  void add_hashtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashtags();
  private:
  const std::string& _internal_hashtags(int index) const;
  std::string* _internal_add_hashtags();
  public:

  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // string language = 4;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string author_id = 5;
  void clear_author_id();
  const std::string& author_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author_id();
  PROTOBUF_NODISCARD std::string* release_author_id();
  void set_allocated_author_id(std::string* author_id);
  private:
  const std::string& _internal_author_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author_id(const std::string& value);
  std::string* _internal_mutable_author_id();
  public:

  // .sonet.common.PaginationRequest pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::PaginationRequest& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::PaginationRequest* release_pagination();
  ::sonet::common::PaginationRequest* mutable_pagination();
  void set_allocated_pagination(::sonet::common::PaginationRequest* pagination);
  private:
  const ::sonet::common::PaginationRequest& _internal_pagination() const;
  ::sonet::common::PaginationRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::PaginationRequest* pagination);
  ::sonet::common::PaginationRequest* unsafe_arena_release_pagination();

  // .sonet.common.Timestamp since = 7;
  bool has_since() const;
  private:
  bool _internal_has_since() const;
  public:
  void clear_since();
  const ::sonet::common::Timestamp& since() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_since();
  ::sonet::common::Timestamp* mutable_since();
  void set_allocated_since(::sonet::common::Timestamp* since);
  private:
  const ::sonet::common::Timestamp& _internal_since() const;
  ::sonet::common::Timestamp* _internal_mutable_since();
  public:
  void unsafe_arena_set_allocated_since(
      ::sonet::common::Timestamp* since);
  ::sonet::common::Timestamp* unsafe_arena_release_since();

  // .sonet.common.Timestamp until = 8;
  bool has_until() const;
  private:
  bool _internal_has_until() const;
  public:
  void clear_until();
  const ::sonet::common::Timestamp& until() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_until();
  ::sonet::common::Timestamp* mutable_until();
  void set_allocated_until(::sonet::common::Timestamp* until);
  private:
  const ::sonet::common::Timestamp& _internal_until() const;
  ::sonet::common::Timestamp* _internal_mutable_until();
  public:
  void unsafe_arena_set_allocated_until(
      ::sonet::common::Timestamp* until);
  ::sonet::common::Timestamp* unsafe_arena_release_until();

  // bool verified_only = 9;
  void clear_verified_only();
  bool verified_only() const;
  void set_verified_only(bool value);
  private:
  bool _internal_verified_only() const;
  void _internal_set_verified_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.SearchNotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashtags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_id_;
    ::sonet::common::PaginationRequest* pagination_;
    ::sonet::common::Timestamp* since_;
    ::sonet::common::Timestamp* until_;
    bool verified_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class SearchNotesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.SearchNotesResponse) */ {
 public:
  inline SearchNotesResponse() : SearchNotesResponse(nullptr) {}
  ~SearchNotesResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchNotesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchNotesResponse(const SearchNotesResponse& from);
  SearchNotesResponse(SearchNotesResponse&& from) noexcept
    : SearchNotesResponse() {
    *this = ::std::move(from);
  }

  inline SearchNotesResponse& operator=(const SearchNotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchNotesResponse& operator=(SearchNotesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchNotesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchNotesResponse* internal_default_instance() {
    return reinterpret_cast<const SearchNotesResponse*>(
               &_SearchNotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SearchNotesResponse& a, SearchNotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchNotesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchNotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchNotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchNotesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchNotesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchNotesResponse& from) {
    SearchNotesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchNotesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.SearchNotesResponse";
  }
  protected:
  explicit SearchNotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 1,
    kErrorMessageFieldNumber = 4,
    kPaginationFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .sonet.note.Note notes = 1;
  int notes_size() const;
  private:
  int _internal_notes_size() const;
  public:
  void clear_notes();
  ::sonet::note::Note* mutable_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
      mutable_notes();
  private:
  const ::sonet::note::Note& _internal_notes(int index) const;
  ::sonet::note::Note* _internal_add_notes();
  public:
  const ::sonet::note::Note& notes(int index) const;
  ::sonet::note::Note* add_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
      notes() const;

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.common.PaginationResponse pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::PaginationResponse& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::PaginationResponse* release_pagination();
  ::sonet::common::PaginationResponse* mutable_pagination();
  void set_allocated_pagination(::sonet::common::PaginationResponse* pagination);
  private:
  const ::sonet::common::PaginationResponse& _internal_pagination() const;
  ::sonet::common::PaginationResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::PaginationResponse* pagination);
  ::sonet::common::PaginationResponse* unsafe_arena_release_pagination();

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.SearchNotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note > notes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::common::PaginationResponse* pagination_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sonet.note.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckRequest(const HealthCheckRequest& from);
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HealthCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HealthCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sonet.note.HealthCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse_DetailsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HealthCheckResponse_DetailsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HealthCheckResponse_DetailsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  HealthCheckResponse_DetailsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HealthCheckResponse_DetailsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HealthCheckResponse_DetailsEntry_DoNotUse& other);
  static const HealthCheckResponse_DetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HealthCheckResponse_DetailsEntry_DoNotUse*>(&_HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.note.HealthCheckResponse.DetailsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.note.HealthCheckResponse.DetailsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_services_2fnote_2eproto;
};

// -------------------------------------------------------------------

class HealthCheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.note.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  ~HealthCheckResponse() override;
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthCheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HealthCheckResponse& from) {
    HealthCheckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.note.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // map<string, string> details = 2;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_details() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_details();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      details() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_details();

  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:sonet.note.HealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HealthCheckResponse_DetailsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NoteMention

// string user_id = 1;
inline void NoteMention::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& NoteMention::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMention.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteMention::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteMention.user_id)
}
inline std::string* NoteMention::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteMention.user_id)
  return _s;
}
inline const std::string& NoteMention::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void NoteMention::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteMention::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteMention::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteMention.user_id)
  return _impl_.user_id_.Release();
}
inline void NoteMention::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteMention.user_id)
}

// string username = 2;
inline void NoteMention::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& NoteMention::username() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMention.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteMention::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteMention.username)
}
inline std::string* NoteMention::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteMention.username)
  return _s;
}
inline const std::string& NoteMention::_internal_username() const {
  return _impl_.username_.Get();
}
inline void NoteMention::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteMention::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteMention::release_username() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteMention.username)
  return _impl_.username_.Release();
}
inline void NoteMention::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteMention.username)
}

// int32 start_offset = 3;
inline void NoteMention::clear_start_offset() {
  _impl_.start_offset_ = 0;
}
inline int32_t NoteMention::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline int32_t NoteMention::start_offset() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMention.start_offset)
  return _internal_start_offset();
}
inline void NoteMention::_internal_set_start_offset(int32_t value) {
  
  _impl_.start_offset_ = value;
}
inline void NoteMention::set_start_offset(int32_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMention.start_offset)
}

// int32 end_offset = 4;
inline void NoteMention::clear_end_offset() {
  _impl_.end_offset_ = 0;
}
inline int32_t NoteMention::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline int32_t NoteMention::end_offset() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMention.end_offset)
  return _internal_end_offset();
}
inline void NoteMention::_internal_set_end_offset(int32_t value) {
  
  _impl_.end_offset_ = value;
}
inline void NoteMention::set_end_offset(int32_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMention.end_offset)
}

// -------------------------------------------------------------------

// NoteHashtag

// string tag = 1;
inline void NoteHashtag::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& NoteHashtag::tag() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteHashtag.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteHashtag::set_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteHashtag.tag)
}
inline std::string* NoteHashtag::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteHashtag.tag)
  return _s;
}
inline const std::string& NoteHashtag::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void NoteHashtag::_internal_set_tag(const std::string& value) {
  
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteHashtag::_internal_mutable_tag() {
  
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteHashtag::release_tag() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteHashtag.tag)
  return _impl_.tag_.Release();
}
inline void NoteHashtag::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteHashtag.tag)
}

// int32 start_offset = 2;
inline void NoteHashtag::clear_start_offset() {
  _impl_.start_offset_ = 0;
}
inline int32_t NoteHashtag::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline int32_t NoteHashtag::start_offset() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteHashtag.start_offset)
  return _internal_start_offset();
}
inline void NoteHashtag::_internal_set_start_offset(int32_t value) {
  
  _impl_.start_offset_ = value;
}
inline void NoteHashtag::set_start_offset(int32_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteHashtag.start_offset)
}

// int32 end_offset = 3;
inline void NoteHashtag::clear_end_offset() {
  _impl_.end_offset_ = 0;
}
inline int32_t NoteHashtag::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline int32_t NoteHashtag::end_offset() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteHashtag.end_offset)
  return _internal_end_offset();
}
inline void NoteHashtag::_internal_set_end_offset(int32_t value) {
  
  _impl_.end_offset_ = value;
}
inline void NoteHashtag::set_end_offset(int32_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteHashtag.end_offset)
}

// -------------------------------------------------------------------

// NoteLink

// string url = 1;
inline void NoteLink::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& NoteLink::url() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteLink.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteLink::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteLink.url)
}
inline std::string* NoteLink::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteLink.url)
  return _s;
}
inline const std::string& NoteLink::_internal_url() const {
  return _impl_.url_.Get();
}
inline void NoteLink::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteLink::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteLink::release_url() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteLink.url)
  return _impl_.url_.Release();
}
inline void NoteLink::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteLink.url)
}

// string title = 2;
inline void NoteLink::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& NoteLink::title() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteLink.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteLink::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteLink.title)
}
inline std::string* NoteLink::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteLink.title)
  return _s;
}
inline const std::string& NoteLink::_internal_title() const {
  return _impl_.title_.Get();
}
inline void NoteLink::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteLink::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteLink::release_title() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteLink.title)
  return _impl_.title_.Release();
}
inline void NoteLink::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteLink.title)
}

// string description = 3;
inline void NoteLink::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& NoteLink::description() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteLink.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteLink::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteLink.description)
}
inline std::string* NoteLink::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteLink.description)
  return _s;
}
inline const std::string& NoteLink::_internal_description() const {
  return _impl_.description_.Get();
}
inline void NoteLink::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteLink::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteLink::release_description() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteLink.description)
  return _impl_.description_.Release();
}
inline void NoteLink::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteLink.description)
}

// string image_url = 4;
inline void NoteLink::clear_image_url() {
  _impl_.image_url_.ClearToEmpty();
}
inline const std::string& NoteLink::image_url() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteLink.image_url)
  return _internal_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteLink::set_image_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.NoteLink.image_url)
}
inline std::string* NoteLink::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteLink.image_url)
  return _s;
}
inline const std::string& NoteLink::_internal_image_url() const {
  return _impl_.image_url_.Get();
}
inline void NoteLink::_internal_set_image_url(const std::string& value) {
  
  _impl_.image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteLink::_internal_mutable_image_url() {
  
  return _impl_.image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteLink::release_image_url() {
  // @@protoc_insertion_point(field_release:sonet.note.NoteLink.image_url)
  return _impl_.image_url_.Release();
}
inline void NoteLink::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    
  } else {
    
  }
  _impl_.image_url_.SetAllocated(image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_url_.IsDefault()) {
    _impl_.image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.NoteLink.image_url)
}

// int32 start_offset = 5;
inline void NoteLink::clear_start_offset() {
  _impl_.start_offset_ = 0;
}
inline int32_t NoteLink::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline int32_t NoteLink::start_offset() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteLink.start_offset)
  return _internal_start_offset();
}
inline void NoteLink::_internal_set_start_offset(int32_t value) {
  
  _impl_.start_offset_ = value;
}
inline void NoteLink::set_start_offset(int32_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteLink.start_offset)
}

// int32 end_offset = 6;
inline void NoteLink::clear_end_offset() {
  _impl_.end_offset_ = 0;
}
inline int32_t NoteLink::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline int32_t NoteLink::end_offset() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteLink.end_offset)
  return _internal_end_offset();
}
inline void NoteLink::_internal_set_end_offset(int32_t value) {
  
  _impl_.end_offset_ = value;
}
inline void NoteLink::set_end_offset(int32_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteLink.end_offset)
}

// -------------------------------------------------------------------

// NoteEntities

// repeated .sonet.note.NoteMention mentions = 1;
inline int NoteEntities::_internal_mentions_size() const {
  return _impl_.mentions_.size();
}
inline int NoteEntities::mentions_size() const {
  return _internal_mentions_size();
}
inline void NoteEntities::clear_mentions() {
  _impl_.mentions_.Clear();
}
inline ::sonet::note::NoteMention* NoteEntities::mutable_mentions(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteEntities.mentions)
  return _impl_.mentions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteMention >*
NoteEntities::mutable_mentions() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.NoteEntities.mentions)
  return &_impl_.mentions_;
}
inline const ::sonet::note::NoteMention& NoteEntities::_internal_mentions(int index) const {
  return _impl_.mentions_.Get(index);
}
inline const ::sonet::note::NoteMention& NoteEntities::mentions(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteEntities.mentions)
  return _internal_mentions(index);
}
inline ::sonet::note::NoteMention* NoteEntities::_internal_add_mentions() {
  return _impl_.mentions_.Add();
}
inline ::sonet::note::NoteMention* NoteEntities::add_mentions() {
  ::sonet::note::NoteMention* _add = _internal_add_mentions();
  // @@protoc_insertion_point(field_add:sonet.note.NoteEntities.mentions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteMention >&
NoteEntities::mentions() const {
  // @@protoc_insertion_point(field_list:sonet.note.NoteEntities.mentions)
  return _impl_.mentions_;
}

// repeated .sonet.note.NoteHashtag hashtags = 2;
inline int NoteEntities::_internal_hashtags_size() const {
  return _impl_.hashtags_.size();
}
inline int NoteEntities::hashtags_size() const {
  return _internal_hashtags_size();
}
inline void NoteEntities::clear_hashtags() {
  _impl_.hashtags_.Clear();
}
inline ::sonet::note::NoteHashtag* NoteEntities::mutable_hashtags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteEntities.hashtags)
  return _impl_.hashtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteHashtag >*
NoteEntities::mutable_hashtags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.NoteEntities.hashtags)
  return &_impl_.hashtags_;
}
inline const ::sonet::note::NoteHashtag& NoteEntities::_internal_hashtags(int index) const {
  return _impl_.hashtags_.Get(index);
}
inline const ::sonet::note::NoteHashtag& NoteEntities::hashtags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteEntities.hashtags)
  return _internal_hashtags(index);
}
inline ::sonet::note::NoteHashtag* NoteEntities::_internal_add_hashtags() {
  return _impl_.hashtags_.Add();
}
inline ::sonet::note::NoteHashtag* NoteEntities::add_hashtags() {
  ::sonet::note::NoteHashtag* _add = _internal_add_hashtags();
  // @@protoc_insertion_point(field_add:sonet.note.NoteEntities.hashtags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteHashtag >&
NoteEntities::hashtags() const {
  // @@protoc_insertion_point(field_list:sonet.note.NoteEntities.hashtags)
  return _impl_.hashtags_;
}

// repeated .sonet.note.NoteLink links = 3;
inline int NoteEntities::_internal_links_size() const {
  return _impl_.links_.size();
}
inline int NoteEntities::links_size() const {
  return _internal_links_size();
}
inline void NoteEntities::clear_links() {
  _impl_.links_.Clear();
}
inline ::sonet::note::NoteLink* NoteEntities::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.NoteEntities.links)
  return _impl_.links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteLink >*
NoteEntities::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.NoteEntities.links)
  return &_impl_.links_;
}
inline const ::sonet::note::NoteLink& NoteEntities::_internal_links(int index) const {
  return _impl_.links_.Get(index);
}
inline const ::sonet::note::NoteLink& NoteEntities::links(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteEntities.links)
  return _internal_links(index);
}
inline ::sonet::note::NoteLink* NoteEntities::_internal_add_links() {
  return _impl_.links_.Add();
}
inline ::sonet::note::NoteLink* NoteEntities::add_links() {
  ::sonet::note::NoteLink* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:sonet.note.NoteEntities.links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::NoteLink >&
NoteEntities::links() const {
  // @@protoc_insertion_point(field_list:sonet.note.NoteEntities.links)
  return _impl_.links_;
}

// -------------------------------------------------------------------

// GeoLocation

// double latitude = 1;
inline void GeoLocation::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double GeoLocation::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double GeoLocation::latitude() const {
  // @@protoc_insertion_point(field_get:sonet.note.GeoLocation.latitude)
  return _internal_latitude();
}
inline void GeoLocation::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void GeoLocation::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:sonet.note.GeoLocation.latitude)
}

// double longitude = 2;
inline void GeoLocation::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double GeoLocation::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double GeoLocation::longitude() const {
  // @@protoc_insertion_point(field_get:sonet.note.GeoLocation.longitude)
  return _internal_longitude();
}
inline void GeoLocation::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void GeoLocation::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:sonet.note.GeoLocation.longitude)
}

// string place_name = 3;
inline void GeoLocation::clear_place_name() {
  _impl_.place_name_.ClearToEmpty();
}
inline const std::string& GeoLocation::place_name() const {
  // @@protoc_insertion_point(field_get:sonet.note.GeoLocation.place_name)
  return _internal_place_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocation::set_place_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.place_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GeoLocation.place_name)
}
inline std::string* GeoLocation::mutable_place_name() {
  std::string* _s = _internal_mutable_place_name();
  // @@protoc_insertion_point(field_mutable:sonet.note.GeoLocation.place_name)
  return _s;
}
inline const std::string& GeoLocation::_internal_place_name() const {
  return _impl_.place_name_.Get();
}
inline void GeoLocation::_internal_set_place_name(const std::string& value) {
  
  _impl_.place_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocation::_internal_mutable_place_name() {
  
  return _impl_.place_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocation::release_place_name() {
  // @@protoc_insertion_point(field_release:sonet.note.GeoLocation.place_name)
  return _impl_.place_name_.Release();
}
inline void GeoLocation::set_allocated_place_name(std::string* place_name) {
  if (place_name != nullptr) {
    
  } else {
    
  }
  _impl_.place_name_.SetAllocated(place_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.place_name_.IsDefault()) {
    _impl_.place_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GeoLocation.place_name)
}

// string country_code = 4;
inline void GeoLocation::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
}
inline const std::string& GeoLocation::country_code() const {
  // @@protoc_insertion_point(field_get:sonet.note.GeoLocation.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeoLocation::set_country_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GeoLocation.country_code)
}
inline std::string* GeoLocation::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:sonet.note.GeoLocation.country_code)
  return _s;
}
inline const std::string& GeoLocation::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void GeoLocation::_internal_set_country_code(const std::string& value) {
  
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* GeoLocation::_internal_mutable_country_code() {
  
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* GeoLocation::release_country_code() {
  // @@protoc_insertion_point(field_release:sonet.note.GeoLocation.country_code)
  return _impl_.country_code_.Release();
}
inline void GeoLocation::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    
  } else {
    
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GeoLocation.country_code)
}

// -------------------------------------------------------------------

// NoteMetrics

// int64 like_count = 1;
inline void NoteMetrics::clear_like_count() {
  _impl_.like_count_ = int64_t{0};
}
inline int64_t NoteMetrics::_internal_like_count() const {
  return _impl_.like_count_;
}
inline int64_t NoteMetrics::like_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.like_count)
  return _internal_like_count();
}
inline void NoteMetrics::_internal_set_like_count(int64_t value) {
  
  _impl_.like_count_ = value;
}
inline void NoteMetrics::set_like_count(int64_t value) {
  _internal_set_like_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.like_count)
}

// int64 renote_count = 2;
inline void NoteMetrics::clear_renote_count() {
  _impl_.renote_count_ = int64_t{0};
}
inline int64_t NoteMetrics::_internal_renote_count() const {
  return _impl_.renote_count_;
}
inline int64_t NoteMetrics::renote_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.renote_count)
  return _internal_renote_count();
}
inline void NoteMetrics::_internal_set_renote_count(int64_t value) {
  
  _impl_.renote_count_ = value;
}
inline void NoteMetrics::set_renote_count(int64_t value) {
  _internal_set_renote_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.renote_count)
}

// int64 reply_count = 3;
inline void NoteMetrics::clear_reply_count() {
  _impl_.reply_count_ = int64_t{0};
}
inline int64_t NoteMetrics::_internal_reply_count() const {
  return _impl_.reply_count_;
}
inline int64_t NoteMetrics::reply_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.reply_count)
  return _internal_reply_count();
}
inline void NoteMetrics::_internal_set_reply_count(int64_t value) {
  
  _impl_.reply_count_ = value;
}
inline void NoteMetrics::set_reply_count(int64_t value) {
  _internal_set_reply_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.reply_count)
}

// int64 quote_count = 4;
inline void NoteMetrics::clear_quote_count() {
  _impl_.quote_count_ = int64_t{0};
}
inline int64_t NoteMetrics::_internal_quote_count() const {
  return _impl_.quote_count_;
}
inline int64_t NoteMetrics::quote_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.quote_count)
  return _internal_quote_count();
}
inline void NoteMetrics::_internal_set_quote_count(int64_t value) {
  
  _impl_.quote_count_ = value;
}
inline void NoteMetrics::set_quote_count(int64_t value) {
  _internal_set_quote_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.quote_count)
}

// int64 bookmark_count = 5;
inline void NoteMetrics::clear_bookmark_count() {
  _impl_.bookmark_count_ = int64_t{0};
}
inline int64_t NoteMetrics::_internal_bookmark_count() const {
  return _impl_.bookmark_count_;
}
inline int64_t NoteMetrics::bookmark_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.bookmark_count)
  return _internal_bookmark_count();
}
inline void NoteMetrics::_internal_set_bookmark_count(int64_t value) {
  
  _impl_.bookmark_count_ = value;
}
inline void NoteMetrics::set_bookmark_count(int64_t value) {
  _internal_set_bookmark_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.bookmark_count)
}

// int64 view_count = 6;
inline void NoteMetrics::clear_view_count() {
  _impl_.view_count_ = int64_t{0};
}
inline int64_t NoteMetrics::_internal_view_count() const {
  return _impl_.view_count_;
}
inline int64_t NoteMetrics::view_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.view_count)
  return _internal_view_count();
}
inline void NoteMetrics::_internal_set_view_count(int64_t value) {
  
  _impl_.view_count_ = value;
}
inline void NoteMetrics::set_view_count(int64_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.view_count)
}

// double engagement_rate = 7;
inline void NoteMetrics::clear_engagement_rate() {
  _impl_.engagement_rate_ = 0;
}
inline double NoteMetrics::_internal_engagement_rate() const {
  return _impl_.engagement_rate_;
}
inline double NoteMetrics::engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.note.NoteMetrics.engagement_rate)
  return _internal_engagement_rate();
}
inline void NoteMetrics::_internal_set_engagement_rate(double value) {
  
  _impl_.engagement_rate_ = value;
}
inline void NoteMetrics::set_engagement_rate(double value) {
  _internal_set_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.note.NoteMetrics.engagement_rate)
}

// -------------------------------------------------------------------

// Note

// string id = 1;
inline void Note::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Note::id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.id)
}
inline std::string* Note::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.id)
  return _s;
}
inline const std::string& Note::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Note::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.id)
  return _impl_.id_.Release();
}
inline void Note::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.id)
}

// string author_id = 2;
inline void Note::clear_author_id() {
  _impl_.author_id_.ClearToEmpty();
}
inline const std::string& Note::author_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.author_id)
  return _internal_author_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_author_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.author_id)
}
inline std::string* Note::mutable_author_id() {
  std::string* _s = _internal_mutable_author_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.author_id)
  return _s;
}
inline const std::string& Note::_internal_author_id() const {
  return _impl_.author_id_.Get();
}
inline void Note::_internal_set_author_id(const std::string& value) {
  
  _impl_.author_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_author_id() {
  
  return _impl_.author_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_author_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.author_id)
  return _impl_.author_id_.Release();
}
inline void Note::set_allocated_author_id(std::string* author_id) {
  if (author_id != nullptr) {
    
  } else {
    
  }
  _impl_.author_id_.SetAllocated(author_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_id_.IsDefault()) {
    _impl_.author_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.author_id)
}

// string text = 3;
inline void Note::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Note::text() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.text)
}
inline std::string* Note::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.text)
  return _s;
}
inline const std::string& Note::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Note::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_text() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.text)
  return _impl_.text_.Release();
}
inline void Note::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.text)
}

// .sonet.note.NoteVisibility visibility = 4;
inline void Note::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::sonet::note::NoteVisibility Note::_internal_visibility() const {
  return static_cast< ::sonet::note::NoteVisibility >(_impl_.visibility_);
}
inline ::sonet::note::NoteVisibility Note::visibility() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.visibility)
  return _internal_visibility();
}
inline void Note::_internal_set_visibility(::sonet::note::NoteVisibility value) {
  
  _impl_.visibility_ = value;
}
inline void Note::set_visibility(::sonet::note::NoteVisibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:sonet.note.Note.visibility)
}

// .sonet.note.ContentWarning content_warning = 5;
inline void Note::clear_content_warning() {
  _impl_.content_warning_ = 0;
}
inline ::sonet::note::ContentWarning Note::_internal_content_warning() const {
  return static_cast< ::sonet::note::ContentWarning >(_impl_.content_warning_);
}
inline ::sonet::note::ContentWarning Note::content_warning() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.content_warning)
  return _internal_content_warning();
}
inline void Note::_internal_set_content_warning(::sonet::note::ContentWarning value) {
  
  _impl_.content_warning_ = value;
}
inline void Note::set_content_warning(::sonet::note::ContentWarning value) {
  _internal_set_content_warning(value);
  // @@protoc_insertion_point(field_set:sonet.note.Note.content_warning)
}

// repeated string media_ids = 6;
inline int Note::_internal_media_ids_size() const {
  return _impl_.media_ids_.size();
}
inline int Note::media_ids_size() const {
  return _internal_media_ids_size();
}
inline void Note::clear_media_ids() {
  _impl_.media_ids_.Clear();
}
inline std::string* Note::add_media_ids() {
  std::string* _s = _internal_add_media_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.note.Note.media_ids)
  return _s;
}
inline const std::string& Note::_internal_media_ids(int index) const {
  return _impl_.media_ids_.Get(index);
}
inline const std::string& Note::media_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.media_ids)
  return _internal_media_ids(index);
}
inline std::string* Note::mutable_media_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.media_ids)
  return _impl_.media_ids_.Mutable(index);
}
inline void Note::set_media_ids(int index, const std::string& value) {
  _impl_.media_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.note.Note.media_ids)
}
inline void Note::set_media_ids(int index, std::string&& value) {
  _impl_.media_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.note.Note.media_ids)
}
inline void Note::set_media_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.media_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.note.Note.media_ids)
}
inline void Note::set_media_ids(int index, const char* value, size_t size) {
  _impl_.media_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.note.Note.media_ids)
}
inline std::string* Note::_internal_add_media_ids() {
  return _impl_.media_ids_.Add();
}
inline void Note::add_media_ids(const std::string& value) {
  _impl_.media_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.note.Note.media_ids)
}
inline void Note::add_media_ids(std::string&& value) {
  _impl_.media_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.note.Note.media_ids)
}
inline void Note::add_media_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.media_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.note.Note.media_ids)
}
inline void Note::add_media_ids(const char* value, size_t size) {
  _impl_.media_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.note.Note.media_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Note::media_ids() const {
  // @@protoc_insertion_point(field_list:sonet.note.Note.media_ids)
  return _impl_.media_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Note::mutable_media_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.Note.media_ids)
  return &_impl_.media_ids_;
}

// .sonet.note.NoteEntities entities = 7;
inline bool Note::_internal_has_entities() const {
  return this != internal_default_instance() && _impl_.entities_ != nullptr;
}
inline bool Note::has_entities() const {
  return _internal_has_entities();
}
inline void Note::clear_entities() {
  if (GetArenaForAllocation() == nullptr && _impl_.entities_ != nullptr) {
    delete _impl_.entities_;
  }
  _impl_.entities_ = nullptr;
}
inline const ::sonet::note::NoteEntities& Note::_internal_entities() const {
  const ::sonet::note::NoteEntities* p = _impl_.entities_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::NoteEntities&>(
      ::sonet::note::_NoteEntities_default_instance_);
}
inline const ::sonet::note::NoteEntities& Note::entities() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.entities)
  return _internal_entities();
}
inline void Note::unsafe_arena_set_allocated_entities(
    ::sonet::note::NoteEntities* entities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entities_);
  }
  _impl_.entities_ = entities;
  if (entities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.Note.entities)
}
inline ::sonet::note::NoteEntities* Note::release_entities() {
  
  ::sonet::note::NoteEntities* temp = _impl_.entities_;
  _impl_.entities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::NoteEntities* Note::unsafe_arena_release_entities() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.entities)
  
  ::sonet::note::NoteEntities* temp = _impl_.entities_;
  _impl_.entities_ = nullptr;
  return temp;
}
inline ::sonet::note::NoteEntities* Note::_internal_mutable_entities() {
  
  if (_impl_.entities_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::NoteEntities>(GetArenaForAllocation());
    _impl_.entities_ = p;
  }
  return _impl_.entities_;
}
inline ::sonet::note::NoteEntities* Note::mutable_entities() {
  ::sonet::note::NoteEntities* _msg = _internal_mutable_entities();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.entities)
  return _msg;
}
inline void Note::set_allocated_entities(::sonet::note::NoteEntities* entities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entities_;
  }
  if (entities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entities);
    if (message_arena != submessage_arena) {
      entities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entities, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entities_ = entities;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.entities)
}

// .sonet.note.GeoLocation location = 8;
inline bool Note::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Note::has_location() const {
  return _internal_has_location();
}
inline void Note::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::sonet::note::GeoLocation& Note::_internal_location() const {
  const ::sonet::note::GeoLocation* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::GeoLocation&>(
      ::sonet::note::_GeoLocation_default_instance_);
}
inline const ::sonet::note::GeoLocation& Note::location() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.location)
  return _internal_location();
}
inline void Note::unsafe_arena_set_allocated_location(
    ::sonet::note::GeoLocation* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.Note.location)
}
inline ::sonet::note::GeoLocation* Note::release_location() {
  
  ::sonet::note::GeoLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::GeoLocation* Note::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.location)
  
  ::sonet::note::GeoLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::sonet::note::GeoLocation* Note::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::GeoLocation>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::sonet::note::GeoLocation* Note::mutable_location() {
  ::sonet::note::GeoLocation* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.location)
  return _msg;
}
inline void Note::set_allocated_location(::sonet::note::GeoLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.location)
}

// string reply_to_note_id = 9;
inline void Note::clear_reply_to_note_id() {
  _impl_.reply_to_note_id_.ClearToEmpty();
}
inline const std::string& Note::reply_to_note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.reply_to_note_id)
  return _internal_reply_to_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_reply_to_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.reply_to_note_id)
}
inline std::string* Note::mutable_reply_to_note_id() {
  std::string* _s = _internal_mutable_reply_to_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.reply_to_note_id)
  return _s;
}
inline const std::string& Note::_internal_reply_to_note_id() const {
  return _impl_.reply_to_note_id_.Get();
}
inline void Note::_internal_set_reply_to_note_id(const std::string& value) {
  
  _impl_.reply_to_note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_reply_to_note_id() {
  
  return _impl_.reply_to_note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_reply_to_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.reply_to_note_id)
  return _impl_.reply_to_note_id_.Release();
}
inline void Note::set_allocated_reply_to_note_id(std::string* reply_to_note_id) {
  if (reply_to_note_id != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_note_id_.SetAllocated(reply_to_note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_note_id_.IsDefault()) {
    _impl_.reply_to_note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.reply_to_note_id)
}

// string reply_to_user_id = 10;
inline void Note::clear_reply_to_user_id() {
  _impl_.reply_to_user_id_.ClearToEmpty();
}
inline const std::string& Note::reply_to_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.reply_to_user_id)
  return _internal_reply_to_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_reply_to_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.reply_to_user_id)
}
inline std::string* Note::mutable_reply_to_user_id() {
  std::string* _s = _internal_mutable_reply_to_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.reply_to_user_id)
  return _s;
}
inline const std::string& Note::_internal_reply_to_user_id() const {
  return _impl_.reply_to_user_id_.Get();
}
inline void Note::_internal_set_reply_to_user_id(const std::string& value) {
  
  _impl_.reply_to_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_reply_to_user_id() {
  
  return _impl_.reply_to_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_reply_to_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.reply_to_user_id)
  return _impl_.reply_to_user_id_.Release();
}
inline void Note::set_allocated_reply_to_user_id(std::string* reply_to_user_id) {
  if (reply_to_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_user_id_.SetAllocated(reply_to_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_user_id_.IsDefault()) {
    _impl_.reply_to_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.reply_to_user_id)
}

// string thread_root_id = 11;
inline void Note::clear_thread_root_id() {
  _impl_.thread_root_id_.ClearToEmpty();
}
inline const std::string& Note::thread_root_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.thread_root_id)
  return _internal_thread_root_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_thread_root_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thread_root_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.thread_root_id)
}
inline std::string* Note::mutable_thread_root_id() {
  std::string* _s = _internal_mutable_thread_root_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.thread_root_id)
  return _s;
}
inline const std::string& Note::_internal_thread_root_id() const {
  return _impl_.thread_root_id_.Get();
}
inline void Note::_internal_set_thread_root_id(const std::string& value) {
  
  _impl_.thread_root_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_thread_root_id() {
  
  return _impl_.thread_root_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_thread_root_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.thread_root_id)
  return _impl_.thread_root_id_.Release();
}
inline void Note::set_allocated_thread_root_id(std::string* thread_root_id) {
  if (thread_root_id != nullptr) {
    
  } else {
    
  }
  _impl_.thread_root_id_.SetAllocated(thread_root_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thread_root_id_.IsDefault()) {
    _impl_.thread_root_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.thread_root_id)
}

// string renoted_note_id = 12;
inline void Note::clear_renoted_note_id() {
  _impl_.renoted_note_id_.ClearToEmpty();
}
inline const std::string& Note::renoted_note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.renoted_note_id)
  return _internal_renoted_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_renoted_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.renoted_note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.renoted_note_id)
}
inline std::string* Note::mutable_renoted_note_id() {
  std::string* _s = _internal_mutable_renoted_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.renoted_note_id)
  return _s;
}
inline const std::string& Note::_internal_renoted_note_id() const {
  return _impl_.renoted_note_id_.Get();
}
inline void Note::_internal_set_renoted_note_id(const std::string& value) {
  
  _impl_.renoted_note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_renoted_note_id() {
  
  return _impl_.renoted_note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_renoted_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.renoted_note_id)
  return _impl_.renoted_note_id_.Release();
}
inline void Note::set_allocated_renoted_note_id(std::string* renoted_note_id) {
  if (renoted_note_id != nullptr) {
    
  } else {
    
  }
  _impl_.renoted_note_id_.SetAllocated(renoted_note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.renoted_note_id_.IsDefault()) {
    _impl_.renoted_note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.renoted_note_id)
}

// string renoted_user_id = 13;
inline void Note::clear_renoted_user_id() {
  _impl_.renoted_user_id_.ClearToEmpty();
}
inline const std::string& Note::renoted_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.renoted_user_id)
  return _internal_renoted_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_renoted_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.renoted_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.renoted_user_id)
}
inline std::string* Note::mutable_renoted_user_id() {
  std::string* _s = _internal_mutable_renoted_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.renoted_user_id)
  return _s;
}
inline const std::string& Note::_internal_renoted_user_id() const {
  return _impl_.renoted_user_id_.Get();
}
inline void Note::_internal_set_renoted_user_id(const std::string& value) {
  
  _impl_.renoted_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_renoted_user_id() {
  
  return _impl_.renoted_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_renoted_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.renoted_user_id)
  return _impl_.renoted_user_id_.Release();
}
inline void Note::set_allocated_renoted_user_id(std::string* renoted_user_id) {
  if (renoted_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.renoted_user_id_.SetAllocated(renoted_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.renoted_user_id_.IsDefault()) {
    _impl_.renoted_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.renoted_user_id)
}

// bool is_quote_renote = 14;
inline void Note::clear_is_quote_renote() {
  _impl_.is_quote_renote_ = false;
}
inline bool Note::_internal_is_quote_renote() const {
  return _impl_.is_quote_renote_;
}
inline bool Note::is_quote_renote() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.is_quote_renote)
  return _internal_is_quote_renote();
}
inline void Note::_internal_set_is_quote_renote(bool value) {
  
  _impl_.is_quote_renote_ = value;
}
inline void Note::set_is_quote_renote(bool value) {
  _internal_set_is_quote_renote(value);
  // @@protoc_insertion_point(field_set:sonet.note.Note.is_quote_renote)
}

// .sonet.common.Timestamp created_at = 15;
inline bool Note::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool Note::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::sonet::common::Timestamp& Note::_internal_created_at() const {
  const ::sonet::common::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& Note::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.created_at)
  return _internal_created_at();
}
inline void Note::unsafe_arena_set_allocated_created_at(
    ::sonet::common::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.Note.created_at)
}
inline ::sonet::common::Timestamp* Note::release_created_at() {
  
  ::sonet::common::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* Note::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.created_at)
  
  ::sonet::common::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* Note::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::sonet::common::Timestamp* Note::mutable_created_at() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.created_at)
  return _msg;
}
inline void Note::set_allocated_created_at(::sonet::common::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.created_at)
}

// .sonet.common.Timestamp updated_at = 16;
inline bool Note::_internal_has_updated_at() const {
  return this != internal_default_instance() && _impl_.updated_at_ != nullptr;
}
inline bool Note::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::sonet::common::Timestamp& Note::_internal_updated_at() const {
  const ::sonet::common::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& Note::updated_at() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.updated_at)
  return _internal_updated_at();
}
inline void Note::unsafe_arena_set_allocated_updated_at(
    ::sonet::common::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.Note.updated_at)
}
inline ::sonet::common::Timestamp* Note::release_updated_at() {
  
  ::sonet::common::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* Note::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.updated_at)
  
  ::sonet::common::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* Note::_internal_mutable_updated_at() {
  
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::sonet::common::Timestamp* Note::mutable_updated_at() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.updated_at)
  return _msg;
}
inline void Note::set_allocated_updated_at(::sonet::common::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.updated_at)
}

// .sonet.common.Timestamp deleted_at = 17;
inline bool Note::_internal_has_deleted_at() const {
  return this != internal_default_instance() && _impl_.deleted_at_ != nullptr;
}
inline bool Note::has_deleted_at() const {
  return _internal_has_deleted_at();
}
inline const ::sonet::common::Timestamp& Note::_internal_deleted_at() const {
  const ::sonet::common::Timestamp* p = _impl_.deleted_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& Note::deleted_at() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.deleted_at)
  return _internal_deleted_at();
}
inline void Note::unsafe_arena_set_allocated_deleted_at(
    ::sonet::common::Timestamp* deleted_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deleted_at_);
  }
  _impl_.deleted_at_ = deleted_at;
  if (deleted_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.Note.deleted_at)
}
inline ::sonet::common::Timestamp* Note::release_deleted_at() {
  
  ::sonet::common::Timestamp* temp = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* Note::unsafe_arena_release_deleted_at() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.deleted_at)
  
  ::sonet::common::Timestamp* temp = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* Note::_internal_mutable_deleted_at() {
  
  if (_impl_.deleted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.deleted_at_ = p;
  }
  return _impl_.deleted_at_;
}
inline ::sonet::common::Timestamp* Note::mutable_deleted_at() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_deleted_at();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.deleted_at)
  return _msg;
}
inline void Note::set_allocated_deleted_at(::sonet::common::Timestamp* deleted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deleted_at_);
  }
  if (deleted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at));
    if (message_arena != submessage_arena) {
      deleted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.deleted_at_ = deleted_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.deleted_at)
}

// .sonet.note.NoteMetrics metrics = 18;
inline bool Note::_internal_has_metrics() const {
  return this != internal_default_instance() && _impl_.metrics_ != nullptr;
}
inline bool Note::has_metrics() const {
  return _internal_has_metrics();
}
inline void Note::clear_metrics() {
  if (GetArenaForAllocation() == nullptr && _impl_.metrics_ != nullptr) {
    delete _impl_.metrics_;
  }
  _impl_.metrics_ = nullptr;
}
inline const ::sonet::note::NoteMetrics& Note::_internal_metrics() const {
  const ::sonet::note::NoteMetrics* p = _impl_.metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::NoteMetrics&>(
      ::sonet::note::_NoteMetrics_default_instance_);
}
inline const ::sonet::note::NoteMetrics& Note::metrics() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.metrics)
  return _internal_metrics();
}
inline void Note::unsafe_arena_set_allocated_metrics(
    ::sonet::note::NoteMetrics* metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metrics_);
  }
  _impl_.metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.Note.metrics)
}
inline ::sonet::note::NoteMetrics* Note::release_metrics() {
  
  ::sonet::note::NoteMetrics* temp = _impl_.metrics_;
  _impl_.metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::NoteMetrics* Note::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.metrics)
  
  ::sonet::note::NoteMetrics* temp = _impl_.metrics_;
  _impl_.metrics_ = nullptr;
  return temp;
}
inline ::sonet::note::NoteMetrics* Note::_internal_mutable_metrics() {
  
  if (_impl_.metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::NoteMetrics>(GetArenaForAllocation());
    _impl_.metrics_ = p;
  }
  return _impl_.metrics_;
}
inline ::sonet::note::NoteMetrics* Note::mutable_metrics() {
  ::sonet::note::NoteMetrics* _msg = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.metrics)
  return _msg;
}
inline void Note::set_allocated_metrics(::sonet::note::NoteMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.metrics)
}

// string language_code = 19;
inline void Note::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& Note::language_code() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_language_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.language_code)
}
inline std::string* Note::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.language_code)
  return _s;
}
inline const std::string& Note::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void Note::_internal_set_language_code(const std::string& value) {
  
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_language_code() {
  
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_language_code() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.language_code)
  return _impl_.language_code_.Release();
}
inline void Note::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.language_code)
}

// repeated string flags = 20;
inline int Note::_internal_flags_size() const {
  return _impl_.flags_.size();
}
inline int Note::flags_size() const {
  return _internal_flags_size();
}
inline void Note::clear_flags() {
  _impl_.flags_.Clear();
}
inline std::string* Note::add_flags() {
  std::string* _s = _internal_add_flags();
  // @@protoc_insertion_point(field_add_mutable:sonet.note.Note.flags)
  return _s;
}
inline const std::string& Note::_internal_flags(int index) const {
  return _impl_.flags_.Get(index);
}
inline const std::string& Note::flags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.flags)
  return _internal_flags(index);
}
inline std::string* Note::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.flags)
  return _impl_.flags_.Mutable(index);
}
inline void Note::set_flags(int index, const std::string& value) {
  _impl_.flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.note.Note.flags)
}
inline void Note::set_flags(int index, std::string&& value) {
  _impl_.flags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.note.Note.flags)
}
inline void Note::set_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.note.Note.flags)
}
inline void Note::set_flags(int index, const char* value, size_t size) {
  _impl_.flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.note.Note.flags)
}
inline std::string* Note::_internal_add_flags() {
  return _impl_.flags_.Add();
}
inline void Note::add_flags(const std::string& value) {
  _impl_.flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.note.Note.flags)
}
inline void Note::add_flags(std::string&& value) {
  _impl_.flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.note.Note.flags)
}
inline void Note::add_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.note.Note.flags)
}
inline void Note::add_flags(const char* value, size_t size) {
  _impl_.flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.note.Note.flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Note::flags() const {
  // @@protoc_insertion_point(field_list:sonet.note.Note.flags)
  return _impl_.flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Note::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.Note.flags)
  return &_impl_.flags_;
}

// bool is_verified_content = 21;
inline void Note::clear_is_verified_content() {
  _impl_.is_verified_content_ = false;
}
inline bool Note::_internal_is_verified_content() const {
  return _impl_.is_verified_content_;
}
inline bool Note::is_verified_content() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.is_verified_content)
  return _internal_is_verified_content();
}
inline void Note::_internal_set_is_verified_content(bool value) {
  
  _impl_.is_verified_content_ = value;
}
inline void Note::set_is_verified_content(bool value) {
  _internal_set_is_verified_content(value);
  // @@protoc_insertion_point(field_set:sonet.note.Note.is_verified_content)
}

// string client_name = 22;
inline void Note::clear_client_name() {
  _impl_.client_name_.ClearToEmpty();
}
inline const std::string& Note::client_name() const {
  // @@protoc_insertion_point(field_get:sonet.note.Note.client_name)
  return _internal_client_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Note::set_client_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.Note.client_name)
}
inline std::string* Note::mutable_client_name() {
  std::string* _s = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:sonet.note.Note.client_name)
  return _s;
}
inline const std::string& Note::_internal_client_name() const {
  return _impl_.client_name_.Get();
}
inline void Note::_internal_set_client_name(const std::string& value) {
  
  _impl_.client_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Note::_internal_mutable_client_name() {
  
  return _impl_.client_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Note::release_client_name() {
  // @@protoc_insertion_point(field_release:sonet.note.Note.client_name)
  return _impl_.client_name_.Release();
}
inline void Note::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  _impl_.client_name_.SetAllocated(client_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_name_.IsDefault()) {
    _impl_.client_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.Note.client_name)
}

// -------------------------------------------------------------------

// UserNoteInteraction

// string user_id = 1;
inline void UserNoteInteraction::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserNoteInteraction::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserNoteInteraction::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.UserNoteInteraction.user_id)
}
inline std::string* UserNoteInteraction::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.UserNoteInteraction.user_id)
  return _s;
}
inline const std::string& UserNoteInteraction::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserNoteInteraction::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserNoteInteraction::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserNoteInteraction::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.UserNoteInteraction.user_id)
  return _impl_.user_id_.Release();
}
inline void UserNoteInteraction::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.UserNoteInteraction.user_id)
}

// string note_id = 2;
inline void UserNoteInteraction::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& UserNoteInteraction::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserNoteInteraction::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.UserNoteInteraction.note_id)
}
inline std::string* UserNoteInteraction::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.UserNoteInteraction.note_id)
  return _s;
}
inline const std::string& UserNoteInteraction::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void UserNoteInteraction::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserNoteInteraction::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserNoteInteraction::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.UserNoteInteraction.note_id)
  return _impl_.note_id_.Release();
}
inline void UserNoteInteraction::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.UserNoteInteraction.note_id)
}

// bool has_liked = 3;
inline void UserNoteInteraction::clear_has_liked() {
  _impl_.has_liked_ = false;
}
inline bool UserNoteInteraction::_internal_has_liked() const {
  return _impl_.has_liked_;
}
inline bool UserNoteInteraction::has_liked() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.has_liked)
  return _internal_has_liked();
}
inline void UserNoteInteraction::_internal_set_has_liked(bool value) {
  
  _impl_.has_liked_ = value;
}
inline void UserNoteInteraction::set_has_liked(bool value) {
  _internal_set_has_liked(value);
  // @@protoc_insertion_point(field_set:sonet.note.UserNoteInteraction.has_liked)
}

// bool has_renoted = 4;
inline void UserNoteInteraction::clear_has_renoted() {
  _impl_.has_renoted_ = false;
}
inline bool UserNoteInteraction::_internal_has_renoted() const {
  return _impl_.has_renoted_;
}
inline bool UserNoteInteraction::has_renoted() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.has_renoted)
  return _internal_has_renoted();
}
inline void UserNoteInteraction::_internal_set_has_renoted(bool value) {
  
  _impl_.has_renoted_ = value;
}
inline void UserNoteInteraction::set_has_renoted(bool value) {
  _internal_set_has_renoted(value);
  // @@protoc_insertion_point(field_set:sonet.note.UserNoteInteraction.has_renoted)
}

// bool has_bookmarked = 5;
inline void UserNoteInteraction::clear_has_bookmarked() {
  _impl_.has_bookmarked_ = false;
}
inline bool UserNoteInteraction::_internal_has_bookmarked() const {
  return _impl_.has_bookmarked_;
}
inline bool UserNoteInteraction::has_bookmarked() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.has_bookmarked)
  return _internal_has_bookmarked();
}
inline void UserNoteInteraction::_internal_set_has_bookmarked(bool value) {
  
  _impl_.has_bookmarked_ = value;
}
inline void UserNoteInteraction::set_has_bookmarked(bool value) {
  _internal_set_has_bookmarked(value);
  // @@protoc_insertion_point(field_set:sonet.note.UserNoteInteraction.has_bookmarked)
}

// bool has_reported = 6;
inline void UserNoteInteraction::clear_has_reported() {
  _impl_.has_reported_ = false;
}
inline bool UserNoteInteraction::_internal_has_reported() const {
  return _impl_.has_reported_;
}
inline bool UserNoteInteraction::has_reported() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.has_reported)
  return _internal_has_reported();
}
inline void UserNoteInteraction::_internal_set_has_reported(bool value) {
  
  _impl_.has_reported_ = value;
}
inline void UserNoteInteraction::set_has_reported(bool value) {
  _internal_set_has_reported(value);
  // @@protoc_insertion_point(field_set:sonet.note.UserNoteInteraction.has_reported)
}

// .sonet.common.Timestamp last_viewed_at = 7;
inline bool UserNoteInteraction::_internal_has_last_viewed_at() const {
  return this != internal_default_instance() && _impl_.last_viewed_at_ != nullptr;
}
inline bool UserNoteInteraction::has_last_viewed_at() const {
  return _internal_has_last_viewed_at();
}
inline const ::sonet::common::Timestamp& UserNoteInteraction::_internal_last_viewed_at() const {
  const ::sonet::common::Timestamp* p = _impl_.last_viewed_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& UserNoteInteraction::last_viewed_at() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.last_viewed_at)
  return _internal_last_viewed_at();
}
inline void UserNoteInteraction::unsafe_arena_set_allocated_last_viewed_at(
    ::sonet::common::Timestamp* last_viewed_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_viewed_at_);
  }
  _impl_.last_viewed_at_ = last_viewed_at;
  if (last_viewed_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.UserNoteInteraction.last_viewed_at)
}
inline ::sonet::common::Timestamp* UserNoteInteraction::release_last_viewed_at() {
  
  ::sonet::common::Timestamp* temp = _impl_.last_viewed_at_;
  _impl_.last_viewed_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* UserNoteInteraction::unsafe_arena_release_last_viewed_at() {
  // @@protoc_insertion_point(field_release:sonet.note.UserNoteInteraction.last_viewed_at)
  
  ::sonet::common::Timestamp* temp = _impl_.last_viewed_at_;
  _impl_.last_viewed_at_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* UserNoteInteraction::_internal_mutable_last_viewed_at() {
  
  if (_impl_.last_viewed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.last_viewed_at_ = p;
  }
  return _impl_.last_viewed_at_;
}
inline ::sonet::common::Timestamp* UserNoteInteraction::mutable_last_viewed_at() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_last_viewed_at();
  // @@protoc_insertion_point(field_mutable:sonet.note.UserNoteInteraction.last_viewed_at)
  return _msg;
}
inline void UserNoteInteraction::set_allocated_last_viewed_at(::sonet::common::Timestamp* last_viewed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_viewed_at_);
  }
  if (last_viewed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_viewed_at));
    if (message_arena != submessage_arena) {
      last_viewed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_viewed_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_viewed_at_ = last_viewed_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.UserNoteInteraction.last_viewed_at)
}

// .sonet.common.Timestamp interacted_at = 8;
inline bool UserNoteInteraction::_internal_has_interacted_at() const {
  return this != internal_default_instance() && _impl_.interacted_at_ != nullptr;
}
inline bool UserNoteInteraction::has_interacted_at() const {
  return _internal_has_interacted_at();
}
inline const ::sonet::common::Timestamp& UserNoteInteraction::_internal_interacted_at() const {
  const ::sonet::common::Timestamp* p = _impl_.interacted_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& UserNoteInteraction::interacted_at() const {
  // @@protoc_insertion_point(field_get:sonet.note.UserNoteInteraction.interacted_at)
  return _internal_interacted_at();
}
inline void UserNoteInteraction::unsafe_arena_set_allocated_interacted_at(
    ::sonet::common::Timestamp* interacted_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interacted_at_);
  }
  _impl_.interacted_at_ = interacted_at;
  if (interacted_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.UserNoteInteraction.interacted_at)
}
inline ::sonet::common::Timestamp* UserNoteInteraction::release_interacted_at() {
  
  ::sonet::common::Timestamp* temp = _impl_.interacted_at_;
  _impl_.interacted_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* UserNoteInteraction::unsafe_arena_release_interacted_at() {
  // @@protoc_insertion_point(field_release:sonet.note.UserNoteInteraction.interacted_at)
  
  ::sonet::common::Timestamp* temp = _impl_.interacted_at_;
  _impl_.interacted_at_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* UserNoteInteraction::_internal_mutable_interacted_at() {
  
  if (_impl_.interacted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.interacted_at_ = p;
  }
  return _impl_.interacted_at_;
}
inline ::sonet::common::Timestamp* UserNoteInteraction::mutable_interacted_at() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_interacted_at();
  // @@protoc_insertion_point(field_mutable:sonet.note.UserNoteInteraction.interacted_at)
  return _msg;
}
inline void UserNoteInteraction::set_allocated_interacted_at(::sonet::common::Timestamp* interacted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interacted_at_);
  }
  if (interacted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interacted_at));
    if (message_arena != submessage_arena) {
      interacted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interacted_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interacted_at_ = interacted_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.UserNoteInteraction.interacted_at)
}

// -------------------------------------------------------------------

// CreateNoteRequest

// string author_id = 1;
inline void CreateNoteRequest::clear_author_id() {
  _impl_.author_id_.ClearToEmpty();
}
inline const std::string& CreateNoteRequest::author_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.author_id)
  return _internal_author_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteRequest::set_author_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.author_id)
}
inline std::string* CreateNoteRequest::mutable_author_id() {
  std::string* _s = _internal_mutable_author_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.author_id)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_author_id() const {
  return _impl_.author_id_.Get();
}
inline void CreateNoteRequest::_internal_set_author_id(const std::string& value) {
  
  _impl_.author_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::_internal_mutable_author_id() {
  
  return _impl_.author_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::release_author_id() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.author_id)
  return _impl_.author_id_.Release();
}
inline void CreateNoteRequest::set_allocated_author_id(std::string* author_id) {
  if (author_id != nullptr) {
    
  } else {
    
  }
  _impl_.author_id_.SetAllocated(author_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_id_.IsDefault()) {
    _impl_.author_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.author_id)
}

// string text = 2;
inline void CreateNoteRequest::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CreateNoteRequest::text() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteRequest::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.text)
}
inline std::string* CreateNoteRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.text)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CreateNoteRequest::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::release_text() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.text)
  return _impl_.text_.Release();
}
inline void CreateNoteRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.text)
}

// .sonet.note.NoteVisibility visibility = 3;
inline void CreateNoteRequest::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline ::sonet::note::NoteVisibility CreateNoteRequest::_internal_visibility() const {
  return static_cast< ::sonet::note::NoteVisibility >(_impl_.visibility_);
}
inline ::sonet::note::NoteVisibility CreateNoteRequest::visibility() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.visibility)
  return _internal_visibility();
}
inline void CreateNoteRequest::_internal_set_visibility(::sonet::note::NoteVisibility value) {
  
  _impl_.visibility_ = value;
}
inline void CreateNoteRequest::set_visibility(::sonet::note::NoteVisibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.visibility)
}

// .sonet.note.ContentWarning content_warning = 4;
inline void CreateNoteRequest::clear_content_warning() {
  _impl_.content_warning_ = 0;
}
inline ::sonet::note::ContentWarning CreateNoteRequest::_internal_content_warning() const {
  return static_cast< ::sonet::note::ContentWarning >(_impl_.content_warning_);
}
inline ::sonet::note::ContentWarning CreateNoteRequest::content_warning() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.content_warning)
  return _internal_content_warning();
}
inline void CreateNoteRequest::_internal_set_content_warning(::sonet::note::ContentWarning value) {
  
  _impl_.content_warning_ = value;
}
inline void CreateNoteRequest::set_content_warning(::sonet::note::ContentWarning value) {
  _internal_set_content_warning(value);
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.content_warning)
}

// repeated string media_ids = 5;
inline int CreateNoteRequest::_internal_media_ids_size() const {
  return _impl_.media_ids_.size();
}
inline int CreateNoteRequest::media_ids_size() const {
  return _internal_media_ids_size();
}
inline void CreateNoteRequest::clear_media_ids() {
  _impl_.media_ids_.Clear();
}
inline std::string* CreateNoteRequest::add_media_ids() {
  std::string* _s = _internal_add_media_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.note.CreateNoteRequest.media_ids)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_media_ids(int index) const {
  return _impl_.media_ids_.Get(index);
}
inline const std::string& CreateNoteRequest::media_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.media_ids)
  return _internal_media_ids(index);
}
inline std::string* CreateNoteRequest::mutable_media_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.media_ids)
  return _impl_.media_ids_.Mutable(index);
}
inline void CreateNoteRequest::set_media_ids(int index, const std::string& value) {
  _impl_.media_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.media_ids)
}
inline void CreateNoteRequest::set_media_ids(int index, std::string&& value) {
  _impl_.media_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.media_ids)
}
inline void CreateNoteRequest::set_media_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.media_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.note.CreateNoteRequest.media_ids)
}
inline void CreateNoteRequest::set_media_ids(int index, const char* value, size_t size) {
  _impl_.media_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.note.CreateNoteRequest.media_ids)
}
inline std::string* CreateNoteRequest::_internal_add_media_ids() {
  return _impl_.media_ids_.Add();
}
inline void CreateNoteRequest::add_media_ids(const std::string& value) {
  _impl_.media_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.note.CreateNoteRequest.media_ids)
}
inline void CreateNoteRequest::add_media_ids(std::string&& value) {
  _impl_.media_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.note.CreateNoteRequest.media_ids)
}
inline void CreateNoteRequest::add_media_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.media_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.note.CreateNoteRequest.media_ids)
}
inline void CreateNoteRequest::add_media_ids(const char* value, size_t size) {
  _impl_.media_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.note.CreateNoteRequest.media_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateNoteRequest::media_ids() const {
  // @@protoc_insertion_point(field_list:sonet.note.CreateNoteRequest.media_ids)
  return _impl_.media_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateNoteRequest::mutable_media_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.CreateNoteRequest.media_ids)
  return &_impl_.media_ids_;
}

// .sonet.note.GeoLocation location = 6;
inline bool CreateNoteRequest::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool CreateNoteRequest::has_location() const {
  return _internal_has_location();
}
inline void CreateNoteRequest::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::sonet::note::GeoLocation& CreateNoteRequest::_internal_location() const {
  const ::sonet::note::GeoLocation* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::GeoLocation&>(
      ::sonet::note::_GeoLocation_default_instance_);
}
inline const ::sonet::note::GeoLocation& CreateNoteRequest::location() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.location)
  return _internal_location();
}
inline void CreateNoteRequest::unsafe_arena_set_allocated_location(
    ::sonet::note::GeoLocation* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.CreateNoteRequest.location)
}
inline ::sonet::note::GeoLocation* CreateNoteRequest::release_location() {
  
  ::sonet::note::GeoLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::GeoLocation* CreateNoteRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.location)
  
  ::sonet::note::GeoLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::sonet::note::GeoLocation* CreateNoteRequest::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::GeoLocation>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::sonet::note::GeoLocation* CreateNoteRequest::mutable_location() {
  ::sonet::note::GeoLocation* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.location)
  return _msg;
}
inline void CreateNoteRequest::set_allocated_location(::sonet::note::GeoLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.location)
}

// string reply_to_note_id = 7;
inline void CreateNoteRequest::clear_reply_to_note_id() {
  _impl_.reply_to_note_id_.ClearToEmpty();
}
inline const std::string& CreateNoteRequest::reply_to_note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.reply_to_note_id)
  return _internal_reply_to_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteRequest::set_reply_to_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.reply_to_note_id)
}
inline std::string* CreateNoteRequest::mutable_reply_to_note_id() {
  std::string* _s = _internal_mutable_reply_to_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.reply_to_note_id)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_reply_to_note_id() const {
  return _impl_.reply_to_note_id_.Get();
}
inline void CreateNoteRequest::_internal_set_reply_to_note_id(const std::string& value) {
  
  _impl_.reply_to_note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::_internal_mutable_reply_to_note_id() {
  
  return _impl_.reply_to_note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::release_reply_to_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.reply_to_note_id)
  return _impl_.reply_to_note_id_.Release();
}
inline void CreateNoteRequest::set_allocated_reply_to_note_id(std::string* reply_to_note_id) {
  if (reply_to_note_id != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_note_id_.SetAllocated(reply_to_note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_note_id_.IsDefault()) {
    _impl_.reply_to_note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.reply_to_note_id)
}

// string renoted_note_id = 8;
inline void CreateNoteRequest::clear_renoted_note_id() {
  _impl_.renoted_note_id_.ClearToEmpty();
}
inline const std::string& CreateNoteRequest::renoted_note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.renoted_note_id)
  return _internal_renoted_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteRequest::set_renoted_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.renoted_note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.renoted_note_id)
}
inline std::string* CreateNoteRequest::mutable_renoted_note_id() {
  std::string* _s = _internal_mutable_renoted_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.renoted_note_id)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_renoted_note_id() const {
  return _impl_.renoted_note_id_.Get();
}
inline void CreateNoteRequest::_internal_set_renoted_note_id(const std::string& value) {
  
  _impl_.renoted_note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::_internal_mutable_renoted_note_id() {
  
  return _impl_.renoted_note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::release_renoted_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.renoted_note_id)
  return _impl_.renoted_note_id_.Release();
}
inline void CreateNoteRequest::set_allocated_renoted_note_id(std::string* renoted_note_id) {
  if (renoted_note_id != nullptr) {
    
  } else {
    
  }
  _impl_.renoted_note_id_.SetAllocated(renoted_note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.renoted_note_id_.IsDefault()) {
    _impl_.renoted_note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.renoted_note_id)
}

// bool is_quote_renote = 9;
inline void CreateNoteRequest::clear_is_quote_renote() {
  _impl_.is_quote_renote_ = false;
}
inline bool CreateNoteRequest::_internal_is_quote_renote() const {
  return _impl_.is_quote_renote_;
}
inline bool CreateNoteRequest::is_quote_renote() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.is_quote_renote)
  return _internal_is_quote_renote();
}
inline void CreateNoteRequest::_internal_set_is_quote_renote(bool value) {
  
  _impl_.is_quote_renote_ = value;
}
inline void CreateNoteRequest::set_is_quote_renote(bool value) {
  _internal_set_is_quote_renote(value);
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.is_quote_renote)
}

// string client_name = 10;
inline void CreateNoteRequest::clear_client_name() {
  _impl_.client_name_.ClearToEmpty();
}
inline const std::string& CreateNoteRequest::client_name() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.client_name)
  return _internal_client_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteRequest::set_client_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.client_name)
}
inline std::string* CreateNoteRequest::mutable_client_name() {
  std::string* _s = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.client_name)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_client_name() const {
  return _impl_.client_name_.Get();
}
inline void CreateNoteRequest::_internal_set_client_name(const std::string& value) {
  
  _impl_.client_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::_internal_mutable_client_name() {
  
  return _impl_.client_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::release_client_name() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.client_name)
  return _impl_.client_name_.Release();
}
inline void CreateNoteRequest::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  _impl_.client_name_.SetAllocated(client_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_name_.IsDefault()) {
    _impl_.client_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.client_name)
}

// string idempotency_key = 11;
inline void CreateNoteRequest::clear_idempotency_key() {
  _impl_.idempotency_key_.ClearToEmpty();
}
inline const std::string& CreateNoteRequest::idempotency_key() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteRequest.idempotency_key)
  return _internal_idempotency_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteRequest::set_idempotency_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.idempotency_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteRequest.idempotency_key)
}
inline std::string* CreateNoteRequest::mutable_idempotency_key() {
  std::string* _s = _internal_mutable_idempotency_key();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteRequest.idempotency_key)
  return _s;
}
inline const std::string& CreateNoteRequest::_internal_idempotency_key() const {
  return _impl_.idempotency_key_.Get();
}
inline void CreateNoteRequest::_internal_set_idempotency_key(const std::string& value) {
  
  _impl_.idempotency_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::_internal_mutable_idempotency_key() {
  
  return _impl_.idempotency_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteRequest::release_idempotency_key() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteRequest.idempotency_key)
  return _impl_.idempotency_key_.Release();
}
inline void CreateNoteRequest::set_allocated_idempotency_key(std::string* idempotency_key) {
  if (idempotency_key != nullptr) {
    
  } else {
    
  }
  _impl_.idempotency_key_.SetAllocated(idempotency_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idempotency_key_.IsDefault()) {
    _impl_.idempotency_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteRequest.idempotency_key)
}

// -------------------------------------------------------------------

// CreateNoteResponse

// .sonet.note.Note note = 1;
inline bool CreateNoteResponse::_internal_has_note() const {
  return this != internal_default_instance() && _impl_.note_ != nullptr;
}
inline bool CreateNoteResponse::has_note() const {
  return _internal_has_note();
}
inline void CreateNoteResponse::clear_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
}
inline const ::sonet::note::Note& CreateNoteResponse::_internal_note() const {
  const ::sonet::note::Note* p = _impl_.note_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::Note&>(
      ::sonet::note::_Note_default_instance_);
}
inline const ::sonet::note::Note& CreateNoteResponse::note() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteResponse.note)
  return _internal_note();
}
inline void CreateNoteResponse::unsafe_arena_set_allocated_note(
    ::sonet::note::Note* note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.note_);
  }
  _impl_.note_ = note;
  if (note) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.CreateNoteResponse.note)
}
inline ::sonet::note::Note* CreateNoteResponse::release_note() {
  
  ::sonet::note::Note* temp = _impl_.note_;
  _impl_.note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::Note* CreateNoteResponse::unsafe_arena_release_note() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteResponse.note)
  
  ::sonet::note::Note* temp = _impl_.note_;
  _impl_.note_ = nullptr;
  return temp;
}
inline ::sonet::note::Note* CreateNoteResponse::_internal_mutable_note() {
  
  if (_impl_.note_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::Note>(GetArenaForAllocation());
    _impl_.note_ = p;
  }
  return _impl_.note_;
}
inline ::sonet::note::Note* CreateNoteResponse::mutable_note() {
  ::sonet::note::Note* _msg = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteResponse.note)
  return _msg;
}
inline void CreateNoteResponse::set_allocated_note(::sonet::note::Note* note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.note_;
  }
  if (note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(note);
    if (message_arena != submessage_arena) {
      note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.note_ = note;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteResponse.note)
}

// bool success = 2;
inline void CreateNoteResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool CreateNoteResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool CreateNoteResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteResponse.success)
  return _internal_success();
}
inline void CreateNoteResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CreateNoteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteResponse.success)
}

// string error_message = 3;
inline void CreateNoteResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CreateNoteResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.CreateNoteResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNoteResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.CreateNoteResponse.error_message)
}
inline std::string* CreateNoteResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.CreateNoteResponse.error_message)
  return _s;
}
inline const std::string& CreateNoteResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CreateNoteResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateNoteResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateNoteResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.CreateNoteResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CreateNoteResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.CreateNoteResponse.error_message)
}

// -------------------------------------------------------------------

// GetNoteRequest

// string note_id = 1;
inline void GetNoteRequest::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& GetNoteRequest::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteRequest.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNoteRequest::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteRequest.note_id)
}
inline std::string* GetNoteRequest::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteRequest.note_id)
  return _s;
}
inline const std::string& GetNoteRequest::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void GetNoteRequest::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNoteRequest::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNoteRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteRequest.note_id)
  return _impl_.note_id_.Release();
}
inline void GetNoteRequest::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteRequest.note_id)
}

// string requesting_user_id = 2;
inline void GetNoteRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetNoteRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNoteRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteRequest.requesting_user_id)
}
inline std::string* GetNoteRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetNoteRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetNoteRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNoteRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNoteRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetNoteRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteRequest.requesting_user_id)
}

// bool include_thread = 3;
inline void GetNoteRequest::clear_include_thread() {
  _impl_.include_thread_ = false;
}
inline bool GetNoteRequest::_internal_include_thread() const {
  return _impl_.include_thread_;
}
inline bool GetNoteRequest::include_thread() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteRequest.include_thread)
  return _internal_include_thread();
}
inline void GetNoteRequest::_internal_set_include_thread(bool value) {
  
  _impl_.include_thread_ = value;
}
inline void GetNoteRequest::set_include_thread(bool value) {
  _internal_set_include_thread(value);
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteRequest.include_thread)
}

// -------------------------------------------------------------------

// GetNoteResponse

// .sonet.note.Note note = 1;
inline bool GetNoteResponse::_internal_has_note() const {
  return this != internal_default_instance() && _impl_.note_ != nullptr;
}
inline bool GetNoteResponse::has_note() const {
  return _internal_has_note();
}
inline void GetNoteResponse::clear_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
}
inline const ::sonet::note::Note& GetNoteResponse::_internal_note() const {
  const ::sonet::note::Note* p = _impl_.note_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::Note&>(
      ::sonet::note::_Note_default_instance_);
}
inline const ::sonet::note::Note& GetNoteResponse::note() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteResponse.note)
  return _internal_note();
}
inline void GetNoteResponse::unsafe_arena_set_allocated_note(
    ::sonet::note::Note* note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.note_);
  }
  _impl_.note_ = note;
  if (note) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetNoteResponse.note)
}
inline ::sonet::note::Note* GetNoteResponse::release_note() {
  
  ::sonet::note::Note* temp = _impl_.note_;
  _impl_.note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::Note* GetNoteResponse::unsafe_arena_release_note() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteResponse.note)
  
  ::sonet::note::Note* temp = _impl_.note_;
  _impl_.note_ = nullptr;
  return temp;
}
inline ::sonet::note::Note* GetNoteResponse::_internal_mutable_note() {
  
  if (_impl_.note_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::Note>(GetArenaForAllocation());
    _impl_.note_ = p;
  }
  return _impl_.note_;
}
inline ::sonet::note::Note* GetNoteResponse::mutable_note() {
  ::sonet::note::Note* _msg = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteResponse.note)
  return _msg;
}
inline void GetNoteResponse::set_allocated_note(::sonet::note::Note* note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.note_;
  }
  if (note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(note);
    if (message_arena != submessage_arena) {
      note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.note_ = note;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteResponse.note)
}

// .sonet.note.UserNoteInteraction user_interaction = 2;
inline bool GetNoteResponse::_internal_has_user_interaction() const {
  return this != internal_default_instance() && _impl_.user_interaction_ != nullptr;
}
inline bool GetNoteResponse::has_user_interaction() const {
  return _internal_has_user_interaction();
}
inline void GetNoteResponse::clear_user_interaction() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_interaction_ != nullptr) {
    delete _impl_.user_interaction_;
  }
  _impl_.user_interaction_ = nullptr;
}
inline const ::sonet::note::UserNoteInteraction& GetNoteResponse::_internal_user_interaction() const {
  const ::sonet::note::UserNoteInteraction* p = _impl_.user_interaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::UserNoteInteraction&>(
      ::sonet::note::_UserNoteInteraction_default_instance_);
}
inline const ::sonet::note::UserNoteInteraction& GetNoteResponse::user_interaction() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteResponse.user_interaction)
  return _internal_user_interaction();
}
inline void GetNoteResponse::unsafe_arena_set_allocated_user_interaction(
    ::sonet::note::UserNoteInteraction* user_interaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_interaction_);
  }
  _impl_.user_interaction_ = user_interaction;
  if (user_interaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetNoteResponse.user_interaction)
}
inline ::sonet::note::UserNoteInteraction* GetNoteResponse::release_user_interaction() {
  
  ::sonet::note::UserNoteInteraction* temp = _impl_.user_interaction_;
  _impl_.user_interaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::UserNoteInteraction* GetNoteResponse::unsafe_arena_release_user_interaction() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteResponse.user_interaction)
  
  ::sonet::note::UserNoteInteraction* temp = _impl_.user_interaction_;
  _impl_.user_interaction_ = nullptr;
  return temp;
}
inline ::sonet::note::UserNoteInteraction* GetNoteResponse::_internal_mutable_user_interaction() {
  
  if (_impl_.user_interaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::UserNoteInteraction>(GetArenaForAllocation());
    _impl_.user_interaction_ = p;
  }
  return _impl_.user_interaction_;
}
inline ::sonet::note::UserNoteInteraction* GetNoteResponse::mutable_user_interaction() {
  ::sonet::note::UserNoteInteraction* _msg = _internal_mutable_user_interaction();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteResponse.user_interaction)
  return _msg;
}
inline void GetNoteResponse::set_allocated_user_interaction(::sonet::note::UserNoteInteraction* user_interaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_interaction_;
  }
  if (user_interaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_interaction);
    if (message_arena != submessage_arena) {
      user_interaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_interaction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_interaction_ = user_interaction;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteResponse.user_interaction)
}

// repeated .sonet.note.Note thread_notes = 3;
inline int GetNoteResponse::_internal_thread_notes_size() const {
  return _impl_.thread_notes_.size();
}
inline int GetNoteResponse::thread_notes_size() const {
  return _internal_thread_notes_size();
}
inline void GetNoteResponse::clear_thread_notes() {
  _impl_.thread_notes_.Clear();
}
inline ::sonet::note::Note* GetNoteResponse::mutable_thread_notes(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteResponse.thread_notes)
  return _impl_.thread_notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
GetNoteResponse::mutable_thread_notes() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.GetNoteResponse.thread_notes)
  return &_impl_.thread_notes_;
}
inline const ::sonet::note::Note& GetNoteResponse::_internal_thread_notes(int index) const {
  return _impl_.thread_notes_.Get(index);
}
inline const ::sonet::note::Note& GetNoteResponse::thread_notes(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteResponse.thread_notes)
  return _internal_thread_notes(index);
}
inline ::sonet::note::Note* GetNoteResponse::_internal_add_thread_notes() {
  return _impl_.thread_notes_.Add();
}
inline ::sonet::note::Note* GetNoteResponse::add_thread_notes() {
  ::sonet::note::Note* _add = _internal_add_thread_notes();
  // @@protoc_insertion_point(field_add:sonet.note.GetNoteResponse.thread_notes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
GetNoteResponse::thread_notes() const {
  // @@protoc_insertion_point(field_list:sonet.note.GetNoteResponse.thread_notes)
  return _impl_.thread_notes_;
}

// bool success = 4;
inline void GetNoteResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetNoteResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetNoteResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteResponse.success)
  return _internal_success();
}
inline void GetNoteResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetNoteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteResponse.success)
}

// string error_message = 5;
inline void GetNoteResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetNoteResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNoteResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteResponse.error_message)
}
inline std::string* GetNoteResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteResponse.error_message)
  return _s;
}
inline const std::string& GetNoteResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetNoteResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNoteResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNoteResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetNoteResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteResponse.error_message)
}

// -------------------------------------------------------------------

// DeleteNoteRequest

// string note_id = 1;
inline void DeleteNoteRequest::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& DeleteNoteRequest::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.DeleteNoteRequest.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNoteRequest::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.DeleteNoteRequest.note_id)
}
inline std::string* DeleteNoteRequest::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.DeleteNoteRequest.note_id)
  return _s;
}
inline const std::string& DeleteNoteRequest::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void DeleteNoteRequest::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteNoteRequest::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteNoteRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.DeleteNoteRequest.note_id)
  return _impl_.note_id_.Release();
}
inline void DeleteNoteRequest::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.DeleteNoteRequest.note_id)
}

// string user_id = 2;
inline void DeleteNoteRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& DeleteNoteRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.DeleteNoteRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNoteRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.DeleteNoteRequest.user_id)
}
inline std::string* DeleteNoteRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.DeleteNoteRequest.user_id)
  return _s;
}
inline const std::string& DeleteNoteRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void DeleteNoteRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteNoteRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteNoteRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.DeleteNoteRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void DeleteNoteRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.DeleteNoteRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteNoteResponse

// bool success = 1;
inline void DeleteNoteResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool DeleteNoteResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool DeleteNoteResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.DeleteNoteResponse.success)
  return _internal_success();
}
inline void DeleteNoteResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void DeleteNoteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.DeleteNoteResponse.success)
}

// string error_message = 2;
inline void DeleteNoteResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& DeleteNoteResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.DeleteNoteResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNoteResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.DeleteNoteResponse.error_message)
}
inline std::string* DeleteNoteResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.DeleteNoteResponse.error_message)
  return _s;
}
inline const std::string& DeleteNoteResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void DeleteNoteResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteNoteResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteNoteResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.DeleteNoteResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void DeleteNoteResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.DeleteNoteResponse.error_message)
}

// -------------------------------------------------------------------

// LikeNoteRequest

// string note_id = 1;
inline void LikeNoteRequest::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& LikeNoteRequest::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.LikeNoteRequest.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LikeNoteRequest::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.LikeNoteRequest.note_id)
}
inline std::string* LikeNoteRequest::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.LikeNoteRequest.note_id)
  return _s;
}
inline const std::string& LikeNoteRequest::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void LikeNoteRequest::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LikeNoteRequest::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LikeNoteRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.LikeNoteRequest.note_id)
  return _impl_.note_id_.Release();
}
inline void LikeNoteRequest::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.LikeNoteRequest.note_id)
}

// string user_id = 2;
inline void LikeNoteRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& LikeNoteRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.LikeNoteRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LikeNoteRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.LikeNoteRequest.user_id)
}
inline std::string* LikeNoteRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.LikeNoteRequest.user_id)
  return _s;
}
inline const std::string& LikeNoteRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void LikeNoteRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LikeNoteRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LikeNoteRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.LikeNoteRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void LikeNoteRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.LikeNoteRequest.user_id)
}

// bool like = 3;
inline void LikeNoteRequest::clear_like() {
  _impl_.like_ = false;
}
inline bool LikeNoteRequest::_internal_like() const {
  return _impl_.like_;
}
inline bool LikeNoteRequest::like() const {
  // @@protoc_insertion_point(field_get:sonet.note.LikeNoteRequest.like)
  return _internal_like();
}
inline void LikeNoteRequest::_internal_set_like(bool value) {
  
  _impl_.like_ = value;
}
inline void LikeNoteRequest::set_like(bool value) {
  _internal_set_like(value);
  // @@protoc_insertion_point(field_set:sonet.note.LikeNoteRequest.like)
}

// -------------------------------------------------------------------

// LikeNoteResponse

// bool success = 1;
inline void LikeNoteResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool LikeNoteResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool LikeNoteResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.LikeNoteResponse.success)
  return _internal_success();
}
inline void LikeNoteResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void LikeNoteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.LikeNoteResponse.success)
}

// int64 new_like_count = 2;
inline void LikeNoteResponse::clear_new_like_count() {
  _impl_.new_like_count_ = int64_t{0};
}
inline int64_t LikeNoteResponse::_internal_new_like_count() const {
  return _impl_.new_like_count_;
}
inline int64_t LikeNoteResponse::new_like_count() const {
  // @@protoc_insertion_point(field_get:sonet.note.LikeNoteResponse.new_like_count)
  return _internal_new_like_count();
}
inline void LikeNoteResponse::_internal_set_new_like_count(int64_t value) {
  
  _impl_.new_like_count_ = value;
}
inline void LikeNoteResponse::set_new_like_count(int64_t value) {
  _internal_set_new_like_count(value);
  // @@protoc_insertion_point(field_set:sonet.note.LikeNoteResponse.new_like_count)
}

// string error_message = 3;
inline void LikeNoteResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& LikeNoteResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.LikeNoteResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LikeNoteResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.LikeNoteResponse.error_message)
}
inline std::string* LikeNoteResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.LikeNoteResponse.error_message)
  return _s;
}
inline const std::string& LikeNoteResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void LikeNoteResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* LikeNoteResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* LikeNoteResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.LikeNoteResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void LikeNoteResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.LikeNoteResponse.error_message)
}

// -------------------------------------------------------------------

// RenoteNoteRequest

// string note_id = 1;
inline void RenoteNoteRequest::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& RenoteNoteRequest::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteRequest.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenoteNoteRequest::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.RenoteNoteRequest.note_id)
}
inline std::string* RenoteNoteRequest::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.RenoteNoteRequest.note_id)
  return _s;
}
inline const std::string& RenoteNoteRequest::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void RenoteNoteRequest::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RenoteNoteRequest::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RenoteNoteRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.RenoteNoteRequest.note_id)
  return _impl_.note_id_.Release();
}
inline void RenoteNoteRequest::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.RenoteNoteRequest.note_id)
}

// string user_id = 2;
inline void RenoteNoteRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& RenoteNoteRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenoteNoteRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.RenoteNoteRequest.user_id)
}
inline std::string* RenoteNoteRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.RenoteNoteRequest.user_id)
  return _s;
}
inline const std::string& RenoteNoteRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void RenoteNoteRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RenoteNoteRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RenoteNoteRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.RenoteNoteRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void RenoteNoteRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.RenoteNoteRequest.user_id)
}

// bool is_quote_renote = 3;
inline void RenoteNoteRequest::clear_is_quote_renote() {
  _impl_.is_quote_renote_ = false;
}
inline bool RenoteNoteRequest::_internal_is_quote_renote() const {
  return _impl_.is_quote_renote_;
}
inline bool RenoteNoteRequest::is_quote_renote() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteRequest.is_quote_renote)
  return _internal_is_quote_renote();
}
inline void RenoteNoteRequest::_internal_set_is_quote_renote(bool value) {
  
  _impl_.is_quote_renote_ = value;
}
inline void RenoteNoteRequest::set_is_quote_renote(bool value) {
  _internal_set_is_quote_renote(value);
  // @@protoc_insertion_point(field_set:sonet.note.RenoteNoteRequest.is_quote_renote)
}

// string quote_text = 4;
inline void RenoteNoteRequest::clear_quote_text() {
  _impl_.quote_text_.ClearToEmpty();
}
inline const std::string& RenoteNoteRequest::quote_text() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteRequest.quote_text)
  return _internal_quote_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenoteNoteRequest::set_quote_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.RenoteNoteRequest.quote_text)
}
inline std::string* RenoteNoteRequest::mutable_quote_text() {
  std::string* _s = _internal_mutable_quote_text();
  // @@protoc_insertion_point(field_mutable:sonet.note.RenoteNoteRequest.quote_text)
  return _s;
}
inline const std::string& RenoteNoteRequest::_internal_quote_text() const {
  return _impl_.quote_text_.Get();
}
inline void RenoteNoteRequest::_internal_set_quote_text(const std::string& value) {
  
  _impl_.quote_text_.Set(value, GetArenaForAllocation());
}
inline std::string* RenoteNoteRequest::_internal_mutable_quote_text() {
  
  return _impl_.quote_text_.Mutable(GetArenaForAllocation());
}
inline std::string* RenoteNoteRequest::release_quote_text() {
  // @@protoc_insertion_point(field_release:sonet.note.RenoteNoteRequest.quote_text)
  return _impl_.quote_text_.Release();
}
inline void RenoteNoteRequest::set_allocated_quote_text(std::string* quote_text) {
  if (quote_text != nullptr) {
    
  } else {
    
  }
  _impl_.quote_text_.SetAllocated(quote_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_text_.IsDefault()) {
    _impl_.quote_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.RenoteNoteRequest.quote_text)
}

// -------------------------------------------------------------------

// RenoteNoteResponse

// .sonet.note.Note renote_note = 1;
inline bool RenoteNoteResponse::_internal_has_renote_note() const {
  return this != internal_default_instance() && _impl_.renote_note_ != nullptr;
}
inline bool RenoteNoteResponse::has_renote_note() const {
  return _internal_has_renote_note();
}
inline void RenoteNoteResponse::clear_renote_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.renote_note_ != nullptr) {
    delete _impl_.renote_note_;
  }
  _impl_.renote_note_ = nullptr;
}
inline const ::sonet::note::Note& RenoteNoteResponse::_internal_renote_note() const {
  const ::sonet::note::Note* p = _impl_.renote_note_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::Note&>(
      ::sonet::note::_Note_default_instance_);
}
inline const ::sonet::note::Note& RenoteNoteResponse::renote_note() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteResponse.renote_note)
  return _internal_renote_note();
}
inline void RenoteNoteResponse::unsafe_arena_set_allocated_renote_note(
    ::sonet::note::Note* renote_note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renote_note_);
  }
  _impl_.renote_note_ = renote_note;
  if (renote_note) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.RenoteNoteResponse.renote_note)
}
inline ::sonet::note::Note* RenoteNoteResponse::release_renote_note() {
  
  ::sonet::note::Note* temp = _impl_.renote_note_;
  _impl_.renote_note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::Note* RenoteNoteResponse::unsafe_arena_release_renote_note() {
  // @@protoc_insertion_point(field_release:sonet.note.RenoteNoteResponse.renote_note)
  
  ::sonet::note::Note* temp = _impl_.renote_note_;
  _impl_.renote_note_ = nullptr;
  return temp;
}
inline ::sonet::note::Note* RenoteNoteResponse::_internal_mutable_renote_note() {
  
  if (_impl_.renote_note_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::Note>(GetArenaForAllocation());
    _impl_.renote_note_ = p;
  }
  return _impl_.renote_note_;
}
inline ::sonet::note::Note* RenoteNoteResponse::mutable_renote_note() {
  ::sonet::note::Note* _msg = _internal_mutable_renote_note();
  // @@protoc_insertion_point(field_mutable:sonet.note.RenoteNoteResponse.renote_note)
  return _msg;
}
inline void RenoteNoteResponse::set_allocated_renote_note(::sonet::note::Note* renote_note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.renote_note_;
  }
  if (renote_note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(renote_note);
    if (message_arena != submessage_arena) {
      renote_note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renote_note, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.renote_note_ = renote_note;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.RenoteNoteResponse.renote_note)
}

// bool success = 2;
inline void RenoteNoteResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool RenoteNoteResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool RenoteNoteResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteResponse.success)
  return _internal_success();
}
inline void RenoteNoteResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RenoteNoteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.RenoteNoteResponse.success)
}

// string error_message = 3;
inline void RenoteNoteResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& RenoteNoteResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.RenoteNoteResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenoteNoteResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.RenoteNoteResponse.error_message)
}
inline std::string* RenoteNoteResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.RenoteNoteResponse.error_message)
  return _s;
}
inline const std::string& RenoteNoteResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void RenoteNoteResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RenoteNoteResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* RenoteNoteResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.RenoteNoteResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void RenoteNoteResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.RenoteNoteResponse.error_message)
}

// -------------------------------------------------------------------

// GetUserNotesRequest

// string user_id = 1;
inline void GetUserNotesRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetUserNotesRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserNotesRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetUserNotesRequest.user_id)
}
inline std::string* GetUserNotesRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetUserNotesRequest.user_id)
  return _s;
}
inline const std::string& GetUserNotesRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetUserNotesRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserNotesRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserNotesRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.GetUserNotesRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetUserNotesRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetUserNotesRequest.user_id)
}

// string requesting_user_id = 2;
inline void GetUserNotesRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetUserNotesRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserNotesRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetUserNotesRequest.requesting_user_id)
}
inline std::string* GetUserNotesRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetUserNotesRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetUserNotesRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetUserNotesRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserNotesRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserNotesRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.GetUserNotesRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetUserNotesRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetUserNotesRequest.requesting_user_id)
}

// .sonet.common.PaginationRequest pagination = 3;
inline bool GetUserNotesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool GetUserNotesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::PaginationRequest& GetUserNotesRequest::_internal_pagination() const {
  const ::sonet::common::PaginationRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::PaginationRequest&>(
      ::sonet::common::_PaginationRequest_default_instance_);
}
inline const ::sonet::common::PaginationRequest& GetUserNotesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesRequest.pagination)
  return _internal_pagination();
}
inline void GetUserNotesRequest::unsafe_arena_set_allocated_pagination(
    ::sonet::common::PaginationRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetUserNotesRequest.pagination)
}
inline ::sonet::common::PaginationRequest* GetUserNotesRequest::release_pagination() {
  
  ::sonet::common::PaginationRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::PaginationRequest* GetUserNotesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.note.GetUserNotesRequest.pagination)
  
  ::sonet::common::PaginationRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::PaginationRequest* GetUserNotesRequest::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::PaginationRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::PaginationRequest* GetUserNotesRequest::mutable_pagination() {
  ::sonet::common::PaginationRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetUserNotesRequest.pagination)
  return _msg;
}
inline void GetUserNotesRequest::set_allocated_pagination(::sonet::common::PaginationRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetUserNotesRequest.pagination)
}

// bool include_replies = 4;
inline void GetUserNotesRequest::clear_include_replies() {
  _impl_.include_replies_ = false;
}
inline bool GetUserNotesRequest::_internal_include_replies() const {
  return _impl_.include_replies_;
}
inline bool GetUserNotesRequest::include_replies() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesRequest.include_replies)
  return _internal_include_replies();
}
inline void GetUserNotesRequest::_internal_set_include_replies(bool value) {
  
  _impl_.include_replies_ = value;
}
inline void GetUserNotesRequest::set_include_replies(bool value) {
  _internal_set_include_replies(value);
  // @@protoc_insertion_point(field_set:sonet.note.GetUserNotesRequest.include_replies)
}

// bool include_renotes = 5;
inline void GetUserNotesRequest::clear_include_renotes() {
  _impl_.include_renotes_ = false;
}
inline bool GetUserNotesRequest::_internal_include_renotes() const {
  return _impl_.include_renotes_;
}
inline bool GetUserNotesRequest::include_renotes() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesRequest.include_renotes)
  return _internal_include_renotes();
}
inline void GetUserNotesRequest::_internal_set_include_renotes(bool value) {
  
  _impl_.include_renotes_ = value;
}
inline void GetUserNotesRequest::set_include_renotes(bool value) {
  _internal_set_include_renotes(value);
  // @@protoc_insertion_point(field_set:sonet.note.GetUserNotesRequest.include_renotes)
}

// -------------------------------------------------------------------

// GetUserNotesResponse

// repeated .sonet.note.Note notes = 1;
inline int GetUserNotesResponse::_internal_notes_size() const {
  return _impl_.notes_.size();
}
inline int GetUserNotesResponse::notes_size() const {
  return _internal_notes_size();
}
inline void GetUserNotesResponse::clear_notes() {
  _impl_.notes_.Clear();
}
inline ::sonet::note::Note* GetUserNotesResponse::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.GetUserNotesResponse.notes)
  return _impl_.notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
GetUserNotesResponse::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.GetUserNotesResponse.notes)
  return &_impl_.notes_;
}
inline const ::sonet::note::Note& GetUserNotesResponse::_internal_notes(int index) const {
  return _impl_.notes_.Get(index);
}
inline const ::sonet::note::Note& GetUserNotesResponse::notes(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesResponse.notes)
  return _internal_notes(index);
}
inline ::sonet::note::Note* GetUserNotesResponse::_internal_add_notes() {
  return _impl_.notes_.Add();
}
inline ::sonet::note::Note* GetUserNotesResponse::add_notes() {
  ::sonet::note::Note* _add = _internal_add_notes();
  // @@protoc_insertion_point(field_add:sonet.note.GetUserNotesResponse.notes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
GetUserNotesResponse::notes() const {
  // @@protoc_insertion_point(field_list:sonet.note.GetUserNotesResponse.notes)
  return _impl_.notes_;
}

// .sonet.common.PaginationResponse pagination = 2;
inline bool GetUserNotesResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool GetUserNotesResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::PaginationResponse& GetUserNotesResponse::_internal_pagination() const {
  const ::sonet::common::PaginationResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::PaginationResponse&>(
      ::sonet::common::_PaginationResponse_default_instance_);
}
inline const ::sonet::common::PaginationResponse& GetUserNotesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesResponse.pagination)
  return _internal_pagination();
}
inline void GetUserNotesResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::common::PaginationResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetUserNotesResponse.pagination)
}
inline ::sonet::common::PaginationResponse* GetUserNotesResponse::release_pagination() {
  
  ::sonet::common::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::PaginationResponse* GetUserNotesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.note.GetUserNotesResponse.pagination)
  
  ::sonet::common::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::PaginationResponse* GetUserNotesResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::PaginationResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::PaginationResponse* GetUserNotesResponse::mutable_pagination() {
  ::sonet::common::PaginationResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetUserNotesResponse.pagination)
  return _msg;
}
inline void GetUserNotesResponse::set_allocated_pagination(::sonet::common::PaginationResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetUserNotesResponse.pagination)
}

// bool success = 3;
inline void GetUserNotesResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetUserNotesResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetUserNotesResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesResponse.success)
  return _internal_success();
}
inline void GetUserNotesResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetUserNotesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.GetUserNotesResponse.success)
}

// string error_message = 4;
inline void GetUserNotesResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetUserNotesResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetUserNotesResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserNotesResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetUserNotesResponse.error_message)
}
inline std::string* GetUserNotesResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetUserNotesResponse.error_message)
  return _s;
}
inline const std::string& GetUserNotesResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetUserNotesResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserNotesResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserNotesResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.GetUserNotesResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetUserNotesResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetUserNotesResponse.error_message)
}

// -------------------------------------------------------------------

// GetNoteThreadRequest

// string note_id = 1;
inline void GetNoteThreadRequest::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& GetNoteThreadRequest::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadRequest.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNoteThreadRequest::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteThreadRequest.note_id)
}
inline std::string* GetNoteThreadRequest::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadRequest.note_id)
  return _s;
}
inline const std::string& GetNoteThreadRequest::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void GetNoteThreadRequest::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNoteThreadRequest::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNoteThreadRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteThreadRequest.note_id)
  return _impl_.note_id_.Release();
}
inline void GetNoteThreadRequest::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteThreadRequest.note_id)
}

// string requesting_user_id = 2;
inline void GetNoteThreadRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetNoteThreadRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNoteThreadRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteThreadRequest.requesting_user_id)
}
inline std::string* GetNoteThreadRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetNoteThreadRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetNoteThreadRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNoteThreadRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNoteThreadRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteThreadRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetNoteThreadRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteThreadRequest.requesting_user_id)
}

// .sonet.common.PaginationRequest pagination = 3;
inline bool GetNoteThreadRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool GetNoteThreadRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::PaginationRequest& GetNoteThreadRequest::_internal_pagination() const {
  const ::sonet::common::PaginationRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::PaginationRequest&>(
      ::sonet::common::_PaginationRequest_default_instance_);
}
inline const ::sonet::common::PaginationRequest& GetNoteThreadRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadRequest.pagination)
  return _internal_pagination();
}
inline void GetNoteThreadRequest::unsafe_arena_set_allocated_pagination(
    ::sonet::common::PaginationRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetNoteThreadRequest.pagination)
}
inline ::sonet::common::PaginationRequest* GetNoteThreadRequest::release_pagination() {
  
  ::sonet::common::PaginationRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::PaginationRequest* GetNoteThreadRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteThreadRequest.pagination)
  
  ::sonet::common::PaginationRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::PaginationRequest* GetNoteThreadRequest::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::PaginationRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::PaginationRequest* GetNoteThreadRequest::mutable_pagination() {
  ::sonet::common::PaginationRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadRequest.pagination)
  return _msg;
}
inline void GetNoteThreadRequest::set_allocated_pagination(::sonet::common::PaginationRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteThreadRequest.pagination)
}

// -------------------------------------------------------------------

// GetNoteThreadResponse

// .sonet.note.Note root_note = 1;
inline bool GetNoteThreadResponse::_internal_has_root_note() const {
  return this != internal_default_instance() && _impl_.root_note_ != nullptr;
}
inline bool GetNoteThreadResponse::has_root_note() const {
  return _internal_has_root_note();
}
inline void GetNoteThreadResponse::clear_root_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.root_note_ != nullptr) {
    delete _impl_.root_note_;
  }
  _impl_.root_note_ = nullptr;
}
inline const ::sonet::note::Note& GetNoteThreadResponse::_internal_root_note() const {
  const ::sonet::note::Note* p = _impl_.root_note_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::note::Note&>(
      ::sonet::note::_Note_default_instance_);
}
inline const ::sonet::note::Note& GetNoteThreadResponse::root_note() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadResponse.root_note)
  return _internal_root_note();
}
inline void GetNoteThreadResponse::unsafe_arena_set_allocated_root_note(
    ::sonet::note::Note* root_note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_note_);
  }
  _impl_.root_note_ = root_note;
  if (root_note) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetNoteThreadResponse.root_note)
}
inline ::sonet::note::Note* GetNoteThreadResponse::release_root_note() {
  
  ::sonet::note::Note* temp = _impl_.root_note_;
  _impl_.root_note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::note::Note* GetNoteThreadResponse::unsafe_arena_release_root_note() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteThreadResponse.root_note)
  
  ::sonet::note::Note* temp = _impl_.root_note_;
  _impl_.root_note_ = nullptr;
  return temp;
}
inline ::sonet::note::Note* GetNoteThreadResponse::_internal_mutable_root_note() {
  
  if (_impl_.root_note_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::note::Note>(GetArenaForAllocation());
    _impl_.root_note_ = p;
  }
  return _impl_.root_note_;
}
inline ::sonet::note::Note* GetNoteThreadResponse::mutable_root_note() {
  ::sonet::note::Note* _msg = _internal_mutable_root_note();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadResponse.root_note)
  return _msg;
}
inline void GetNoteThreadResponse::set_allocated_root_note(::sonet::note::Note* root_note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.root_note_;
  }
  if (root_note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(root_note);
    if (message_arena != submessage_arena) {
      root_note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_note, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.root_note_ = root_note;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteThreadResponse.root_note)
}

// repeated .sonet.note.Note replies = 2;
inline int GetNoteThreadResponse::_internal_replies_size() const {
  return _impl_.replies_.size();
}
inline int GetNoteThreadResponse::replies_size() const {
  return _internal_replies_size();
}
inline void GetNoteThreadResponse::clear_replies() {
  _impl_.replies_.Clear();
}
inline ::sonet::note::Note* GetNoteThreadResponse::mutable_replies(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadResponse.replies)
  return _impl_.replies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
GetNoteThreadResponse::mutable_replies() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.GetNoteThreadResponse.replies)
  return &_impl_.replies_;
}
inline const ::sonet::note::Note& GetNoteThreadResponse::_internal_replies(int index) const {
  return _impl_.replies_.Get(index);
}
inline const ::sonet::note::Note& GetNoteThreadResponse::replies(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadResponse.replies)
  return _internal_replies(index);
}
inline ::sonet::note::Note* GetNoteThreadResponse::_internal_add_replies() {
  return _impl_.replies_.Add();
}
inline ::sonet::note::Note* GetNoteThreadResponse::add_replies() {
  ::sonet::note::Note* _add = _internal_add_replies();
  // @@protoc_insertion_point(field_add:sonet.note.GetNoteThreadResponse.replies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
GetNoteThreadResponse::replies() const {
  // @@protoc_insertion_point(field_list:sonet.note.GetNoteThreadResponse.replies)
  return _impl_.replies_;
}

// .sonet.common.PaginationResponse pagination = 3;
inline bool GetNoteThreadResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool GetNoteThreadResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::PaginationResponse& GetNoteThreadResponse::_internal_pagination() const {
  const ::sonet::common::PaginationResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::PaginationResponse&>(
      ::sonet::common::_PaginationResponse_default_instance_);
}
inline const ::sonet::common::PaginationResponse& GetNoteThreadResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadResponse.pagination)
  return _internal_pagination();
}
inline void GetNoteThreadResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::common::PaginationResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.GetNoteThreadResponse.pagination)
}
inline ::sonet::common::PaginationResponse* GetNoteThreadResponse::release_pagination() {
  
  ::sonet::common::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::PaginationResponse* GetNoteThreadResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteThreadResponse.pagination)
  
  ::sonet::common::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::PaginationResponse* GetNoteThreadResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::PaginationResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::PaginationResponse* GetNoteThreadResponse::mutable_pagination() {
  ::sonet::common::PaginationResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadResponse.pagination)
  return _msg;
}
inline void GetNoteThreadResponse::set_allocated_pagination(::sonet::common::PaginationResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteThreadResponse.pagination)
}

// bool success = 4;
inline void GetNoteThreadResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetNoteThreadResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetNoteThreadResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadResponse.success)
  return _internal_success();
}
inline void GetNoteThreadResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetNoteThreadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteThreadResponse.success)
}

// string error_message = 5;
inline void GetNoteThreadResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetNoteThreadResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.GetNoteThreadResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNoteThreadResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.GetNoteThreadResponse.error_message)
}
inline std::string* GetNoteThreadResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.GetNoteThreadResponse.error_message)
  return _s;
}
inline const std::string& GetNoteThreadResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetNoteThreadResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNoteThreadResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNoteThreadResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.GetNoteThreadResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetNoteThreadResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.GetNoteThreadResponse.error_message)
}

// -------------------------------------------------------------------

// SearchNotesRequest

// string query = 1;
inline void SearchNotesRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchNotesRequest::query() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchNotesRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.query)
}
inline std::string* SearchNotesRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.query)
  return _s;
}
inline const std::string& SearchNotesRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchNotesRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::release_query() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.query)
  return _impl_.query_.Release();
}
inline void SearchNotesRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.query)
}

// string requesting_user_id = 2;
inline void SearchNotesRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& SearchNotesRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchNotesRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.requesting_user_id)
}
inline std::string* SearchNotesRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.requesting_user_id)
  return _s;
}
inline const std::string& SearchNotesRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void SearchNotesRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void SearchNotesRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.requesting_user_id)
}

// .sonet.common.PaginationRequest pagination = 3;
inline bool SearchNotesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SearchNotesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::PaginationRequest& SearchNotesRequest::_internal_pagination() const {
  const ::sonet::common::PaginationRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::PaginationRequest&>(
      ::sonet::common::_PaginationRequest_default_instance_);
}
inline const ::sonet::common::PaginationRequest& SearchNotesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.pagination)
  return _internal_pagination();
}
inline void SearchNotesRequest::unsafe_arena_set_allocated_pagination(
    ::sonet::common::PaginationRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.SearchNotesRequest.pagination)
}
inline ::sonet::common::PaginationRequest* SearchNotesRequest::release_pagination() {
  
  ::sonet::common::PaginationRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::PaginationRequest* SearchNotesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.pagination)
  
  ::sonet::common::PaginationRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::PaginationRequest* SearchNotesRequest::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::PaginationRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::PaginationRequest* SearchNotesRequest::mutable_pagination() {
  ::sonet::common::PaginationRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.pagination)
  return _msg;
}
inline void SearchNotesRequest::set_allocated_pagination(::sonet::common::PaginationRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.pagination)
}

// string language = 4;
inline void SearchNotesRequest::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& SearchNotesRequest::language() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchNotesRequest::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.language)
}
inline std::string* SearchNotesRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.language)
  return _s;
}
inline const std::string& SearchNotesRequest::_internal_language() const {
  return _impl_.language_.Get();
}
inline void SearchNotesRequest::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::release_language() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.language)
  return _impl_.language_.Release();
}
inline void SearchNotesRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.language)
}

// string author_id = 5;
inline void SearchNotesRequest::clear_author_id() {
  _impl_.author_id_.ClearToEmpty();
}
inline const std::string& SearchNotesRequest::author_id() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.author_id)
  return _internal_author_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchNotesRequest::set_author_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.author_id)
}
inline std::string* SearchNotesRequest::mutable_author_id() {
  std::string* _s = _internal_mutable_author_id();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.author_id)
  return _s;
}
inline const std::string& SearchNotesRequest::_internal_author_id() const {
  return _impl_.author_id_.Get();
}
inline void SearchNotesRequest::_internal_set_author_id(const std::string& value) {
  
  _impl_.author_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::_internal_mutable_author_id() {
  
  return _impl_.author_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchNotesRequest::release_author_id() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.author_id)
  return _impl_.author_id_.Release();
}
inline void SearchNotesRequest::set_allocated_author_id(std::string* author_id) {
  if (author_id != nullptr) {
    
  } else {
    
  }
  _impl_.author_id_.SetAllocated(author_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_id_.IsDefault()) {
    _impl_.author_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.author_id)
}

// repeated string hashtags = 6;
inline int SearchNotesRequest::_internal_hashtags_size() const {
  return _impl_.hashtags_.size();
}
inline int SearchNotesRequest::hashtags_size() const {
  return _internal_hashtags_size();
}
inline void SearchNotesRequest::clear_hashtags() {
  _impl_.hashtags_.Clear();
}
inline std::string* SearchNotesRequest::add_hashtags() {
  std::string* _s = _internal_add_hashtags();
  // @@protoc_insertion_point(field_add_mutable:sonet.note.SearchNotesRequest.hashtags)
  return _s;
}
inline const std::string& SearchNotesRequest::_internal_hashtags(int index) const {
  return _impl_.hashtags_.Get(index);
}
inline const std::string& SearchNotesRequest::hashtags(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.hashtags)
  return _internal_hashtags(index);
}
inline std::string* SearchNotesRequest::mutable_hashtags(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.hashtags)
  return _impl_.hashtags_.Mutable(index);
}
inline void SearchNotesRequest::set_hashtags(int index, const std::string& value) {
  _impl_.hashtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.hashtags)
}
inline void SearchNotesRequest::set_hashtags(int index, std::string&& value) {
  _impl_.hashtags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.hashtags)
}
inline void SearchNotesRequest::set_hashtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hashtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.note.SearchNotesRequest.hashtags)
}
inline void SearchNotesRequest::set_hashtags(int index, const char* value, size_t size) {
  _impl_.hashtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.note.SearchNotesRequest.hashtags)
}
inline std::string* SearchNotesRequest::_internal_add_hashtags() {
  return _impl_.hashtags_.Add();
}
inline void SearchNotesRequest::add_hashtags(const std::string& value) {
  _impl_.hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.note.SearchNotesRequest.hashtags)
}
inline void SearchNotesRequest::add_hashtags(std::string&& value) {
  _impl_.hashtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.note.SearchNotesRequest.hashtags)
}
inline void SearchNotesRequest::add_hashtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.note.SearchNotesRequest.hashtags)
}
inline void SearchNotesRequest::add_hashtags(const char* value, size_t size) {
  _impl_.hashtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.note.SearchNotesRequest.hashtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchNotesRequest::hashtags() const {
  // @@protoc_insertion_point(field_list:sonet.note.SearchNotesRequest.hashtags)
  return _impl_.hashtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchNotesRequest::mutable_hashtags() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.SearchNotesRequest.hashtags)
  return &_impl_.hashtags_;
}

// .sonet.common.Timestamp since = 7;
inline bool SearchNotesRequest::_internal_has_since() const {
  return this != internal_default_instance() && _impl_.since_ != nullptr;
}
inline bool SearchNotesRequest::has_since() const {
  return _internal_has_since();
}
inline const ::sonet::common::Timestamp& SearchNotesRequest::_internal_since() const {
  const ::sonet::common::Timestamp* p = _impl_.since_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& SearchNotesRequest::since() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.since)
  return _internal_since();
}
inline void SearchNotesRequest::unsafe_arena_set_allocated_since(
    ::sonet::common::Timestamp* since) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.since_);
  }
  _impl_.since_ = since;
  if (since) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.SearchNotesRequest.since)
}
inline ::sonet::common::Timestamp* SearchNotesRequest::release_since() {
  
  ::sonet::common::Timestamp* temp = _impl_.since_;
  _impl_.since_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* SearchNotesRequest::unsafe_arena_release_since() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.since)
  
  ::sonet::common::Timestamp* temp = _impl_.since_;
  _impl_.since_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* SearchNotesRequest::_internal_mutable_since() {
  
  if (_impl_.since_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.since_ = p;
  }
  return _impl_.since_;
}
inline ::sonet::common::Timestamp* SearchNotesRequest::mutable_since() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_since();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.since)
  return _msg;
}
inline void SearchNotesRequest::set_allocated_since(::sonet::common::Timestamp* since) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.since_);
  }
  if (since) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(since));
    if (message_arena != submessage_arena) {
      since = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, since, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.since_ = since;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.since)
}

// .sonet.common.Timestamp until = 8;
inline bool SearchNotesRequest::_internal_has_until() const {
  return this != internal_default_instance() && _impl_.until_ != nullptr;
}
inline bool SearchNotesRequest::has_until() const {
  return _internal_has_until();
}
inline const ::sonet::common::Timestamp& SearchNotesRequest::_internal_until() const {
  const ::sonet::common::Timestamp* p = _impl_.until_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& SearchNotesRequest::until() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.until)
  return _internal_until();
}
inline void SearchNotesRequest::unsafe_arena_set_allocated_until(
    ::sonet::common::Timestamp* until) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.until_);
  }
  _impl_.until_ = until;
  if (until) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.SearchNotesRequest.until)
}
inline ::sonet::common::Timestamp* SearchNotesRequest::release_until() {
  
  ::sonet::common::Timestamp* temp = _impl_.until_;
  _impl_.until_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* SearchNotesRequest::unsafe_arena_release_until() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesRequest.until)
  
  ::sonet::common::Timestamp* temp = _impl_.until_;
  _impl_.until_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* SearchNotesRequest::_internal_mutable_until() {
  
  if (_impl_.until_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.until_ = p;
  }
  return _impl_.until_;
}
inline ::sonet::common::Timestamp* SearchNotesRequest::mutable_until() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_until();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesRequest.until)
  return _msg;
}
inline void SearchNotesRequest::set_allocated_until(::sonet::common::Timestamp* until) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.until_);
  }
  if (until) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until));
    if (message_arena != submessage_arena) {
      until = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, until, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.until_ = until;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesRequest.until)
}

// bool verified_only = 9;
inline void SearchNotesRequest::clear_verified_only() {
  _impl_.verified_only_ = false;
}
inline bool SearchNotesRequest::_internal_verified_only() const {
  return _impl_.verified_only_;
}
inline bool SearchNotesRequest::verified_only() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesRequest.verified_only)
  return _internal_verified_only();
}
inline void SearchNotesRequest::_internal_set_verified_only(bool value) {
  
  _impl_.verified_only_ = value;
}
inline void SearchNotesRequest::set_verified_only(bool value) {
  _internal_set_verified_only(value);
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesRequest.verified_only)
}

// -------------------------------------------------------------------

// SearchNotesResponse

// repeated .sonet.note.Note notes = 1;
inline int SearchNotesResponse::_internal_notes_size() const {
  return _impl_.notes_.size();
}
inline int SearchNotesResponse::notes_size() const {
  return _internal_notes_size();
}
inline void SearchNotesResponse::clear_notes() {
  _impl_.notes_.Clear();
}
inline ::sonet::note::Note* SearchNotesResponse::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesResponse.notes)
  return _impl_.notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >*
SearchNotesResponse::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:sonet.note.SearchNotesResponse.notes)
  return &_impl_.notes_;
}
inline const ::sonet::note::Note& SearchNotesResponse::_internal_notes(int index) const {
  return _impl_.notes_.Get(index);
}
inline const ::sonet::note::Note& SearchNotesResponse::notes(int index) const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesResponse.notes)
  return _internal_notes(index);
}
inline ::sonet::note::Note* SearchNotesResponse::_internal_add_notes() {
  return _impl_.notes_.Add();
}
inline ::sonet::note::Note* SearchNotesResponse::add_notes() {
  ::sonet::note::Note* _add = _internal_add_notes();
  // @@protoc_insertion_point(field_add:sonet.note.SearchNotesResponse.notes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::note::Note >&
SearchNotesResponse::notes() const {
  // @@protoc_insertion_point(field_list:sonet.note.SearchNotesResponse.notes)
  return _impl_.notes_;
}

// .sonet.common.PaginationResponse pagination = 2;
inline bool SearchNotesResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SearchNotesResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::PaginationResponse& SearchNotesResponse::_internal_pagination() const {
  const ::sonet::common::PaginationResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::PaginationResponse&>(
      ::sonet::common::_PaginationResponse_default_instance_);
}
inline const ::sonet::common::PaginationResponse& SearchNotesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesResponse.pagination)
  return _internal_pagination();
}
inline void SearchNotesResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::common::PaginationResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.note.SearchNotesResponse.pagination)
}
inline ::sonet::common::PaginationResponse* SearchNotesResponse::release_pagination() {
  
  ::sonet::common::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::PaginationResponse* SearchNotesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesResponse.pagination)
  
  ::sonet::common::PaginationResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::PaginationResponse* SearchNotesResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::PaginationResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::PaginationResponse* SearchNotesResponse::mutable_pagination() {
  ::sonet::common::PaginationResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesResponse.pagination)
  return _msg;
}
inline void SearchNotesResponse::set_allocated_pagination(::sonet::common::PaginationResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesResponse.pagination)
}

// bool success = 3;
inline void SearchNotesResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool SearchNotesResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool SearchNotesResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesResponse.success)
  return _internal_success();
}
inline void SearchNotesResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SearchNotesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesResponse.success)
}

// string error_message = 4;
inline void SearchNotesResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& SearchNotesResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.note.SearchNotesResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchNotesResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.SearchNotesResponse.error_message)
}
inline std::string* SearchNotesResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.note.SearchNotesResponse.error_message)
  return _s;
}
inline const std::string& SearchNotesResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void SearchNotesResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchNotesResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchNotesResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.note.SearchNotesResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void SearchNotesResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.SearchNotesResponse.error_message)
}

// -------------------------------------------------------------------

// HealthCheckRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HealthCheckResponse

// string status = 1;
inline void HealthCheckResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:sonet.note.HealthCheckResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HealthCheckResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.note.HealthCheckResponse.status)
}
inline std::string* HealthCheckResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:sonet.note.HealthCheckResponse.status)
  return _s;
}
inline const std::string& HealthCheckResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void HealthCheckResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* HealthCheckResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* HealthCheckResponse::release_status() {
  // @@protoc_insertion_point(field_release:sonet.note.HealthCheckResponse.status)
  return _impl_.status_.Release();
}
inline void HealthCheckResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.note.HealthCheckResponse.status)
}

// map<string, string> details = 2;
inline int HealthCheckResponse::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int HealthCheckResponse::details_size() const {
  return _internal_details_size();
}
inline void HealthCheckResponse::clear_details() {
  _impl_.details_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HealthCheckResponse::_internal_details() const {
  return _impl_.details_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HealthCheckResponse::details() const {
  // @@protoc_insertion_point(field_map:sonet.note.HealthCheckResponse.details)
  return _internal_details();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HealthCheckResponse::_internal_mutable_details() {
  return _impl_.details_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HealthCheckResponse::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:sonet.note.HealthCheckResponse.details)
  return _internal_mutable_details();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace note
}  // namespace sonet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sonet::note::NoteVisibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::note::NoteVisibility>() {
  return ::sonet::note::NoteVisibility_descriptor();
}
template <> struct is_proto_enum< ::sonet::note::ContentWarning> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::note::ContentWarning>() {
  return ::sonet::note::ContentWarning_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fnote_2eproto
