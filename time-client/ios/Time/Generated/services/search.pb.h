// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fsearch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fsearch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/pagination.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fsearch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fsearch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fsearch_2eproto;
namespace sonet {
namespace search {
class NoteResult;
struct NoteResultDefaultTypeInternal;
extern NoteResultDefaultTypeInternal _NoteResult_default_instance_;
class SearchNoteRequest;
struct SearchNoteRequestDefaultTypeInternal;
extern SearchNoteRequestDefaultTypeInternal _SearchNoteRequest_default_instance_;
class SearchNoteResponse;
struct SearchNoteResponseDefaultTypeInternal;
extern SearchNoteResponseDefaultTypeInternal _SearchNoteResponse_default_instance_;
class SearchUserRequest;
struct SearchUserRequestDefaultTypeInternal;
extern SearchUserRequestDefaultTypeInternal _SearchUserRequest_default_instance_;
class SearchUserResponse;
struct SearchUserResponseDefaultTypeInternal;
extern SearchUserResponseDefaultTypeInternal _SearchUserResponse_default_instance_;
class UserResult;
struct UserResultDefaultTypeInternal;
extern UserResultDefaultTypeInternal _UserResult_default_instance_;
}  // namespace search
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::search::NoteResult* Arena::CreateMaybeMessage<::sonet::search::NoteResult>(Arena*);
template<> ::sonet::search::SearchNoteRequest* Arena::CreateMaybeMessage<::sonet::search::SearchNoteRequest>(Arena*);
template<> ::sonet::search::SearchNoteResponse* Arena::CreateMaybeMessage<::sonet::search::SearchNoteResponse>(Arena*);
template<> ::sonet::search::SearchUserRequest* Arena::CreateMaybeMessage<::sonet::search::SearchUserRequest>(Arena*);
template<> ::sonet::search::SearchUserResponse* Arena::CreateMaybeMessage<::sonet::search::SearchUserResponse>(Arena*);
template<> ::sonet::search::UserResult* Arena::CreateMaybeMessage<::sonet::search::UserResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace search {

// ===================================================================

class SearchUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.search.SearchUserRequest) */ {
 public:
  inline SearchUserRequest() : SearchUserRequest(nullptr) {}
  ~SearchUserRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchUserRequest(const SearchUserRequest& from);
  SearchUserRequest(SearchUserRequest&& from) noexcept
    : SearchUserRequest() {
    *this = ::std::move(from);
  }

  inline SearchUserRequest& operator=(const SearchUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchUserRequest& operator=(SearchUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchUserRequest* internal_default_instance() {
    return reinterpret_cast<const SearchUserRequest*>(
               &_SearchUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchUserRequest& a, SearchUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchUserRequest& from) {
    SearchUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.search.SearchUserRequest";
  }
  protected:
  explicit SearchUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .sonet.common.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::Pagination* release_pagination();
  ::sonet::common::Pagination* mutable_pagination();
  void set_allocated_pagination(::sonet::common::Pagination* pagination);
  private:
  const ::sonet::common::Pagination& _internal_pagination() const;
  ::sonet::common::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::Pagination* pagination);
  ::sonet::common::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sonet.search.SearchUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::sonet::common::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class UserResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.search.UserResult) */ {
 public:
  inline UserResult() : UserResult(nullptr) {}
  ~UserResult() override;
  explicit PROTOBUF_CONSTEXPR UserResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserResult(const UserResult& from);
  UserResult(UserResult&& from) noexcept
    : UserResult() {
    *this = ::std::move(from);
  }

  inline UserResult& operator=(const UserResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResult& operator=(UserResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserResult* internal_default_instance() {
    return reinterpret_cast<const UserResult*>(
               &_UserResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserResult& a, UserResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserResult& from) {
    UserResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.search.UserResult";
  }
  protected:
  explicit UserResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kIsVerifiedFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bool is_verified = 5;
  void clear_is_verified();
  bool is_verified() const;
  void set_is_verified(bool value);
  private:
  bool _internal_is_verified() const;
  void _internal_set_is_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.search.UserResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    bool is_verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.search.SearchUserResponse) */ {
 public:
  inline SearchUserResponse() : SearchUserResponse(nullptr) {}
  ~SearchUserResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchUserResponse(const SearchUserResponse& from);
  SearchUserResponse(SearchUserResponse&& from) noexcept
    : SearchUserResponse() {
    *this = ::std::move(from);
  }

  inline SearchUserResponse& operator=(const SearchUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchUserResponse& operator=(SearchUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchUserResponse* internal_default_instance() {
    return reinterpret_cast<const SearchUserResponse*>(
               &_SearchUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchUserResponse& a, SearchUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchUserResponse& from) {
    SearchUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.search.SearchUserResponse";
  }
  protected:
  explicit SearchUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .sonet.search.UserResult users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::sonet::search::UserResult* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::UserResult >*
      mutable_users();
  private:
  const ::sonet::search::UserResult& _internal_users(int index) const;
  ::sonet::search::UserResult* _internal_add_users();
  public:
  const ::sonet::search::UserResult& users(int index) const;
  ::sonet::search::UserResult* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::UserResult >&
      users() const;

  // .sonet.common.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::Pagination* release_pagination();
  ::sonet::common::Pagination* mutable_pagination();
  void set_allocated_pagination(::sonet::common::Pagination* pagination);
  private:
  const ::sonet::common::Pagination& _internal_pagination() const;
  ::sonet::common::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::Pagination* pagination);
  ::sonet::common::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sonet.search.SearchUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::UserResult > users_;
    ::sonet::common::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchNoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.search.SearchNoteRequest) */ {
 public:
  inline SearchNoteRequest() : SearchNoteRequest(nullptr) {}
  ~SearchNoteRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchNoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchNoteRequest(const SearchNoteRequest& from);
  SearchNoteRequest(SearchNoteRequest&& from) noexcept
    : SearchNoteRequest() {
    *this = ::std::move(from);
  }

  inline SearchNoteRequest& operator=(const SearchNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchNoteRequest& operator=(SearchNoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchNoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchNoteRequest* internal_default_instance() {
    return reinterpret_cast<const SearchNoteRequest*>(
               &_SearchNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchNoteRequest& a, SearchNoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchNoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchNoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchNoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchNoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchNoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchNoteRequest& from) {
    SearchNoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchNoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.search.SearchNoteRequest";
  }
  protected:
  explicit SearchNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .sonet.common.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::Pagination* release_pagination();
  ::sonet::common::Pagination* mutable_pagination();
  void set_allocated_pagination(::sonet::common::Pagination* pagination);
  private:
  const ::sonet::common::Pagination& _internal_pagination() const;
  ::sonet::common::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::Pagination* pagination);
  ::sonet::common::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sonet.search.SearchNoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    ::sonet::common::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class NoteResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.search.NoteResult) */ {
 public:
  inline NoteResult() : NoteResult(nullptr) {}
  ~NoteResult() override;
  explicit PROTOBUF_CONSTEXPR NoteResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteResult(const NoteResult& from);
  NoteResult(NoteResult&& from) noexcept
    : NoteResult() {
    *this = ::std::move(from);
  }

  inline NoteResult& operator=(const NoteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteResult& operator=(NoteResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteResult* internal_default_instance() {
    return reinterpret_cast<const NoteResult*>(
               &_NoteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NoteResult& a, NoteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteResult& from) {
    NoteResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.search.NoteResult";
  }
  protected:
  explicit NoteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteIdFieldNumber = 1,
    kAuthorIdFieldNumber = 2,
    kContentFieldNumber = 3,
  };
  // string note_id = 1;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // string author_id = 2;
  void clear_author_id();
  const std::string& author_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author_id();
  PROTOBUF_NODISCARD std::string* release_author_id();
  void set_allocated_author_id(std::string* author_id);
  private:
  const std::string& _internal_author_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author_id(const std::string& value);
  std::string* _internal_mutable_author_id();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:sonet.search.NoteResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchNoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.search.SearchNoteResponse) */ {
 public:
  inline SearchNoteResponse() : SearchNoteResponse(nullptr) {}
  ~SearchNoteResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchNoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchNoteResponse(const SearchNoteResponse& from);
  SearchNoteResponse(SearchNoteResponse&& from) noexcept
    : SearchNoteResponse() {
    *this = ::std::move(from);
  }

  inline SearchNoteResponse& operator=(const SearchNoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchNoteResponse& operator=(SearchNoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchNoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchNoteResponse* internal_default_instance() {
    return reinterpret_cast<const SearchNoteResponse*>(
               &_SearchNoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchNoteResponse& a, SearchNoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchNoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchNoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchNoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchNoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchNoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchNoteResponse& from) {
    SearchNoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchNoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.search.SearchNoteResponse";
  }
  protected:
  explicit SearchNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .sonet.search.NoteResult notes = 1;
  int notes_size() const;
  private:
  int _internal_notes_size() const;
  public:
  void clear_notes();
  ::sonet::search::NoteResult* mutable_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::NoteResult >*
      mutable_notes();
  private:
  const ::sonet::search::NoteResult& _internal_notes(int index) const;
  ::sonet::search::NoteResult* _internal_add_notes();
  public:
  const ::sonet::search::NoteResult& notes(int index) const;
  ::sonet::search::NoteResult* add_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::NoteResult >&
      notes() const;

  // .sonet.common.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::Pagination* release_pagination();
  ::sonet::common::Pagination* mutable_pagination();
  void set_allocated_pagination(::sonet::common::Pagination* pagination);
  private:
  const ::sonet::common::Pagination& _internal_pagination() const;
  ::sonet::common::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::Pagination* pagination);
  ::sonet::common::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sonet.search.SearchNoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::NoteResult > notes_;
    ::sonet::common::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fsearch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchUserRequest

// string query = 1;
inline void SearchUserRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchUserRequest::query() const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchUserRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchUserRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.SearchUserRequest.query)
}
inline std::string* SearchUserRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchUserRequest.query)
  return _s;
}
inline const std::string& SearchUserRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchUserRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchUserRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchUserRequest::release_query() {
  // @@protoc_insertion_point(field_release:sonet.search.SearchUserRequest.query)
  return _impl_.query_.Release();
}
inline void SearchUserRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.SearchUserRequest.query)
}

// .sonet.common.Pagination pagination = 2;
inline bool SearchUserRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SearchUserRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::Pagination& SearchUserRequest::_internal_pagination() const {
  const ::sonet::common::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Pagination&>(
      ::sonet::common::_Pagination_default_instance_);
}
inline const ::sonet::common::Pagination& SearchUserRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchUserRequest.pagination)
  return _internal_pagination();
}
inline void SearchUserRequest::unsafe_arena_set_allocated_pagination(
    ::sonet::common::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.search.SearchUserRequest.pagination)
}
inline ::sonet::common::Pagination* SearchUserRequest::release_pagination() {
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Pagination* SearchUserRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.search.SearchUserRequest.pagination)
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::Pagination* SearchUserRequest::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::Pagination* SearchUserRequest::mutable_pagination() {
  ::sonet::common::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchUserRequest.pagination)
  return _msg;
}
inline void SearchUserRequest::set_allocated_pagination(::sonet::common::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.search.SearchUserRequest.pagination)
}

// -------------------------------------------------------------------

// UserResult

// string user_id = 1;
inline void UserResult::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserResult::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.search.UserResult.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResult::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.UserResult.user_id)
}
inline std::string* UserResult::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.search.UserResult.user_id)
  return _s;
}
inline const std::string& UserResult::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserResult::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResult::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResult::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.search.UserResult.user_id)
  return _impl_.user_id_.Release();
}
inline void UserResult::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.UserResult.user_id)
}

// string username = 2;
inline void UserResult::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserResult::username() const {
  // @@protoc_insertion_point(field_get:sonet.search.UserResult.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResult::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.UserResult.username)
}
inline std::string* UserResult::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sonet.search.UserResult.username)
  return _s;
}
inline const std::string& UserResult::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserResult::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResult::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResult::release_username() {
  // @@protoc_insertion_point(field_release:sonet.search.UserResult.username)
  return _impl_.username_.Release();
}
inline void UserResult::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.UserResult.username)
}

// string display_name = 3;
inline void UserResult::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& UserResult::display_name() const {
  // @@protoc_insertion_point(field_get:sonet.search.UserResult.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResult::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.UserResult.display_name)
}
inline std::string* UserResult::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:sonet.search.UserResult.display_name)
  return _s;
}
inline const std::string& UserResult::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void UserResult::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResult::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResult::release_display_name() {
  // @@protoc_insertion_point(field_release:sonet.search.UserResult.display_name)
  return _impl_.display_name_.Release();
}
inline void UserResult::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.UserResult.display_name)
}

// string avatar_url = 4;
inline void UserResult::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& UserResult::avatar_url() const {
  // @@protoc_insertion_point(field_get:sonet.search.UserResult.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResult::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.UserResult.avatar_url)
}
inline std::string* UserResult::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:sonet.search.UserResult.avatar_url)
  return _s;
}
inline const std::string& UserResult::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void UserResult::_internal_set_avatar_url(const std::string& value) {
  
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResult::_internal_mutable_avatar_url() {
  
  return _impl_.avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResult::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sonet.search.UserResult.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void UserResult::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_url_.SetAllocated(avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_url_.IsDefault()) {
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.UserResult.avatar_url)
}

// bool is_verified = 5;
inline void UserResult::clear_is_verified() {
  _impl_.is_verified_ = false;
}
inline bool UserResult::_internal_is_verified() const {
  return _impl_.is_verified_;
}
inline bool UserResult::is_verified() const {
  // @@protoc_insertion_point(field_get:sonet.search.UserResult.is_verified)
  return _internal_is_verified();
}
inline void UserResult::_internal_set_is_verified(bool value) {
  
  _impl_.is_verified_ = value;
}
inline void UserResult::set_is_verified(bool value) {
  _internal_set_is_verified(value);
  // @@protoc_insertion_point(field_set:sonet.search.UserResult.is_verified)
}

// -------------------------------------------------------------------

// SearchUserResponse

// repeated .sonet.search.UserResult users = 1;
inline int SearchUserResponse::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int SearchUserResponse::users_size() const {
  return _internal_users_size();
}
inline void SearchUserResponse::clear_users() {
  _impl_.users_.Clear();
}
inline ::sonet::search::UserResult* SearchUserResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchUserResponse.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::UserResult >*
SearchUserResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:sonet.search.SearchUserResponse.users)
  return &_impl_.users_;
}
inline const ::sonet::search::UserResult& SearchUserResponse::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::sonet::search::UserResult& SearchUserResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchUserResponse.users)
  return _internal_users(index);
}
inline ::sonet::search::UserResult* SearchUserResponse::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::sonet::search::UserResult* SearchUserResponse::add_users() {
  ::sonet::search::UserResult* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:sonet.search.SearchUserResponse.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::UserResult >&
SearchUserResponse::users() const {
  // @@protoc_insertion_point(field_list:sonet.search.SearchUserResponse.users)
  return _impl_.users_;
}

// .sonet.common.Pagination pagination = 2;
inline bool SearchUserResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SearchUserResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::Pagination& SearchUserResponse::_internal_pagination() const {
  const ::sonet::common::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Pagination&>(
      ::sonet::common::_Pagination_default_instance_);
}
inline const ::sonet::common::Pagination& SearchUserResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchUserResponse.pagination)
  return _internal_pagination();
}
inline void SearchUserResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::common::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.search.SearchUserResponse.pagination)
}
inline ::sonet::common::Pagination* SearchUserResponse::release_pagination() {
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Pagination* SearchUserResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.search.SearchUserResponse.pagination)
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::Pagination* SearchUserResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::Pagination* SearchUserResponse::mutable_pagination() {
  ::sonet::common::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchUserResponse.pagination)
  return _msg;
}
inline void SearchUserResponse::set_allocated_pagination(::sonet::common::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.search.SearchUserResponse.pagination)
}

// -------------------------------------------------------------------

// SearchNoteRequest

// string query = 1;
inline void SearchNoteRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchNoteRequest::query() const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchNoteRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchNoteRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.SearchNoteRequest.query)
}
inline std::string* SearchNoteRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchNoteRequest.query)
  return _s;
}
inline const std::string& SearchNoteRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchNoteRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchNoteRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchNoteRequest::release_query() {
  // @@protoc_insertion_point(field_release:sonet.search.SearchNoteRequest.query)
  return _impl_.query_.Release();
}
inline void SearchNoteRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.SearchNoteRequest.query)
}

// .sonet.common.Pagination pagination = 2;
inline bool SearchNoteRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SearchNoteRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::Pagination& SearchNoteRequest::_internal_pagination() const {
  const ::sonet::common::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Pagination&>(
      ::sonet::common::_Pagination_default_instance_);
}
inline const ::sonet::common::Pagination& SearchNoteRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchNoteRequest.pagination)
  return _internal_pagination();
}
inline void SearchNoteRequest::unsafe_arena_set_allocated_pagination(
    ::sonet::common::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.search.SearchNoteRequest.pagination)
}
inline ::sonet::common::Pagination* SearchNoteRequest::release_pagination() {
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Pagination* SearchNoteRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.search.SearchNoteRequest.pagination)
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::Pagination* SearchNoteRequest::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::Pagination* SearchNoteRequest::mutable_pagination() {
  ::sonet::common::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchNoteRequest.pagination)
  return _msg;
}
inline void SearchNoteRequest::set_allocated_pagination(::sonet::common::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.search.SearchNoteRequest.pagination)
}

// -------------------------------------------------------------------

// NoteResult

// string note_id = 1;
inline void NoteResult::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& NoteResult::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.search.NoteResult.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteResult::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.NoteResult.note_id)
}
inline std::string* NoteResult::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.search.NoteResult.note_id)
  return _s;
}
inline const std::string& NoteResult::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void NoteResult::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteResult::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteResult::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.search.NoteResult.note_id)
  return _impl_.note_id_.Release();
}
inline void NoteResult::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.NoteResult.note_id)
}

// string author_id = 2;
inline void NoteResult::clear_author_id() {
  _impl_.author_id_.ClearToEmpty();
}
inline const std::string& NoteResult::author_id() const {
  // @@protoc_insertion_point(field_get:sonet.search.NoteResult.author_id)
  return _internal_author_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteResult::set_author_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.NoteResult.author_id)
}
inline std::string* NoteResult::mutable_author_id() {
  std::string* _s = _internal_mutable_author_id();
  // @@protoc_insertion_point(field_mutable:sonet.search.NoteResult.author_id)
  return _s;
}
inline const std::string& NoteResult::_internal_author_id() const {
  return _impl_.author_id_.Get();
}
inline void NoteResult::_internal_set_author_id(const std::string& value) {
  
  _impl_.author_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteResult::_internal_mutable_author_id() {
  
  return _impl_.author_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteResult::release_author_id() {
  // @@protoc_insertion_point(field_release:sonet.search.NoteResult.author_id)
  return _impl_.author_id_.Release();
}
inline void NoteResult::set_allocated_author_id(std::string* author_id) {
  if (author_id != nullptr) {
    
  } else {
    
  }
  _impl_.author_id_.SetAllocated(author_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_id_.IsDefault()) {
    _impl_.author_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.NoteResult.author_id)
}

// string content = 3;
inline void NoteResult::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& NoteResult::content() const {
  // @@protoc_insertion_point(field_get:sonet.search.NoteResult.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoteResult::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.search.NoteResult.content)
}
inline std::string* NoteResult::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sonet.search.NoteResult.content)
  return _s;
}
inline const std::string& NoteResult::_internal_content() const {
  return _impl_.content_.Get();
}
inline void NoteResult::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* NoteResult::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* NoteResult::release_content() {
  // @@protoc_insertion_point(field_release:sonet.search.NoteResult.content)
  return _impl_.content_.Release();
}
inline void NoteResult::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.search.NoteResult.content)
}

// -------------------------------------------------------------------

// SearchNoteResponse

// repeated .sonet.search.NoteResult notes = 1;
inline int SearchNoteResponse::_internal_notes_size() const {
  return _impl_.notes_.size();
}
inline int SearchNoteResponse::notes_size() const {
  return _internal_notes_size();
}
inline void SearchNoteResponse::clear_notes() {
  _impl_.notes_.Clear();
}
inline ::sonet::search::NoteResult* SearchNoteResponse::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchNoteResponse.notes)
  return _impl_.notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::NoteResult >*
SearchNoteResponse::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:sonet.search.SearchNoteResponse.notes)
  return &_impl_.notes_;
}
inline const ::sonet::search::NoteResult& SearchNoteResponse::_internal_notes(int index) const {
  return _impl_.notes_.Get(index);
}
inline const ::sonet::search::NoteResult& SearchNoteResponse::notes(int index) const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchNoteResponse.notes)
  return _internal_notes(index);
}
inline ::sonet::search::NoteResult* SearchNoteResponse::_internal_add_notes() {
  return _impl_.notes_.Add();
}
inline ::sonet::search::NoteResult* SearchNoteResponse::add_notes() {
  ::sonet::search::NoteResult* _add = _internal_add_notes();
  // @@protoc_insertion_point(field_add:sonet.search.SearchNoteResponse.notes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::search::NoteResult >&
SearchNoteResponse::notes() const {
  // @@protoc_insertion_point(field_list:sonet.search.SearchNoteResponse.notes)
  return _impl_.notes_;
}

// .sonet.common.Pagination pagination = 2;
inline bool SearchNoteResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SearchNoteResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::Pagination& SearchNoteResponse::_internal_pagination() const {
  const ::sonet::common::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Pagination&>(
      ::sonet::common::_Pagination_default_instance_);
}
inline const ::sonet::common::Pagination& SearchNoteResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.search.SearchNoteResponse.pagination)
  return _internal_pagination();
}
inline void SearchNoteResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::common::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.search.SearchNoteResponse.pagination)
}
inline ::sonet::common::Pagination* SearchNoteResponse::release_pagination() {
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Pagination* SearchNoteResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.search.SearchNoteResponse.pagination)
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::Pagination* SearchNoteResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::Pagination* SearchNoteResponse::mutable_pagination() {
  ::sonet::common::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.search.SearchNoteResponse.pagination)
  return _msg;
}
inline void SearchNoteResponse::set_allocated_pagination(::sonet::common::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.search.SearchNoteResponse.pagination)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace search
}  // namespace sonet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fsearch_2eproto
