// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/starterpack_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fstarterpack_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fstarterpack_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fstarterpack_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fstarterpack_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fstarterpack_5fservice_2eproto;
namespace sonet {
namespace starterpack {
namespace v1 {
class AddStarterpackItemRequest;
struct AddStarterpackItemRequestDefaultTypeInternal;
extern AddStarterpackItemRequestDefaultTypeInternal _AddStarterpackItemRequest_default_instance_;
class AddStarterpackItemResponse;
struct AddStarterpackItemResponseDefaultTypeInternal;
extern AddStarterpackItemResponseDefaultTypeInternal _AddStarterpackItemResponse_default_instance_;
class CreateStarterpackRequest;
struct CreateStarterpackRequestDefaultTypeInternal;
extern CreateStarterpackRequestDefaultTypeInternal _CreateStarterpackRequest_default_instance_;
class CreateStarterpackResponse;
struct CreateStarterpackResponseDefaultTypeInternal;
extern CreateStarterpackResponseDefaultTypeInternal _CreateStarterpackResponse_default_instance_;
class DeleteStarterpackRequest;
struct DeleteStarterpackRequestDefaultTypeInternal;
extern DeleteStarterpackRequestDefaultTypeInternal _DeleteStarterpackRequest_default_instance_;
class DeleteStarterpackResponse;
struct DeleteStarterpackResponseDefaultTypeInternal;
extern DeleteStarterpackResponseDefaultTypeInternal _DeleteStarterpackResponse_default_instance_;
class GetStarterpackItemsRequest;
struct GetStarterpackItemsRequestDefaultTypeInternal;
extern GetStarterpackItemsRequestDefaultTypeInternal _GetStarterpackItemsRequest_default_instance_;
class GetStarterpackItemsResponse;
struct GetStarterpackItemsResponseDefaultTypeInternal;
extern GetStarterpackItemsResponseDefaultTypeInternal _GetStarterpackItemsResponse_default_instance_;
class GetStarterpackRequest;
struct GetStarterpackRequestDefaultTypeInternal;
extern GetStarterpackRequestDefaultTypeInternal _GetStarterpackRequest_default_instance_;
class GetStarterpackResponse;
struct GetStarterpackResponseDefaultTypeInternal;
extern GetStarterpackResponseDefaultTypeInternal _GetStarterpackResponse_default_instance_;
class GetSuggestedStarterpacksRequest;
struct GetSuggestedStarterpacksRequestDefaultTypeInternal;
extern GetSuggestedStarterpacksRequestDefaultTypeInternal _GetSuggestedStarterpacksRequest_default_instance_;
class GetSuggestedStarterpacksResponse;
struct GetSuggestedStarterpacksResponseDefaultTypeInternal;
extern GetSuggestedStarterpacksResponseDefaultTypeInternal _GetSuggestedStarterpacksResponse_default_instance_;
class GetUserStarterpacksRequest;
struct GetUserStarterpacksRequestDefaultTypeInternal;
extern GetUserStarterpacksRequestDefaultTypeInternal _GetUserStarterpacksRequest_default_instance_;
class GetUserStarterpacksResponse;
struct GetUserStarterpacksResponseDefaultTypeInternal;
extern GetUserStarterpacksResponseDefaultTypeInternal _GetUserStarterpacksResponse_default_instance_;
class RemoveStarterpackItemRequest;
struct RemoveStarterpackItemRequestDefaultTypeInternal;
extern RemoveStarterpackItemRequestDefaultTypeInternal _RemoveStarterpackItemRequest_default_instance_;
class RemoveStarterpackItemResponse;
struct RemoveStarterpackItemResponseDefaultTypeInternal;
extern RemoveStarterpackItemResponseDefaultTypeInternal _RemoveStarterpackItemResponse_default_instance_;
class Starterpack;
struct StarterpackDefaultTypeInternal;
extern StarterpackDefaultTypeInternal _Starterpack_default_instance_;
class StarterpackItem;
struct StarterpackItemDefaultTypeInternal;
extern StarterpackItemDefaultTypeInternal _StarterpackItem_default_instance_;
class UpdateStarterpackRequest;
struct UpdateStarterpackRequestDefaultTypeInternal;
extern UpdateStarterpackRequestDefaultTypeInternal _UpdateStarterpackRequest_default_instance_;
class UpdateStarterpackResponse;
struct UpdateStarterpackResponseDefaultTypeInternal;
extern UpdateStarterpackResponseDefaultTypeInternal _UpdateStarterpackResponse_default_instance_;
}  // namespace v1
}  // namespace starterpack
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::starterpack::v1::AddStarterpackItemRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::AddStarterpackItemRequest>(Arena*);
template<> ::sonet::starterpack::v1::AddStarterpackItemResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::AddStarterpackItemResponse>(Arena*);
template<> ::sonet::starterpack::v1::CreateStarterpackRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::CreateStarterpackRequest>(Arena*);
template<> ::sonet::starterpack::v1::CreateStarterpackResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::CreateStarterpackResponse>(Arena*);
template<> ::sonet::starterpack::v1::DeleteStarterpackRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::DeleteStarterpackRequest>(Arena*);
template<> ::sonet::starterpack::v1::DeleteStarterpackResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::DeleteStarterpackResponse>(Arena*);
template<> ::sonet::starterpack::v1::GetStarterpackItemsRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetStarterpackItemsRequest>(Arena*);
template<> ::sonet::starterpack::v1::GetStarterpackItemsResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetStarterpackItemsResponse>(Arena*);
template<> ::sonet::starterpack::v1::GetStarterpackRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetStarterpackRequest>(Arena*);
template<> ::sonet::starterpack::v1::GetStarterpackResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetStarterpackResponse>(Arena*);
template<> ::sonet::starterpack::v1::GetSuggestedStarterpacksRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetSuggestedStarterpacksRequest>(Arena*);
template<> ::sonet::starterpack::v1::GetSuggestedStarterpacksResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetSuggestedStarterpacksResponse>(Arena*);
template<> ::sonet::starterpack::v1::GetUserStarterpacksRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetUserStarterpacksRequest>(Arena*);
template<> ::sonet::starterpack::v1::GetUserStarterpacksResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::GetUserStarterpacksResponse>(Arena*);
template<> ::sonet::starterpack::v1::RemoveStarterpackItemRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::RemoveStarterpackItemRequest>(Arena*);
template<> ::sonet::starterpack::v1::RemoveStarterpackItemResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::RemoveStarterpackItemResponse>(Arena*);
template<> ::sonet::starterpack::v1::Starterpack* Arena::CreateMaybeMessage<::sonet::starterpack::v1::Starterpack>(Arena*);
template<> ::sonet::starterpack::v1::StarterpackItem* Arena::CreateMaybeMessage<::sonet::starterpack::v1::StarterpackItem>(Arena*);
template<> ::sonet::starterpack::v1::UpdateStarterpackRequest* Arena::CreateMaybeMessage<::sonet::starterpack::v1::UpdateStarterpackRequest>(Arena*);
template<> ::sonet::starterpack::v1::UpdateStarterpackResponse* Arena::CreateMaybeMessage<::sonet::starterpack::v1::UpdateStarterpackResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace starterpack {
namespace v1 {

enum ItemType : int {
  ITEM_TYPE_UNSPECIFIED = 0,
  ITEM_TYPE_PROFILE = 1,
  ITEM_TYPE_FEED = 2,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = ITEM_TYPE_UNSPECIFIED;
constexpr ItemType ItemType_MAX = ITEM_TYPE_FEED;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
// ===================================================================

class Starterpack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.Starterpack) */ {
 public:
  inline Starterpack() : Starterpack(nullptr) {}
  ~Starterpack() override;
  explicit PROTOBUF_CONSTEXPR Starterpack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Starterpack(const Starterpack& from);
  Starterpack(Starterpack&& from) noexcept
    : Starterpack() {
    *this = ::std::move(from);
  }

  inline Starterpack& operator=(const Starterpack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Starterpack& operator=(Starterpack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Starterpack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Starterpack* internal_default_instance() {
    return reinterpret_cast<const Starterpack*>(
               &_Starterpack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Starterpack& a, Starterpack& b) {
    a.Swap(&b);
  }
  inline void Swap(Starterpack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Starterpack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Starterpack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Starterpack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Starterpack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Starterpack& from) {
    Starterpack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Starterpack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.Starterpack";
  }
  protected:
  explicit Starterpack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kCreatorIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kAvatarUrlFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kIsPublicFieldNumber = 6,
    kItemCountFieldNumber = 9,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string creator_id = 2;
  void clear_creator_id();
  const std::string& creator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_url = 5;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 8;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // bool is_public = 6;
  void clear_is_public();
  bool is_public() const;
  void set_is_public(bool value);
  private:
  bool _internal_is_public() const;
  void _internal_set_is_public(bool value);
  public:

  // int32 item_count = 9;
  void clear_item_count();
  int32_t item_count() const;
  void set_item_count(int32_t value);
  private:
  int32_t _internal_item_count() const;
  void _internal_set_item_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.Starterpack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    bool is_public_;
    int32_t item_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StarterpackItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.StarterpackItem) */ {
 public:
  inline StarterpackItem() : StarterpackItem(nullptr) {}
  ~StarterpackItem() override;
  explicit PROTOBUF_CONSTEXPR StarterpackItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StarterpackItem(const StarterpackItem& from);
  StarterpackItem(StarterpackItem&& from) noexcept
    : StarterpackItem() {
    *this = ::std::move(from);
  }

  inline StarterpackItem& operator=(const StarterpackItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StarterpackItem& operator=(StarterpackItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StarterpackItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StarterpackItem* internal_default_instance() {
    return reinterpret_cast<const StarterpackItem*>(
               &_StarterpackItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StarterpackItem& a, StarterpackItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StarterpackItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StarterpackItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StarterpackItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StarterpackItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StarterpackItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StarterpackItem& from) {
    StarterpackItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StarterpackItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.StarterpackItem";
  }
  protected:
  explicit StarterpackItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kStarterpackIdFieldNumber = 2,
    kItemUriFieldNumber = 4,
    kCreatedAtFieldNumber = 6,
    kItemTypeFieldNumber = 3,
    kItemOrderFieldNumber = 5,
  };
  // string item_id = 1;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // string starterpack_id = 2;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string item_uri = 4;
  void clear_item_uri();
  const std::string& item_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_uri();
  PROTOBUF_NODISCARD std::string* release_item_uri();
  void set_allocated_item_uri(std::string* item_uri);
  private:
  const std::string& _internal_item_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_uri(const std::string& value);
  std::string* _internal_mutable_item_uri();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .sonet.starterpack.v1.ItemType item_type = 3;
  void clear_item_type();
  ::sonet::starterpack::v1::ItemType item_type() const;
  void set_item_type(::sonet::starterpack::v1::ItemType value);
  private:
  ::sonet::starterpack::v1::ItemType _internal_item_type() const;
  void _internal_set_item_type(::sonet::starterpack::v1::ItemType value);
  public:

  // int32 item_order = 5;
  void clear_item_order();
  int32_t item_order() const;
  void set_item_order(int32_t value);
  private:
  int32_t _internal_item_order() const;
  void _internal_set_item_order(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.StarterpackItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_uri_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int item_type_;
    int32_t item_order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateStarterpackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.CreateStarterpackRequest) */ {
 public:
  inline CreateStarterpackRequest() : CreateStarterpackRequest(nullptr) {}
  ~CreateStarterpackRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateStarterpackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateStarterpackRequest(const CreateStarterpackRequest& from);
  CreateStarterpackRequest(CreateStarterpackRequest&& from) noexcept
    : CreateStarterpackRequest() {
    *this = ::std::move(from);
  }

  inline CreateStarterpackRequest& operator=(const CreateStarterpackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStarterpackRequest& operator=(CreateStarterpackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateStarterpackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateStarterpackRequest* internal_default_instance() {
    return reinterpret_cast<const CreateStarterpackRequest*>(
               &_CreateStarterpackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateStarterpackRequest& a, CreateStarterpackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStarterpackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateStarterpackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateStarterpackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateStarterpackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateStarterpackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateStarterpackRequest& from) {
    CreateStarterpackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStarterpackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.CreateStarterpackRequest";
  }
  protected:
  explicit CreateStarterpackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kIsPublicFieldNumber = 5,
  };
  // string creator_id = 1;
  void clear_creator_id();
  const std::string& creator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bool is_public = 5;
  void clear_is_public();
  bool is_public() const;
  void set_is_public(bool value);
  private:
  bool _internal_is_public() const;
  void _internal_set_is_public(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.CreateStarterpackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    bool is_public_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateStarterpackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.CreateStarterpackResponse) */ {
 public:
  inline CreateStarterpackResponse() : CreateStarterpackResponse(nullptr) {}
  ~CreateStarterpackResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateStarterpackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateStarterpackResponse(const CreateStarterpackResponse& from);
  CreateStarterpackResponse(CreateStarterpackResponse&& from) noexcept
    : CreateStarterpackResponse() {
    *this = ::std::move(from);
  }

  inline CreateStarterpackResponse& operator=(const CreateStarterpackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStarterpackResponse& operator=(CreateStarterpackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateStarterpackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateStarterpackResponse* internal_default_instance() {
    return reinterpret_cast<const CreateStarterpackResponse*>(
               &_CreateStarterpackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateStarterpackResponse& a, CreateStarterpackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStarterpackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateStarterpackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateStarterpackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateStarterpackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateStarterpackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateStarterpackResponse& from) {
    CreateStarterpackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStarterpackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.CreateStarterpackResponse";
  }
  protected:
  explicit CreateStarterpackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kStarterpackFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.starterpack.v1.Starterpack starterpack = 2;
  bool has_starterpack() const;
  private:
  bool _internal_has_starterpack() const;
  public:
  void clear_starterpack();
  const ::sonet::starterpack::v1::Starterpack& starterpack() const;
  PROTOBUF_NODISCARD ::sonet::starterpack::v1::Starterpack* release_starterpack();
  ::sonet::starterpack::v1::Starterpack* mutable_starterpack();
  void set_allocated_starterpack(::sonet::starterpack::v1::Starterpack* starterpack);
  private:
  const ::sonet::starterpack::v1::Starterpack& _internal_starterpack() const;
  ::sonet::starterpack::v1::Starterpack* _internal_mutable_starterpack();
  public:
  void unsafe_arena_set_allocated_starterpack(
      ::sonet::starterpack::v1::Starterpack* starterpack);
  ::sonet::starterpack::v1::Starterpack* unsafe_arena_release_starterpack();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.CreateStarterpackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::starterpack::v1::Starterpack* starterpack_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStarterpackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetStarterpackRequest) */ {
 public:
  inline GetStarterpackRequest() : GetStarterpackRequest(nullptr) {}
  ~GetStarterpackRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStarterpackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStarterpackRequest(const GetStarterpackRequest& from);
  GetStarterpackRequest(GetStarterpackRequest&& from) noexcept
    : GetStarterpackRequest() {
    *this = ::std::move(from);
  }

  inline GetStarterpackRequest& operator=(const GetStarterpackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStarterpackRequest& operator=(GetStarterpackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStarterpackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStarterpackRequest* internal_default_instance() {
    return reinterpret_cast<const GetStarterpackRequest*>(
               &_GetStarterpackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetStarterpackRequest& a, GetStarterpackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStarterpackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStarterpackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStarterpackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStarterpackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStarterpackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStarterpackRequest& from) {
    GetStarterpackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStarterpackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetStarterpackRequest";
  }
  protected:
  explicit GetStarterpackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kRequesterIdFieldNumber = 2,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string requester_id = 2;
  void clear_requester_id();
  const std::string& requester_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* requester_id);
  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(const std::string& value);
  std::string* _internal_mutable_requester_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetStarterpackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStarterpackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetStarterpackResponse) */ {
 public:
  inline GetStarterpackResponse() : GetStarterpackResponse(nullptr) {}
  ~GetStarterpackResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStarterpackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStarterpackResponse(const GetStarterpackResponse& from);
  GetStarterpackResponse(GetStarterpackResponse&& from) noexcept
    : GetStarterpackResponse() {
    *this = ::std::move(from);
  }

  inline GetStarterpackResponse& operator=(const GetStarterpackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStarterpackResponse& operator=(GetStarterpackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStarterpackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStarterpackResponse* internal_default_instance() {
    return reinterpret_cast<const GetStarterpackResponse*>(
               &_GetStarterpackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetStarterpackResponse& a, GetStarterpackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStarterpackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStarterpackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStarterpackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStarterpackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStarterpackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStarterpackResponse& from) {
    GetStarterpackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStarterpackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetStarterpackResponse";
  }
  protected:
  explicit GetStarterpackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kStarterpackFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.starterpack.v1.Starterpack starterpack = 2;
  bool has_starterpack() const;
  private:
  bool _internal_has_starterpack() const;
  public:
  void clear_starterpack();
  const ::sonet::starterpack::v1::Starterpack& starterpack() const;
  PROTOBUF_NODISCARD ::sonet::starterpack::v1::Starterpack* release_starterpack();
  ::sonet::starterpack::v1::Starterpack* mutable_starterpack();
  void set_allocated_starterpack(::sonet::starterpack::v1::Starterpack* starterpack);
  private:
  const ::sonet::starterpack::v1::Starterpack& _internal_starterpack() const;
  ::sonet::starterpack::v1::Starterpack* _internal_mutable_starterpack();
  public:
  void unsafe_arena_set_allocated_starterpack(
      ::sonet::starterpack::v1::Starterpack* starterpack);
  ::sonet::starterpack::v1::Starterpack* unsafe_arena_release_starterpack();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetStarterpackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::starterpack::v1::Starterpack* starterpack_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUserStarterpacksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetUserStarterpacksRequest) */ {
 public:
  inline GetUserStarterpacksRequest() : GetUserStarterpacksRequest(nullptr) {}
  ~GetUserStarterpacksRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserStarterpacksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserStarterpacksRequest(const GetUserStarterpacksRequest& from);
  GetUserStarterpacksRequest(GetUserStarterpacksRequest&& from) noexcept
    : GetUserStarterpacksRequest() {
    *this = ::std::move(from);
  }

  inline GetUserStarterpacksRequest& operator=(const GetUserStarterpacksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserStarterpacksRequest& operator=(GetUserStarterpacksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserStarterpacksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserStarterpacksRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserStarterpacksRequest*>(
               &_GetUserStarterpacksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetUserStarterpacksRequest& a, GetUserStarterpacksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserStarterpacksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserStarterpacksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserStarterpacksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserStarterpacksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserStarterpacksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserStarterpacksRequest& from) {
    GetUserStarterpacksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserStarterpacksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetUserStarterpacksRequest";
  }
  protected:
  explicit GetUserStarterpacksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequesterIdFieldNumber = 2,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requester_id = 2;
  void clear_requester_id();
  const std::string& requester_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* requester_id);
  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(const std::string& value);
  std::string* _internal_mutable_requester_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 limit = 3;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetUserStarterpacksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUserStarterpacksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetUserStarterpacksResponse) */ {
 public:
  inline GetUserStarterpacksResponse() : GetUserStarterpacksResponse(nullptr) {}
  ~GetUserStarterpacksResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUserStarterpacksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserStarterpacksResponse(const GetUserStarterpacksResponse& from);
  GetUserStarterpacksResponse(GetUserStarterpacksResponse&& from) noexcept
    : GetUserStarterpacksResponse() {
    *this = ::std::move(from);
  }

  inline GetUserStarterpacksResponse& operator=(const GetUserStarterpacksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserStarterpacksResponse& operator=(GetUserStarterpacksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserStarterpacksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserStarterpacksResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserStarterpacksResponse*>(
               &_GetUserStarterpacksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetUserStarterpacksResponse& a, GetUserStarterpacksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserStarterpacksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserStarterpacksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserStarterpacksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserStarterpacksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserStarterpacksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserStarterpacksResponse& from) {
    GetUserStarterpacksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserStarterpacksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetUserStarterpacksResponse";
  }
  protected:
  explicit GetUserStarterpacksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpacksFieldNumber = 2,
    kNextCursorFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated .sonet.starterpack.v1.Starterpack starterpacks = 2;
  int starterpacks_size() const;
  private:
  int _internal_starterpacks_size() const;
  public:
  void clear_starterpacks();
  ::sonet::starterpack::v1::Starterpack* mutable_starterpacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >*
      mutable_starterpacks();
  private:
  const ::sonet::starterpack::v1::Starterpack& _internal_starterpacks(int index) const;
  ::sonet::starterpack::v1::Starterpack* _internal_add_starterpacks();
  public:
  const ::sonet::starterpack::v1::Starterpack& starterpacks(int index) const;
  ::sonet::starterpack::v1::Starterpack* add_starterpacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >&
      starterpacks() const;

  // string next_cursor = 3;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetUserStarterpacksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack > starterpacks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateStarterpackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.UpdateStarterpackRequest) */ {
 public:
  inline UpdateStarterpackRequest() : UpdateStarterpackRequest(nullptr) {}
  ~UpdateStarterpackRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateStarterpackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStarterpackRequest(const UpdateStarterpackRequest& from);
  UpdateStarterpackRequest(UpdateStarterpackRequest&& from) noexcept
    : UpdateStarterpackRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStarterpackRequest& operator=(const UpdateStarterpackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStarterpackRequest& operator=(UpdateStarterpackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStarterpackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStarterpackRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStarterpackRequest*>(
               &_UpdateStarterpackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateStarterpackRequest& a, UpdateStarterpackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStarterpackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStarterpackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStarterpackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateStarterpackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateStarterpackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateStarterpackRequest& from) {
    UpdateStarterpackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStarterpackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.UpdateStarterpackRequest";
  }
  protected:
  explicit UpdateStarterpackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kRequesterIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kAvatarUrlFieldNumber = 5,
    kIsPublicFieldNumber = 6,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string requester_id = 2;
  void clear_requester_id();
  const std::string& requester_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* requester_id);
  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(const std::string& value);
  std::string* _internal_mutable_requester_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_url = 5;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bool is_public = 6;
  void clear_is_public();
  bool is_public() const;
  void set_is_public(bool value);
  private:
  bool _internal_is_public() const;
  void _internal_set_is_public(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.UpdateStarterpackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    bool is_public_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateStarterpackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.UpdateStarterpackResponse) */ {
 public:
  inline UpdateStarterpackResponse() : UpdateStarterpackResponse(nullptr) {}
  ~UpdateStarterpackResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateStarterpackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStarterpackResponse(const UpdateStarterpackResponse& from);
  UpdateStarterpackResponse(UpdateStarterpackResponse&& from) noexcept
    : UpdateStarterpackResponse() {
    *this = ::std::move(from);
  }

  inline UpdateStarterpackResponse& operator=(const UpdateStarterpackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStarterpackResponse& operator=(UpdateStarterpackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStarterpackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStarterpackResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateStarterpackResponse*>(
               &_UpdateStarterpackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateStarterpackResponse& a, UpdateStarterpackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStarterpackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStarterpackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStarterpackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateStarterpackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateStarterpackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateStarterpackResponse& from) {
    UpdateStarterpackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStarterpackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.UpdateStarterpackResponse";
  }
  protected:
  explicit UpdateStarterpackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kStarterpackFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.starterpack.v1.Starterpack starterpack = 2;
  bool has_starterpack() const;
  private:
  bool _internal_has_starterpack() const;
  public:
  void clear_starterpack();
  const ::sonet::starterpack::v1::Starterpack& starterpack() const;
  PROTOBUF_NODISCARD ::sonet::starterpack::v1::Starterpack* release_starterpack();
  ::sonet::starterpack::v1::Starterpack* mutable_starterpack();
  void set_allocated_starterpack(::sonet::starterpack::v1::Starterpack* starterpack);
  private:
  const ::sonet::starterpack::v1::Starterpack& _internal_starterpack() const;
  ::sonet::starterpack::v1::Starterpack* _internal_mutable_starterpack();
  public:
  void unsafe_arena_set_allocated_starterpack(
      ::sonet::starterpack::v1::Starterpack* starterpack);
  ::sonet::starterpack::v1::Starterpack* unsafe_arena_release_starterpack();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.UpdateStarterpackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::starterpack::v1::Starterpack* starterpack_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteStarterpackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.DeleteStarterpackRequest) */ {
 public:
  inline DeleteStarterpackRequest() : DeleteStarterpackRequest(nullptr) {}
  ~DeleteStarterpackRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteStarterpackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteStarterpackRequest(const DeleteStarterpackRequest& from);
  DeleteStarterpackRequest(DeleteStarterpackRequest&& from) noexcept
    : DeleteStarterpackRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStarterpackRequest& operator=(const DeleteStarterpackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStarterpackRequest& operator=(DeleteStarterpackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteStarterpackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteStarterpackRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStarterpackRequest*>(
               &_DeleteStarterpackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteStarterpackRequest& a, DeleteStarterpackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStarterpackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStarterpackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteStarterpackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteStarterpackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteStarterpackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteStarterpackRequest& from) {
    DeleteStarterpackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStarterpackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.DeleteStarterpackRequest";
  }
  protected:
  explicit DeleteStarterpackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kRequesterIdFieldNumber = 2,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string requester_id = 2;
  void clear_requester_id();
  const std::string& requester_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* requester_id);
  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(const std::string& value);
  std::string* _internal_mutable_requester_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.DeleteStarterpackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteStarterpackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.DeleteStarterpackResponse) */ {
 public:
  inline DeleteStarterpackResponse() : DeleteStarterpackResponse(nullptr) {}
  ~DeleteStarterpackResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteStarterpackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteStarterpackResponse(const DeleteStarterpackResponse& from);
  DeleteStarterpackResponse(DeleteStarterpackResponse&& from) noexcept
    : DeleteStarterpackResponse() {
    *this = ::std::move(from);
  }

  inline DeleteStarterpackResponse& operator=(const DeleteStarterpackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStarterpackResponse& operator=(DeleteStarterpackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteStarterpackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteStarterpackResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteStarterpackResponse*>(
               &_DeleteStarterpackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteStarterpackResponse& a, DeleteStarterpackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStarterpackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStarterpackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteStarterpackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteStarterpackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteStarterpackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteStarterpackResponse& from) {
    DeleteStarterpackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStarterpackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.DeleteStarterpackResponse";
  }
  protected:
  explicit DeleteStarterpackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.DeleteStarterpackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddStarterpackItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.AddStarterpackItemRequest) */ {
 public:
  inline AddStarterpackItemRequest() : AddStarterpackItemRequest(nullptr) {}
  ~AddStarterpackItemRequest() override;
  explicit PROTOBUF_CONSTEXPR AddStarterpackItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddStarterpackItemRequest(const AddStarterpackItemRequest& from);
  AddStarterpackItemRequest(AddStarterpackItemRequest&& from) noexcept
    : AddStarterpackItemRequest() {
    *this = ::std::move(from);
  }

  inline AddStarterpackItemRequest& operator=(const AddStarterpackItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddStarterpackItemRequest& operator=(AddStarterpackItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddStarterpackItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddStarterpackItemRequest* internal_default_instance() {
    return reinterpret_cast<const AddStarterpackItemRequest*>(
               &_AddStarterpackItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddStarterpackItemRequest& a, AddStarterpackItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddStarterpackItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddStarterpackItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddStarterpackItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddStarterpackItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddStarterpackItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddStarterpackItemRequest& from) {
    AddStarterpackItemRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddStarterpackItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.AddStarterpackItemRequest";
  }
  protected:
  explicit AddStarterpackItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kItemUriFieldNumber = 3,
    kAddedByFieldNumber = 5,
    kItemTypeFieldNumber = 2,
    kItemOrderFieldNumber = 4,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string item_uri = 3;
  void clear_item_uri();
  const std::string& item_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_uri();
  PROTOBUF_NODISCARD std::string* release_item_uri();
  void set_allocated_item_uri(std::string* item_uri);
  private:
  const std::string& _internal_item_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_uri(const std::string& value);
  std::string* _internal_mutable_item_uri();
  public:

  // string added_by = 5;
  void clear_added_by();
  const std::string& added_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_added_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_added_by();
  PROTOBUF_NODISCARD std::string* release_added_by();
  void set_allocated_added_by(std::string* added_by);
  private:
  const std::string& _internal_added_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_added_by(const std::string& value);
  std::string* _internal_mutable_added_by();
  public:

  // .sonet.starterpack.v1.ItemType item_type = 2;
  void clear_item_type();
  ::sonet::starterpack::v1::ItemType item_type() const;
  void set_item_type(::sonet::starterpack::v1::ItemType value);
  private:
  ::sonet::starterpack::v1::ItemType _internal_item_type() const;
  void _internal_set_item_type(::sonet::starterpack::v1::ItemType value);
  public:

  // int32 item_order = 4;
  void clear_item_order();
  int32_t item_order() const;
  void set_item_order(int32_t value);
  private:
  int32_t _internal_item_order() const;
  void _internal_set_item_order(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.AddStarterpackItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr added_by_;
    int item_type_;
    int32_t item_order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddStarterpackItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.AddStarterpackItemResponse) */ {
 public:
  inline AddStarterpackItemResponse() : AddStarterpackItemResponse(nullptr) {}
  ~AddStarterpackItemResponse() override;
  explicit PROTOBUF_CONSTEXPR AddStarterpackItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddStarterpackItemResponse(const AddStarterpackItemResponse& from);
  AddStarterpackItemResponse(AddStarterpackItemResponse&& from) noexcept
    : AddStarterpackItemResponse() {
    *this = ::std::move(from);
  }

  inline AddStarterpackItemResponse& operator=(const AddStarterpackItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddStarterpackItemResponse& operator=(AddStarterpackItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddStarterpackItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddStarterpackItemResponse* internal_default_instance() {
    return reinterpret_cast<const AddStarterpackItemResponse*>(
               &_AddStarterpackItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddStarterpackItemResponse& a, AddStarterpackItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddStarterpackItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddStarterpackItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddStarterpackItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddStarterpackItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddStarterpackItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddStarterpackItemResponse& from) {
    AddStarterpackItemResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddStarterpackItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.AddStarterpackItemResponse";
  }
  protected:
  explicit AddStarterpackItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kItemFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.starterpack.v1.StarterpackItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::sonet::starterpack::v1::StarterpackItem& item() const;
  PROTOBUF_NODISCARD ::sonet::starterpack::v1::StarterpackItem* release_item();
  ::sonet::starterpack::v1::StarterpackItem* mutable_item();
  void set_allocated_item(::sonet::starterpack::v1::StarterpackItem* item);
  private:
  const ::sonet::starterpack::v1::StarterpackItem& _internal_item() const;
  ::sonet::starterpack::v1::StarterpackItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::sonet::starterpack::v1::StarterpackItem* item);
  ::sonet::starterpack::v1::StarterpackItem* unsafe_arena_release_item();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.AddStarterpackItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::starterpack::v1::StarterpackItem* item_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveStarterpackItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.RemoveStarterpackItemRequest) */ {
 public:
  inline RemoveStarterpackItemRequest() : RemoveStarterpackItemRequest(nullptr) {}
  ~RemoveStarterpackItemRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveStarterpackItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveStarterpackItemRequest(const RemoveStarterpackItemRequest& from);
  RemoveStarterpackItemRequest(RemoveStarterpackItemRequest&& from) noexcept
    : RemoveStarterpackItemRequest() {
    *this = ::std::move(from);
  }

  inline RemoveStarterpackItemRequest& operator=(const RemoveStarterpackItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveStarterpackItemRequest& operator=(RemoveStarterpackItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveStarterpackItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveStarterpackItemRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveStarterpackItemRequest*>(
               &_RemoveStarterpackItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RemoveStarterpackItemRequest& a, RemoveStarterpackItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveStarterpackItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveStarterpackItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveStarterpackItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveStarterpackItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveStarterpackItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveStarterpackItemRequest& from) {
    RemoveStarterpackItemRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveStarterpackItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.RemoveStarterpackItemRequest";
  }
  protected:
  explicit RemoveStarterpackItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kRemovedByFieldNumber = 3,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // string removed_by = 3;
  void clear_removed_by();
  const std::string& removed_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_removed_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_removed_by();
  PROTOBUF_NODISCARD std::string* release_removed_by();
  void set_allocated_removed_by(std::string* removed_by);
  private:
  const std::string& _internal_removed_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_removed_by(const std::string& value);
  std::string* _internal_mutable_removed_by();
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.RemoveStarterpackItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr removed_by_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveStarterpackItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.RemoveStarterpackItemResponse) */ {
 public:
  inline RemoveStarterpackItemResponse() : RemoveStarterpackItemResponse(nullptr) {}
  ~RemoveStarterpackItemResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveStarterpackItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveStarterpackItemResponse(const RemoveStarterpackItemResponse& from);
  RemoveStarterpackItemResponse(RemoveStarterpackItemResponse&& from) noexcept
    : RemoveStarterpackItemResponse() {
    *this = ::std::move(from);
  }

  inline RemoveStarterpackItemResponse& operator=(const RemoveStarterpackItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveStarterpackItemResponse& operator=(RemoveStarterpackItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveStarterpackItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveStarterpackItemResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveStarterpackItemResponse*>(
               &_RemoveStarterpackItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RemoveStarterpackItemResponse& a, RemoveStarterpackItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveStarterpackItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveStarterpackItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveStarterpackItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveStarterpackItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveStarterpackItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveStarterpackItemResponse& from) {
    RemoveStarterpackItemResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveStarterpackItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.RemoveStarterpackItemResponse";
  }
  protected:
  explicit RemoveStarterpackItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.RemoveStarterpackItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStarterpackItemsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetStarterpackItemsRequest) */ {
 public:
  inline GetStarterpackItemsRequest() : GetStarterpackItemsRequest(nullptr) {}
  ~GetStarterpackItemsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStarterpackItemsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStarterpackItemsRequest(const GetStarterpackItemsRequest& from);
  GetStarterpackItemsRequest(GetStarterpackItemsRequest&& from) noexcept
    : GetStarterpackItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetStarterpackItemsRequest& operator=(const GetStarterpackItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStarterpackItemsRequest& operator=(GetStarterpackItemsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStarterpackItemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStarterpackItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStarterpackItemsRequest*>(
               &_GetStarterpackItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetStarterpackItemsRequest& a, GetStarterpackItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStarterpackItemsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStarterpackItemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStarterpackItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStarterpackItemsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStarterpackItemsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStarterpackItemsRequest& from) {
    GetStarterpackItemsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStarterpackItemsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetStarterpackItemsRequest";
  }
  protected:
  explicit GetStarterpackItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpackIdFieldNumber = 1,
    kRequesterIdFieldNumber = 2,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
  };
  // string starterpack_id = 1;
  void clear_starterpack_id();
  const std::string& starterpack_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starterpack_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starterpack_id();
  PROTOBUF_NODISCARD std::string* release_starterpack_id();
  void set_allocated_starterpack_id(std::string* starterpack_id);
  private:
  const std::string& _internal_starterpack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starterpack_id(const std::string& value);
  std::string* _internal_mutable_starterpack_id();
  public:

  // string requester_id = 2;
  void clear_requester_id();
  const std::string& requester_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* requester_id);
  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(const std::string& value);
  std::string* _internal_mutable_requester_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 limit = 3;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetStarterpackItemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starterpack_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStarterpackItemsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetStarterpackItemsResponse) */ {
 public:
  inline GetStarterpackItemsResponse() : GetStarterpackItemsResponse(nullptr) {}
  ~GetStarterpackItemsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStarterpackItemsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStarterpackItemsResponse(const GetStarterpackItemsResponse& from);
  GetStarterpackItemsResponse(GetStarterpackItemsResponse&& from) noexcept
    : GetStarterpackItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetStarterpackItemsResponse& operator=(const GetStarterpackItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStarterpackItemsResponse& operator=(GetStarterpackItemsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStarterpackItemsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStarterpackItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStarterpackItemsResponse*>(
               &_GetStarterpackItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetStarterpackItemsResponse& a, GetStarterpackItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStarterpackItemsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStarterpackItemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStarterpackItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStarterpackItemsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStarterpackItemsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStarterpackItemsResponse& from) {
    GetStarterpackItemsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStarterpackItemsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetStarterpackItemsResponse";
  }
  protected:
  explicit GetStarterpackItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kNextCursorFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated .sonet.starterpack.v1.StarterpackItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::sonet::starterpack::v1::StarterpackItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::StarterpackItem >*
      mutable_items();
  private:
  const ::sonet::starterpack::v1::StarterpackItem& _internal_items(int index) const;
  ::sonet::starterpack::v1::StarterpackItem* _internal_add_items();
  public:
  const ::sonet::starterpack::v1::StarterpackItem& items(int index) const;
  ::sonet::starterpack::v1::StarterpackItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::StarterpackItem >&
      items() const;

  // string next_cursor = 3;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetStarterpackItemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::StarterpackItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSuggestedStarterpacksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetSuggestedStarterpacksRequest) */ {
 public:
  inline GetSuggestedStarterpacksRequest() : GetSuggestedStarterpacksRequest(nullptr) {}
  ~GetSuggestedStarterpacksRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSuggestedStarterpacksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSuggestedStarterpacksRequest(const GetSuggestedStarterpacksRequest& from);
  GetSuggestedStarterpacksRequest(GetSuggestedStarterpacksRequest&& from) noexcept
    : GetSuggestedStarterpacksRequest() {
    *this = ::std::move(from);
  }

  inline GetSuggestedStarterpacksRequest& operator=(const GetSuggestedStarterpacksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSuggestedStarterpacksRequest& operator=(GetSuggestedStarterpacksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSuggestedStarterpacksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSuggestedStarterpacksRequest* internal_default_instance() {
    return reinterpret_cast<const GetSuggestedStarterpacksRequest*>(
               &_GetSuggestedStarterpacksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetSuggestedStarterpacksRequest& a, GetSuggestedStarterpacksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSuggestedStarterpacksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSuggestedStarterpacksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSuggestedStarterpacksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSuggestedStarterpacksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSuggestedStarterpacksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSuggestedStarterpacksRequest& from) {
    GetSuggestedStarterpacksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuggestedStarterpacksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetSuggestedStarterpacksRequest";
  }
  protected:
  explicit GetSuggestedStarterpacksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kCursorFieldNumber = 3,
    kLimitFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string cursor = 3;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetSuggestedStarterpacksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSuggestedStarterpacksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.starterpack.v1.GetSuggestedStarterpacksResponse) */ {
 public:
  inline GetSuggestedStarterpacksResponse() : GetSuggestedStarterpacksResponse(nullptr) {}
  ~GetSuggestedStarterpacksResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSuggestedStarterpacksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSuggestedStarterpacksResponse(const GetSuggestedStarterpacksResponse& from);
  GetSuggestedStarterpacksResponse(GetSuggestedStarterpacksResponse&& from) noexcept
    : GetSuggestedStarterpacksResponse() {
    *this = ::std::move(from);
  }

  inline GetSuggestedStarterpacksResponse& operator=(const GetSuggestedStarterpacksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSuggestedStarterpacksResponse& operator=(GetSuggestedStarterpacksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSuggestedStarterpacksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSuggestedStarterpacksResponse* internal_default_instance() {
    return reinterpret_cast<const GetSuggestedStarterpacksResponse*>(
               &_GetSuggestedStarterpacksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetSuggestedStarterpacksResponse& a, GetSuggestedStarterpacksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSuggestedStarterpacksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSuggestedStarterpacksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSuggestedStarterpacksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSuggestedStarterpacksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSuggestedStarterpacksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSuggestedStarterpacksResponse& from) {
    GetSuggestedStarterpacksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuggestedStarterpacksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.starterpack.v1.GetSuggestedStarterpacksResponse";
  }
  protected:
  explicit GetSuggestedStarterpacksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStarterpacksFieldNumber = 2,
    kNextCursorFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated .sonet.starterpack.v1.Starterpack starterpacks = 2;
  int starterpacks_size() const;
  private:
  int _internal_starterpacks_size() const;
  public:
  void clear_starterpacks();
  ::sonet::starterpack::v1::Starterpack* mutable_starterpacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >*
      mutable_starterpacks();
  private:
  const ::sonet::starterpack::v1::Starterpack& _internal_starterpacks(int index) const;
  ::sonet::starterpack::v1::Starterpack* _internal_add_starterpacks();
  public:
  const ::sonet::starterpack::v1::Starterpack& starterpacks(int index) const;
  ::sonet::starterpack::v1::Starterpack* add_starterpacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >&
      starterpacks() const;

  // string next_cursor = 3;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.starterpack.v1.GetSuggestedStarterpacksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack > starterpacks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fstarterpack_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Starterpack

// string starterpack_id = 1;
inline void Starterpack::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& Starterpack::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Starterpack::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.starterpack_id)
}
inline std::string* Starterpack::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.starterpack_id)
  return _s;
}
inline const std::string& Starterpack::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void Starterpack::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Starterpack::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Starterpack::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void Starterpack::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.starterpack_id)
}

// string creator_id = 2;
inline void Starterpack::clear_creator_id() {
  _impl_.creator_id_.ClearToEmpty();
}
inline const std::string& Starterpack::creator_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.creator_id)
  return _internal_creator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Starterpack::set_creator_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.creator_id)
}
inline std::string* Starterpack::mutable_creator_id() {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.creator_id)
  return _s;
}
inline const std::string& Starterpack::_internal_creator_id() const {
  return _impl_.creator_id_.Get();
}
inline void Starterpack::_internal_set_creator_id(const std::string& value) {
  
  _impl_.creator_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Starterpack::_internal_mutable_creator_id() {
  
  return _impl_.creator_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Starterpack::release_creator_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.creator_id)
  return _impl_.creator_id_.Release();
}
inline void Starterpack::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  _impl_.creator_id_.SetAllocated(creator_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_id_.IsDefault()) {
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.creator_id)
}

// string name = 3;
inline void Starterpack::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Starterpack::name() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Starterpack::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.name)
}
inline std::string* Starterpack::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.name)
  return _s;
}
inline const std::string& Starterpack::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Starterpack::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Starterpack::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Starterpack::release_name() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.name)
  return _impl_.name_.Release();
}
inline void Starterpack::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.name)
}

// string description = 4;
inline void Starterpack::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Starterpack::description() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Starterpack::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.description)
}
inline std::string* Starterpack::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.description)
  return _s;
}
inline const std::string& Starterpack::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Starterpack::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Starterpack::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Starterpack::release_description() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.description)
  return _impl_.description_.Release();
}
inline void Starterpack::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.description)
}

// string avatar_url = 5;
inline void Starterpack::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& Starterpack::avatar_url() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Starterpack::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.avatar_url)
}
inline std::string* Starterpack::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.avatar_url)
  return _s;
}
inline const std::string& Starterpack::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void Starterpack::_internal_set_avatar_url(const std::string& value) {
  
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Starterpack::_internal_mutable_avatar_url() {
  
  return _impl_.avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Starterpack::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void Starterpack::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_url_.SetAllocated(avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_url_.IsDefault()) {
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.avatar_url)
}

// bool is_public = 6;
inline void Starterpack::clear_is_public() {
  _impl_.is_public_ = false;
}
inline bool Starterpack::_internal_is_public() const {
  return _impl_.is_public_;
}
inline bool Starterpack::is_public() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.is_public)
  return _internal_is_public();
}
inline void Starterpack::_internal_set_is_public(bool value) {
  
  _impl_.is_public_ = value;
}
inline void Starterpack::set_is_public(bool value) {
  _internal_set_is_public(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.is_public)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool Starterpack::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool Starterpack::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Starterpack::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Starterpack::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.created_at)
  return _internal_created_at();
}
inline void Starterpack::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.Starterpack.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.created_at)
  return _msg;
}
inline void Starterpack::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.created_at)
}

// .google.protobuf.Timestamp updated_at = 8;
inline bool Starterpack::_internal_has_updated_at() const {
  return this != internal_default_instance() && _impl_.updated_at_ != nullptr;
}
inline bool Starterpack::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Starterpack::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Starterpack::updated_at() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.updated_at)
  return _internal_updated_at();
}
inline void Starterpack::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.Starterpack.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.Starterpack.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::_internal_mutable_updated_at() {
  
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Starterpack::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.Starterpack.updated_at)
  return _msg;
}
inline void Starterpack::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.Starterpack.updated_at)
}

// int32 item_count = 9;
inline void Starterpack::clear_item_count() {
  _impl_.item_count_ = 0;
}
inline int32_t Starterpack::_internal_item_count() const {
  return _impl_.item_count_;
}
inline int32_t Starterpack::item_count() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.Starterpack.item_count)
  return _internal_item_count();
}
inline void Starterpack::_internal_set_item_count(int32_t value) {
  
  _impl_.item_count_ = value;
}
inline void Starterpack::set_item_count(int32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.Starterpack.item_count)
}

// -------------------------------------------------------------------

// StarterpackItem

// string item_id = 1;
inline void StarterpackItem::clear_item_id() {
  _impl_.item_id_.ClearToEmpty();
}
inline const std::string& StarterpackItem::item_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.StarterpackItem.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StarterpackItem::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.item_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.StarterpackItem.item_id)
}
inline std::string* StarterpackItem::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.StarterpackItem.item_id)
  return _s;
}
inline const std::string& StarterpackItem::_internal_item_id() const {
  return _impl_.item_id_.Get();
}
inline void StarterpackItem::_internal_set_item_id(const std::string& value) {
  
  _impl_.item_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StarterpackItem::_internal_mutable_item_id() {
  
  return _impl_.item_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StarterpackItem::release_item_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.StarterpackItem.item_id)
  return _impl_.item_id_.Release();
}
inline void StarterpackItem::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  _impl_.item_id_.SetAllocated(item_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_id_.IsDefault()) {
    _impl_.item_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.StarterpackItem.item_id)
}

// string starterpack_id = 2;
inline void StarterpackItem::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& StarterpackItem::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.StarterpackItem.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StarterpackItem::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.StarterpackItem.starterpack_id)
}
inline std::string* StarterpackItem::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.StarterpackItem.starterpack_id)
  return _s;
}
inline const std::string& StarterpackItem::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void StarterpackItem::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StarterpackItem::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StarterpackItem::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.StarterpackItem.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void StarterpackItem::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.StarterpackItem.starterpack_id)
}

// .sonet.starterpack.v1.ItemType item_type = 3;
inline void StarterpackItem::clear_item_type() {
  _impl_.item_type_ = 0;
}
inline ::sonet::starterpack::v1::ItemType StarterpackItem::_internal_item_type() const {
  return static_cast< ::sonet::starterpack::v1::ItemType >(_impl_.item_type_);
}
inline ::sonet::starterpack::v1::ItemType StarterpackItem::item_type() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.StarterpackItem.item_type)
  return _internal_item_type();
}
inline void StarterpackItem::_internal_set_item_type(::sonet::starterpack::v1::ItemType value) {
  
  _impl_.item_type_ = value;
}
inline void StarterpackItem::set_item_type(::sonet::starterpack::v1::ItemType value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.StarterpackItem.item_type)
}

// string item_uri = 4;
inline void StarterpackItem::clear_item_uri() {
  _impl_.item_uri_.ClearToEmpty();
}
inline const std::string& StarterpackItem::item_uri() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.StarterpackItem.item_uri)
  return _internal_item_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StarterpackItem::set_item_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.item_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.StarterpackItem.item_uri)
}
inline std::string* StarterpackItem::mutable_item_uri() {
  std::string* _s = _internal_mutable_item_uri();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.StarterpackItem.item_uri)
  return _s;
}
inline const std::string& StarterpackItem::_internal_item_uri() const {
  return _impl_.item_uri_.Get();
}
inline void StarterpackItem::_internal_set_item_uri(const std::string& value) {
  
  _impl_.item_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* StarterpackItem::_internal_mutable_item_uri() {
  
  return _impl_.item_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* StarterpackItem::release_item_uri() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.StarterpackItem.item_uri)
  return _impl_.item_uri_.Release();
}
inline void StarterpackItem::set_allocated_item_uri(std::string* item_uri) {
  if (item_uri != nullptr) {
    
  } else {
    
  }
  _impl_.item_uri_.SetAllocated(item_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_uri_.IsDefault()) {
    _impl_.item_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.StarterpackItem.item_uri)
}

// int32 item_order = 5;
inline void StarterpackItem::clear_item_order() {
  _impl_.item_order_ = 0;
}
inline int32_t StarterpackItem::_internal_item_order() const {
  return _impl_.item_order_;
}
inline int32_t StarterpackItem::item_order() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.StarterpackItem.item_order)
  return _internal_item_order();
}
inline void StarterpackItem::_internal_set_item_order(int32_t value) {
  
  _impl_.item_order_ = value;
}
inline void StarterpackItem::set_item_order(int32_t value) {
  _internal_set_item_order(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.StarterpackItem.item_order)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool StarterpackItem::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool StarterpackItem::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StarterpackItem::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StarterpackItem::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.StarterpackItem.created_at)
  return _internal_created_at();
}
inline void StarterpackItem::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.StarterpackItem.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StarterpackItem::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StarterpackItem::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.StarterpackItem.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StarterpackItem::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StarterpackItem::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.StarterpackItem.created_at)
  return _msg;
}
inline void StarterpackItem::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.StarterpackItem.created_at)
}

// -------------------------------------------------------------------

// CreateStarterpackRequest

// string creator_id = 1;
inline void CreateStarterpackRequest::clear_creator_id() {
  _impl_.creator_id_.ClearToEmpty();
}
inline const std::string& CreateStarterpackRequest::creator_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackRequest.creator_id)
  return _internal_creator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateStarterpackRequest::set_creator_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackRequest.creator_id)
}
inline std::string* CreateStarterpackRequest::mutable_creator_id() {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.CreateStarterpackRequest.creator_id)
  return _s;
}
inline const std::string& CreateStarterpackRequest::_internal_creator_id() const {
  return _impl_.creator_id_.Get();
}
inline void CreateStarterpackRequest::_internal_set_creator_id(const std::string& value) {
  
  _impl_.creator_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::_internal_mutable_creator_id() {
  
  return _impl_.creator_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::release_creator_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.CreateStarterpackRequest.creator_id)
  return _impl_.creator_id_.Release();
}
inline void CreateStarterpackRequest::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  _impl_.creator_id_.SetAllocated(creator_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_id_.IsDefault()) {
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.CreateStarterpackRequest.creator_id)
}

// string name = 2;
inline void CreateStarterpackRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateStarterpackRequest::name() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateStarterpackRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackRequest.name)
}
inline std::string* CreateStarterpackRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.CreateStarterpackRequest.name)
  return _s;
}
inline const std::string& CreateStarterpackRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateStarterpackRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::release_name() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.CreateStarterpackRequest.name)
  return _impl_.name_.Release();
}
inline void CreateStarterpackRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.CreateStarterpackRequest.name)
}

// string description = 3;
inline void CreateStarterpackRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CreateStarterpackRequest::description() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateStarterpackRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackRequest.description)
}
inline std::string* CreateStarterpackRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.CreateStarterpackRequest.description)
  return _s;
}
inline const std::string& CreateStarterpackRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CreateStarterpackRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::release_description() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.CreateStarterpackRequest.description)
  return _impl_.description_.Release();
}
inline void CreateStarterpackRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.CreateStarterpackRequest.description)
}

// string avatar_url = 4;
inline void CreateStarterpackRequest::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& CreateStarterpackRequest::avatar_url() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackRequest.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateStarterpackRequest::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackRequest.avatar_url)
}
inline std::string* CreateStarterpackRequest::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.CreateStarterpackRequest.avatar_url)
  return _s;
}
inline const std::string& CreateStarterpackRequest::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void CreateStarterpackRequest::_internal_set_avatar_url(const std::string& value) {
  
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::_internal_mutable_avatar_url() {
  
  return _impl_.avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateStarterpackRequest::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.CreateStarterpackRequest.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void CreateStarterpackRequest::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_url_.SetAllocated(avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_url_.IsDefault()) {
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.CreateStarterpackRequest.avatar_url)
}

// bool is_public = 5;
inline void CreateStarterpackRequest::clear_is_public() {
  _impl_.is_public_ = false;
}
inline bool CreateStarterpackRequest::_internal_is_public() const {
  return _impl_.is_public_;
}
inline bool CreateStarterpackRequest::is_public() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackRequest.is_public)
  return _internal_is_public();
}
inline void CreateStarterpackRequest::_internal_set_is_public(bool value) {
  
  _impl_.is_public_ = value;
}
inline void CreateStarterpackRequest::set_is_public(bool value) {
  _internal_set_is_public(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackRequest.is_public)
}

// -------------------------------------------------------------------

// CreateStarterpackResponse

// bool success = 1;
inline void CreateStarterpackResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool CreateStarterpackResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool CreateStarterpackResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackResponse.success)
  return _internal_success();
}
inline void CreateStarterpackResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CreateStarterpackResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackResponse.success)
}

// .sonet.starterpack.v1.Starterpack starterpack = 2;
inline bool CreateStarterpackResponse::_internal_has_starterpack() const {
  return this != internal_default_instance() && _impl_.starterpack_ != nullptr;
}
inline bool CreateStarterpackResponse::has_starterpack() const {
  return _internal_has_starterpack();
}
inline void CreateStarterpackResponse::clear_starterpack() {
  if (GetArenaForAllocation() == nullptr && _impl_.starterpack_ != nullptr) {
    delete _impl_.starterpack_;
  }
  _impl_.starterpack_ = nullptr;
}
inline const ::sonet::starterpack::v1::Starterpack& CreateStarterpackResponse::_internal_starterpack() const {
  const ::sonet::starterpack::v1::Starterpack* p = _impl_.starterpack_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::starterpack::v1::Starterpack&>(
      ::sonet::starterpack::v1::_Starterpack_default_instance_);
}
inline const ::sonet::starterpack::v1::Starterpack& CreateStarterpackResponse::starterpack() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackResponse.starterpack)
  return _internal_starterpack();
}
inline void CreateStarterpackResponse::unsafe_arena_set_allocated_starterpack(
    ::sonet::starterpack::v1::Starterpack* starterpack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starterpack_);
  }
  _impl_.starterpack_ = starterpack;
  if (starterpack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.CreateStarterpackResponse.starterpack)
}
inline ::sonet::starterpack::v1::Starterpack* CreateStarterpackResponse::release_starterpack() {
  
  ::sonet::starterpack::v1::Starterpack* temp = _impl_.starterpack_;
  _impl_.starterpack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::starterpack::v1::Starterpack* CreateStarterpackResponse::unsafe_arena_release_starterpack() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.CreateStarterpackResponse.starterpack)
  
  ::sonet::starterpack::v1::Starterpack* temp = _impl_.starterpack_;
  _impl_.starterpack_ = nullptr;
  return temp;
}
inline ::sonet::starterpack::v1::Starterpack* CreateStarterpackResponse::_internal_mutable_starterpack() {
  
  if (_impl_.starterpack_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::starterpack::v1::Starterpack>(GetArenaForAllocation());
    _impl_.starterpack_ = p;
  }
  return _impl_.starterpack_;
}
inline ::sonet::starterpack::v1::Starterpack* CreateStarterpackResponse::mutable_starterpack() {
  ::sonet::starterpack::v1::Starterpack* _msg = _internal_mutable_starterpack();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.CreateStarterpackResponse.starterpack)
  return _msg;
}
inline void CreateStarterpackResponse::set_allocated_starterpack(::sonet::starterpack::v1::Starterpack* starterpack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.starterpack_;
  }
  if (starterpack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(starterpack);
    if (message_arena != submessage_arena) {
      starterpack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starterpack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.starterpack_ = starterpack;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.CreateStarterpackResponse.starterpack)
}

// string error_message = 3;
inline void CreateStarterpackResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CreateStarterpackResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.CreateStarterpackResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateStarterpackResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.CreateStarterpackResponse.error_message)
}
inline std::string* CreateStarterpackResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.CreateStarterpackResponse.error_message)
  return _s;
}
inline const std::string& CreateStarterpackResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CreateStarterpackResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateStarterpackResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateStarterpackResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.CreateStarterpackResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CreateStarterpackResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.CreateStarterpackResponse.error_message)
}

// -------------------------------------------------------------------

// GetStarterpackRequest

// string starterpack_id = 1;
inline void GetStarterpackRequest::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& GetStarterpackRequest::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackRequest.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackRequest::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackRequest.starterpack_id)
}
inline std::string* GetStarterpackRequest::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackRequest.starterpack_id)
  return _s;
}
inline const std::string& GetStarterpackRequest::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void GetStarterpackRequest::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackRequest::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackRequest::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackRequest.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void GetStarterpackRequest::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackRequest.starterpack_id)
}

// string requester_id = 2;
inline void GetStarterpackRequest::clear_requester_id() {
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& GetStarterpackRequest::requester_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackRequest.requester_id)
  return _internal_requester_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackRequest::set_requester_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requester_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackRequest.requester_id)
}
inline std::string* GetStarterpackRequest::mutable_requester_id() {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackRequest.requester_id)
  return _s;
}
inline const std::string& GetStarterpackRequest::_internal_requester_id() const {
  return _impl_.requester_id_.Get();
}
inline void GetStarterpackRequest::_internal_set_requester_id(const std::string& value) {
  
  _impl_.requester_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackRequest::_internal_mutable_requester_id() {
  
  return _impl_.requester_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackRequest::release_requester_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void GetStarterpackRequest::set_allocated_requester_id(std::string* requester_id) {
  if (requester_id != nullptr) {
    
  } else {
    
  }
  _impl_.requester_id_.SetAllocated(requester_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackRequest.requester_id)
}

// -------------------------------------------------------------------

// GetStarterpackResponse

// bool success = 1;
inline void GetStarterpackResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetStarterpackResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetStarterpackResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackResponse.success)
  return _internal_success();
}
inline void GetStarterpackResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetStarterpackResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackResponse.success)
}

// .sonet.starterpack.v1.Starterpack starterpack = 2;
inline bool GetStarterpackResponse::_internal_has_starterpack() const {
  return this != internal_default_instance() && _impl_.starterpack_ != nullptr;
}
inline bool GetStarterpackResponse::has_starterpack() const {
  return _internal_has_starterpack();
}
inline void GetStarterpackResponse::clear_starterpack() {
  if (GetArenaForAllocation() == nullptr && _impl_.starterpack_ != nullptr) {
    delete _impl_.starterpack_;
  }
  _impl_.starterpack_ = nullptr;
}
inline const ::sonet::starterpack::v1::Starterpack& GetStarterpackResponse::_internal_starterpack() const {
  const ::sonet::starterpack::v1::Starterpack* p = _impl_.starterpack_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::starterpack::v1::Starterpack&>(
      ::sonet::starterpack::v1::_Starterpack_default_instance_);
}
inline const ::sonet::starterpack::v1::Starterpack& GetStarterpackResponse::starterpack() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackResponse.starterpack)
  return _internal_starterpack();
}
inline void GetStarterpackResponse::unsafe_arena_set_allocated_starterpack(
    ::sonet::starterpack::v1::Starterpack* starterpack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starterpack_);
  }
  _impl_.starterpack_ = starterpack;
  if (starterpack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.GetStarterpackResponse.starterpack)
}
inline ::sonet::starterpack::v1::Starterpack* GetStarterpackResponse::release_starterpack() {
  
  ::sonet::starterpack::v1::Starterpack* temp = _impl_.starterpack_;
  _impl_.starterpack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::starterpack::v1::Starterpack* GetStarterpackResponse::unsafe_arena_release_starterpack() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackResponse.starterpack)
  
  ::sonet::starterpack::v1::Starterpack* temp = _impl_.starterpack_;
  _impl_.starterpack_ = nullptr;
  return temp;
}
inline ::sonet::starterpack::v1::Starterpack* GetStarterpackResponse::_internal_mutable_starterpack() {
  
  if (_impl_.starterpack_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::starterpack::v1::Starterpack>(GetArenaForAllocation());
    _impl_.starterpack_ = p;
  }
  return _impl_.starterpack_;
}
inline ::sonet::starterpack::v1::Starterpack* GetStarterpackResponse::mutable_starterpack() {
  ::sonet::starterpack::v1::Starterpack* _msg = _internal_mutable_starterpack();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackResponse.starterpack)
  return _msg;
}
inline void GetStarterpackResponse::set_allocated_starterpack(::sonet::starterpack::v1::Starterpack* starterpack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.starterpack_;
  }
  if (starterpack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(starterpack);
    if (message_arena != submessage_arena) {
      starterpack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starterpack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.starterpack_ = starterpack;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackResponse.starterpack)
}

// string error_message = 3;
inline void GetStarterpackResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetStarterpackResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackResponse.error_message)
}
inline std::string* GetStarterpackResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackResponse.error_message)
  return _s;
}
inline const std::string& GetStarterpackResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetStarterpackResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetStarterpackResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackResponse.error_message)
}

// -------------------------------------------------------------------

// GetUserStarterpacksRequest

// string user_id = 1;
inline void GetUserStarterpacksRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetUserStarterpacksRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserStarterpacksRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksRequest.user_id)
}
inline std::string* GetUserStarterpacksRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetUserStarterpacksRequest.user_id)
  return _s;
}
inline const std::string& GetUserStarterpacksRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetUserStarterpacksRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetUserStarterpacksRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetUserStarterpacksRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetUserStarterpacksRequest.user_id)
}

// string requester_id = 2;
inline void GetUserStarterpacksRequest::clear_requester_id() {
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& GetUserStarterpacksRequest::requester_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksRequest.requester_id)
  return _internal_requester_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserStarterpacksRequest::set_requester_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requester_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksRequest.requester_id)
}
inline std::string* GetUserStarterpacksRequest::mutable_requester_id() {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetUserStarterpacksRequest.requester_id)
  return _s;
}
inline const std::string& GetUserStarterpacksRequest::_internal_requester_id() const {
  return _impl_.requester_id_.Get();
}
inline void GetUserStarterpacksRequest::_internal_set_requester_id(const std::string& value) {
  
  _impl_.requester_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksRequest::_internal_mutable_requester_id() {
  
  return _impl_.requester_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksRequest::release_requester_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetUserStarterpacksRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void GetUserStarterpacksRequest::set_allocated_requester_id(std::string* requester_id) {
  if (requester_id != nullptr) {
    
  } else {
    
  }
  _impl_.requester_id_.SetAllocated(requester_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetUserStarterpacksRequest.requester_id)
}

// int32 limit = 3;
inline void GetUserStarterpacksRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetUserStarterpacksRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetUserStarterpacksRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksRequest.limit)
  return _internal_limit();
}
inline void GetUserStarterpacksRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetUserStarterpacksRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksRequest.limit)
}

// string cursor = 4;
inline void GetUserStarterpacksRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetUserStarterpacksRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserStarterpacksRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksRequest.cursor)
}
inline std::string* GetUserStarterpacksRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetUserStarterpacksRequest.cursor)
  return _s;
}
inline const std::string& GetUserStarterpacksRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetUserStarterpacksRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetUserStarterpacksRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void GetUserStarterpacksRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetUserStarterpacksRequest.cursor)
}

// -------------------------------------------------------------------

// GetUserStarterpacksResponse

// bool success = 1;
inline void GetUserStarterpacksResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetUserStarterpacksResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetUserStarterpacksResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksResponse.success)
  return _internal_success();
}
inline void GetUserStarterpacksResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetUserStarterpacksResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksResponse.success)
}

// repeated .sonet.starterpack.v1.Starterpack starterpacks = 2;
inline int GetUserStarterpacksResponse::_internal_starterpacks_size() const {
  return _impl_.starterpacks_.size();
}
inline int GetUserStarterpacksResponse::starterpacks_size() const {
  return _internal_starterpacks_size();
}
inline void GetUserStarterpacksResponse::clear_starterpacks() {
  _impl_.starterpacks_.Clear();
}
inline ::sonet::starterpack::v1::Starterpack* GetUserStarterpacksResponse::mutable_starterpacks(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetUserStarterpacksResponse.starterpacks)
  return _impl_.starterpacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >*
GetUserStarterpacksResponse::mutable_starterpacks() {
  // @@protoc_insertion_point(field_mutable_list:sonet.starterpack.v1.GetUserStarterpacksResponse.starterpacks)
  return &_impl_.starterpacks_;
}
inline const ::sonet::starterpack::v1::Starterpack& GetUserStarterpacksResponse::_internal_starterpacks(int index) const {
  return _impl_.starterpacks_.Get(index);
}
inline const ::sonet::starterpack::v1::Starterpack& GetUserStarterpacksResponse::starterpacks(int index) const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksResponse.starterpacks)
  return _internal_starterpacks(index);
}
inline ::sonet::starterpack::v1::Starterpack* GetUserStarterpacksResponse::_internal_add_starterpacks() {
  return _impl_.starterpacks_.Add();
}
inline ::sonet::starterpack::v1::Starterpack* GetUserStarterpacksResponse::add_starterpacks() {
  ::sonet::starterpack::v1::Starterpack* _add = _internal_add_starterpacks();
  // @@protoc_insertion_point(field_add:sonet.starterpack.v1.GetUserStarterpacksResponse.starterpacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >&
GetUserStarterpacksResponse::starterpacks() const {
  // @@protoc_insertion_point(field_list:sonet.starterpack.v1.GetUserStarterpacksResponse.starterpacks)
  return _impl_.starterpacks_;
}

// string next_cursor = 3;
inline void GetUserStarterpacksResponse::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& GetUserStarterpacksResponse::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksResponse.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserStarterpacksResponse::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksResponse.next_cursor)
}
inline std::string* GetUserStarterpacksResponse::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetUserStarterpacksResponse.next_cursor)
  return _s;
}
inline const std::string& GetUserStarterpacksResponse::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void GetUserStarterpacksResponse::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksResponse::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksResponse::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetUserStarterpacksResponse.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void GetUserStarterpacksResponse::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetUserStarterpacksResponse.next_cursor)
}

// string error_message = 4;
inline void GetUserStarterpacksResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetUserStarterpacksResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetUserStarterpacksResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserStarterpacksResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetUserStarterpacksResponse.error_message)
}
inline std::string* GetUserStarterpacksResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetUserStarterpacksResponse.error_message)
  return _s;
}
inline const std::string& GetUserStarterpacksResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetUserStarterpacksResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserStarterpacksResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetUserStarterpacksResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetUserStarterpacksResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetUserStarterpacksResponse.error_message)
}

// -------------------------------------------------------------------

// UpdateStarterpackRequest

// string starterpack_id = 1;
inline void UpdateStarterpackRequest::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& UpdateStarterpackRequest::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackRequest.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStarterpackRequest::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackRequest.starterpack_id)
}
inline std::string* UpdateStarterpackRequest::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackRequest.starterpack_id)
  return _s;
}
inline const std::string& UpdateStarterpackRequest::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void UpdateStarterpackRequest::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackRequest.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void UpdateStarterpackRequest::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackRequest.starterpack_id)
}

// string requester_id = 2;
inline void UpdateStarterpackRequest::clear_requester_id() {
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& UpdateStarterpackRequest::requester_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackRequest.requester_id)
  return _internal_requester_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStarterpackRequest::set_requester_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requester_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackRequest.requester_id)
}
inline std::string* UpdateStarterpackRequest::mutable_requester_id() {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackRequest.requester_id)
  return _s;
}
inline const std::string& UpdateStarterpackRequest::_internal_requester_id() const {
  return _impl_.requester_id_.Get();
}
inline void UpdateStarterpackRequest::_internal_set_requester_id(const std::string& value) {
  
  _impl_.requester_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::_internal_mutable_requester_id() {
  
  return _impl_.requester_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::release_requester_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void UpdateStarterpackRequest::set_allocated_requester_id(std::string* requester_id) {
  if (requester_id != nullptr) {
    
  } else {
    
  }
  _impl_.requester_id_.SetAllocated(requester_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackRequest.requester_id)
}

// string name = 3;
inline void UpdateStarterpackRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UpdateStarterpackRequest::name() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStarterpackRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackRequest.name)
}
inline std::string* UpdateStarterpackRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackRequest.name)
  return _s;
}
inline const std::string& UpdateStarterpackRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UpdateStarterpackRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::release_name() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackRequest.name)
  return _impl_.name_.Release();
}
inline void UpdateStarterpackRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackRequest.name)
}

// string description = 4;
inline void UpdateStarterpackRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UpdateStarterpackRequest::description() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStarterpackRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackRequest.description)
}
inline std::string* UpdateStarterpackRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackRequest.description)
  return _s;
}
inline const std::string& UpdateStarterpackRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void UpdateStarterpackRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::release_description() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackRequest.description)
  return _impl_.description_.Release();
}
inline void UpdateStarterpackRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackRequest.description)
}

// string avatar_url = 5;
inline void UpdateStarterpackRequest::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& UpdateStarterpackRequest::avatar_url() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackRequest.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStarterpackRequest::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackRequest.avatar_url)
}
inline std::string* UpdateStarterpackRequest::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackRequest.avatar_url)
  return _s;
}
inline const std::string& UpdateStarterpackRequest::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void UpdateStarterpackRequest::_internal_set_avatar_url(const std::string& value) {
  
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::_internal_mutable_avatar_url() {
  
  return _impl_.avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStarterpackRequest::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackRequest.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void UpdateStarterpackRequest::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_url_.SetAllocated(avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_url_.IsDefault()) {
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackRequest.avatar_url)
}

// bool is_public = 6;
inline void UpdateStarterpackRequest::clear_is_public() {
  _impl_.is_public_ = false;
}
inline bool UpdateStarterpackRequest::_internal_is_public() const {
  return _impl_.is_public_;
}
inline bool UpdateStarterpackRequest::is_public() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackRequest.is_public)
  return _internal_is_public();
}
inline void UpdateStarterpackRequest::_internal_set_is_public(bool value) {
  
  _impl_.is_public_ = value;
}
inline void UpdateStarterpackRequest::set_is_public(bool value) {
  _internal_set_is_public(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackRequest.is_public)
}

// -------------------------------------------------------------------

// UpdateStarterpackResponse

// bool success = 1;
inline void UpdateStarterpackResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UpdateStarterpackResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UpdateStarterpackResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackResponse.success)
  return _internal_success();
}
inline void UpdateStarterpackResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UpdateStarterpackResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackResponse.success)
}

// .sonet.starterpack.v1.Starterpack starterpack = 2;
inline bool UpdateStarterpackResponse::_internal_has_starterpack() const {
  return this != internal_default_instance() && _impl_.starterpack_ != nullptr;
}
inline bool UpdateStarterpackResponse::has_starterpack() const {
  return _internal_has_starterpack();
}
inline void UpdateStarterpackResponse::clear_starterpack() {
  if (GetArenaForAllocation() == nullptr && _impl_.starterpack_ != nullptr) {
    delete _impl_.starterpack_;
  }
  _impl_.starterpack_ = nullptr;
}
inline const ::sonet::starterpack::v1::Starterpack& UpdateStarterpackResponse::_internal_starterpack() const {
  const ::sonet::starterpack::v1::Starterpack* p = _impl_.starterpack_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::starterpack::v1::Starterpack&>(
      ::sonet::starterpack::v1::_Starterpack_default_instance_);
}
inline const ::sonet::starterpack::v1::Starterpack& UpdateStarterpackResponse::starterpack() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackResponse.starterpack)
  return _internal_starterpack();
}
inline void UpdateStarterpackResponse::unsafe_arena_set_allocated_starterpack(
    ::sonet::starterpack::v1::Starterpack* starterpack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starterpack_);
  }
  _impl_.starterpack_ = starterpack;
  if (starterpack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.UpdateStarterpackResponse.starterpack)
}
inline ::sonet::starterpack::v1::Starterpack* UpdateStarterpackResponse::release_starterpack() {
  
  ::sonet::starterpack::v1::Starterpack* temp = _impl_.starterpack_;
  _impl_.starterpack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::starterpack::v1::Starterpack* UpdateStarterpackResponse::unsafe_arena_release_starterpack() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackResponse.starterpack)
  
  ::sonet::starterpack::v1::Starterpack* temp = _impl_.starterpack_;
  _impl_.starterpack_ = nullptr;
  return temp;
}
inline ::sonet::starterpack::v1::Starterpack* UpdateStarterpackResponse::_internal_mutable_starterpack() {
  
  if (_impl_.starterpack_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::starterpack::v1::Starterpack>(GetArenaForAllocation());
    _impl_.starterpack_ = p;
  }
  return _impl_.starterpack_;
}
inline ::sonet::starterpack::v1::Starterpack* UpdateStarterpackResponse::mutable_starterpack() {
  ::sonet::starterpack::v1::Starterpack* _msg = _internal_mutable_starterpack();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackResponse.starterpack)
  return _msg;
}
inline void UpdateStarterpackResponse::set_allocated_starterpack(::sonet::starterpack::v1::Starterpack* starterpack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.starterpack_;
  }
  if (starterpack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(starterpack);
    if (message_arena != submessage_arena) {
      starterpack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starterpack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.starterpack_ = starterpack;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackResponse.starterpack)
}

// string error_message = 3;
inline void UpdateStarterpackResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& UpdateStarterpackResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.UpdateStarterpackResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStarterpackResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.UpdateStarterpackResponse.error_message)
}
inline std::string* UpdateStarterpackResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.UpdateStarterpackResponse.error_message)
  return _s;
}
inline const std::string& UpdateStarterpackResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void UpdateStarterpackResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStarterpackResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStarterpackResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.UpdateStarterpackResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void UpdateStarterpackResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.UpdateStarterpackResponse.error_message)
}

// -------------------------------------------------------------------

// DeleteStarterpackRequest

// string starterpack_id = 1;
inline void DeleteStarterpackRequest::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& DeleteStarterpackRequest::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.DeleteStarterpackRequest.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteStarterpackRequest::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.DeleteStarterpackRequest.starterpack_id)
}
inline std::string* DeleteStarterpackRequest::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.DeleteStarterpackRequest.starterpack_id)
  return _s;
}
inline const std::string& DeleteStarterpackRequest::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void DeleteStarterpackRequest::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteStarterpackRequest::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteStarterpackRequest::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.DeleteStarterpackRequest.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void DeleteStarterpackRequest::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.DeleteStarterpackRequest.starterpack_id)
}

// string requester_id = 2;
inline void DeleteStarterpackRequest::clear_requester_id() {
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& DeleteStarterpackRequest::requester_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.DeleteStarterpackRequest.requester_id)
  return _internal_requester_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteStarterpackRequest::set_requester_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requester_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.DeleteStarterpackRequest.requester_id)
}
inline std::string* DeleteStarterpackRequest::mutable_requester_id() {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.DeleteStarterpackRequest.requester_id)
  return _s;
}
inline const std::string& DeleteStarterpackRequest::_internal_requester_id() const {
  return _impl_.requester_id_.Get();
}
inline void DeleteStarterpackRequest::_internal_set_requester_id(const std::string& value) {
  
  _impl_.requester_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteStarterpackRequest::_internal_mutable_requester_id() {
  
  return _impl_.requester_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteStarterpackRequest::release_requester_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.DeleteStarterpackRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void DeleteStarterpackRequest::set_allocated_requester_id(std::string* requester_id) {
  if (requester_id != nullptr) {
    
  } else {
    
  }
  _impl_.requester_id_.SetAllocated(requester_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.DeleteStarterpackRequest.requester_id)
}

// -------------------------------------------------------------------

// DeleteStarterpackResponse

// bool success = 1;
inline void DeleteStarterpackResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool DeleteStarterpackResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool DeleteStarterpackResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.DeleteStarterpackResponse.success)
  return _internal_success();
}
inline void DeleteStarterpackResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void DeleteStarterpackResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.DeleteStarterpackResponse.success)
}

// string error_message = 2;
inline void DeleteStarterpackResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& DeleteStarterpackResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.DeleteStarterpackResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteStarterpackResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.DeleteStarterpackResponse.error_message)
}
inline std::string* DeleteStarterpackResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.DeleteStarterpackResponse.error_message)
  return _s;
}
inline const std::string& DeleteStarterpackResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void DeleteStarterpackResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteStarterpackResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteStarterpackResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.DeleteStarterpackResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void DeleteStarterpackResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.DeleteStarterpackResponse.error_message)
}

// -------------------------------------------------------------------

// AddStarterpackItemRequest

// string starterpack_id = 1;
inline void AddStarterpackItemRequest::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& AddStarterpackItemRequest::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemRequest.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddStarterpackItemRequest::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemRequest.starterpack_id)
}
inline std::string* AddStarterpackItemRequest::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.AddStarterpackItemRequest.starterpack_id)
  return _s;
}
inline const std::string& AddStarterpackItemRequest::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void AddStarterpackItemRequest::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AddStarterpackItemRequest::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AddStarterpackItemRequest::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.AddStarterpackItemRequest.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void AddStarterpackItemRequest::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.AddStarterpackItemRequest.starterpack_id)
}

// .sonet.starterpack.v1.ItemType item_type = 2;
inline void AddStarterpackItemRequest::clear_item_type() {
  _impl_.item_type_ = 0;
}
inline ::sonet::starterpack::v1::ItemType AddStarterpackItemRequest::_internal_item_type() const {
  return static_cast< ::sonet::starterpack::v1::ItemType >(_impl_.item_type_);
}
inline ::sonet::starterpack::v1::ItemType AddStarterpackItemRequest::item_type() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemRequest.item_type)
  return _internal_item_type();
}
inline void AddStarterpackItemRequest::_internal_set_item_type(::sonet::starterpack::v1::ItemType value) {
  
  _impl_.item_type_ = value;
}
inline void AddStarterpackItemRequest::set_item_type(::sonet::starterpack::v1::ItemType value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemRequest.item_type)
}

// string item_uri = 3;
inline void AddStarterpackItemRequest::clear_item_uri() {
  _impl_.item_uri_.ClearToEmpty();
}
inline const std::string& AddStarterpackItemRequest::item_uri() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemRequest.item_uri)
  return _internal_item_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddStarterpackItemRequest::set_item_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.item_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemRequest.item_uri)
}
inline std::string* AddStarterpackItemRequest::mutable_item_uri() {
  std::string* _s = _internal_mutable_item_uri();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.AddStarterpackItemRequest.item_uri)
  return _s;
}
inline const std::string& AddStarterpackItemRequest::_internal_item_uri() const {
  return _impl_.item_uri_.Get();
}
inline void AddStarterpackItemRequest::_internal_set_item_uri(const std::string& value) {
  
  _impl_.item_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* AddStarterpackItemRequest::_internal_mutable_item_uri() {
  
  return _impl_.item_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* AddStarterpackItemRequest::release_item_uri() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.AddStarterpackItemRequest.item_uri)
  return _impl_.item_uri_.Release();
}
inline void AddStarterpackItemRequest::set_allocated_item_uri(std::string* item_uri) {
  if (item_uri != nullptr) {
    
  } else {
    
  }
  _impl_.item_uri_.SetAllocated(item_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_uri_.IsDefault()) {
    _impl_.item_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.AddStarterpackItemRequest.item_uri)
}

// int32 item_order = 4;
inline void AddStarterpackItemRequest::clear_item_order() {
  _impl_.item_order_ = 0;
}
inline int32_t AddStarterpackItemRequest::_internal_item_order() const {
  return _impl_.item_order_;
}
inline int32_t AddStarterpackItemRequest::item_order() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemRequest.item_order)
  return _internal_item_order();
}
inline void AddStarterpackItemRequest::_internal_set_item_order(int32_t value) {
  
  _impl_.item_order_ = value;
}
inline void AddStarterpackItemRequest::set_item_order(int32_t value) {
  _internal_set_item_order(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemRequest.item_order)
}

// string added_by = 5;
inline void AddStarterpackItemRequest::clear_added_by() {
  _impl_.added_by_.ClearToEmpty();
}
inline const std::string& AddStarterpackItemRequest::added_by() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemRequest.added_by)
  return _internal_added_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddStarterpackItemRequest::set_added_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.added_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemRequest.added_by)
}
inline std::string* AddStarterpackItemRequest::mutable_added_by() {
  std::string* _s = _internal_mutable_added_by();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.AddStarterpackItemRequest.added_by)
  return _s;
}
inline const std::string& AddStarterpackItemRequest::_internal_added_by() const {
  return _impl_.added_by_.Get();
}
inline void AddStarterpackItemRequest::_internal_set_added_by(const std::string& value) {
  
  _impl_.added_by_.Set(value, GetArenaForAllocation());
}
inline std::string* AddStarterpackItemRequest::_internal_mutable_added_by() {
  
  return _impl_.added_by_.Mutable(GetArenaForAllocation());
}
inline std::string* AddStarterpackItemRequest::release_added_by() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.AddStarterpackItemRequest.added_by)
  return _impl_.added_by_.Release();
}
inline void AddStarterpackItemRequest::set_allocated_added_by(std::string* added_by) {
  if (added_by != nullptr) {
    
  } else {
    
  }
  _impl_.added_by_.SetAllocated(added_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.added_by_.IsDefault()) {
    _impl_.added_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.AddStarterpackItemRequest.added_by)
}

// -------------------------------------------------------------------

// AddStarterpackItemResponse

// bool success = 1;
inline void AddStarterpackItemResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool AddStarterpackItemResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool AddStarterpackItemResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemResponse.success)
  return _internal_success();
}
inline void AddStarterpackItemResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AddStarterpackItemResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemResponse.success)
}

// .sonet.starterpack.v1.StarterpackItem item = 2;
inline bool AddStarterpackItemResponse::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool AddStarterpackItemResponse::has_item() const {
  return _internal_has_item();
}
inline void AddStarterpackItemResponse::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
inline const ::sonet::starterpack::v1::StarterpackItem& AddStarterpackItemResponse::_internal_item() const {
  const ::sonet::starterpack::v1::StarterpackItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::starterpack::v1::StarterpackItem&>(
      ::sonet::starterpack::v1::_StarterpackItem_default_instance_);
}
inline const ::sonet::starterpack::v1::StarterpackItem& AddStarterpackItemResponse::item() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemResponse.item)
  return _internal_item();
}
inline void AddStarterpackItemResponse::unsafe_arena_set_allocated_item(
    ::sonet::starterpack::v1::StarterpackItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.starterpack.v1.AddStarterpackItemResponse.item)
}
inline ::sonet::starterpack::v1::StarterpackItem* AddStarterpackItemResponse::release_item() {
  
  ::sonet::starterpack::v1::StarterpackItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::starterpack::v1::StarterpackItem* AddStarterpackItemResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.AddStarterpackItemResponse.item)
  
  ::sonet::starterpack::v1::StarterpackItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::sonet::starterpack::v1::StarterpackItem* AddStarterpackItemResponse::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::starterpack::v1::StarterpackItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::sonet::starterpack::v1::StarterpackItem* AddStarterpackItemResponse::mutable_item() {
  ::sonet::starterpack::v1::StarterpackItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.AddStarterpackItemResponse.item)
  return _msg;
}
inline void AddStarterpackItemResponse::set_allocated_item(::sonet::starterpack::v1::StarterpackItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.AddStarterpackItemResponse.item)
}

// string error_message = 3;
inline void AddStarterpackItemResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& AddStarterpackItemResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.AddStarterpackItemResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddStarterpackItemResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.AddStarterpackItemResponse.error_message)
}
inline std::string* AddStarterpackItemResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.AddStarterpackItemResponse.error_message)
  return _s;
}
inline const std::string& AddStarterpackItemResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void AddStarterpackItemResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* AddStarterpackItemResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* AddStarterpackItemResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.AddStarterpackItemResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void AddStarterpackItemResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.AddStarterpackItemResponse.error_message)
}

// -------------------------------------------------------------------

// RemoveStarterpackItemRequest

// string starterpack_id = 1;
inline void RemoveStarterpackItemRequest::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& RemoveStarterpackItemRequest::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.RemoveStarterpackItemRequest.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveStarterpackItemRequest::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.RemoveStarterpackItemRequest.starterpack_id)
}
inline std::string* RemoveStarterpackItemRequest::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.RemoveStarterpackItemRequest.starterpack_id)
  return _s;
}
inline const std::string& RemoveStarterpackItemRequest::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void RemoveStarterpackItemRequest::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemRequest::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemRequest::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.RemoveStarterpackItemRequest.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void RemoveStarterpackItemRequest::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.RemoveStarterpackItemRequest.starterpack_id)
}

// string item_id = 2;
inline void RemoveStarterpackItemRequest::clear_item_id() {
  _impl_.item_id_.ClearToEmpty();
}
inline const std::string& RemoveStarterpackItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.RemoveStarterpackItemRequest.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveStarterpackItemRequest::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.item_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.RemoveStarterpackItemRequest.item_id)
}
inline std::string* RemoveStarterpackItemRequest::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.RemoveStarterpackItemRequest.item_id)
  return _s;
}
inline const std::string& RemoveStarterpackItemRequest::_internal_item_id() const {
  return _impl_.item_id_.Get();
}
inline void RemoveStarterpackItemRequest::_internal_set_item_id(const std::string& value) {
  
  _impl_.item_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemRequest::_internal_mutable_item_id() {
  
  return _impl_.item_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.RemoveStarterpackItemRequest.item_id)
  return _impl_.item_id_.Release();
}
inline void RemoveStarterpackItemRequest::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  _impl_.item_id_.SetAllocated(item_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_id_.IsDefault()) {
    _impl_.item_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.RemoveStarterpackItemRequest.item_id)
}

// string removed_by = 3;
inline void RemoveStarterpackItemRequest::clear_removed_by() {
  _impl_.removed_by_.ClearToEmpty();
}
inline const std::string& RemoveStarterpackItemRequest::removed_by() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.RemoveStarterpackItemRequest.removed_by)
  return _internal_removed_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveStarterpackItemRequest::set_removed_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.removed_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.RemoveStarterpackItemRequest.removed_by)
}
inline std::string* RemoveStarterpackItemRequest::mutable_removed_by() {
  std::string* _s = _internal_mutable_removed_by();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.RemoveStarterpackItemRequest.removed_by)
  return _s;
}
inline const std::string& RemoveStarterpackItemRequest::_internal_removed_by() const {
  return _impl_.removed_by_.Get();
}
inline void RemoveStarterpackItemRequest::_internal_set_removed_by(const std::string& value) {
  
  _impl_.removed_by_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemRequest::_internal_mutable_removed_by() {
  
  return _impl_.removed_by_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemRequest::release_removed_by() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.RemoveStarterpackItemRequest.removed_by)
  return _impl_.removed_by_.Release();
}
inline void RemoveStarterpackItemRequest::set_allocated_removed_by(std::string* removed_by) {
  if (removed_by != nullptr) {
    
  } else {
    
  }
  _impl_.removed_by_.SetAllocated(removed_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.removed_by_.IsDefault()) {
    _impl_.removed_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.RemoveStarterpackItemRequest.removed_by)
}

// -------------------------------------------------------------------

// RemoveStarterpackItemResponse

// bool success = 1;
inline void RemoveStarterpackItemResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool RemoveStarterpackItemResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool RemoveStarterpackItemResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.RemoveStarterpackItemResponse.success)
  return _internal_success();
}
inline void RemoveStarterpackItemResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RemoveStarterpackItemResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.RemoveStarterpackItemResponse.success)
}

// string error_message = 2;
inline void RemoveStarterpackItemResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& RemoveStarterpackItemResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.RemoveStarterpackItemResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveStarterpackItemResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.RemoveStarterpackItemResponse.error_message)
}
inline std::string* RemoveStarterpackItemResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.RemoveStarterpackItemResponse.error_message)
  return _s;
}
inline const std::string& RemoveStarterpackItemResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void RemoveStarterpackItemResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveStarterpackItemResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.RemoveStarterpackItemResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void RemoveStarterpackItemResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.RemoveStarterpackItemResponse.error_message)
}

// -------------------------------------------------------------------

// GetStarterpackItemsRequest

// string starterpack_id = 1;
inline void GetStarterpackItemsRequest::clear_starterpack_id() {
  _impl_.starterpack_id_.ClearToEmpty();
}
inline const std::string& GetStarterpackItemsRequest::starterpack_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsRequest.starterpack_id)
  return _internal_starterpack_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackItemsRequest::set_starterpack_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starterpack_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsRequest.starterpack_id)
}
inline std::string* GetStarterpackItemsRequest::mutable_starterpack_id() {
  std::string* _s = _internal_mutable_starterpack_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackItemsRequest.starterpack_id)
  return _s;
}
inline const std::string& GetStarterpackItemsRequest::_internal_starterpack_id() const {
  return _impl_.starterpack_id_.Get();
}
inline void GetStarterpackItemsRequest::_internal_set_starterpack_id(const std::string& value) {
  
  _impl_.starterpack_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsRequest::_internal_mutable_starterpack_id() {
  
  return _impl_.starterpack_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsRequest::release_starterpack_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackItemsRequest.starterpack_id)
  return _impl_.starterpack_id_.Release();
}
inline void GetStarterpackItemsRequest::set_allocated_starterpack_id(std::string* starterpack_id) {
  if (starterpack_id != nullptr) {
    
  } else {
    
  }
  _impl_.starterpack_id_.SetAllocated(starterpack_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starterpack_id_.IsDefault()) {
    _impl_.starterpack_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackItemsRequest.starterpack_id)
}

// string requester_id = 2;
inline void GetStarterpackItemsRequest::clear_requester_id() {
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& GetStarterpackItemsRequest::requester_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsRequest.requester_id)
  return _internal_requester_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackItemsRequest::set_requester_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requester_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsRequest.requester_id)
}
inline std::string* GetStarterpackItemsRequest::mutable_requester_id() {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackItemsRequest.requester_id)
  return _s;
}
inline const std::string& GetStarterpackItemsRequest::_internal_requester_id() const {
  return _impl_.requester_id_.Get();
}
inline void GetStarterpackItemsRequest::_internal_set_requester_id(const std::string& value) {
  
  _impl_.requester_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsRequest::_internal_mutable_requester_id() {
  
  return _impl_.requester_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsRequest::release_requester_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackItemsRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void GetStarterpackItemsRequest::set_allocated_requester_id(std::string* requester_id) {
  if (requester_id != nullptr) {
    
  } else {
    
  }
  _impl_.requester_id_.SetAllocated(requester_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackItemsRequest.requester_id)
}

// int32 limit = 3;
inline void GetStarterpackItemsRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetStarterpackItemsRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetStarterpackItemsRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsRequest.limit)
  return _internal_limit();
}
inline void GetStarterpackItemsRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetStarterpackItemsRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsRequest.limit)
}

// string cursor = 4;
inline void GetStarterpackItemsRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetStarterpackItemsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackItemsRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsRequest.cursor)
}
inline std::string* GetStarterpackItemsRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackItemsRequest.cursor)
  return _s;
}
inline const std::string& GetStarterpackItemsRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetStarterpackItemsRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackItemsRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void GetStarterpackItemsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackItemsRequest.cursor)
}

// -------------------------------------------------------------------

// GetStarterpackItemsResponse

// bool success = 1;
inline void GetStarterpackItemsResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetStarterpackItemsResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetStarterpackItemsResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsResponse.success)
  return _internal_success();
}
inline void GetStarterpackItemsResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetStarterpackItemsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsResponse.success)
}

// repeated .sonet.starterpack.v1.StarterpackItem items = 2;
inline int GetStarterpackItemsResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GetStarterpackItemsResponse::items_size() const {
  return _internal_items_size();
}
inline void GetStarterpackItemsResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::sonet::starterpack::v1::StarterpackItem* GetStarterpackItemsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackItemsResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::StarterpackItem >*
GetStarterpackItemsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:sonet.starterpack.v1.GetStarterpackItemsResponse.items)
  return &_impl_.items_;
}
inline const ::sonet::starterpack::v1::StarterpackItem& GetStarterpackItemsResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::sonet::starterpack::v1::StarterpackItem& GetStarterpackItemsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsResponse.items)
  return _internal_items(index);
}
inline ::sonet::starterpack::v1::StarterpackItem* GetStarterpackItemsResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::sonet::starterpack::v1::StarterpackItem* GetStarterpackItemsResponse::add_items() {
  ::sonet::starterpack::v1::StarterpackItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:sonet.starterpack.v1.GetStarterpackItemsResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::StarterpackItem >&
GetStarterpackItemsResponse::items() const {
  // @@protoc_insertion_point(field_list:sonet.starterpack.v1.GetStarterpackItemsResponse.items)
  return _impl_.items_;
}

// string next_cursor = 3;
inline void GetStarterpackItemsResponse::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& GetStarterpackItemsResponse::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsResponse.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackItemsResponse::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsResponse.next_cursor)
}
inline std::string* GetStarterpackItemsResponse::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackItemsResponse.next_cursor)
  return _s;
}
inline const std::string& GetStarterpackItemsResponse::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void GetStarterpackItemsResponse::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsResponse::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsResponse::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackItemsResponse.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void GetStarterpackItemsResponse::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackItemsResponse.next_cursor)
}

// string error_message = 4;
inline void GetStarterpackItemsResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetStarterpackItemsResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetStarterpackItemsResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStarterpackItemsResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetStarterpackItemsResponse.error_message)
}
inline std::string* GetStarterpackItemsResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetStarterpackItemsResponse.error_message)
  return _s;
}
inline const std::string& GetStarterpackItemsResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetStarterpackItemsResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStarterpackItemsResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetStarterpackItemsResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetStarterpackItemsResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetStarterpackItemsResponse.error_message)
}

// -------------------------------------------------------------------

// GetSuggestedStarterpacksRequest

// string user_id = 1;
inline void GetSuggestedStarterpacksRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetSuggestedStarterpacksRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSuggestedStarterpacksRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.user_id)
}
inline std::string* GetSuggestedStarterpacksRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.user_id)
  return _s;
}
inline const std::string& GetSuggestedStarterpacksRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetSuggestedStarterpacksRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetSuggestedStarterpacksRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.user_id)
}

// int32 limit = 2;
inline void GetSuggestedStarterpacksRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetSuggestedStarterpacksRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetSuggestedStarterpacksRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.limit)
  return _internal_limit();
}
inline void GetSuggestedStarterpacksRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetSuggestedStarterpacksRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.limit)
}

// string cursor = 3;
inline void GetSuggestedStarterpacksRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetSuggestedStarterpacksRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSuggestedStarterpacksRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.cursor)
}
inline std::string* GetSuggestedStarterpacksRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.cursor)
  return _s;
}
inline const std::string& GetSuggestedStarterpacksRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetSuggestedStarterpacksRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void GetSuggestedStarterpacksRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetSuggestedStarterpacksRequest.cursor)
}

// -------------------------------------------------------------------

// GetSuggestedStarterpacksResponse

// bool success = 1;
inline void GetSuggestedStarterpacksResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetSuggestedStarterpacksResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetSuggestedStarterpacksResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.success)
  return _internal_success();
}
inline void GetSuggestedStarterpacksResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetSuggestedStarterpacksResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.success)
}

// repeated .sonet.starterpack.v1.Starterpack starterpacks = 2;
inline int GetSuggestedStarterpacksResponse::_internal_starterpacks_size() const {
  return _impl_.starterpacks_.size();
}
inline int GetSuggestedStarterpacksResponse::starterpacks_size() const {
  return _internal_starterpacks_size();
}
inline void GetSuggestedStarterpacksResponse::clear_starterpacks() {
  _impl_.starterpacks_.Clear();
}
inline ::sonet::starterpack::v1::Starterpack* GetSuggestedStarterpacksResponse::mutable_starterpacks(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.starterpacks)
  return _impl_.starterpacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >*
GetSuggestedStarterpacksResponse::mutable_starterpacks() {
  // @@protoc_insertion_point(field_mutable_list:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.starterpacks)
  return &_impl_.starterpacks_;
}
inline const ::sonet::starterpack::v1::Starterpack& GetSuggestedStarterpacksResponse::_internal_starterpacks(int index) const {
  return _impl_.starterpacks_.Get(index);
}
inline const ::sonet::starterpack::v1::Starterpack& GetSuggestedStarterpacksResponse::starterpacks(int index) const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.starterpacks)
  return _internal_starterpacks(index);
}
inline ::sonet::starterpack::v1::Starterpack* GetSuggestedStarterpacksResponse::_internal_add_starterpacks() {
  return _impl_.starterpacks_.Add();
}
inline ::sonet::starterpack::v1::Starterpack* GetSuggestedStarterpacksResponse::add_starterpacks() {
  ::sonet::starterpack::v1::Starterpack* _add = _internal_add_starterpacks();
  // @@protoc_insertion_point(field_add:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.starterpacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::starterpack::v1::Starterpack >&
GetSuggestedStarterpacksResponse::starterpacks() const {
  // @@protoc_insertion_point(field_list:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.starterpacks)
  return _impl_.starterpacks_;
}

// string next_cursor = 3;
inline void GetSuggestedStarterpacksResponse::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& GetSuggestedStarterpacksResponse::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSuggestedStarterpacksResponse::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.next_cursor)
}
inline std::string* GetSuggestedStarterpacksResponse::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.next_cursor)
  return _s;
}
inline const std::string& GetSuggestedStarterpacksResponse::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void GetSuggestedStarterpacksResponse::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksResponse::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksResponse::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void GetSuggestedStarterpacksResponse::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.next_cursor)
}

// string error_message = 4;
inline void GetSuggestedStarterpacksResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetSuggestedStarterpacksResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSuggestedStarterpacksResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.error_message)
}
inline std::string* GetSuggestedStarterpacksResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.error_message)
  return _s;
}
inline const std::string& GetSuggestedStarterpacksResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetSuggestedStarterpacksResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSuggestedStarterpacksResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetSuggestedStarterpacksResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.starterpack.v1.GetSuggestedStarterpacksResponse.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace starterpack
}  // namespace sonet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sonet::starterpack::v1::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::starterpack::v1::ItemType>() {
  return ::sonet::starterpack::v1::ItemType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fstarterpack_5fservice_2eproto
