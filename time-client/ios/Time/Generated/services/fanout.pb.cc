// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/fanout.proto

#include "services/fanout.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace fanout {
PROTOBUF_CONSTEXPR FanoutJob::FanoutJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.started_at_)*/nullptr
  , /*decltype(_impl_.completed_at_)*/nullptr
  , /*decltype(_impl_.author_tier_)*/0
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.total_followers_)*/0
  , /*decltype(_impl_.processed_followers_)*/0
  , /*decltype(_impl_.failed_deliveries_)*/0
  , /*decltype(_impl_.processing_time_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FanoutJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FanoutJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FanoutJobDefaultTypeInternal() {}
  union {
    FanoutJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FanoutJobDefaultTypeInternal _FanoutJob_default_instance_;
PROTOBUF_CONSTEXPR FollowerBatch::FollowerBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.follower_ids_)*/{}
  , /*decltype(_impl_.batch_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_.batch_number_)*/0
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowerBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowerBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowerBatchDefaultTypeInternal() {}
  union {
    FollowerBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowerBatchDefaultTypeInternal _FollowerBatch_default_instance_;
PROTOBUF_CONSTEXPR DeliveryTarget::DeliveryTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeline_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_seen_)*/nullptr
  , /*decltype(_impl_.is_active_user_)*/false
  , /*decltype(_impl_.follower_tier_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeliveryTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeliveryTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeliveryTargetDefaultTypeInternal() {}
  union {
    DeliveryTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeliveryTargetDefaultTypeInternal _DeliveryTarget_default_instance_;
PROTOBUF_CONSTEXPR FanoutMetrics_DeliveryByTierEntry_DoNotUse::FanoutMetrics_DeliveryByTierEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FanoutMetrics_DeliveryByTierEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FanoutMetrics_DeliveryByTierEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FanoutMetrics_DeliveryByTierEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FanoutMetrics_DeliveryByTierEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FanoutMetrics_DeliveryByTierEntry_DoNotUseDefaultTypeInternal _FanoutMetrics_DeliveryByTierEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FanoutMetrics::FanoutMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delivery_by_tier_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.author_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.completed_at_)*/nullptr
  , /*decltype(_impl_.total_deliveries_)*/int64_t{0}
  , /*decltype(_impl_.successful_deliveries_)*/int64_t{0}
  , /*decltype(_impl_.failed_deliveries_)*/int64_t{0}
  , /*decltype(_impl_.avg_delivery_time_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FanoutMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FanoutMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FanoutMetricsDefaultTypeInternal() {}
  union {
    FanoutMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FanoutMetricsDefaultTypeInternal _FanoutMetrics_default_instance_;
PROTOBUF_CONSTEXPR InitiateFanoutRequest::InitiateFanoutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.specific_followers_)*/{}
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_.urgent_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitiateFanoutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitiateFanoutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitiateFanoutRequestDefaultTypeInternal() {}
  union {
    InitiateFanoutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitiateFanoutRequestDefaultTypeInternal _InitiateFanoutRequest_default_instance_;
PROTOBUF_CONSTEXPR InitiateFanoutResponse::InitiateFanoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.strategy_used_)*/0
  , /*decltype(_impl_.estimated_deliveries_)*/0
  , /*decltype(_impl_.estimated_completion_time_ms_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitiateFanoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitiateFanoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitiateFanoutResponseDefaultTypeInternal() {}
  union {
    InitiateFanoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitiateFanoutResponseDefaultTypeInternal _InitiateFanoutResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFanoutJobStatusRequest::GetFanoutJobStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFanoutJobStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFanoutJobStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFanoutJobStatusRequestDefaultTypeInternal() {}
  union {
    GetFanoutJobStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFanoutJobStatusRequestDefaultTypeInternal _GetFanoutJobStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFanoutJobStatusResponse::GetFanoutJobStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.job_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFanoutJobStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFanoutJobStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFanoutJobStatusResponseDefaultTypeInternal() {}
  union {
    GetFanoutJobStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFanoutJobStatusResponseDefaultTypeInternal _GetFanoutJobStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelFanoutJobRequest::CancelFanoutJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelFanoutJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelFanoutJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelFanoutJobRequestDefaultTypeInternal() {}
  union {
    CancelFanoutJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelFanoutJobRequestDefaultTypeInternal _CancelFanoutJobRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelFanoutJobResponse::CancelFanoutJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelFanoutJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelFanoutJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelFanoutJobResponseDefaultTypeInternal() {}
  union {
    CancelFanoutJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelFanoutJobResponseDefaultTypeInternal _CancelFanoutJobResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserTierRequest::GetUserTierRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserTierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserTierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserTierRequestDefaultTypeInternal() {}
  union {
    GetUserTierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserTierRequestDefaultTypeInternal _GetUserTierRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserTierResponse::GetUserTierResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tier_)*/0
  , /*decltype(_impl_.follower_count_)*/0
  , /*decltype(_impl_.recommended_strategy_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserTierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserTierResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserTierResponseDefaultTypeInternal() {}
  union {
    GetUserTierResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserTierResponseDefaultTypeInternal _GetUserTierResponse_default_instance_;
PROTOBUF_CONSTEXPR ProcessFollowerBatchRequest::ProcessFollowerBatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.batch_)*/nullptr
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessFollowerBatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessFollowerBatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessFollowerBatchRequestDefaultTypeInternal() {}
  union {
    ProcessFollowerBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessFollowerBatchRequestDefaultTypeInternal _ProcessFollowerBatchRequest_default_instance_;
PROTOBUF_CONSTEXPR ProcessFollowerBatchResponse::ProcessFollowerBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failed_user_ids_)*/{}
  , /*decltype(_impl_.batch_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.successful_deliveries_)*/0
  , /*decltype(_impl_.failed_deliveries_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessFollowerBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessFollowerBatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessFollowerBatchResponseDefaultTypeInternal() {}
  union {
    ProcessFollowerBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessFollowerBatchResponseDefaultTypeInternal _ProcessFollowerBatchResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFanoutMetricsRequest::GetFanoutMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.author_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_.until_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFanoutMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFanoutMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFanoutMetricsRequestDefaultTypeInternal() {}
  union {
    GetFanoutMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFanoutMetricsRequestDefaultTypeInternal _GetFanoutMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUseDefaultTypeInternal _GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetFanoutMetricsResponse::GetFanoutMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.summary_stats_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFanoutMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFanoutMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFanoutMetricsResponseDefaultTypeInternal() {}
  union {
    GetFanoutMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFanoutMetricsResponseDefaultTypeInternal _GetFanoutMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HealthCheckResponse_DetailsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal _HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pending_jobs_)*/0
  , /*decltype(_impl_.active_workers_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
}  // namespace fanout
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2ffanout_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2ffanout_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2ffanout_2eproto = nullptr;

const uint32_t TableStruct_services_2ffanout_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.job_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.author_tier_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.strategy_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.started_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.completed_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.total_followers_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.processed_followers_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.failed_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.processing_time_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutJob, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _impl_.batch_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _impl_.job_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _impl_.follower_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _impl_.batch_number_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FollowerBatch, _impl_.strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::DeliveryTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::DeliveryTarget, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::DeliveryTarget, _impl_.timeline_key_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::DeliveryTarget, _impl_.is_active_user_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::DeliveryTarget, _impl_.last_seen_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::DeliveryTarget, _impl_.follower_tier_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.total_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.successful_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.failed_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.avg_delivery_time_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.delivery_by_tier_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::FanoutMetrics, _impl_.completed_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutRequest, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutRequest, _impl_.strategy_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutRequest, _impl_.urgent_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutRequest, _impl_.specific_followers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _impl_.job_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _impl_.strategy_used_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _impl_.estimated_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _impl_.estimated_completion_time_ms_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::InitiateFanoutResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutJobStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutJobStatusRequest, _impl_.job_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutJobStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutJobStatusResponse, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutJobStatusResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutJobStatusResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::CancelFanoutJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::CancelFanoutJobRequest, _impl_.job_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::CancelFanoutJobRequest, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::CancelFanoutJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::CancelFanoutJobResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::CancelFanoutJobResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierRequest, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierResponse, _impl_.tier_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierResponse, _impl_.follower_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierResponse, _impl_.recommended_strategy_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetUserTierResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchRequest, _impl_.batch_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchRequest, _impl_.note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _impl_.batch_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _impl_.successful_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _impl_.failed_deliveries_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _impl_.failed_user_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::ProcessFollowerBatchResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsRequest, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsRequest, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsRequest, _impl_.since_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsRequest, _impl_.until_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse, _impl_.summary_stats_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::GetFanoutMetricsResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse, _impl_.pending_jobs_),
  PROTOBUF_FIELD_OFFSET(::sonet::fanout::HealthCheckResponse, _impl_.active_workers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::fanout::FanoutJob)},
  { 20, -1, -1, sizeof(::sonet::fanout::FollowerBatch)},
  { 32, -1, -1, sizeof(::sonet::fanout::DeliveryTarget)},
  { 43, 51, -1, sizeof(::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse)},
  { 53, -1, -1, sizeof(::sonet::fanout::FanoutMetrics)},
  { 67, -1, -1, sizeof(::sonet::fanout::InitiateFanoutRequest)},
  { 77, -1, -1, sizeof(::sonet::fanout::InitiateFanoutResponse)},
  { 89, -1, -1, sizeof(::sonet::fanout::GetFanoutJobStatusRequest)},
  { 96, -1, -1, sizeof(::sonet::fanout::GetFanoutJobStatusResponse)},
  { 105, -1, -1, sizeof(::sonet::fanout::CancelFanoutJobRequest)},
  { 113, -1, -1, sizeof(::sonet::fanout::CancelFanoutJobResponse)},
  { 121, -1, -1, sizeof(::sonet::fanout::GetUserTierRequest)},
  { 128, -1, -1, sizeof(::sonet::fanout::GetUserTierResponse)},
  { 139, -1, -1, sizeof(::sonet::fanout::ProcessFollowerBatchRequest)},
  { 147, -1, -1, sizeof(::sonet::fanout::ProcessFollowerBatchResponse)},
  { 159, -1, -1, sizeof(::sonet::fanout::GetFanoutMetricsRequest)},
  { 169, 177, -1, sizeof(::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse)},
  { 179, -1, -1, sizeof(::sonet::fanout::GetFanoutMetricsResponse)},
  { 189, -1, -1, sizeof(::sonet::fanout::HealthCheckRequest)},
  { 195, 203, -1, sizeof(::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse)},
  { 205, -1, -1, sizeof(::sonet::fanout::HealthCheckResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::fanout::_FanoutJob_default_instance_._instance,
  &::sonet::fanout::_FollowerBatch_default_instance_._instance,
  &::sonet::fanout::_DeliveryTarget_default_instance_._instance,
  &::sonet::fanout::_FanoutMetrics_DeliveryByTierEntry_DoNotUse_default_instance_._instance,
  &::sonet::fanout::_FanoutMetrics_default_instance_._instance,
  &::sonet::fanout::_InitiateFanoutRequest_default_instance_._instance,
  &::sonet::fanout::_InitiateFanoutResponse_default_instance_._instance,
  &::sonet::fanout::_GetFanoutJobStatusRequest_default_instance_._instance,
  &::sonet::fanout::_GetFanoutJobStatusResponse_default_instance_._instance,
  &::sonet::fanout::_CancelFanoutJobRequest_default_instance_._instance,
  &::sonet::fanout::_CancelFanoutJobResponse_default_instance_._instance,
  &::sonet::fanout::_GetUserTierRequest_default_instance_._instance,
  &::sonet::fanout::_GetUserTierResponse_default_instance_._instance,
  &::sonet::fanout::_ProcessFollowerBatchRequest_default_instance_._instance,
  &::sonet::fanout::_ProcessFollowerBatchResponse_default_instance_._instance,
  &::sonet::fanout::_GetFanoutMetricsRequest_default_instance_._instance,
  &::sonet::fanout::_GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse_default_instance_._instance,
  &::sonet::fanout::_GetFanoutMetricsResponse_default_instance_._instance,
  &::sonet::fanout::_HealthCheckRequest_default_instance_._instance,
  &::sonet::fanout::_HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_._instance,
  &::sonet::fanout::_HealthCheckResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2ffanout_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025services/fanout.proto\022\014sonet.fanout\032\026c"
  "ommon/timestamp.proto\032\023services/note.pro"
  "to\"\200\005\n\tFanoutJob\022\016\n\006job_id\030\001 \001(\t\022\017\n\007note"
  "_id\030\002 \001(\t\022\021\n\tauthor_id\030\003 \001(\t\022+\n\013author_t"
  "ier\030\004 \001(\0162\026.sonet.fanout.UserTier\022.\n\010str"
  "ategy\030\005 \001(\0162\034.sonet.fanout.FanoutStrateg"
  "y\022+\n\ncreated_at\030\006 \001(\0132\027.sonet.common.Tim"
  "estamp\022+\n\nstarted_at\030\007 \001(\0132\027.sonet.commo"
  "n.Timestamp\022-\n\014completed_at\030\010 \001(\0132\027.sone"
  "t.common.Timestamp\0221\n\006status\030\t \001(\0162!.son"
  "et.fanout.FanoutJob.JobStatus\022\027\n\017total_f"
  "ollowers\030\n \001(\005\022\033\n\023processed_followers\030\013 "
  "\001(\005\022\031\n\021failed_deliveries\030\014 \001(\005\022\032\n\022proces"
  "sing_time_ms\030\r \001(\001\022\025\n\rerror_message\030\016 \001("
  "\t\"\241\001\n\tJobStatus\022\026\n\022JOB_STATUS_UNKNOWN\020\000\022"
  "\026\n\022JOB_STATUS_PENDING\020\001\022\031\n\025JOB_STATUS_PR"
  "OCESSING\020\002\022\030\n\024JOB_STATUS_COMPLETED\020\003\022\025\n\021"
  "JOB_STATUS_FAILED\020\004\022\030\n\024JOB_STATUS_CANCEL"
  "LED\020\005\"\241\001\n\rFollowerBatch\022\020\n\010batch_id\030\001 \001("
  "\t\022\016\n\006job_id\030\002 \001(\t\022\024\n\014follower_ids\030\003 \003(\t\022"
  "\022\n\nbatch_size\030\004 \001(\005\022\024\n\014batch_number\030\005 \001("
  "\005\022.\n\010strategy\030\006 \001(\0162\034.sonet.fanout.Fanou"
  "tStrategy\"\222\001\n\016DeliveryTarget\022\017\n\007user_id\030"
  "\001 \001(\t\022\024\n\014timeline_key\030\002 \001(\t\022\026\n\016is_active"
  "_user\030\003 \001(\010\022*\n\tlast_seen\030\004 \001(\0132\027.sonet.c"
  "ommon.Timestamp\022\025\n\rfollower_tier\030\005 \001(\005\"\326"
  "\002\n\rFanoutMetrics\022\021\n\tauthor_id\030\001 \001(\t\022\017\n\007n"
  "ote_id\030\002 \001(\t\022\030\n\020total_deliveries\030\003 \001(\003\022\035"
  "\n\025successful_deliveries\030\004 \001(\003\022\031\n\021failed_"
  "deliveries\030\005 \001(\003\022\034\n\024avg_delivery_time_ms"
  "\030\006 \001(\001\022I\n\020delivery_by_tier\030\007 \003(\0132/.sonet"
  ".fanout.FanoutMetrics.DeliveryByTierEntr"
  "y\022-\n\014completed_at\030\010 \001(\0132\027.sonet.common.T"
  "imestamp\0325\n\023DeliveryByTierEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\223\001\n\025InitiateFano"
  "utRequest\022\036\n\004note\030\001 \001(\0132\020.sonet.note.Not"
  "e\022.\n\010strategy\030\002 \001(\0162\034.sonet.fanout.Fanou"
  "tStrategy\022\016\n\006urgent\030\003 \001(\010\022\032\n\022specific_fo"
  "llowers\030\004 \003(\t\"\311\001\n\026InitiateFanoutResponse"
  "\022\016\n\006job_id\030\001 \001(\t\0223\n\rstrategy_used\030\002 \001(\0162"
  "\034.sonet.fanout.FanoutStrategy\022\034\n\024estimat"
  "ed_deliveries\030\003 \001(\005\022$\n\034estimated_complet"
  "ion_time_ms\030\004 \001(\001\022\017\n\007success\030\005 \001(\010\022\025\n\rer"
  "ror_message\030\006 \001(\t\"+\n\031GetFanoutJobStatusR"
  "equest\022\016\n\006job_id\030\001 \001(\t\"j\n\032GetFanoutJobSt"
  "atusResponse\022$\n\003job\030\001 \001(\0132\027.sonet.fanout"
  ".FanoutJob\022\017\n\007success\030\002 \001(\010\022\025\n\rerror_mes"
  "sage\030\003 \001(\t\"8\n\026CancelFanoutJobRequest\022\016\n\006"
  "job_id\030\001 \001(\t\022\016\n\006reason\030\002 \001(\t\"A\n\027CancelFa"
  "noutJobResponse\022\017\n\007success\030\001 \001(\010\022\025\n\rerro"
  "r_message\030\002 \001(\t\"%\n\022GetUserTierRequest\022\017\n"
  "\007user_id\030\001 \001(\t\"\267\001\n\023GetUserTierResponse\022$"
  "\n\004tier\030\001 \001(\0162\026.sonet.fanout.UserTier\022\026\n\016"
  "follower_count\030\002 \001(\005\022:\n\024recommended_stra"
  "tegy\030\003 \001(\0162\034.sonet.fanout.FanoutStrategy"
  "\022\017\n\007success\030\004 \001(\010\022\025\n\rerror_message\030\005 \001(\t"
  "\"i\n\033ProcessFollowerBatchRequest\022*\n\005batch"
  "\030\001 \001(\0132\033.sonet.fanout.FollowerBatch\022\036\n\004n"
  "ote\030\002 \001(\0132\020.sonet.note.Note\"\253\001\n\034ProcessF"
  "ollowerBatchResponse\022\020\n\010batch_id\030\001 \001(\t\022\035"
  "\n\025successful_deliveries\030\002 \001(\005\022\031\n\021failed_"
  "deliveries\030\003 \001(\005\022\027\n\017failed_user_ids\030\004 \003("
  "\t\022\017\n\007success\030\005 \001(\010\022\025\n\rerror_message\030\006 \001("
  "\t\"\215\001\n\027GetFanoutMetricsRequest\022\021\n\tauthor_"
  "id\030\001 \001(\t\022\017\n\007note_id\030\002 \001(\t\022&\n\005since\030\003 \001(\013"
  "2\027.sonet.common.Timestamp\022&\n\005until\030\004 \001(\013"
  "2\027.sonet.common.Timestamp\"\366\001\n\030GetFanoutM"
  "etricsResponse\022,\n\007metrics\030\001 \003(\0132\033.sonet."
  "fanout.FanoutMetrics\022O\n\rsummary_stats\030\002 "
  "\003(\01328.sonet.fanout.GetFanoutMetricsRespo"
  "nse.SummaryStatsEntry\022\017\n\007success\030\003 \001(\010\022\025"
  "\n\rerror_message\030\004 \001(\t\0323\n\021SummaryStatsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\024\n\022He"
  "althCheckRequest\"\304\001\n\023HealthCheckResponse"
  "\022\016\n\006status\030\001 \001(\t\022\?\n\007details\030\002 \003(\0132..sone"
  "t.fanout.HealthCheckResponse.DetailsEntr"
  "y\022\024\n\014pending_jobs\030\003 \001(\005\022\026\n\016active_worker"
  "s\030\004 \001(\005\032.\n\014DetailsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001*}\n\016FanoutStrategy\022\033\n\027FAN"
  "OUT_STRATEGY_UNKNOWN\020\000\022\030\n\024FANOUT_STRATEG"
  "Y_PUSH\020\001\022\030\n\024FANOUT_STRATEGY_PULL\020\002\022\032\n\026FA"
  "NOUT_STRATEGY_HYBRID\020\003*\200\001\n\010UserTier\022\025\n\021U"
  "SER_TIER_UNKNOWN\020\000\022\025\n\021USER_TIER_REGULAR\020"
  "\001\022\025\n\021USER_TIER_POPULAR\020\002\022\027\n\023USER_TIER_CE"
  "LEBRITY\020\003\022\026\n\022USER_TIER_VERIFIED\020\0042\257\005\n\rFa"
  "noutService\022[\n\016InitiateFanout\022#.sonet.fa"
  "nout.InitiateFanoutRequest\032$.sonet.fanou"
  "t.InitiateFanoutResponse\022g\n\022GetFanoutJob"
  "Status\022\'.sonet.fanout.GetFanoutJobStatus"
  "Request\032(.sonet.fanout.GetFanoutJobStatu"
  "sResponse\022^\n\017CancelFanoutJob\022$.sonet.fan"
  "out.CancelFanoutJobRequest\032%.sonet.fanou"
  "t.CancelFanoutJobResponse\022R\n\013GetUserTier"
  "\022 .sonet.fanout.GetUserTierRequest\032!.son"
  "et.fanout.GetUserTierResponse\022m\n\024Process"
  "FollowerBatch\022).sonet.fanout.ProcessFoll"
  "owerBatchRequest\032*.sonet.fanout.ProcessF"
  "ollowerBatchResponse\022a\n\020GetFanoutMetrics"
  "\022%.sonet.fanout.GetFanoutMetricsRequest\032"
  "&.sonet.fanout.GetFanoutMetricsResponse\022"
  "R\n\013HealthCheck\022 .sonet.fanout.HealthChec"
  "kRequest\032!.sonet.fanout.HealthCheckRespo"
  "nseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2ffanout_2eproto_deps[2] = {
  &::descriptor_table_common_2ftimestamp_2eproto,
  &::descriptor_table_services_2fnote_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2ffanout_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2ffanout_2eproto = {
    false, false, 4091, descriptor_table_protodef_services_2ffanout_2eproto,
    "services/fanout.proto",
    &descriptor_table_services_2ffanout_2eproto_once, descriptor_table_services_2ffanout_2eproto_deps, 2, 21,
    schemas, file_default_instances, TableStruct_services_2ffanout_2eproto::offsets,
    file_level_metadata_services_2ffanout_2eproto, file_level_enum_descriptors_services_2ffanout_2eproto,
    file_level_service_descriptors_services_2ffanout_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2ffanout_2eproto_getter() {
  return &descriptor_table_services_2ffanout_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2ffanout_2eproto(&descriptor_table_services_2ffanout_2eproto);
namespace sonet {
namespace fanout {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FanoutJob_JobStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2ffanout_2eproto);
  return file_level_enum_descriptors_services_2ffanout_2eproto[0];
}
bool FanoutJob_JobStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FanoutJob_JobStatus FanoutJob::JOB_STATUS_UNKNOWN;
constexpr FanoutJob_JobStatus FanoutJob::JOB_STATUS_PENDING;
constexpr FanoutJob_JobStatus FanoutJob::JOB_STATUS_PROCESSING;
constexpr FanoutJob_JobStatus FanoutJob::JOB_STATUS_COMPLETED;
constexpr FanoutJob_JobStatus FanoutJob::JOB_STATUS_FAILED;
constexpr FanoutJob_JobStatus FanoutJob::JOB_STATUS_CANCELLED;
constexpr FanoutJob_JobStatus FanoutJob::JobStatus_MIN;
constexpr FanoutJob_JobStatus FanoutJob::JobStatus_MAX;
constexpr int FanoutJob::JobStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FanoutStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2ffanout_2eproto);
  return file_level_enum_descriptors_services_2ffanout_2eproto[1];
}
bool FanoutStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserTier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2ffanout_2eproto);
  return file_level_enum_descriptors_services_2ffanout_2eproto[2];
}
bool UserTier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FanoutJob::_Internal {
 public:
  static const ::sonet::common::Timestamp& created_at(const FanoutJob* msg);
  static const ::sonet::common::Timestamp& started_at(const FanoutJob* msg);
  static const ::sonet::common::Timestamp& completed_at(const FanoutJob* msg);
};

const ::sonet::common::Timestamp&
FanoutJob::_Internal::created_at(const FanoutJob* msg) {
  return *msg->_impl_.created_at_;
}
const ::sonet::common::Timestamp&
FanoutJob::_Internal::started_at(const FanoutJob* msg) {
  return *msg->_impl_.started_at_;
}
const ::sonet::common::Timestamp&
FanoutJob::_Internal::completed_at(const FanoutJob* msg) {
  return *msg->_impl_.completed_at_;
}
void FanoutJob::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void FanoutJob::clear_started_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.started_at_ != nullptr) {
    delete _impl_.started_at_;
  }
  _impl_.started_at_ = nullptr;
}
void FanoutJob::clear_completed_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.completed_at_ != nullptr) {
    delete _impl_.completed_at_;
  }
  _impl_.completed_at_ = nullptr;
}
FanoutJob::FanoutJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.FanoutJob)
}
FanoutJob::FanoutJob(const FanoutJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FanoutJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.started_at_){nullptr}
    , decltype(_impl_.completed_at_){nullptr}
    , decltype(_impl_.author_tier_){}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.total_followers_){}
    , decltype(_impl_.processed_followers_){}
    , decltype(_impl_.failed_deliveries_){}
    , decltype(_impl_.processing_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author_id().empty()) {
    _this->_impl_.author_id_.Set(from._internal_author_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_started_at()) {
    _this->_impl_.started_at_ = new ::sonet::common::Timestamp(*from._impl_.started_at_);
  }
  if (from._internal_has_completed_at()) {
    _this->_impl_.completed_at_ = new ::sonet::common::Timestamp(*from._impl_.completed_at_);
  }
  ::memcpy(&_impl_.author_tier_, &from._impl_.author_tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processing_time_ms_) -
    reinterpret_cast<char*>(&_impl_.author_tier_)) + sizeof(_impl_.processing_time_ms_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.FanoutJob)
}

inline void FanoutJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.started_at_){nullptr}
    , decltype(_impl_.completed_at_){nullptr}
    , decltype(_impl_.author_tier_){0}
    , decltype(_impl_.strategy_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.total_followers_){0}
    , decltype(_impl_.processed_followers_){0}
    , decltype(_impl_.failed_deliveries_){0}
    , decltype(_impl_.processing_time_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FanoutJob::~FanoutJob() {
  // @@protoc_insertion_point(destructor:sonet.fanout.FanoutJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FanoutJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
  _impl_.note_id_.Destroy();
  _impl_.author_id_.Destroy();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.started_at_;
  if (this != internal_default_instance()) delete _impl_.completed_at_;
}

void FanoutJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FanoutJob::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.FanoutJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _impl_.note_id_.ClearToEmpty();
  _impl_.author_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.started_at_ != nullptr) {
    delete _impl_.started_at_;
  }
  _impl_.started_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.completed_at_ != nullptr) {
    delete _impl_.completed_at_;
  }
  _impl_.completed_at_ = nullptr;
  ::memset(&_impl_.author_tier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processing_time_ms_) -
      reinterpret_cast<char*>(&_impl_.author_tier_)) + sizeof(_impl_.processing_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FanoutJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FanoutJob.job_id"));
        } else
          goto handle_unusual;
        continue;
      // string note_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FanoutJob.note_id"));
        } else
          goto handle_unusual;
        continue;
      // string author_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_author_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FanoutJob.author_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.UserTier author_tier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_author_tier(static_cast<::sonet::fanout::UserTier>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.FanoutStrategy strategy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::sonet::fanout::FanoutStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp started_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp completed_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.FanoutJob.JobStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::sonet::fanout::FanoutJob_JobStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 total_followers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.total_followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processed_followers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.processed_followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_deliveries = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.failed_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double processing_time_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FanoutJob.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FanoutJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.FanoutJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FanoutJob.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FanoutJob.note_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_note_id(), target);
  }

  // string author_id = 3;
  if (!this->_internal_author_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_id().data(), static_cast<int>(this->_internal_author_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FanoutJob.author_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_author_id(), target);
  }

  // .sonet.fanout.UserTier author_tier = 4;
  if (this->_internal_author_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_author_tier(), target);
  }

  // .sonet.fanout.FanoutStrategy strategy = 5;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_strategy(), target);
  }

  // .sonet.common.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp started_at = 7;
  if (this->_internal_has_started_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::started_at(this),
        _Internal::started_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp completed_at = 8;
  if (this->_internal_has_completed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::completed_at(this),
        _Internal::completed_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.fanout.FanoutJob.JobStatus status = 9;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // int32 total_followers = 10;
  if (this->_internal_total_followers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_total_followers(), target);
  }

  // int32 processed_followers = 11;
  if (this->_internal_processed_followers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_processed_followers(), target);
  }

  // int32 failed_deliveries = 12;
  if (this->_internal_failed_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_failed_deliveries(), target);
  }

  // double processing_time_ms = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_processing_time_ms(), target);
  }

  // string error_message = 14;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FanoutJob.error_message");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.FanoutJob)
  return target;
}

size_t FanoutJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.FanoutJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // string author_id = 3;
  if (!this->_internal_author_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_id());
  }

  // string error_message = 14;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.common.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.common.Timestamp started_at = 7;
  if (this->_internal_has_started_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.started_at_);
  }

  // .sonet.common.Timestamp completed_at = 8;
  if (this->_internal_has_completed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.completed_at_);
  }

  // .sonet.fanout.UserTier author_tier = 4;
  if (this->_internal_author_tier() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_author_tier());
  }

  // .sonet.fanout.FanoutStrategy strategy = 5;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  // .sonet.fanout.FanoutJob.JobStatus status = 9;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 total_followers = 10;
  if (this->_internal_total_followers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_followers());
  }

  // int32 processed_followers = 11;
  if (this->_internal_processed_followers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processed_followers());
  }

  // int32 failed_deliveries = 12;
  if (this->_internal_failed_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_deliveries());
  }

  // double processing_time_ms = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FanoutJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FanoutJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FanoutJob::GetClassData() const { return &_class_data_; }


void FanoutJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FanoutJob*>(&to_msg);
  auto& from = static_cast<const FanoutJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.FanoutJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (!from._internal_author_id().empty()) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_started_at()) {
    _this->_internal_mutable_started_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_started_at());
  }
  if (from._internal_has_completed_at()) {
    _this->_internal_mutable_completed_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_completed_at());
  }
  if (from._internal_author_tier() != 0) {
    _this->_internal_set_author_tier(from._internal_author_tier());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_total_followers() != 0) {
    _this->_internal_set_total_followers(from._internal_total_followers());
  }
  if (from._internal_processed_followers() != 0) {
    _this->_internal_set_processed_followers(from._internal_processed_followers());
  }
  if (from._internal_failed_deliveries() != 0) {
    _this->_internal_set_failed_deliveries(from._internal_failed_deliveries());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = from._internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    _this->_internal_set_processing_time_ms(from._internal_processing_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FanoutJob::CopyFrom(const FanoutJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.FanoutJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanoutJob::IsInitialized() const {
  return true;
}

void FanoutJob::InternalSwap(FanoutJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_id_, lhs_arena,
      &other->_impl_.author_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FanoutJob, _impl_.processing_time_ms_)
      + sizeof(FanoutJob::_impl_.processing_time_ms_)
      - PROTOBUF_FIELD_OFFSET(FanoutJob, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FanoutJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[0]);
}

// ===================================================================

class FollowerBatch::_Internal {
 public:
};

FollowerBatch::FollowerBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.FollowerBatch)
}
FollowerBatch::FollowerBatch(const FollowerBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FollowerBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.follower_ids_){from._impl_.follower_ids_}
    , decltype(_impl_.batch_id_){}
    , decltype(_impl_.job_id_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.batch_number_){}
    , decltype(_impl_.strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_id().empty()) {
    _this->_impl_.batch_id_.Set(from._internal_batch_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.strategy_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.strategy_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.FollowerBatch)
}

inline void FollowerBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.follower_ids_){arena}
    , decltype(_impl_.batch_id_){}
    , decltype(_impl_.job_id_){}
    , decltype(_impl_.batch_size_){0}
    , decltype(_impl_.batch_number_){0}
    , decltype(_impl_.strategy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FollowerBatch::~FollowerBatch() {
  // @@protoc_insertion_point(destructor:sonet.fanout.FollowerBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowerBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.follower_ids_.~RepeatedPtrField();
  _impl_.batch_id_.Destroy();
  _impl_.job_id_.Destroy();
}

void FollowerBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowerBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.FollowerBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.follower_ids_.Clear();
  _impl_.batch_id_.ClearToEmpty();
  _impl_.job_id_.ClearToEmpty();
  ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.strategy_) -
      reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowerBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string batch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_batch_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FollowerBatch.batch_id"));
        } else
          goto handle_unusual;
        continue;
      // string job_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FollowerBatch.job_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string follower_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_follower_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FollowerBatch.follower_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.FanoutStrategy strategy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::sonet::fanout::FanoutStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FollowerBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.FollowerBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (!this->_internal_batch_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_id().data(), static_cast<int>(this->_internal_batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FollowerBatch.batch_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batch_id(), target);
  }

  // string job_id = 2;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FollowerBatch.job_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_job_id(), target);
  }

  // repeated string follower_ids = 3;
  for (int i = 0, n = this->_internal_follower_ids_size(); i < n; i++) {
    const auto& s = this->_internal_follower_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FollowerBatch.follower_ids");
    target = stream->WriteString(3, s, target);
  }

  // int32 batch_size = 4;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // int32 batch_number = 5;
  if (this->_internal_batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_batch_number(), target);
  }

  // .sonet.fanout.FanoutStrategy strategy = 6;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.FollowerBatch)
  return target;
}

size_t FollowerBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.FollowerBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string follower_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.follower_ids_.size());
  for (int i = 0, n = _impl_.follower_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.follower_ids_.Get(i));
  }

  // string batch_id = 1;
  if (!this->_internal_batch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_id());
  }

  // string job_id = 2;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // int32 batch_size = 4;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // int32 batch_number = 5;
  if (this->_internal_batch_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_number());
  }

  // .sonet.fanout.FanoutStrategy strategy = 6;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowerBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowerBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowerBatch::GetClassData() const { return &_class_data_; }


void FollowerBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowerBatch*>(&to_msg);
  auto& from = static_cast<const FollowerBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.FollowerBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.follower_ids_.MergeFrom(from._impl_.follower_ids_);
  if (!from._internal_batch_id().empty()) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_batch_number() != 0) {
    _this->_internal_set_batch_number(from._internal_batch_number());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowerBatch::CopyFrom(const FollowerBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.FollowerBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowerBatch::IsInitialized() const {
  return true;
}

void FollowerBatch::InternalSwap(FollowerBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.follower_ids_.InternalSwap(&other->_impl_.follower_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_id_, lhs_arena,
      &other->_impl_.batch_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowerBatch, _impl_.strategy_)
      + sizeof(FollowerBatch::_impl_.strategy_)
      - PROTOBUF_FIELD_OFFSET(FollowerBatch, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowerBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[1]);
}

// ===================================================================

class DeliveryTarget::_Internal {
 public:
  static const ::sonet::common::Timestamp& last_seen(const DeliveryTarget* msg);
};

const ::sonet::common::Timestamp&
DeliveryTarget::_Internal::last_seen(const DeliveryTarget* msg) {
  return *msg->_impl_.last_seen_;
}
void DeliveryTarget::clear_last_seen() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_seen_ != nullptr) {
    delete _impl_.last_seen_;
  }
  _impl_.last_seen_ = nullptr;
}
DeliveryTarget::DeliveryTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.DeliveryTarget)
}
DeliveryTarget::DeliveryTarget(const DeliveryTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeliveryTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.timeline_key_){}
    , decltype(_impl_.last_seen_){nullptr}
    , decltype(_impl_.is_active_user_){}
    , decltype(_impl_.follower_tier_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeline_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeline_key().empty()) {
    _this->_impl_.timeline_key_.Set(from._internal_timeline_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_seen()) {
    _this->_impl_.last_seen_ = new ::sonet::common::Timestamp(*from._impl_.last_seen_);
  }
  ::memcpy(&_impl_.is_active_user_, &from._impl_.is_active_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.follower_tier_) -
    reinterpret_cast<char*>(&_impl_.is_active_user_)) + sizeof(_impl_.follower_tier_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.DeliveryTarget)
}

inline void DeliveryTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.timeline_key_){}
    , decltype(_impl_.last_seen_){nullptr}
    , decltype(_impl_.is_active_user_){false}
    , decltype(_impl_.follower_tier_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeliveryTarget::~DeliveryTarget() {
  // @@protoc_insertion_point(destructor:sonet.fanout.DeliveryTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeliveryTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.timeline_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_seen_;
}

void DeliveryTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeliveryTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.DeliveryTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.timeline_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_seen_ != nullptr) {
    delete _impl_.last_seen_;
  }
  _impl_.last_seen_ = nullptr;
  ::memset(&_impl_.is_active_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.follower_tier_) -
      reinterpret_cast<char*>(&_impl_.is_active_user_)) + sizeof(_impl_.follower_tier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeliveryTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.DeliveryTarget.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string timeline_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_timeline_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.DeliveryTarget.timeline_key"));
        } else
          goto handle_unusual;
        continue;
      // bool is_active_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_active_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_seen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_seen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 follower_tier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.follower_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeliveryTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.DeliveryTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.DeliveryTarget.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string timeline_key = 2;
  if (!this->_internal_timeline_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeline_key().data(), static_cast<int>(this->_internal_timeline_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.DeliveryTarget.timeline_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timeline_key(), target);
  }

  // bool is_active_user = 3;
  if (this->_internal_is_active_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_active_user(), target);
  }

  // .sonet.common.Timestamp last_seen = 4;
  if (this->_internal_has_last_seen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_seen(this),
        _Internal::last_seen(this).GetCachedSize(), target, stream);
  }

  // int32 follower_tier = 5;
  if (this->_internal_follower_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_follower_tier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.DeliveryTarget)
  return target;
}

size_t DeliveryTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.DeliveryTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string timeline_key = 2;
  if (!this->_internal_timeline_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeline_key());
  }

  // .sonet.common.Timestamp last_seen = 4;
  if (this->_internal_has_last_seen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_seen_);
  }

  // bool is_active_user = 3;
  if (this->_internal_is_active_user() != 0) {
    total_size += 1 + 1;
  }

  // int32 follower_tier = 5;
  if (this->_internal_follower_tier() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_follower_tier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeliveryTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeliveryTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeliveryTarget::GetClassData() const { return &_class_data_; }


void DeliveryTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeliveryTarget*>(&to_msg);
  auto& from = static_cast<const DeliveryTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.DeliveryTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_timeline_key().empty()) {
    _this->_internal_set_timeline_key(from._internal_timeline_key());
  }
  if (from._internal_has_last_seen()) {
    _this->_internal_mutable_last_seen()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_seen());
  }
  if (from._internal_is_active_user() != 0) {
    _this->_internal_set_is_active_user(from._internal_is_active_user());
  }
  if (from._internal_follower_tier() != 0) {
    _this->_internal_set_follower_tier(from._internal_follower_tier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeliveryTarget::CopyFrom(const DeliveryTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.DeliveryTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryTarget::IsInitialized() const {
  return true;
}

void DeliveryTarget::InternalSwap(DeliveryTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeline_key_, lhs_arena,
      &other->_impl_.timeline_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeliveryTarget, _impl_.follower_tier_)
      + sizeof(DeliveryTarget::_impl_.follower_tier_)
      - PROTOBUF_FIELD_OFFSET(DeliveryTarget, _impl_.last_seen_)>(
          reinterpret_cast<char*>(&_impl_.last_seen_),
          reinterpret_cast<char*>(&other->_impl_.last_seen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeliveryTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[2]);
}

// ===================================================================

FanoutMetrics_DeliveryByTierEntry_DoNotUse::FanoutMetrics_DeliveryByTierEntry_DoNotUse() {}
FanoutMetrics_DeliveryByTierEntry_DoNotUse::FanoutMetrics_DeliveryByTierEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FanoutMetrics_DeliveryByTierEntry_DoNotUse::MergeFrom(const FanoutMetrics_DeliveryByTierEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FanoutMetrics_DeliveryByTierEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[3]);
}

// ===================================================================

class FanoutMetrics::_Internal {
 public:
  static const ::sonet::common::Timestamp& completed_at(const FanoutMetrics* msg);
};

const ::sonet::common::Timestamp&
FanoutMetrics::_Internal::completed_at(const FanoutMetrics* msg) {
  return *msg->_impl_.completed_at_;
}
void FanoutMetrics::clear_completed_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.completed_at_ != nullptr) {
    delete _impl_.completed_at_;
  }
  _impl_.completed_at_ = nullptr;
}
FanoutMetrics::FanoutMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FanoutMetrics::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.FanoutMetrics)
}
FanoutMetrics::FanoutMetrics(const FanoutMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FanoutMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.delivery_by_tier_)*/{}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.completed_at_){nullptr}
    , decltype(_impl_.total_deliveries_){}
    , decltype(_impl_.successful_deliveries_){}
    , decltype(_impl_.failed_deliveries_){}
    , decltype(_impl_.avg_delivery_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.delivery_by_tier_.MergeFrom(from._impl_.delivery_by_tier_);
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author_id().empty()) {
    _this->_impl_.author_id_.Set(from._internal_author_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_completed_at()) {
    _this->_impl_.completed_at_ = new ::sonet::common::Timestamp(*from._impl_.completed_at_);
  }
  ::memcpy(&_impl_.total_deliveries_, &from._impl_.total_deliveries_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_delivery_time_ms_) -
    reinterpret_cast<char*>(&_impl_.total_deliveries_)) + sizeof(_impl_.avg_delivery_time_ms_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.FanoutMetrics)
}

inline void FanoutMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.delivery_by_tier_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.completed_at_){nullptr}
    , decltype(_impl_.total_deliveries_){int64_t{0}}
    , decltype(_impl_.successful_deliveries_){int64_t{0}}
    , decltype(_impl_.failed_deliveries_){int64_t{0}}
    , decltype(_impl_.avg_delivery_time_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FanoutMetrics::~FanoutMetrics() {
  // @@protoc_insertion_point(destructor:sonet.fanout.FanoutMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FanoutMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delivery_by_tier_.Destruct();
  _impl_.delivery_by_tier_.~MapField();
  _impl_.author_id_.Destroy();
  _impl_.note_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.completed_at_;
}

void FanoutMetrics::ArenaDtor(void* object) {
  FanoutMetrics* _this = reinterpret_cast< FanoutMetrics* >(object);
  _this->_impl_.delivery_by_tier_.Destruct();
}
void FanoutMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FanoutMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.FanoutMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delivery_by_tier_.Clear();
  _impl_.author_id_.ClearToEmpty();
  _impl_.note_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.completed_at_ != nullptr) {
    delete _impl_.completed_at_;
  }
  _impl_.completed_at_ = nullptr;
  ::memset(&_impl_.total_deliveries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.avg_delivery_time_ms_) -
      reinterpret_cast<char*>(&_impl_.total_deliveries_)) + sizeof(_impl_.avg_delivery_time_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FanoutMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string author_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FanoutMetrics.author_id"));
        } else
          goto handle_unusual;
        continue;
      // string note_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.FanoutMetrics.note_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 total_deliveries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 successful_deliveries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.successful_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 failed_deliveries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.failed_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double avg_delivery_time_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.avg_delivery_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> delivery_by_tier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.delivery_by_tier_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp completed_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FanoutMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.FanoutMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string author_id = 1;
  if (!this->_internal_author_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_id().data(), static_cast<int>(this->_internal_author_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FanoutMetrics.author_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author_id(), target);
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.FanoutMetrics.note_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_note_id(), target);
  }

  // int64 total_deliveries = 3;
  if (this->_internal_total_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_deliveries(), target);
  }

  // int64 successful_deliveries = 4;
  if (this->_internal_successful_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_successful_deliveries(), target);
  }

  // int64 failed_deliveries = 5;
  if (this->_internal_failed_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_failed_deliveries(), target);
  }

  // double avg_delivery_time_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_delivery_time_ms = this->_internal_avg_delivery_time_ms();
  uint64_t raw_avg_delivery_time_ms;
  memcpy(&raw_avg_delivery_time_ms, &tmp_avg_delivery_time_ms, sizeof(tmp_avg_delivery_time_ms));
  if (raw_avg_delivery_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_avg_delivery_time_ms(), target);
  }

  // map<string, int64> delivery_by_tier = 7;
  if (!this->_internal_delivery_by_tier().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = FanoutMetrics_DeliveryByTierEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_delivery_by_tier();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.fanout.FanoutMetrics.DeliveryByTierEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .sonet.common.Timestamp completed_at = 8;
  if (this->_internal_has_completed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::completed_at(this),
        _Internal::completed_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.FanoutMetrics)
  return target;
}

size_t FanoutMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.FanoutMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> delivery_by_tier = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_delivery_by_tier_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_delivery_by_tier().begin();
      it != this->_internal_delivery_by_tier().end(); ++it) {
    total_size += FanoutMetrics_DeliveryByTierEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string author_id = 1;
  if (!this->_internal_author_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_id());
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // .sonet.common.Timestamp completed_at = 8;
  if (this->_internal_has_completed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.completed_at_);
  }

  // int64 total_deliveries = 3;
  if (this->_internal_total_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_deliveries());
  }

  // int64 successful_deliveries = 4;
  if (this->_internal_successful_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_successful_deliveries());
  }

  // int64 failed_deliveries = 5;
  if (this->_internal_failed_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_failed_deliveries());
  }

  // double avg_delivery_time_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_delivery_time_ms = this->_internal_avg_delivery_time_ms();
  uint64_t raw_avg_delivery_time_ms;
  memcpy(&raw_avg_delivery_time_ms, &tmp_avg_delivery_time_ms, sizeof(tmp_avg_delivery_time_ms));
  if (raw_avg_delivery_time_ms != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FanoutMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FanoutMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FanoutMetrics::GetClassData() const { return &_class_data_; }


void FanoutMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FanoutMetrics*>(&to_msg);
  auto& from = static_cast<const FanoutMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.FanoutMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.delivery_by_tier_.MergeFrom(from._impl_.delivery_by_tier_);
  if (!from._internal_author_id().empty()) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (from._internal_has_completed_at()) {
    _this->_internal_mutable_completed_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_completed_at());
  }
  if (from._internal_total_deliveries() != 0) {
    _this->_internal_set_total_deliveries(from._internal_total_deliveries());
  }
  if (from._internal_successful_deliveries() != 0) {
    _this->_internal_set_successful_deliveries(from._internal_successful_deliveries());
  }
  if (from._internal_failed_deliveries() != 0) {
    _this->_internal_set_failed_deliveries(from._internal_failed_deliveries());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_delivery_time_ms = from._internal_avg_delivery_time_ms();
  uint64_t raw_avg_delivery_time_ms;
  memcpy(&raw_avg_delivery_time_ms, &tmp_avg_delivery_time_ms, sizeof(tmp_avg_delivery_time_ms));
  if (raw_avg_delivery_time_ms != 0) {
    _this->_internal_set_avg_delivery_time_ms(from._internal_avg_delivery_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FanoutMetrics::CopyFrom(const FanoutMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.FanoutMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanoutMetrics::IsInitialized() const {
  return true;
}

void FanoutMetrics::InternalSwap(FanoutMetrics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.delivery_by_tier_.InternalSwap(&other->_impl_.delivery_by_tier_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_id_, lhs_arena,
      &other->_impl_.author_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FanoutMetrics, _impl_.avg_delivery_time_ms_)
      + sizeof(FanoutMetrics::_impl_.avg_delivery_time_ms_)
      - PROTOBUF_FIELD_OFFSET(FanoutMetrics, _impl_.completed_at_)>(
          reinterpret_cast<char*>(&_impl_.completed_at_),
          reinterpret_cast<char*>(&other->_impl_.completed_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FanoutMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[4]);
}

// ===================================================================

class InitiateFanoutRequest::_Internal {
 public:
  static const ::sonet::note::Note& note(const InitiateFanoutRequest* msg);
};

const ::sonet::note::Note&
InitiateFanoutRequest::_Internal::note(const InitiateFanoutRequest* msg) {
  return *msg->_impl_.note_;
}
void InitiateFanoutRequest::clear_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
}
InitiateFanoutRequest::InitiateFanoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.InitiateFanoutRequest)
}
InitiateFanoutRequest::InitiateFanoutRequest(const InitiateFanoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitiateFanoutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.specific_followers_){from._impl_.specific_followers_}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.urgent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::sonet::note::Note(*from._impl_.note_);
  }
  ::memcpy(&_impl_.strategy_, &from._impl_.strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.urgent_) -
    reinterpret_cast<char*>(&_impl_.strategy_)) + sizeof(_impl_.urgent_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.InitiateFanoutRequest)
}

inline void InitiateFanoutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.specific_followers_){arena}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.strategy_){0}
    , decltype(_impl_.urgent_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InitiateFanoutRequest::~InitiateFanoutRequest() {
  // @@protoc_insertion_point(destructor:sonet.fanout.InitiateFanoutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitiateFanoutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.specific_followers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.note_;
}

void InitiateFanoutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitiateFanoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.InitiateFanoutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.specific_followers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
  ::memset(&_impl_.strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.urgent_) -
      reinterpret_cast<char*>(&_impl_.strategy_)) + sizeof(_impl_.urgent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitiateFanoutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.note.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.FanoutStrategy strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::sonet::fanout::FanoutStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool urgent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.urgent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string specific_followers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_specific_followers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.InitiateFanoutRequest.specific_followers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitiateFanoutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.InitiateFanoutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  // .sonet.fanout.FanoutStrategy strategy = 2;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_strategy(), target);
  }

  // bool urgent = 3;
  if (this->_internal_urgent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_urgent(), target);
  }

  // repeated string specific_followers = 4;
  for (int i = 0, n = this->_internal_specific_followers_size(); i < n; i++) {
    const auto& s = this->_internal_specific_followers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.InitiateFanoutRequest.specific_followers");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.InitiateFanoutRequest)
  return target;
}

size_t InitiateFanoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.InitiateFanoutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string specific_followers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.specific_followers_.size());
  for (int i = 0, n = _impl_.specific_followers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.specific_followers_.Get(i));
  }

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.note_);
  }

  // .sonet.fanout.FanoutStrategy strategy = 2;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  // bool urgent = 3;
  if (this->_internal_urgent() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitiateFanoutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitiateFanoutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitiateFanoutRequest::GetClassData() const { return &_class_data_; }


void InitiateFanoutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitiateFanoutRequest*>(&to_msg);
  auto& from = static_cast<const InitiateFanoutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.InitiateFanoutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.specific_followers_.MergeFrom(from._impl_.specific_followers_);
  if (from._internal_has_note()) {
    _this->_internal_mutable_note()->::sonet::note::Note::MergeFrom(
        from._internal_note());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  if (from._internal_urgent() != 0) {
    _this->_internal_set_urgent(from._internal_urgent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitiateFanoutRequest::CopyFrom(const InitiateFanoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.InitiateFanoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateFanoutRequest::IsInitialized() const {
  return true;
}

void InitiateFanoutRequest::InternalSwap(InitiateFanoutRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.specific_followers_.InternalSwap(&other->_impl_.specific_followers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitiateFanoutRequest, _impl_.urgent_)
      + sizeof(InitiateFanoutRequest::_impl_.urgent_)
      - PROTOBUF_FIELD_OFFSET(InitiateFanoutRequest, _impl_.note_)>(
          reinterpret_cast<char*>(&_impl_.note_),
          reinterpret_cast<char*>(&other->_impl_.note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitiateFanoutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[5]);
}

// ===================================================================

class InitiateFanoutResponse::_Internal {
 public:
};

InitiateFanoutResponse::InitiateFanoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.InitiateFanoutResponse)
}
InitiateFanoutResponse::InitiateFanoutResponse(const InitiateFanoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitiateFanoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.strategy_used_){}
    , decltype(_impl_.estimated_deliveries_){}
    , decltype(_impl_.estimated_completion_time_ms_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.strategy_used_, &from._impl_.strategy_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.strategy_used_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.InitiateFanoutResponse)
}

inline void InitiateFanoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.strategy_used_){0}
    , decltype(_impl_.estimated_deliveries_){0}
    , decltype(_impl_.estimated_completion_time_ms_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitiateFanoutResponse::~InitiateFanoutResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.InitiateFanoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitiateFanoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
  _impl_.error_message_.Destroy();
}

void InitiateFanoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitiateFanoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.InitiateFanoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.strategy_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.strategy_used_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitiateFanoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.InitiateFanoutResponse.job_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.FanoutStrategy strategy_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy_used(static_cast<::sonet::fanout::FanoutStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 estimated_deliveries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.estimated_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double estimated_completion_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.estimated_completion_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool success = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.InitiateFanoutResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitiateFanoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.InitiateFanoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.InitiateFanoutResponse.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // .sonet.fanout.FanoutStrategy strategy_used = 2;
  if (this->_internal_strategy_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_strategy_used(), target);
  }

  // int32 estimated_deliveries = 3;
  if (this->_internal_estimated_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_estimated_deliveries(), target);
  }

  // double estimated_completion_time_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_estimated_completion_time_ms = this->_internal_estimated_completion_time_ms();
  uint64_t raw_estimated_completion_time_ms;
  memcpy(&raw_estimated_completion_time_ms, &tmp_estimated_completion_time_ms, sizeof(tmp_estimated_completion_time_ms));
  if (raw_estimated_completion_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_estimated_completion_time_ms(), target);
  }

  // bool success = 5;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_success(), target);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.InitiateFanoutResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.InitiateFanoutResponse)
  return target;
}

size_t InitiateFanoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.InitiateFanoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.fanout.FanoutStrategy strategy_used = 2;
  if (this->_internal_strategy_used() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy_used());
  }

  // int32 estimated_deliveries = 3;
  if (this->_internal_estimated_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_estimated_deliveries());
  }

  // double estimated_completion_time_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_estimated_completion_time_ms = this->_internal_estimated_completion_time_ms();
  uint64_t raw_estimated_completion_time_ms;
  memcpy(&raw_estimated_completion_time_ms, &tmp_estimated_completion_time_ms, sizeof(tmp_estimated_completion_time_ms));
  if (raw_estimated_completion_time_ms != 0) {
    total_size += 1 + 8;
  }

  // bool success = 5;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitiateFanoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitiateFanoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitiateFanoutResponse::GetClassData() const { return &_class_data_; }


void InitiateFanoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitiateFanoutResponse*>(&to_msg);
  auto& from = static_cast<const InitiateFanoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.InitiateFanoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_strategy_used() != 0) {
    _this->_internal_set_strategy_used(from._internal_strategy_used());
  }
  if (from._internal_estimated_deliveries() != 0) {
    _this->_internal_set_estimated_deliveries(from._internal_estimated_deliveries());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_estimated_completion_time_ms = from._internal_estimated_completion_time_ms();
  uint64_t raw_estimated_completion_time_ms;
  memcpy(&raw_estimated_completion_time_ms, &tmp_estimated_completion_time_ms, sizeof(tmp_estimated_completion_time_ms));
  if (raw_estimated_completion_time_ms != 0) {
    _this->_internal_set_estimated_completion_time_ms(from._internal_estimated_completion_time_ms());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitiateFanoutResponse::CopyFrom(const InitiateFanoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.InitiateFanoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateFanoutResponse::IsInitialized() const {
  return true;
}

void InitiateFanoutResponse::InternalSwap(InitiateFanoutResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitiateFanoutResponse, _impl_.success_)
      + sizeof(InitiateFanoutResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(InitiateFanoutResponse, _impl_.strategy_used_)>(
          reinterpret_cast<char*>(&_impl_.strategy_used_),
          reinterpret_cast<char*>(&other->_impl_.strategy_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitiateFanoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[6]);
}

// ===================================================================

class GetFanoutJobStatusRequest::_Internal {
 public:
};

GetFanoutJobStatusRequest::GetFanoutJobStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.GetFanoutJobStatusRequest)
}
GetFanoutJobStatusRequest::GetFanoutJobStatusRequest(const GetFanoutJobStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFanoutJobStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.GetFanoutJobStatusRequest)
}

inline void GetFanoutJobStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFanoutJobStatusRequest::~GetFanoutJobStatusRequest() {
  // @@protoc_insertion_point(destructor:sonet.fanout.GetFanoutJobStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFanoutJobStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
}

void GetFanoutJobStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFanoutJobStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.GetFanoutJobStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFanoutJobStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetFanoutJobStatusRequest.job_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFanoutJobStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.GetFanoutJobStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetFanoutJobStatusRequest.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.GetFanoutJobStatusRequest)
  return target;
}

size_t GetFanoutJobStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.GetFanoutJobStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFanoutJobStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFanoutJobStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFanoutJobStatusRequest::GetClassData() const { return &_class_data_; }


void GetFanoutJobStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFanoutJobStatusRequest*>(&to_msg);
  auto& from = static_cast<const GetFanoutJobStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.GetFanoutJobStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFanoutJobStatusRequest::CopyFrom(const GetFanoutJobStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.GetFanoutJobStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFanoutJobStatusRequest::IsInitialized() const {
  return true;
}

void GetFanoutJobStatusRequest::InternalSwap(GetFanoutJobStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFanoutJobStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[7]);
}

// ===================================================================

class GetFanoutJobStatusResponse::_Internal {
 public:
  static const ::sonet::fanout::FanoutJob& job(const GetFanoutJobStatusResponse* msg);
};

const ::sonet::fanout::FanoutJob&
GetFanoutJobStatusResponse::_Internal::job(const GetFanoutJobStatusResponse* msg) {
  return *msg->_impl_.job_;
}
GetFanoutJobStatusResponse::GetFanoutJobStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.GetFanoutJobStatusResponse)
}
GetFanoutJobStatusResponse::GetFanoutJobStatusResponse(const GetFanoutJobStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFanoutJobStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.job_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_job()) {
    _this->_impl_.job_ = new ::sonet::fanout::FanoutJob(*from._impl_.job_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.GetFanoutJobStatusResponse)
}

inline void GetFanoutJobStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.job_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFanoutJobStatusResponse::~GetFanoutJobStatusResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.GetFanoutJobStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFanoutJobStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.job_;
}

void GetFanoutJobStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFanoutJobStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.GetFanoutJobStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFanoutJobStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.fanout.FanoutJob job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetFanoutJobStatusResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFanoutJobStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.GetFanoutJobStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.fanout.FanoutJob job = 1;
  if (this->_internal_has_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::job(this),
        _Internal::job(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetFanoutJobStatusResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.GetFanoutJobStatusResponse)
  return target;
}

size_t GetFanoutJobStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.GetFanoutJobStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.fanout.FanoutJob job = 1;
  if (this->_internal_has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.job_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFanoutJobStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFanoutJobStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFanoutJobStatusResponse::GetClassData() const { return &_class_data_; }


void GetFanoutJobStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFanoutJobStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetFanoutJobStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.GetFanoutJobStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_job()) {
    _this->_internal_mutable_job()->::sonet::fanout::FanoutJob::MergeFrom(
        from._internal_job());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFanoutJobStatusResponse::CopyFrom(const GetFanoutJobStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.GetFanoutJobStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFanoutJobStatusResponse::IsInitialized() const {
  return true;
}

void GetFanoutJobStatusResponse::InternalSwap(GetFanoutJobStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFanoutJobStatusResponse, _impl_.success_)
      + sizeof(GetFanoutJobStatusResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetFanoutJobStatusResponse, _impl_.job_)>(
          reinterpret_cast<char*>(&_impl_.job_),
          reinterpret_cast<char*>(&other->_impl_.job_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFanoutJobStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[8]);
}

// ===================================================================

class CancelFanoutJobRequest::_Internal {
 public:
};

CancelFanoutJobRequest::CancelFanoutJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.CancelFanoutJobRequest)
}
CancelFanoutJobRequest::CancelFanoutJobRequest(const CancelFanoutJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelFanoutJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.CancelFanoutJobRequest)
}

inline void CancelFanoutJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelFanoutJobRequest::~CancelFanoutJobRequest() {
  // @@protoc_insertion_point(destructor:sonet.fanout.CancelFanoutJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelFanoutJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
  _impl_.reason_.Destroy();
}

void CancelFanoutJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelFanoutJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.CancelFanoutJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelFanoutJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.CancelFanoutJobRequest.job_id"));
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.CancelFanoutJobRequest.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelFanoutJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.CancelFanoutJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.CancelFanoutJobRequest.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.CancelFanoutJobRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.CancelFanoutJobRequest)
  return target;
}

size_t CancelFanoutJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.CancelFanoutJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelFanoutJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelFanoutJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelFanoutJobRequest::GetClassData() const { return &_class_data_; }


void CancelFanoutJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelFanoutJobRequest*>(&to_msg);
  auto& from = static_cast<const CancelFanoutJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.CancelFanoutJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelFanoutJobRequest::CopyFrom(const CancelFanoutJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.CancelFanoutJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelFanoutJobRequest::IsInitialized() const {
  return true;
}

void CancelFanoutJobRequest::InternalSwap(CancelFanoutJobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelFanoutJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[9]);
}

// ===================================================================

class CancelFanoutJobResponse::_Internal {
 public:
};

CancelFanoutJobResponse::CancelFanoutJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.CancelFanoutJobResponse)
}
CancelFanoutJobResponse::CancelFanoutJobResponse(const CancelFanoutJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelFanoutJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.CancelFanoutJobResponse)
}

inline void CancelFanoutJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelFanoutJobResponse::~CancelFanoutJobResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.CancelFanoutJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelFanoutJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void CancelFanoutJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelFanoutJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.CancelFanoutJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelFanoutJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.CancelFanoutJobResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelFanoutJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.CancelFanoutJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.CancelFanoutJobResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.CancelFanoutJobResponse)
  return target;
}

size_t CancelFanoutJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.CancelFanoutJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelFanoutJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelFanoutJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelFanoutJobResponse::GetClassData() const { return &_class_data_; }


void CancelFanoutJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelFanoutJobResponse*>(&to_msg);
  auto& from = static_cast<const CancelFanoutJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.CancelFanoutJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelFanoutJobResponse::CopyFrom(const CancelFanoutJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.CancelFanoutJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelFanoutJobResponse::IsInitialized() const {
  return true;
}

void CancelFanoutJobResponse::InternalSwap(CancelFanoutJobResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelFanoutJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[10]);
}

// ===================================================================

class GetUserTierRequest::_Internal {
 public:
};

GetUserTierRequest::GetUserTierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.GetUserTierRequest)
}
GetUserTierRequest::GetUserTierRequest(const GetUserTierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserTierRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.GetUserTierRequest)
}

inline void GetUserTierRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserTierRequest::~GetUserTierRequest() {
  // @@protoc_insertion_point(destructor:sonet.fanout.GetUserTierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserTierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void GetUserTierRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserTierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.GetUserTierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserTierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetUserTierRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserTierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.GetUserTierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetUserTierRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.GetUserTierRequest)
  return target;
}

size_t GetUserTierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.GetUserTierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserTierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserTierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserTierRequest::GetClassData() const { return &_class_data_; }


void GetUserTierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserTierRequest*>(&to_msg);
  auto& from = static_cast<const GetUserTierRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.GetUserTierRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserTierRequest::CopyFrom(const GetUserTierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.GetUserTierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTierRequest::IsInitialized() const {
  return true;
}

void GetUserTierRequest::InternalSwap(GetUserTierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserTierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[11]);
}

// ===================================================================

class GetUserTierResponse::_Internal {
 public:
};

GetUserTierResponse::GetUserTierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.GetUserTierResponse)
}
GetUserTierResponse::GetUserTierResponse(const GetUserTierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserTierResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.tier_){}
    , decltype(_impl_.follower_count_){}
    , decltype(_impl_.recommended_strategy_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tier_, &from._impl_.tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.GetUserTierResponse)
}

inline void GetUserTierResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.tier_){0}
    , decltype(_impl_.follower_count_){0}
    , decltype(_impl_.recommended_strategy_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserTierResponse::~GetUserTierResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.GetUserTierResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserTierResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void GetUserTierResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserTierResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.GetUserTierResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.tier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserTierResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.fanout.UserTier tier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tier(static_cast<::sonet::fanout::UserTier>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 follower_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.follower_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.fanout.FanoutStrategy recommended_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recommended_strategy(static_cast<::sonet::fanout::FanoutStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetUserTierResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserTierResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.GetUserTierResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.fanout.UserTier tier = 1;
  if (this->_internal_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tier(), target);
  }

  // int32 follower_count = 2;
  if (this->_internal_follower_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_follower_count(), target);
  }

  // .sonet.fanout.FanoutStrategy recommended_strategy = 3;
  if (this->_internal_recommended_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_recommended_strategy(), target);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetUserTierResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.GetUserTierResponse)
  return target;
}

size_t GetUserTierResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.GetUserTierResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.fanout.UserTier tier = 1;
  if (this->_internal_tier() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tier());
  }

  // int32 follower_count = 2;
  if (this->_internal_follower_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_follower_count());
  }

  // .sonet.fanout.FanoutStrategy recommended_strategy = 3;
  if (this->_internal_recommended_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_recommended_strategy());
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserTierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserTierResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserTierResponse::GetClassData() const { return &_class_data_; }


void GetUserTierResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserTierResponse*>(&to_msg);
  auto& from = static_cast<const GetUserTierResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.GetUserTierResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_tier() != 0) {
    _this->_internal_set_tier(from._internal_tier());
  }
  if (from._internal_follower_count() != 0) {
    _this->_internal_set_follower_count(from._internal_follower_count());
  }
  if (from._internal_recommended_strategy() != 0) {
    _this->_internal_set_recommended_strategy(from._internal_recommended_strategy());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserTierResponse::CopyFrom(const GetUserTierResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.GetUserTierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTierResponse::IsInitialized() const {
  return true;
}

void GetUserTierResponse::InternalSwap(GetUserTierResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserTierResponse, _impl_.success_)
      + sizeof(GetUserTierResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetUserTierResponse, _impl_.tier_)>(
          reinterpret_cast<char*>(&_impl_.tier_),
          reinterpret_cast<char*>(&other->_impl_.tier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserTierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[12]);
}

// ===================================================================

class ProcessFollowerBatchRequest::_Internal {
 public:
  static const ::sonet::fanout::FollowerBatch& batch(const ProcessFollowerBatchRequest* msg);
  static const ::sonet::note::Note& note(const ProcessFollowerBatchRequest* msg);
};

const ::sonet::fanout::FollowerBatch&
ProcessFollowerBatchRequest::_Internal::batch(const ProcessFollowerBatchRequest* msg) {
  return *msg->_impl_.batch_;
}
const ::sonet::note::Note&
ProcessFollowerBatchRequest::_Internal::note(const ProcessFollowerBatchRequest* msg) {
  return *msg->_impl_.note_;
}
void ProcessFollowerBatchRequest::clear_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
}
ProcessFollowerBatchRequest::ProcessFollowerBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.ProcessFollowerBatchRequest)
}
ProcessFollowerBatchRequest::ProcessFollowerBatchRequest(const ProcessFollowerBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessFollowerBatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.batch_){nullptr}
    , decltype(_impl_.note_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_batch()) {
    _this->_impl_.batch_ = new ::sonet::fanout::FollowerBatch(*from._impl_.batch_);
  }
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::sonet::note::Note(*from._impl_.note_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.ProcessFollowerBatchRequest)
}

inline void ProcessFollowerBatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.batch_){nullptr}
    , decltype(_impl_.note_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessFollowerBatchRequest::~ProcessFollowerBatchRequest() {
  // @@protoc_insertion_point(destructor:sonet.fanout.ProcessFollowerBatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessFollowerBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.batch_;
  if (this != internal_default_instance()) delete _impl_.note_;
}

void ProcessFollowerBatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessFollowerBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.ProcessFollowerBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.batch_ != nullptr) {
    delete _impl_.batch_;
  }
  _impl_.batch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessFollowerBatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.fanout.FollowerBatch batch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.Note note = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessFollowerBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.ProcessFollowerBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.fanout.FollowerBatch batch = 1;
  if (this->_internal_has_batch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::batch(this),
        _Internal::batch(this).GetCachedSize(), target, stream);
  }

  // .sonet.note.Note note = 2;
  if (this->_internal_has_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.ProcessFollowerBatchRequest)
  return target;
}

size_t ProcessFollowerBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.ProcessFollowerBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.fanout.FollowerBatch batch = 1;
  if (this->_internal_has_batch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_);
  }

  // .sonet.note.Note note = 2;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.note_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessFollowerBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessFollowerBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessFollowerBatchRequest::GetClassData() const { return &_class_data_; }


void ProcessFollowerBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessFollowerBatchRequest*>(&to_msg);
  auto& from = static_cast<const ProcessFollowerBatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.ProcessFollowerBatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_batch()) {
    _this->_internal_mutable_batch()->::sonet::fanout::FollowerBatch::MergeFrom(
        from._internal_batch());
  }
  if (from._internal_has_note()) {
    _this->_internal_mutable_note()->::sonet::note::Note::MergeFrom(
        from._internal_note());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessFollowerBatchRequest::CopyFrom(const ProcessFollowerBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.ProcessFollowerBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessFollowerBatchRequest::IsInitialized() const {
  return true;
}

void ProcessFollowerBatchRequest::InternalSwap(ProcessFollowerBatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessFollowerBatchRequest, _impl_.note_)
      + sizeof(ProcessFollowerBatchRequest::_impl_.note_)
      - PROTOBUF_FIELD_OFFSET(ProcessFollowerBatchRequest, _impl_.batch_)>(
          reinterpret_cast<char*>(&_impl_.batch_),
          reinterpret_cast<char*>(&other->_impl_.batch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessFollowerBatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[13]);
}

// ===================================================================

class ProcessFollowerBatchResponse::_Internal {
 public:
};

ProcessFollowerBatchResponse::ProcessFollowerBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.ProcessFollowerBatchResponse)
}
ProcessFollowerBatchResponse::ProcessFollowerBatchResponse(const ProcessFollowerBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessFollowerBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failed_user_ids_){from._impl_.failed_user_ids_}
    , decltype(_impl_.batch_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.successful_deliveries_){}
    , decltype(_impl_.failed_deliveries_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_id().empty()) {
    _this->_impl_.batch_id_.Set(from._internal_batch_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.successful_deliveries_, &from._impl_.successful_deliveries_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.successful_deliveries_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.ProcessFollowerBatchResponse)
}

inline void ProcessFollowerBatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failed_user_ids_){arena}
    , decltype(_impl_.batch_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.successful_deliveries_){0}
    , decltype(_impl_.failed_deliveries_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.batch_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessFollowerBatchResponse::~ProcessFollowerBatchResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.ProcessFollowerBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessFollowerBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failed_user_ids_.~RepeatedPtrField();
  _impl_.batch_id_.Destroy();
  _impl_.error_message_.Destroy();
}

void ProcessFollowerBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessFollowerBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.ProcessFollowerBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failed_user_ids_.Clear();
  _impl_.batch_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.successful_deliveries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.successful_deliveries_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessFollowerBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string batch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_batch_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.ProcessFollowerBatchResponse.batch_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 successful_deliveries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.successful_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_deliveries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.failed_deliveries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string failed_user_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.ProcessFollowerBatchResponse.failed_user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool success = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.ProcessFollowerBatchResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessFollowerBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.ProcessFollowerBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string batch_id = 1;
  if (!this->_internal_batch_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_id().data(), static_cast<int>(this->_internal_batch_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.ProcessFollowerBatchResponse.batch_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batch_id(), target);
  }

  // int32 successful_deliveries = 2;
  if (this->_internal_successful_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_successful_deliveries(), target);
  }

  // int32 failed_deliveries = 3;
  if (this->_internal_failed_deliveries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_failed_deliveries(), target);
  }

  // repeated string failed_user_ids = 4;
  for (int i = 0, n = this->_internal_failed_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_failed_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.ProcessFollowerBatchResponse.failed_user_ids");
    target = stream->WriteString(4, s, target);
  }

  // bool success = 5;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_success(), target);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.ProcessFollowerBatchResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.ProcessFollowerBatchResponse)
  return target;
}

size_t ProcessFollowerBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.ProcessFollowerBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failed_user_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.failed_user_ids_.size());
  for (int i = 0, n = _impl_.failed_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.failed_user_ids_.Get(i));
  }

  // string batch_id = 1;
  if (!this->_internal_batch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_id());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 successful_deliveries = 2;
  if (this->_internal_successful_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_successful_deliveries());
  }

  // int32 failed_deliveries = 3;
  if (this->_internal_failed_deliveries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_deliveries());
  }

  // bool success = 5;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessFollowerBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessFollowerBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessFollowerBatchResponse::GetClassData() const { return &_class_data_; }


void ProcessFollowerBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessFollowerBatchResponse*>(&to_msg);
  auto& from = static_cast<const ProcessFollowerBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.ProcessFollowerBatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.failed_user_ids_.MergeFrom(from._impl_.failed_user_ids_);
  if (!from._internal_batch_id().empty()) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_successful_deliveries() != 0) {
    _this->_internal_set_successful_deliveries(from._internal_successful_deliveries());
  }
  if (from._internal_failed_deliveries() != 0) {
    _this->_internal_set_failed_deliveries(from._internal_failed_deliveries());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessFollowerBatchResponse::CopyFrom(const ProcessFollowerBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.ProcessFollowerBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessFollowerBatchResponse::IsInitialized() const {
  return true;
}

void ProcessFollowerBatchResponse::InternalSwap(ProcessFollowerBatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.failed_user_ids_.InternalSwap(&other->_impl_.failed_user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_id_, lhs_arena,
      &other->_impl_.batch_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessFollowerBatchResponse, _impl_.success_)
      + sizeof(ProcessFollowerBatchResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(ProcessFollowerBatchResponse, _impl_.successful_deliveries_)>(
          reinterpret_cast<char*>(&_impl_.successful_deliveries_),
          reinterpret_cast<char*>(&other->_impl_.successful_deliveries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessFollowerBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[14]);
}

// ===================================================================

class GetFanoutMetricsRequest::_Internal {
 public:
  static const ::sonet::common::Timestamp& since(const GetFanoutMetricsRequest* msg);
  static const ::sonet::common::Timestamp& until(const GetFanoutMetricsRequest* msg);
};

const ::sonet::common::Timestamp&
GetFanoutMetricsRequest::_Internal::since(const GetFanoutMetricsRequest* msg) {
  return *msg->_impl_.since_;
}
const ::sonet::common::Timestamp&
GetFanoutMetricsRequest::_Internal::until(const GetFanoutMetricsRequest* msg) {
  return *msg->_impl_.until_;
}
void GetFanoutMetricsRequest::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
void GetFanoutMetricsRequest::clear_until() {
  if (GetArenaForAllocation() == nullptr && _impl_.until_ != nullptr) {
    delete _impl_.until_;
  }
  _impl_.until_ = nullptr;
}
GetFanoutMetricsRequest::GetFanoutMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.GetFanoutMetricsRequest)
}
GetFanoutMetricsRequest::GetFanoutMetricsRequest(const GetFanoutMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFanoutMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.author_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.until_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author_id().empty()) {
    _this->_impl_.author_id_.Set(from._internal_author_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::sonet::common::Timestamp(*from._impl_.since_);
  }
  if (from._internal_has_until()) {
    _this->_impl_.until_ = new ::sonet::common::Timestamp(*from._impl_.until_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.GetFanoutMetricsRequest)
}

inline void GetFanoutMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.author_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.until_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFanoutMetricsRequest::~GetFanoutMetricsRequest() {
  // @@protoc_insertion_point(destructor:sonet.fanout.GetFanoutMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFanoutMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.author_id_.Destroy();
  _impl_.note_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.since_;
  if (this != internal_default_instance()) delete _impl_.until_;
}

void GetFanoutMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFanoutMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.GetFanoutMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.author_id_.ClearToEmpty();
  _impl_.note_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.until_ != nullptr) {
    delete _impl_.until_;
  }
  _impl_.until_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFanoutMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string author_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetFanoutMetricsRequest.author_id"));
        } else
          goto handle_unusual;
        continue;
      // string note_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetFanoutMetricsRequest.note_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp since = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp until = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_until(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFanoutMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.GetFanoutMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string author_id = 1;
  if (!this->_internal_author_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_id().data(), static_cast<int>(this->_internal_author_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetFanoutMetricsRequest.author_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author_id(), target);
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetFanoutMetricsRequest.note_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_note_id(), target);
  }

  // .sonet.common.Timestamp since = 3;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp until = 4;
  if (this->_internal_has_until()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::until(this),
        _Internal::until(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.GetFanoutMetricsRequest)
  return target;
}

size_t GetFanoutMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.GetFanoutMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string author_id = 1;
  if (!this->_internal_author_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_id());
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // .sonet.common.Timestamp since = 3;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  // .sonet.common.Timestamp until = 4;
  if (this->_internal_has_until()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.until_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFanoutMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFanoutMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFanoutMetricsRequest::GetClassData() const { return &_class_data_; }


void GetFanoutMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFanoutMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetFanoutMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.GetFanoutMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_author_id().empty()) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::sonet::common::Timestamp::MergeFrom(
        from._internal_since());
  }
  if (from._internal_has_until()) {
    _this->_internal_mutable_until()->::sonet::common::Timestamp::MergeFrom(
        from._internal_until());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFanoutMetricsRequest::CopyFrom(const GetFanoutMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.GetFanoutMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFanoutMetricsRequest::IsInitialized() const {
  return true;
}

void GetFanoutMetricsRequest::InternalSwap(GetFanoutMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_id_, lhs_arena,
      &other->_impl_.author_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFanoutMetricsRequest, _impl_.until_)
      + sizeof(GetFanoutMetricsRequest::_impl_.until_)
      - PROTOBUF_FIELD_OFFSET(GetFanoutMetricsRequest, _impl_.since_)>(
          reinterpret_cast<char*>(&_impl_.since_),
          reinterpret_cast<char*>(&other->_impl_.since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFanoutMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[15]);
}

// ===================================================================

GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse() {}
GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::MergeFrom(const GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[16]);
}

// ===================================================================

class GetFanoutMetricsResponse::_Internal {
 public:
};

GetFanoutMetricsResponse::GetFanoutMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetFanoutMetricsResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.GetFanoutMetricsResponse)
}
GetFanoutMetricsResponse::GetFanoutMetricsResponse(const GetFanoutMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFanoutMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){from._impl_.metrics_}
    , /*decltype(_impl_.summary_stats_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.summary_stats_.MergeFrom(from._impl_.summary_stats_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.GetFanoutMetricsResponse)
}

inline void GetFanoutMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){arena}
    , /*decltype(_impl_.summary_stats_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFanoutMetricsResponse::~GetFanoutMetricsResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.GetFanoutMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetFanoutMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
  _impl_.summary_stats_.Destruct();
  _impl_.summary_stats_.~MapField();
  _impl_.error_message_.Destroy();
}

void GetFanoutMetricsResponse::ArenaDtor(void* object) {
  GetFanoutMetricsResponse* _this = reinterpret_cast< GetFanoutMetricsResponse* >(object);
  _this->_impl_.summary_stats_.Destruct();
}
void GetFanoutMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFanoutMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.GetFanoutMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _impl_.summary_stats_.Clear();
  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFanoutMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.fanout.FanoutMetrics metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> summary_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.summary_stats_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.GetFanoutMetricsResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFanoutMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.GetFanoutMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.fanout.FanoutMetrics metrics = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, double> summary_stats = 2;
  if (!this->_internal_summary_stats().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_summary_stats();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.fanout.GetFanoutMetricsResponse.SummaryStatsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.GetFanoutMetricsResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.GetFanoutMetricsResponse)
  return target;
}

size_t GetFanoutMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.GetFanoutMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.fanout.FanoutMetrics metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> summary_stats = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_summary_stats_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_summary_stats().begin();
      it != this->_internal_summary_stats().end(); ++it) {
    total_size += GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFanoutMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFanoutMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFanoutMetricsResponse::GetClassData() const { return &_class_data_; }


void GetFanoutMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFanoutMetricsResponse*>(&to_msg);
  auto& from = static_cast<const GetFanoutMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.GetFanoutMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_impl_.summary_stats_.MergeFrom(from._impl_.summary_stats_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFanoutMetricsResponse::CopyFrom(const GetFanoutMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.GetFanoutMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFanoutMetricsResponse::IsInitialized() const {
  return true;
}

void GetFanoutMetricsResponse::InternalSwap(GetFanoutMetricsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  _impl_.summary_stats_.InternalSwap(&other->_impl_.summary_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFanoutMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[17]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HealthCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.HealthCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[18]);
}

// ===================================================================

HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse() {}
HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HealthCheckResponse_DetailsEntry_DoNotUse::MergeFrom(const HealthCheckResponse_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse_DetailsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[19]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HealthCheckResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.fanout.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{}
    , decltype(_impl_.status_){}
    , decltype(_impl_.pending_jobs_){}
    , decltype(_impl_.active_workers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pending_jobs_, &from._impl_.pending_jobs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_workers_) -
    reinterpret_cast<char*>(&_impl_.pending_jobs_)) + sizeof(_impl_.active_workers_));
  // @@protoc_insertion_point(copy_constructor:sonet.fanout.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.status_){}
    , decltype(_impl_.pending_jobs_){0}
    , decltype(_impl_.active_workers_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:sonet.fanout.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destruct();
  _impl_.details_.~MapField();
  _impl_.status_.Destroy();
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  _this->_impl_.details_.Destruct();
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.fanout.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.pending_jobs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.active_workers_) -
      reinterpret_cast<char*>(&_impl_.pending_jobs_)) + sizeof(_impl_.active_workers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.fanout.HealthCheckResponse.status"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.details_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 pending_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pending_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 active_workers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.active_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.fanout.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.fanout.HealthCheckResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // map<string, string> details = 2;
  if (!this->_internal_details().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HealthCheckResponse_DetailsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_details();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.fanout.HealthCheckResponse.DetailsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.fanout.HealthCheckResponse.DetailsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int32 pending_jobs = 3;
  if (this->_internal_pending_jobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pending_jobs(), target);
  }

  // int32 active_workers = 4;
  if (this->_internal_active_workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_active_workers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.fanout.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.fanout.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> details = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_details_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_details().begin();
      it != this->_internal_details().end(); ++it) {
    total_size += HealthCheckResponse_DetailsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 pending_jobs = 3;
  if (this->_internal_pending_jobs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pending_jobs());
  }

  // int32 active_workers = 4;
  if (this->_internal_active_workers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_active_workers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.fanout.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_pending_jobs() != 0) {
    _this->_internal_set_pending_jobs(from._internal_pending_jobs());
  }
  if (from._internal_active_workers() != 0) {
    _this->_internal_set_active_workers(from._internal_active_workers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.fanout.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.active_workers_)
      + sizeof(HealthCheckResponse::_impl_.active_workers_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.pending_jobs_)>(
          reinterpret_cast<char*>(&_impl_.pending_jobs_),
          reinterpret_cast<char*>(&other->_impl_.pending_jobs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffanout_2eproto_getter, &descriptor_table_services_2ffanout_2eproto_once,
      file_level_metadata_services_2ffanout_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fanout
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::fanout::FanoutJob*
Arena::CreateMaybeMessage< ::sonet::fanout::FanoutJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::FanoutJob >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::FollowerBatch*
Arena::CreateMaybeMessage< ::sonet::fanout::FollowerBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::FollowerBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::DeliveryTarget*
Arena::CreateMaybeMessage< ::sonet::fanout::DeliveryTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::DeliveryTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::FanoutMetrics_DeliveryByTierEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::FanoutMetrics*
Arena::CreateMaybeMessage< ::sonet::fanout::FanoutMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::FanoutMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::InitiateFanoutRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::InitiateFanoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::InitiateFanoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::InitiateFanoutResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::InitiateFanoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::InitiateFanoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetFanoutJobStatusRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::GetFanoutJobStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetFanoutJobStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetFanoutJobStatusResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::GetFanoutJobStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetFanoutJobStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::CancelFanoutJobRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::CancelFanoutJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::CancelFanoutJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::CancelFanoutJobResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::CancelFanoutJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::CancelFanoutJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetUserTierRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::GetUserTierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetUserTierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetUserTierResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::GetUserTierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetUserTierResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::ProcessFollowerBatchRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::ProcessFollowerBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::ProcessFollowerBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::ProcessFollowerBatchResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::ProcessFollowerBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::ProcessFollowerBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetFanoutMetricsRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::GetFanoutMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetFanoutMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetFanoutMetricsResponse_SummaryStatsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::GetFanoutMetricsResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::GetFanoutMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::GetFanoutMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::HealthCheckRequest*
Arena::CreateMaybeMessage< ::sonet::fanout::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::HealthCheckResponse_DetailsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::fanout::HealthCheckResponse*
Arena::CreateMaybeMessage< ::sonet::fanout::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::fanout::HealthCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
