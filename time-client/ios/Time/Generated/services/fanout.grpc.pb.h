// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/fanout.proto
// Original file comments:
//
// Copyright (c) 2025 Neo Qiss
// All rights reserved.
//
// This software is proprietary and confidential.
// Unauthorized copying, distribution, or use is strictly prohibited.
//
//
#ifndef GRPC_services_2ffanout_2eproto__INCLUDED
#define GRPC_services_2ffanout_2eproto__INCLUDED

#include "services/fanout.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sonet {
namespace fanout {

// ============= FANOUT SERVICE =============
class FanoutService final {
 public:
  static constexpr char const* service_full_name() {
    return "sonet.fanout.FanoutService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Job management
    virtual ::grpc::Status InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::sonet::fanout::InitiateFanoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::InitiateFanoutResponse>> AsyncInitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::InitiateFanoutResponse>>(AsyncInitiateFanoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::InitiateFanoutResponse>> PrepareAsyncInitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::InitiateFanoutResponse>>(PrepareAsyncInitiateFanoutRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::sonet::fanout::GetFanoutJobStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutJobStatusResponse>> AsyncGetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutJobStatusResponse>>(AsyncGetFanoutJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutJobStatusResponse>> PrepareAsyncGetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutJobStatusResponse>>(PrepareAsyncGetFanoutJobStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::sonet::fanout::CancelFanoutJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::CancelFanoutJobResponse>> AsyncCancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::CancelFanoutJobResponse>>(AsyncCancelFanoutJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::CancelFanoutJobResponse>> PrepareAsyncCancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::CancelFanoutJobResponse>>(PrepareAsyncCancelFanoutJobRaw(context, request, cq));
    }
    // User tier management
    virtual ::grpc::Status GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::sonet::fanout::GetUserTierResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetUserTierResponse>> AsyncGetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetUserTierResponse>>(AsyncGetUserTierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetUserTierResponse>> PrepareAsyncGetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetUserTierResponse>>(PrepareAsyncGetUserTierRaw(context, request, cq));
    }
    // Batch processing (internal)
    virtual ::grpc::Status ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::sonet::fanout::ProcessFollowerBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::ProcessFollowerBatchResponse>> AsyncProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::ProcessFollowerBatchResponse>>(AsyncProcessFollowerBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::ProcessFollowerBatchResponse>> PrepareAsyncProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::ProcessFollowerBatchResponse>>(PrepareAsyncProcessFollowerBatchRaw(context, request, cq));
    }
    // Analytics
    virtual ::grpc::Status GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::sonet::fanout::GetFanoutMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutMetricsResponse>> AsyncGetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutMetricsResponse>>(AsyncGetFanoutMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutMetricsResponse>> PrepareAsyncGetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutMetricsResponse>>(PrepareAsyncGetFanoutMetricsRaw(context, request, cq));
    }
    // Health
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::sonet::fanout::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Job management
      virtual void InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // User tier management
      virtual void GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Batch processing (internal)
      virtual void ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Analytics
      virtual void GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Health
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::InitiateFanoutResponse>* AsyncInitiateFanoutRaw(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::InitiateFanoutResponse>* PrepareAsyncInitiateFanoutRaw(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutJobStatusResponse>* AsyncGetFanoutJobStatusRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutJobStatusResponse>* PrepareAsyncGetFanoutJobStatusRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::CancelFanoutJobResponse>* AsyncCancelFanoutJobRaw(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::CancelFanoutJobResponse>* PrepareAsyncCancelFanoutJobRaw(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetUserTierResponse>* AsyncGetUserTierRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetUserTierResponse>* PrepareAsyncGetUserTierRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::ProcessFollowerBatchResponse>* AsyncProcessFollowerBatchRaw(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::ProcessFollowerBatchResponse>* PrepareAsyncProcessFollowerBatchRaw(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutMetricsResponse>* AsyncGetFanoutMetricsRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::GetFanoutMetricsResponse>* PrepareAsyncGetFanoutMetricsRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::fanout::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::sonet::fanout::InitiateFanoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>> AsyncInitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>>(AsyncInitiateFanoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>> PrepareAsyncInitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>>(PrepareAsyncInitiateFanoutRaw(context, request, cq));
    }
    ::grpc::Status GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::sonet::fanout::GetFanoutJobStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>> AsyncGetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>>(AsyncGetFanoutJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>> PrepareAsyncGetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>>(PrepareAsyncGetFanoutJobStatusRaw(context, request, cq));
    }
    ::grpc::Status CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::sonet::fanout::CancelFanoutJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>> AsyncCancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>>(AsyncCancelFanoutJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>> PrepareAsyncCancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>>(PrepareAsyncCancelFanoutJobRaw(context, request, cq));
    }
    ::grpc::Status GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::sonet::fanout::GetUserTierResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>> AsyncGetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>>(AsyncGetUserTierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>> PrepareAsyncGetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>>(PrepareAsyncGetUserTierRaw(context, request, cq));
    }
    ::grpc::Status ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::sonet::fanout::ProcessFollowerBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>> AsyncProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>>(AsyncProcessFollowerBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>> PrepareAsyncProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>>(PrepareAsyncProcessFollowerBatchRaw(context, request, cq));
    }
    ::grpc::Status GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::sonet::fanout::GetFanoutMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>> AsyncGetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>>(AsyncGetFanoutMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>> PrepareAsyncGetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>>(PrepareAsyncGetFanoutMetricsRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::sonet::fanout::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response, std::function<void(::grpc::Status)>) override;
      void InitiateFanout(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFanoutJobStatus(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelFanoutJob(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserTier(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessFollowerBatch(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFanoutMetrics(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>* AsyncInitiateFanoutRaw(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::InitiateFanoutResponse>* PrepareAsyncInitiateFanoutRaw(::grpc::ClientContext* context, const ::sonet::fanout::InitiateFanoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>* AsyncGetFanoutJobStatusRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutJobStatusResponse>* PrepareAsyncGetFanoutJobStatusRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>* AsyncCancelFanoutJobRaw(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::CancelFanoutJobResponse>* PrepareAsyncCancelFanoutJobRaw(::grpc::ClientContext* context, const ::sonet::fanout::CancelFanoutJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>* AsyncGetUserTierRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetUserTierResponse>* PrepareAsyncGetUserTierRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetUserTierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>* AsyncProcessFollowerBatchRaw(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::ProcessFollowerBatchResponse>* PrepareAsyncProcessFollowerBatchRaw(::grpc::ClientContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>* AsyncGetFanoutMetricsRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::GetFanoutMetricsResponse>* PrepareAsyncGetFanoutMetricsRaw(::grpc::ClientContext* context, const ::sonet::fanout::GetFanoutMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::fanout::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::fanout::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InitiateFanout_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFanoutJobStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelFanoutJob_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserTier_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessFollowerBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFanoutMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Job management
    virtual ::grpc::Status InitiateFanout(::grpc::ServerContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response);
    virtual ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response);
    virtual ::grpc::Status CancelFanoutJob(::grpc::ServerContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response);
    // User tier management
    virtual ::grpc::Status GetUserTier(::grpc::ServerContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response);
    // Batch processing (internal)
    virtual ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response);
    // Analytics
    virtual ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response);
    // Health
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitiateFanout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitiateFanout() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitiateFanout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitiateFanout(::grpc::ServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitiateFanout(::grpc::ServerContext* context, ::sonet::fanout::InitiateFanoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::InitiateFanoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFanoutJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFanoutJobStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFanoutJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFanoutJobStatus(::grpc::ServerContext* context, ::sonet::fanout::GetFanoutJobStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::GetFanoutJobStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelFanoutJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelFanoutJob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CancelFanoutJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelFanoutJob(::grpc::ServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelFanoutJob(::grpc::ServerContext* context, ::sonet::fanout::CancelFanoutJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::CancelFanoutJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserTier() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetUserTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTier(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserTier(::grpc::ServerContext* context, ::sonet::fanout::GetUserTierRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::GetUserTierResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessFollowerBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessFollowerBatch() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ProcessFollowerBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessFollowerBatch(::grpc::ServerContext* context, ::sonet::fanout::ProcessFollowerBatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::ProcessFollowerBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFanoutMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFanoutMetrics() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFanoutMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFanoutMetrics(::grpc::ServerContext* context, ::sonet::fanout::GetFanoutMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::GetFanoutMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::sonet::fanout::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::fanout::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitiateFanout<WithAsyncMethod_GetFanoutJobStatus<WithAsyncMethod_CancelFanoutJob<WithAsyncMethod_GetUserTier<WithAsyncMethod_ProcessFollowerBatch<WithAsyncMethod_GetFanoutMetrics<WithAsyncMethod_HealthCheck<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InitiateFanout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitiateFanout() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::InitiateFanoutRequest* request, ::sonet::fanout::InitiateFanoutResponse* response) { return this->InitiateFanout(context, request, response); }));}
    void SetMessageAllocatorFor_InitiateFanout(
        ::grpc::MessageAllocator< ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitiateFanout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitiateFanout(::grpc::ServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitiateFanout(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFanoutJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFanoutJobStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::GetFanoutJobStatusRequest* request, ::sonet::fanout::GetFanoutJobStatusResponse* response) { return this->GetFanoutJobStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetFanoutJobStatus(
        ::grpc::MessageAllocator< ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFanoutJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFanoutJobStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelFanoutJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelFanoutJob() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::CancelFanoutJobRequest* request, ::sonet::fanout::CancelFanoutJobResponse* response) { return this->CancelFanoutJob(context, request, response); }));}
    void SetMessageAllocatorFor_CancelFanoutJob(
        ::grpc::MessageAllocator< ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelFanoutJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelFanoutJob(::grpc::ServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelFanoutJob(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserTier() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::GetUserTierRequest* request, ::sonet::fanout::GetUserTierResponse* response) { return this->GetUserTier(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserTier(
        ::grpc::MessageAllocator< ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTier(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserTier(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProcessFollowerBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessFollowerBatch() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::ProcessFollowerBatchRequest* request, ::sonet::fanout::ProcessFollowerBatchResponse* response) { return this->ProcessFollowerBatch(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessFollowerBatch(
        ::grpc::MessageAllocator< ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessFollowerBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessFollowerBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFanoutMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFanoutMetrics() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::GetFanoutMetricsRequest* request, ::sonet::fanout::GetFanoutMetricsResponse* response) { return this->GetFanoutMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetFanoutMetrics(
        ::grpc::MessageAllocator< ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFanoutMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFanoutMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::fanout::HealthCheckRequest* request, ::sonet::fanout::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InitiateFanout<WithCallbackMethod_GetFanoutJobStatus<WithCallbackMethod_CancelFanoutJob<WithCallbackMethod_GetUserTier<WithCallbackMethod_ProcessFollowerBatch<WithCallbackMethod_GetFanoutMetrics<WithCallbackMethod_HealthCheck<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InitiateFanout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitiateFanout() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitiateFanout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitiateFanout(::grpc::ServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFanoutJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFanoutJobStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFanoutJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelFanoutJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelFanoutJob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CancelFanoutJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelFanoutJob(::grpc::ServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserTier() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetUserTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTier(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessFollowerBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessFollowerBatch() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ProcessFollowerBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFanoutMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFanoutMetrics() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFanoutMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitiateFanout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitiateFanout() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InitiateFanout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitiateFanout(::grpc::ServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitiateFanout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFanoutJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFanoutJobStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFanoutJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFanoutJobStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelFanoutJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelFanoutJob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CancelFanoutJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelFanoutJob(::grpc::ServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelFanoutJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserTier() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetUserTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTier(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserTier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessFollowerBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessFollowerBatch() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ProcessFollowerBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessFollowerBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFanoutMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFanoutMetrics() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFanoutMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFanoutMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitiateFanout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitiateFanout() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitiateFanout(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitiateFanout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitiateFanout(::grpc::ServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitiateFanout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFanoutJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFanoutJobStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFanoutJobStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFanoutJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFanoutJobStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelFanoutJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelFanoutJob() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelFanoutJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelFanoutJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelFanoutJob(::grpc::ServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelFanoutJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserTier() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserTier(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTier(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserTier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessFollowerBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessFollowerBatch() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessFollowerBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessFollowerBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessFollowerBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFanoutMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFanoutMetrics() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFanoutMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFanoutMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFanoutMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitiateFanout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitiateFanout() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::InitiateFanoutRequest, ::sonet::fanout::InitiateFanoutResponse>* streamer) {
                       return this->StreamedInitiateFanout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitiateFanout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitiateFanout(::grpc::ServerContext* /*context*/, const ::sonet::fanout::InitiateFanoutRequest* /*request*/, ::sonet::fanout::InitiateFanoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitiateFanout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::InitiateFanoutRequest,::sonet::fanout::InitiateFanoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFanoutJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFanoutJobStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::GetFanoutJobStatusRequest, ::sonet::fanout::GetFanoutJobStatusResponse>* streamer) {
                       return this->StreamedGetFanoutJobStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFanoutJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFanoutJobStatus(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutJobStatusRequest* /*request*/, ::sonet::fanout::GetFanoutJobStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFanoutJobStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::GetFanoutJobStatusRequest,::sonet::fanout::GetFanoutJobStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelFanoutJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelFanoutJob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::CancelFanoutJobRequest, ::sonet::fanout::CancelFanoutJobResponse>* streamer) {
                       return this->StreamedCancelFanoutJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelFanoutJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelFanoutJob(::grpc::ServerContext* /*context*/, const ::sonet::fanout::CancelFanoutJobRequest* /*request*/, ::sonet::fanout::CancelFanoutJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelFanoutJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::CancelFanoutJobRequest,::sonet::fanout::CancelFanoutJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserTier() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::GetUserTierRequest, ::sonet::fanout::GetUserTierResponse>* streamer) {
                       return this->StreamedGetUserTier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserTier(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetUserTierRequest* /*request*/, ::sonet::fanout::GetUserTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserTier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::GetUserTierRequest,::sonet::fanout::GetUserTierResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessFollowerBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessFollowerBatch() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::ProcessFollowerBatchRequest, ::sonet::fanout::ProcessFollowerBatchResponse>* streamer) {
                       return this->StreamedProcessFollowerBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessFollowerBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessFollowerBatch(::grpc::ServerContext* /*context*/, const ::sonet::fanout::ProcessFollowerBatchRequest* /*request*/, ::sonet::fanout::ProcessFollowerBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessFollowerBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::ProcessFollowerBatchRequest,::sonet::fanout::ProcessFollowerBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFanoutMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFanoutMetrics() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::GetFanoutMetricsRequest, ::sonet::fanout::GetFanoutMetricsResponse>* streamer) {
                       return this->StreamedGetFanoutMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFanoutMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFanoutMetrics(::grpc::ServerContext* /*context*/, const ::sonet::fanout::GetFanoutMetricsRequest* /*request*/, ::sonet::fanout::GetFanoutMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFanoutMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::GetFanoutMetricsRequest,::sonet::fanout::GetFanoutMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::fanout::HealthCheckRequest, ::sonet::fanout::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::fanout::HealthCheckRequest* /*request*/, ::sonet::fanout::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::fanout::HealthCheckRequest,::sonet::fanout::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitiateFanout<WithStreamedUnaryMethod_GetFanoutJobStatus<WithStreamedUnaryMethod_CancelFanoutJob<WithStreamedUnaryMethod_GetUserTier<WithStreamedUnaryMethod_ProcessFollowerBatch<WithStreamedUnaryMethod_GetFanoutMetrics<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitiateFanout<WithStreamedUnaryMethod_GetFanoutJobStatus<WithStreamedUnaryMethod_CancelFanoutJob<WithStreamedUnaryMethod_GetUserTier<WithStreamedUnaryMethod_ProcessFollowerBatch<WithStreamedUnaryMethod_GetFanoutMetrics<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > StreamedService;
};

}  // namespace fanout
}  // namespace sonet


#endif  // GRPC_services_2ffanout_2eproto__INCLUDED
