// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/timeline.proto
// Original file comments:
//
// Copyright (c) 2025 Neo Qiss
// All rights reserved.
//
// This software is proprietary and confidential.
// Unauthorized copying, distribution, or use is strictly prohibited.
//
//
#ifndef GRPC_services_2ftimeline_2eproto__INCLUDED
#define GRPC_services_2ftimeline_2eproto__INCLUDED

#include "services/timeline.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sonet {
namespace timeline {

// ============= TIMELINE SERVICE =============
class TimelineService final {
 public:
  static constexpr char const* service_full_name() {
    return "sonet.timeline.TimelineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Core timeline operations
    virtual ::grpc::Status GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::sonet::timeline::GetTimelineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelineResponse>> AsyncGetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelineResponse>>(AsyncGetTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelineResponse>> PrepareAsyncGetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelineResponse>>(PrepareAsyncGetTimelineRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::sonet::timeline::GetUserTimelineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetUserTimelineResponse>> AsyncGetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetUserTimelineResponse>>(AsyncGetUserTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetUserTimelineResponse>> PrepareAsyncGetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetUserTimelineResponse>>(PrepareAsyncGetUserTimelineRaw(context, request, cq));
    }
    virtual ::grpc::Status RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::sonet::timeline::RefreshTimelineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::RefreshTimelineResponse>> AsyncRefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::RefreshTimelineResponse>>(AsyncRefreshTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::RefreshTimelineResponse>> PrepareAsyncRefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::RefreshTimelineResponse>>(PrepareAsyncRefreshTimelineRaw(context, request, cq));
    }
    // Timeline state management
    virtual ::grpc::Status MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::sonet::timeline::MarkTimelineReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::MarkTimelineReadResponse>> AsyncMarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::MarkTimelineReadResponse>>(AsyncMarkTimelineReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::MarkTimelineReadResponse>> PrepareAsyncMarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::MarkTimelineReadResponse>>(PrepareAsyncMarkTimelineReadRaw(context, request, cq));
    }
    // Preferences
    virtual ::grpc::Status UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::UpdateTimelinePreferencesResponse>> AsyncUpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::UpdateTimelinePreferencesResponse>>(AsyncUpdateTimelinePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::UpdateTimelinePreferencesResponse>> PrepareAsyncUpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::UpdateTimelinePreferencesResponse>>(PrepareAsyncUpdateTimelinePreferencesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::sonet::timeline::GetTimelinePreferencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelinePreferencesResponse>> AsyncGetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelinePreferencesResponse>>(AsyncGetTimelinePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelinePreferencesResponse>> PrepareAsyncGetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelinePreferencesResponse>>(PrepareAsyncGetTimelinePreferencesRaw(context, request, cq));
    }
    // Real-time updates (server streaming)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sonet::timeline::TimelineUpdate>> SubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sonet::timeline::TimelineUpdate>>(SubscribeTimelineUpdatesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sonet::timeline::TimelineUpdate>> AsyncSubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sonet::timeline::TimelineUpdate>>(AsyncSubscribeTimelineUpdatesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sonet::timeline::TimelineUpdate>> PrepareAsyncSubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sonet::timeline::TimelineUpdate>>(PrepareAsyncSubscribeTimelineUpdatesRaw(context, request, cq));
    }
    // Health
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::sonet::timeline::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Core timeline operations
      virtual void GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Timeline state management
      virtual void MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Preferences
      virtual void UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Real-time updates (server streaming)
      virtual void SubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* request, ::grpc::ClientReadReactor< ::sonet::timeline::TimelineUpdate>* reactor) = 0;
      // Health
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelineResponse>* AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelineResponse>* PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetUserTimelineResponse>* AsyncGetUserTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetUserTimelineResponse>* PrepareAsyncGetUserTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::RefreshTimelineResponse>* AsyncRefreshTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::RefreshTimelineResponse>* PrepareAsyncRefreshTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::MarkTimelineReadResponse>* AsyncMarkTimelineReadRaw(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::MarkTimelineReadResponse>* PrepareAsyncMarkTimelineReadRaw(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::UpdateTimelinePreferencesResponse>* AsyncUpdateTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::UpdateTimelinePreferencesResponse>* PrepareAsyncUpdateTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelinePreferencesResponse>* AsyncGetTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::GetTimelinePreferencesResponse>* PrepareAsyncGetTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sonet::timeline::TimelineUpdate>* SubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sonet::timeline::TimelineUpdate>* AsyncSubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sonet::timeline::TimelineUpdate>* PrepareAsyncSubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::timeline::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::sonet::timeline::GetTimelineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>> AsyncGetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>>(AsyncGetTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>> PrepareAsyncGetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>>(PrepareAsyncGetTimelineRaw(context, request, cq));
    }
    ::grpc::Status GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::sonet::timeline::GetUserTimelineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>> AsyncGetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>>(AsyncGetUserTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>> PrepareAsyncGetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>>(PrepareAsyncGetUserTimelineRaw(context, request, cq));
    }
    ::grpc::Status RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::sonet::timeline::RefreshTimelineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>> AsyncRefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>>(AsyncRefreshTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>> PrepareAsyncRefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>>(PrepareAsyncRefreshTimelineRaw(context, request, cq));
    }
    ::grpc::Status MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::sonet::timeline::MarkTimelineReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>> AsyncMarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>>(AsyncMarkTimelineReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>> PrepareAsyncMarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>>(PrepareAsyncMarkTimelineReadRaw(context, request, cq));
    }
    ::grpc::Status UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>> AsyncUpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>>(AsyncUpdateTimelinePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>> PrepareAsyncUpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>>(PrepareAsyncUpdateTimelinePreferencesRaw(context, request, cq));
    }
    ::grpc::Status GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::sonet::timeline::GetTimelinePreferencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>> AsyncGetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>>(AsyncGetTimelinePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>> PrepareAsyncGetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>>(PrepareAsyncGetTimelinePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sonet::timeline::TimelineUpdate>> SubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sonet::timeline::TimelineUpdate>>(SubscribeTimelineUpdatesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>> AsyncSubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>>(AsyncSubscribeTimelineUpdatesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>> PrepareAsyncSubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>>(PrepareAsyncSubscribeTimelineUpdatesRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::sonet::timeline::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response, std::function<void(::grpc::Status)>) override;
      void RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* request, ::grpc::ClientReadReactor< ::sonet::timeline::TimelineUpdate>* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>* AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>* PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>* AsyncGetUserTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>* PrepareAsyncGetUserTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>* AsyncRefreshTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>* PrepareAsyncRefreshTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>* AsyncMarkTimelineReadRaw(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>* PrepareAsyncMarkTimelineReadRaw(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>* AsyncUpdateTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>* PrepareAsyncUpdateTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>* AsyncGetTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>* PrepareAsyncGetTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sonet::timeline::TimelineUpdate>* SubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request) override;
    ::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>* AsyncSubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>* PrepareAsyncSubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTimeline_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserTimeline_;
    const ::grpc::internal::RpcMethod rpcmethod_RefreshTimeline_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkTimelineRead_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTimelinePreferences_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTimelinePreferences_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeTimelineUpdates_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Core timeline operations
    virtual ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response);
    virtual ::grpc::Status GetUserTimeline(::grpc::ServerContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response);
    virtual ::grpc::Status RefreshTimeline(::grpc::ServerContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response);
    // Timeline state management
    virtual ::grpc::Status MarkTimelineRead(::grpc::ServerContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response);
    // Preferences
    virtual ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response);
    virtual ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response);
    // Real-time updates (server streaming)
    virtual ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* request, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* writer);
    // Health
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTimeline() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeline(::grpc::ServerContext* context, ::sonet::timeline::GetTimelineRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::GetTimelineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserTimeline() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUserTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserTimeline(::grpc::ServerContext* context, ::sonet::timeline::GetUserTimelineRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::GetUserTimelineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RefreshTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RefreshTimeline() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RefreshTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefreshTimeline(::grpc::ServerContext* context, ::sonet::timeline::RefreshTimelineRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::RefreshTimelineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkTimelineRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarkTimelineRead() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MarkTimelineRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkTimelineRead(::grpc::ServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkTimelineRead(::grpc::ServerContext* context, ::sonet::timeline::MarkTimelineReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::MarkTimelineReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTimelinePreferences() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTimelinePreferences(::grpc::ServerContext* context, ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::UpdateTimelinePreferencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTimelinePreferences() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimelinePreferences(::grpc::ServerContext* context, ::sonet::timeline::GetTimelinePreferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::GetTimelinePreferencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeTimelineUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeTimelineUpdates() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubscribeTimelineUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeTimelineUpdates(::grpc::ServerContext* context, ::sonet::timeline::SubscribeTimelineUpdatesRequest* request, ::grpc::ServerAsyncWriter< ::sonet::timeline::TimelineUpdate>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::sonet::timeline::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::timeline::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTimeline<WithAsyncMethod_GetUserTimeline<WithAsyncMethod_RefreshTimeline<WithAsyncMethod_MarkTimelineRead<WithAsyncMethod_UpdateTimelinePreferences<WithAsyncMethod_GetTimelinePreferences<WithAsyncMethod_SubscribeTimelineUpdates<WithAsyncMethod_HealthCheck<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTimeline() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response) { return this->GetTimeline(context, request, response); }));}
    void SetMessageAllocatorFor_GetTimeline(
        ::grpc::MessageAllocator< ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserTimeline() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response) { return this->GetUserTimeline(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserTimeline(
        ::grpc::MessageAllocator< ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RefreshTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RefreshTimeline() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response) { return this->RefreshTimeline(context, request, response); }));}
    void SetMessageAllocatorFor_RefreshTimeline(
        ::grpc::MessageAllocator< ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RefreshTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RefreshTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarkTimelineRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarkTimelineRead() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response) { return this->MarkTimelineRead(context, request, response); }));}
    void SetMessageAllocatorFor_MarkTimelineRead(
        ::grpc::MessageAllocator< ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarkTimelineRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkTimelineRead(::grpc::ServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkTimelineRead(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTimelinePreferences() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response) { return this->UpdateTimelinePreferences(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTimelinePreferences(
        ::grpc::MessageAllocator< ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTimelinePreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTimelinePreferences() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response) { return this->GetTimelinePreferences(context, request, response); }));}
    void SetMessageAllocatorFor_GetTimelinePreferences(
        ::grpc::MessageAllocator< ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTimelinePreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeTimelineUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeTimelineUpdates() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sonet::timeline::SubscribeTimelineUpdatesRequest, ::sonet::timeline::TimelineUpdate>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* request) { return this->SubscribeTimelineUpdates(context, request); }));
    }
    ~WithCallbackMethod_SubscribeTimelineUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sonet::timeline::TimelineUpdate>* SubscribeTimelineUpdates(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTimeline<WithCallbackMethod_GetUserTimeline<WithCallbackMethod_RefreshTimeline<WithCallbackMethod_MarkTimelineRead<WithCallbackMethod_UpdateTimelinePreferences<WithCallbackMethod_GetTimelinePreferences<WithCallbackMethod_SubscribeTimelineUpdates<WithCallbackMethod_HealthCheck<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTimeline() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserTimeline() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUserTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RefreshTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RefreshTimeline() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RefreshTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkTimelineRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarkTimelineRead() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MarkTimelineRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkTimelineRead(::grpc::ServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTimelinePreferences() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTimelinePreferences() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeTimelineUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeTimelineUpdates() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubscribeTimelineUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTimeline() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserTimeline() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUserTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RefreshTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RefreshTimeline() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RefreshTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefreshTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkTimelineRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarkTimelineRead() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MarkTimelineRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkTimelineRead(::grpc::ServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkTimelineRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTimelinePreferences() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTimelinePreferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTimelinePreferences() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimelinePreferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeTimelineUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeTimelineUpdates() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubscribeTimelineUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeTimelineUpdates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTimeline() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTimeline(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserTimeline() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserTimeline(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RefreshTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RefreshTimeline() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RefreshTimeline(context, request, response); }));
    }
    ~WithRawCallbackMethod_RefreshTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RefreshTimeline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarkTimelineRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarkTimelineRead() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarkTimelineRead(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarkTimelineRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkTimelineRead(::grpc::ServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkTimelineRead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTimelinePreferences() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTimelinePreferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTimelinePreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTimelinePreferences() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTimelinePreferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTimelinePreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeTimelineUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeTimelineUpdates() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeTimelineUpdates(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeTimelineUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeTimelineUpdates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTimeline() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse>* streamer) {
                       return this->StreamedGetTimeline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelineRequest* /*request*/, ::sonet::timeline::GetTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::GetTimelineRequest,::sonet::timeline::GetTimelineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserTimeline() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse>* streamer) {
                       return this->StreamedGetUserTimeline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetUserTimelineRequest* /*request*/, ::sonet::timeline::GetUserTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::GetUserTimelineRequest,::sonet::timeline::GetUserTimelineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RefreshTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RefreshTimeline() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse>* streamer) {
                       return this->StreamedRefreshTimeline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RefreshTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RefreshTimeline(::grpc::ServerContext* /*context*/, const ::sonet::timeline::RefreshTimelineRequest* /*request*/, ::sonet::timeline::RefreshTimelineResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRefreshTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::RefreshTimelineRequest,::sonet::timeline::RefreshTimelineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkTimelineRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarkTimelineRead() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse>* streamer) {
                       return this->StreamedMarkTimelineRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarkTimelineRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkTimelineRead(::grpc::ServerContext* /*context*/, const ::sonet::timeline::MarkTimelineReadRequest* /*request*/, ::sonet::timeline::MarkTimelineReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkTimelineRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::MarkTimelineReadRequest,::sonet::timeline::MarkTimelineReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTimelinePreferences() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse>* streamer) {
                       return this->StreamedUpdateTimelinePreferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::UpdateTimelinePreferencesRequest* /*request*/, ::sonet::timeline::UpdateTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTimelinePreferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::UpdateTimelinePreferencesRequest,::sonet::timeline::UpdateTimelinePreferencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTimelinePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTimelinePreferences() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse>* streamer) {
                       return this->StreamedGetTimelinePreferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTimelinePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTimelinePreferences(::grpc::ServerContext* /*context*/, const ::sonet::timeline::GetTimelinePreferencesRequest* /*request*/, ::sonet::timeline::GetTimelinePreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTimelinePreferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::GetTimelinePreferencesRequest,::sonet::timeline::GetTimelinePreferencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::timeline::HealthCheckRequest* /*request*/, ::sonet::timeline::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::timeline::HealthCheckRequest,::sonet::timeline::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTimeline<WithStreamedUnaryMethod_GetUserTimeline<WithStreamedUnaryMethod_RefreshTimeline<WithStreamedUnaryMethod_MarkTimelineRead<WithStreamedUnaryMethod_UpdateTimelinePreferences<WithStreamedUnaryMethod_GetTimelinePreferences<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeTimelineUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeTimelineUpdates() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sonet::timeline::SubscribeTimelineUpdatesRequest, ::sonet::timeline::TimelineUpdate>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sonet::timeline::SubscribeTimelineUpdatesRequest, ::sonet::timeline::TimelineUpdate>* streamer) {
                       return this->StreamedSubscribeTimelineUpdates(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeTimelineUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeTimelineUpdates(::grpc::ServerContext* /*context*/, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* /*request*/, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeTimelineUpdates(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sonet::timeline::SubscribeTimelineUpdatesRequest,::sonet::timeline::TimelineUpdate>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeTimelineUpdates<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTimeline<WithStreamedUnaryMethod_GetUserTimeline<WithStreamedUnaryMethod_RefreshTimeline<WithStreamedUnaryMethod_MarkTimelineRead<WithStreamedUnaryMethod_UpdateTimelinePreferences<WithStreamedUnaryMethod_GetTimelinePreferences<WithSplitStreamingMethod_SubscribeTimelineUpdates<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > StreamedService;
};

}  // namespace timeline
}  // namespace sonet


#endif  // GRPC_services_2ftimeline_2eproto__INCLUDED
