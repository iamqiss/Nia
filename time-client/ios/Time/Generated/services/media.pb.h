// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fmedia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fmedia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fmedia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fmedia_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fmedia_2eproto;
namespace sonet {
namespace media {
class DeleteMediaRequest;
struct DeleteMediaRequestDefaultTypeInternal;
extern DeleteMediaRequestDefaultTypeInternal _DeleteMediaRequest_default_instance_;
class DeleteMediaResponse;
struct DeleteMediaResponseDefaultTypeInternal;
extern DeleteMediaResponseDefaultTypeInternal _DeleteMediaResponse_default_instance_;
class GetMediaRequest;
struct GetMediaRequestDefaultTypeInternal;
extern GetMediaRequestDefaultTypeInternal _GetMediaRequest_default_instance_;
class GetMediaResponse;
struct GetMediaResponseDefaultTypeInternal;
extern GetMediaResponseDefaultTypeInternal _GetMediaResponse_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class ListUserMediaRequest;
struct ListUserMediaRequestDefaultTypeInternal;
extern ListUserMediaRequestDefaultTypeInternal _ListUserMediaRequest_default_instance_;
class ListUserMediaResponse;
struct ListUserMediaResponseDefaultTypeInternal;
extern ListUserMediaResponseDefaultTypeInternal _ListUserMediaResponse_default_instance_;
class Media;
struct MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
class ToggleMediaLikeRequest;
struct ToggleMediaLikeRequestDefaultTypeInternal;
extern ToggleMediaLikeRequestDefaultTypeInternal _ToggleMediaLikeRequest_default_instance_;
class ToggleMediaLikeResponse;
struct ToggleMediaLikeResponseDefaultTypeInternal;
extern ToggleMediaLikeResponseDefaultTypeInternal _ToggleMediaLikeResponse_default_instance_;
class UploadChunk;
struct UploadChunkDefaultTypeInternal;
extern UploadChunkDefaultTypeInternal _UploadChunk_default_instance_;
class UploadInit;
struct UploadInitDefaultTypeInternal;
extern UploadInitDefaultTypeInternal _UploadInit_default_instance_;
class UploadRequest;
struct UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
class UploadResponse;
struct UploadResponseDefaultTypeInternal;
extern UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
}  // namespace media
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::media::DeleteMediaRequest* Arena::CreateMaybeMessage<::sonet::media::DeleteMediaRequest>(Arena*);
template<> ::sonet::media::DeleteMediaResponse* Arena::CreateMaybeMessage<::sonet::media::DeleteMediaResponse>(Arena*);
template<> ::sonet::media::GetMediaRequest* Arena::CreateMaybeMessage<::sonet::media::GetMediaRequest>(Arena*);
template<> ::sonet::media::GetMediaResponse* Arena::CreateMaybeMessage<::sonet::media::GetMediaResponse>(Arena*);
template<> ::sonet::media::HealthCheckRequest* Arena::CreateMaybeMessage<::sonet::media::HealthCheckRequest>(Arena*);
template<> ::sonet::media::HealthCheckResponse* Arena::CreateMaybeMessage<::sonet::media::HealthCheckResponse>(Arena*);
template<> ::sonet::media::ListUserMediaRequest* Arena::CreateMaybeMessage<::sonet::media::ListUserMediaRequest>(Arena*);
template<> ::sonet::media::ListUserMediaResponse* Arena::CreateMaybeMessage<::sonet::media::ListUserMediaResponse>(Arena*);
template<> ::sonet::media::Media* Arena::CreateMaybeMessage<::sonet::media::Media>(Arena*);
template<> ::sonet::media::ToggleMediaLikeRequest* Arena::CreateMaybeMessage<::sonet::media::ToggleMediaLikeRequest>(Arena*);
template<> ::sonet::media::ToggleMediaLikeResponse* Arena::CreateMaybeMessage<::sonet::media::ToggleMediaLikeResponse>(Arena*);
template<> ::sonet::media::UploadChunk* Arena::CreateMaybeMessage<::sonet::media::UploadChunk>(Arena*);
template<> ::sonet::media::UploadInit* Arena::CreateMaybeMessage<::sonet::media::UploadInit>(Arena*);
template<> ::sonet::media::UploadRequest* Arena::CreateMaybeMessage<::sonet::media::UploadRequest>(Arena*);
template<> ::sonet::media::UploadResponse* Arena::CreateMaybeMessage<::sonet::media::UploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace media {

enum MediaType : int {
  MEDIA_TYPE_UNKNOWN = 0,
  MEDIA_TYPE_IMAGE = 1,
  MEDIA_TYPE_VIDEO = 2,
  MEDIA_TYPE_GIF = 3,
  MediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MediaType_IsValid(int value);
constexpr MediaType MediaType_MIN = MEDIA_TYPE_UNKNOWN;
constexpr MediaType MediaType_MAX = MEDIA_TYPE_GIF;
constexpr int MediaType_ARRAYSIZE = MediaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor();
template<typename T>
inline const std::string& MediaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MediaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MediaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MediaType_descriptor(), enum_t_value);
}
inline bool MediaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MediaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaType>(
    MediaType_descriptor(), name, value);
}
// ===================================================================

class Media final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.Media) */ {
 public:
  inline Media() : Media(nullptr) {}
  ~Media() override;
  explicit PROTOBUF_CONSTEXPR Media(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Media(const Media& from);
  Media(Media&& from) noexcept
    : Media() {
    *this = ::std::move(from);
  }

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media& operator=(Media&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Media& default_instance() {
    return *internal_default_instance();
  }
  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
               &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Media& a, Media& b) {
    a.Swap(&b);
  }
  inline void Swap(Media* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Media* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Media* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Media>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Media& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Media& from) {
    Media::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.Media";
  }
  protected:
  explicit Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerUserIdFieldNumber = 2,
    kMimeTypeFieldNumber = 4,
    kOriginalUrlFieldNumber = 9,
    kThumbnailUrlFieldNumber = 10,
    kHlsUrlFieldNumber = 11,
    kCreatedAtFieldNumber = 12,
    kWebpUrlFieldNumber = 13,
    kMp4UrlFieldNumber = 14,
    kTypeFieldNumber = 3,
    kWidthFieldNumber = 6,
    kSizeBytesFieldNumber = 5,
    kDurationSecondsFieldNumber = 8,
    kHeightFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string owner_user_id = 2;
  void clear_owner_user_id();
  const std::string& owner_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_user_id();
  PROTOBUF_NODISCARD std::string* release_owner_user_id();
  void set_allocated_owner_user_id(std::string* owner_user_id);
  private:
  const std::string& _internal_owner_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_user_id(const std::string& value);
  std::string* _internal_mutable_owner_user_id();
  public:

  // string mime_type = 4;
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // string original_url = 9;
  void clear_original_url();
  const std::string& original_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_url();
  PROTOBUF_NODISCARD std::string* release_original_url();
  void set_allocated_original_url(std::string* original_url);
  private:
  const std::string& _internal_original_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_url(const std::string& value);
  std::string* _internal_mutable_original_url();
  public:

  // string thumbnail_url = 10;
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // string hls_url = 11;
  void clear_hls_url();
  const std::string& hls_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hls_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hls_url();
  PROTOBUF_NODISCARD std::string* release_hls_url();
  void set_allocated_hls_url(std::string* hls_url);
  private:
  const std::string& _internal_hls_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hls_url(const std::string& value);
  std::string* _internal_mutable_hls_url();
  public:

  // string created_at = 12;
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string webp_url = 13;
  void clear_webp_url();
  const std::string& webp_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webp_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webp_url();
  PROTOBUF_NODISCARD std::string* release_webp_url();
  void set_allocated_webp_url(std::string* webp_url);
  private:
  const std::string& _internal_webp_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webp_url(const std::string& value);
  std::string* _internal_mutable_webp_url();
  public:

  // string mp4_url = 14;
  void clear_mp4_url();
  const std::string& mp4_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mp4_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mp4_url();
  PROTOBUF_NODISCARD std::string* release_mp4_url();
  void set_allocated_mp4_url(std::string* mp4_url);
  private:
  const std::string& _internal_mp4_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mp4_url(const std::string& value);
  std::string* _internal_mutable_mp4_url();
  public:

  // .sonet.media.MediaType type = 3;
  void clear_type();
  ::sonet::media::MediaType type() const;
  void set_type(::sonet::media::MediaType value);
  private:
  ::sonet::media::MediaType _internal_type() const;
  void _internal_set_type(::sonet::media::MediaType value);
  public:

  // uint32 width = 6;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint64 size_bytes = 5;
  void clear_size_bytes();
  uint64_t size_bytes() const;
  void set_size_bytes(uint64_t value);
  private:
  uint64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(uint64_t value);
  public:

  // double duration_seconds = 8;
  void clear_duration_seconds();
  double duration_seconds() const;
  void set_duration_seconds(double value);
  private:
  double _internal_duration_seconds() const;
  void _internal_set_duration_seconds(double value);
  public:

  // uint32 height = 7;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.Media)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hls_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webp_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mp4_url_;
    int type_;
    uint32_t width_;
    uint64_t size_bytes_;
    double duration_seconds_;
    uint32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class UploadInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.UploadInit) */ {
 public:
  inline UploadInit() : UploadInit(nullptr) {}
  ~UploadInit() override;
  explicit PROTOBUF_CONSTEXPR UploadInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadInit(const UploadInit& from);
  UploadInit(UploadInit&& from) noexcept
    : UploadInit() {
    *this = ::std::move(from);
  }

  inline UploadInit& operator=(const UploadInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadInit& operator=(UploadInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadInit* internal_default_instance() {
    return reinterpret_cast<const UploadInit*>(
               &_UploadInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadInit& a, UploadInit& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadInit& from) {
    UploadInit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadInit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.UploadInit";
  }
  protected:
  explicit UploadInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUserIdFieldNumber = 1,
    kOriginalFilenameFieldNumber = 3,
    kMimeTypeFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // string owner_user_id = 1;
  void clear_owner_user_id();
  const std::string& owner_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_user_id();
  PROTOBUF_NODISCARD std::string* release_owner_user_id();
  void set_allocated_owner_user_id(std::string* owner_user_id);
  private:
  const std::string& _internal_owner_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_user_id(const std::string& value);
  std::string* _internal_mutable_owner_user_id();
  public:

  // string original_filename = 3;
  void clear_original_filename();
  const std::string& original_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_filename();
  PROTOBUF_NODISCARD std::string* release_original_filename();
  void set_allocated_original_filename(std::string* original_filename);
  private:
  const std::string& _internal_original_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_filename(const std::string& value);
  std::string* _internal_mutable_original_filename();
  public:

  // string mime_type = 4;
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // .sonet.media.MediaType type = 2;
  void clear_type();
  ::sonet::media::MediaType type() const;
  void set_type(::sonet::media::MediaType value);
  private:
  ::sonet::media::MediaType _internal_type() const;
  void _internal_set_type(::sonet::media::MediaType value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.UploadInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class UploadChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.UploadChunk) */ {
 public:
  inline UploadChunk() : UploadChunk(nullptr) {}
  ~UploadChunk() override;
  explicit PROTOBUF_CONSTEXPR UploadChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadChunk(const UploadChunk& from);
  UploadChunk(UploadChunk&& from) noexcept
    : UploadChunk() {
    *this = ::std::move(from);
  }

  inline UploadChunk& operator=(const UploadChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadChunk& operator=(UploadChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadChunk* internal_default_instance() {
    return reinterpret_cast<const UploadChunk*>(
               &_UploadChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadChunk& a, UploadChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadChunk& from) {
    UploadChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.UploadChunk";
  }
  protected:
  explicit UploadChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.UploadChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class UploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.UploadRequest) */ {
 public:
  inline UploadRequest() : UploadRequest(nullptr) {}
  ~UploadRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadRequest(const UploadRequest& from);
  UploadRequest(UploadRequest&& from) noexcept
    : UploadRequest() {
    *this = ::std::move(from);
  }

  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kInit = 1,
    kChunk = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const UploadRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRequest*>(
               &_UploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadRequest& a, UploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadRequest& from) {
    UploadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.UploadRequest";
  }
  protected:
  explicit UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .sonet.media.UploadInit init = 1;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::sonet::media::UploadInit& init() const;
  PROTOBUF_NODISCARD ::sonet::media::UploadInit* release_init();
  ::sonet::media::UploadInit* mutable_init();
  void set_allocated_init(::sonet::media::UploadInit* init);
  private:
  const ::sonet::media::UploadInit& _internal_init() const;
  ::sonet::media::UploadInit* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::sonet::media::UploadInit* init);
  ::sonet::media::UploadInit* unsafe_arena_release_init();

  // .sonet.media.UploadChunk chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::sonet::media::UploadChunk& chunk() const;
  PROTOBUF_NODISCARD ::sonet::media::UploadChunk* release_chunk();
  ::sonet::media::UploadChunk* mutable_chunk();
  void set_allocated_chunk(::sonet::media::UploadChunk* chunk);
  private:
  const ::sonet::media::UploadChunk& _internal_chunk() const;
  ::sonet::media::UploadChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::sonet::media::UploadChunk* chunk);
  ::sonet::media::UploadChunk* unsafe_arena_release_chunk();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:sonet.media.UploadRequest)
 private:
  class _Internal;
  void set_has_init();
  void set_has_chunk();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::sonet::media::UploadInit* init_;
      ::sonet::media::UploadChunk* chunk_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class UploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.UploadResponse) */ {
 public:
  inline UploadResponse() : UploadResponse(nullptr) {}
  ~UploadResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadResponse(const UploadResponse& from);
  UploadResponse(UploadResponse&& from) noexcept
    : UploadResponse() {
    *this = ::std::move(from);
  }

  inline UploadResponse& operator=(const UploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadResponse& operator=(UploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadResponse* internal_default_instance() {
    return reinterpret_cast<const UploadResponse*>(
               &_UploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UploadResponse& a, UploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UploadResponse& from) {
    UploadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.UploadResponse";
  }
  protected:
  explicit UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdFieldNumber = 1,
    kUrlFieldNumber = 3,
    kThumbnailUrlFieldNumber = 4,
    kHlsUrlFieldNumber = 5,
    kWebpUrlFieldNumber = 6,
    kMp4UrlFieldNumber = 7,
    kTypeFieldNumber = 2,
  };
  // string media_id = 1;
  void clear_media_id();
  const std::string& media_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_id();
  PROTOBUF_NODISCARD std::string* release_media_id();
  void set_allocated_media_id(std::string* media_id);
  private:
  const std::string& _internal_media_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_id(const std::string& value);
  std::string* _internal_mutable_media_id();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string thumbnail_url = 4;
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // string hls_url = 5;
  void clear_hls_url();
  const std::string& hls_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hls_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hls_url();
  PROTOBUF_NODISCARD std::string* release_hls_url();
  void set_allocated_hls_url(std::string* hls_url);
  private:
  const std::string& _internal_hls_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hls_url(const std::string& value);
  std::string* _internal_mutable_hls_url();
  public:

  // string webp_url = 6;
  void clear_webp_url();
  const std::string& webp_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webp_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webp_url();
  PROTOBUF_NODISCARD std::string* release_webp_url();
  void set_allocated_webp_url(std::string* webp_url);
  private:
  const std::string& _internal_webp_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webp_url(const std::string& value);
  std::string* _internal_mutable_webp_url();
  public:

  // string mp4_url = 7;
  void clear_mp4_url();
  const std::string& mp4_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mp4_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mp4_url();
  PROTOBUF_NODISCARD std::string* release_mp4_url();
  void set_allocated_mp4_url(std::string* mp4_url);
  private:
  const std::string& _internal_mp4_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mp4_url(const std::string& value);
  std::string* _internal_mutable_mp4_url();
  public:

  // .sonet.media.MediaType type = 2;
  void clear_type();
  ::sonet::media::MediaType type() const;
  void set_type(::sonet::media::MediaType value);
  private:
  ::sonet::media::MediaType _internal_type() const;
  void _internal_set_type(::sonet::media::MediaType value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.UploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hls_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webp_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mp4_url_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class GetMediaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.GetMediaRequest) */ {
 public:
  inline GetMediaRequest() : GetMediaRequest(nullptr) {}
  ~GetMediaRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMediaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMediaRequest(const GetMediaRequest& from);
  GetMediaRequest(GetMediaRequest&& from) noexcept
    : GetMediaRequest() {
    *this = ::std::move(from);
  }

  inline GetMediaRequest& operator=(const GetMediaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMediaRequest& operator=(GetMediaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMediaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMediaRequest* internal_default_instance() {
    return reinterpret_cast<const GetMediaRequest*>(
               &_GetMediaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetMediaRequest& a, GetMediaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMediaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMediaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMediaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMediaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMediaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMediaRequest& from) {
    GetMediaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMediaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.GetMediaRequest";
  }
  protected:
  explicit GetMediaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdFieldNumber = 1,
  };
  // string media_id = 1;
  void clear_media_id();
  const std::string& media_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_id();
  PROTOBUF_NODISCARD std::string* release_media_id();
  void set_allocated_media_id(std::string* media_id);
  private:
  const std::string& _internal_media_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_id(const std::string& value);
  std::string* _internal_mutable_media_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.GetMediaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class GetMediaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.GetMediaResponse) */ {
 public:
  inline GetMediaResponse() : GetMediaResponse(nullptr) {}
  ~GetMediaResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMediaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMediaResponse(const GetMediaResponse& from);
  GetMediaResponse(GetMediaResponse&& from) noexcept
    : GetMediaResponse() {
    *this = ::std::move(from);
  }

  inline GetMediaResponse& operator=(const GetMediaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMediaResponse& operator=(GetMediaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMediaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMediaResponse* internal_default_instance() {
    return reinterpret_cast<const GetMediaResponse*>(
               &_GetMediaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetMediaResponse& a, GetMediaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMediaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMediaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMediaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMediaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMediaResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMediaResponse& from) {
    GetMediaResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMediaResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.GetMediaResponse";
  }
  protected:
  explicit GetMediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaFieldNumber = 1,
  };
  // .sonet.media.Media media = 1;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::sonet::media::Media& media() const;
  PROTOBUF_NODISCARD ::sonet::media::Media* release_media();
  ::sonet::media::Media* mutable_media();
  void set_allocated_media(::sonet::media::Media* media);
  private:
  const ::sonet::media::Media& _internal_media() const;
  ::sonet::media::Media* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::sonet::media::Media* media);
  ::sonet::media::Media* unsafe_arena_release_media();

  // @@protoc_insertion_point(class_scope:sonet.media.GetMediaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::sonet::media::Media* media_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class DeleteMediaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.DeleteMediaRequest) */ {
 public:
  inline DeleteMediaRequest() : DeleteMediaRequest(nullptr) {}
  ~DeleteMediaRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteMediaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMediaRequest(const DeleteMediaRequest& from);
  DeleteMediaRequest(DeleteMediaRequest&& from) noexcept
    : DeleteMediaRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMediaRequest& operator=(const DeleteMediaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMediaRequest& operator=(DeleteMediaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMediaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMediaRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMediaRequest*>(
               &_DeleteMediaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteMediaRequest& a, DeleteMediaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMediaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMediaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMediaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMediaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMediaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMediaRequest& from) {
    DeleteMediaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMediaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.DeleteMediaRequest";
  }
  protected:
  explicit DeleteMediaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdFieldNumber = 1,
  };
  // string media_id = 1;
  void clear_media_id();
  const std::string& media_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_id();
  PROTOBUF_NODISCARD std::string* release_media_id();
  void set_allocated_media_id(std::string* media_id);
  private:
  const std::string& _internal_media_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_id(const std::string& value);
  std::string* _internal_mutable_media_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.DeleteMediaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class DeleteMediaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.DeleteMediaResponse) */ {
 public:
  inline DeleteMediaResponse() : DeleteMediaResponse(nullptr) {}
  ~DeleteMediaResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteMediaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMediaResponse(const DeleteMediaResponse& from);
  DeleteMediaResponse(DeleteMediaResponse&& from) noexcept
    : DeleteMediaResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMediaResponse& operator=(const DeleteMediaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMediaResponse& operator=(DeleteMediaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMediaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMediaResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMediaResponse*>(
               &_DeleteMediaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteMediaResponse& a, DeleteMediaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMediaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMediaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMediaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMediaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMediaResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteMediaResponse& from) {
    DeleteMediaResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMediaResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.DeleteMediaResponse";
  }
  protected:
  explicit DeleteMediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedFieldNumber = 1,
  };
  // bool deleted = 1;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.DeleteMediaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ListUserMediaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.ListUserMediaRequest) */ {
 public:
  inline ListUserMediaRequest() : ListUserMediaRequest(nullptr) {}
  ~ListUserMediaRequest() override;
  explicit PROTOBUF_CONSTEXPR ListUserMediaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserMediaRequest(const ListUserMediaRequest& from);
  ListUserMediaRequest(ListUserMediaRequest&& from) noexcept
    : ListUserMediaRequest() {
    *this = ::std::move(from);
  }

  inline ListUserMediaRequest& operator=(const ListUserMediaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserMediaRequest& operator=(ListUserMediaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserMediaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserMediaRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserMediaRequest*>(
               &_ListUserMediaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListUserMediaRequest& a, ListUserMediaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserMediaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserMediaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUserMediaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUserMediaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserMediaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListUserMediaRequest& from) {
    ListUserMediaRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserMediaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.ListUserMediaRequest";
  }
  protected:
  explicit ListUserMediaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUserIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string owner_user_id = 1;
  void clear_owner_user_id();
  const std::string& owner_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_user_id();
  PROTOBUF_NODISCARD std::string* release_owner_user_id();
  void set_allocated_owner_user_id(std::string* owner_user_id);
  private:
  const std::string& _internal_owner_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_user_id(const std::string& value);
  std::string* _internal_mutable_owner_user_id();
  public:

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 page_size = 3;
  void clear_page_size();
  uint32_t page_size() const;
  void set_page_size(uint32_t value);
  private:
  uint32_t _internal_page_size() const;
  void _internal_set_page_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.ListUserMediaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_user_id_;
    uint32_t page_;
    uint32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ListUserMediaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.ListUserMediaResponse) */ {
 public:
  inline ListUserMediaResponse() : ListUserMediaResponse(nullptr) {}
  ~ListUserMediaResponse() override;
  explicit PROTOBUF_CONSTEXPR ListUserMediaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUserMediaResponse(const ListUserMediaResponse& from);
  ListUserMediaResponse(ListUserMediaResponse&& from) noexcept
    : ListUserMediaResponse() {
    *this = ::std::move(from);
  }

  inline ListUserMediaResponse& operator=(const ListUserMediaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserMediaResponse& operator=(ListUserMediaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUserMediaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUserMediaResponse* internal_default_instance() {
    return reinterpret_cast<const ListUserMediaResponse*>(
               &_ListUserMediaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListUserMediaResponse& a, ListUserMediaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserMediaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserMediaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUserMediaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUserMediaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUserMediaResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListUserMediaResponse& from) {
    ListUserMediaResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserMediaResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.ListUserMediaResponse";
  }
  protected:
  explicit ListUserMediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
    kTotalPagesFieldNumber = 4,
  };
  // repeated .sonet.media.Media items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::sonet::media::Media* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::media::Media >*
      mutable_items();
  private:
  const ::sonet::media::Media& _internal_items(int index) const;
  ::sonet::media::Media* _internal_add_items();
  public:
  const ::sonet::media::Media& items(int index) const;
  ::sonet::media::Media* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::media::Media >&
      items() const;

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 page_size = 3;
  void clear_page_size();
  uint32_t page_size() const;
  void set_page_size(uint32_t value);
  private:
  uint32_t _internal_page_size() const;
  void _internal_set_page_size(uint32_t value);
  public:

  // uint32 total_pages = 4;
  void clear_total_pages();
  uint32_t total_pages() const;
  void set_total_pages(uint32_t value);
  private:
  uint32_t _internal_total_pages() const;
  void _internal_set_total_pages(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.ListUserMediaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::media::Media > items_;
    uint32_t page_;
    uint32_t page_size_;
    uint32_t total_pages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ToggleMediaLikeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.ToggleMediaLikeRequest) */ {
 public:
  inline ToggleMediaLikeRequest() : ToggleMediaLikeRequest(nullptr) {}
  ~ToggleMediaLikeRequest() override;
  explicit PROTOBUF_CONSTEXPR ToggleMediaLikeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToggleMediaLikeRequest(const ToggleMediaLikeRequest& from);
  ToggleMediaLikeRequest(ToggleMediaLikeRequest&& from) noexcept
    : ToggleMediaLikeRequest() {
    *this = ::std::move(from);
  }

  inline ToggleMediaLikeRequest& operator=(const ToggleMediaLikeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToggleMediaLikeRequest& operator=(ToggleMediaLikeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToggleMediaLikeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToggleMediaLikeRequest* internal_default_instance() {
    return reinterpret_cast<const ToggleMediaLikeRequest*>(
               &_ToggleMediaLikeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ToggleMediaLikeRequest& a, ToggleMediaLikeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ToggleMediaLikeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToggleMediaLikeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToggleMediaLikeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToggleMediaLikeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToggleMediaLikeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToggleMediaLikeRequest& from) {
    ToggleMediaLikeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToggleMediaLikeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.ToggleMediaLikeRequest";
  }
  protected:
  explicit ToggleMediaLikeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kIsLikedFieldNumber = 3,
  };
  // string media_id = 1;
  void clear_media_id();
  const std::string& media_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_id();
  PROTOBUF_NODISCARD std::string* release_media_id();
  void set_allocated_media_id(std::string* media_id);
  private:
  const std::string& _internal_media_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_id(const std::string& value);
  std::string* _internal_mutable_media_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool is_liked = 3;
  void clear_is_liked();
  bool is_liked() const;
  void set_is_liked(bool value);
  private:
  bool _internal_is_liked() const;
  void _internal_set_is_liked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.ToggleMediaLikeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    bool is_liked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ToggleMediaLikeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.ToggleMediaLikeResponse) */ {
 public:
  inline ToggleMediaLikeResponse() : ToggleMediaLikeResponse(nullptr) {}
  ~ToggleMediaLikeResponse() override;
  explicit PROTOBUF_CONSTEXPR ToggleMediaLikeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToggleMediaLikeResponse(const ToggleMediaLikeResponse& from);
  ToggleMediaLikeResponse(ToggleMediaLikeResponse&& from) noexcept
    : ToggleMediaLikeResponse() {
    *this = ::std::move(from);
  }

  inline ToggleMediaLikeResponse& operator=(const ToggleMediaLikeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToggleMediaLikeResponse& operator=(ToggleMediaLikeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToggleMediaLikeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToggleMediaLikeResponse* internal_default_instance() {
    return reinterpret_cast<const ToggleMediaLikeResponse*>(
               &_ToggleMediaLikeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ToggleMediaLikeResponse& a, ToggleMediaLikeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ToggleMediaLikeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToggleMediaLikeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToggleMediaLikeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToggleMediaLikeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToggleMediaLikeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToggleMediaLikeResponse& from) {
    ToggleMediaLikeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToggleMediaLikeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.ToggleMediaLikeResponse";
  }
  protected:
  explicit ToggleMediaLikeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdFieldNumber = 1,
    kLikeCountFieldNumber = 2,
    kIsLikedFieldNumber = 3,
  };
  // string media_id = 1;
  void clear_media_id();
  const std::string& media_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_id();
  PROTOBUF_NODISCARD std::string* release_media_id();
  void set_allocated_media_id(std::string* media_id);
  private:
  const std::string& _internal_media_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_id(const std::string& value);
  std::string* _internal_mutable_media_id();
  public:

  // uint32 like_count = 2;
  void clear_like_count();
  uint32_t like_count() const;
  void set_like_count(uint32_t value);
  private:
  uint32_t _internal_like_count() const;
  void _internal_set_like_count(uint32_t value);
  public:

  // bool is_liked = 3;
  void clear_is_liked();
  bool is_liked() const;
  void set_is_liked(bool value);
  private:
  bool _internal_is_liked() const;
  void _internal_set_is_liked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.ToggleMediaLikeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_id_;
    uint32_t like_count_;
    bool is_liked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sonet.media.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckRequest(const HealthCheckRequest& from);
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HealthCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HealthCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sonet.media.HealthCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.media.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  ~HealthCheckResponse() override;
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthCheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HealthCheckResponse& from) {
    HealthCheckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.media.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:sonet.media.HealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmedia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Media

// string id = 1;
inline void Media::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Media::id() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.id)
}
inline std::string* Media::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.id)
  return _s;
}
inline const std::string& Media::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Media::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_id() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.id)
  return _impl_.id_.Release();
}
inline void Media::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.id)
}

// string owner_user_id = 2;
inline void Media::clear_owner_user_id() {
  _impl_.owner_user_id_.ClearToEmpty();
}
inline const std::string& Media::owner_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.owner_user_id)
  return _internal_owner_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_owner_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.owner_user_id)
}
inline std::string* Media::mutable_owner_user_id() {
  std::string* _s = _internal_mutable_owner_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.owner_user_id)
  return _s;
}
inline const std::string& Media::_internal_owner_user_id() const {
  return _impl_.owner_user_id_.Get();
}
inline void Media::_internal_set_owner_user_id(const std::string& value) {
  
  _impl_.owner_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_owner_user_id() {
  
  return _impl_.owner_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_owner_user_id() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.owner_user_id)
  return _impl_.owner_user_id_.Release();
}
inline void Media::set_allocated_owner_user_id(std::string* owner_user_id) {
  if (owner_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.owner_user_id_.SetAllocated(owner_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_user_id_.IsDefault()) {
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.owner_user_id)
}

// .sonet.media.MediaType type = 3;
inline void Media::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::media::MediaType Media::_internal_type() const {
  return static_cast< ::sonet::media::MediaType >(_impl_.type_);
}
inline ::sonet::media::MediaType Media::type() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.type)
  return _internal_type();
}
inline void Media::_internal_set_type(::sonet::media::MediaType value) {
  
  _impl_.type_ = value;
}
inline void Media::set_type(::sonet::media::MediaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.media.Media.type)
}

// string mime_type = 4;
inline void Media::clear_mime_type() {
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& Media::mime_type() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.mime_type)
}
inline std::string* Media::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.mime_type)
  return _s;
}
inline const std::string& Media::_internal_mime_type() const {
  return _impl_.mime_type_.Get();
}
inline void Media::_internal_set_mime_type(const std::string& value) {
  
  _impl_.mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_mime_type() {
  
  return _impl_.mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_mime_type() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.mime_type)
  return _impl_.mime_type_.Release();
}
inline void Media::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  _impl_.mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.mime_type)
}

// uint64 size_bytes = 5;
inline void Media::clear_size_bytes() {
  _impl_.size_bytes_ = uint64_t{0u};
}
inline uint64_t Media::_internal_size_bytes() const {
  return _impl_.size_bytes_;
}
inline uint64_t Media::size_bytes() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.size_bytes)
  return _internal_size_bytes();
}
inline void Media::_internal_set_size_bytes(uint64_t value) {
  
  _impl_.size_bytes_ = value;
}
inline void Media::set_size_bytes(uint64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:sonet.media.Media.size_bytes)
}

// uint32 width = 6;
inline void Media::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t Media::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t Media::width() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.width)
  return _internal_width();
}
inline void Media::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void Media::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sonet.media.Media.width)
}

// uint32 height = 7;
inline void Media::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t Media::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t Media::height() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.height)
  return _internal_height();
}
inline void Media::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void Media::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sonet.media.Media.height)
}

// double duration_seconds = 8;
inline void Media::clear_duration_seconds() {
  _impl_.duration_seconds_ = 0;
}
inline double Media::_internal_duration_seconds() const {
  return _impl_.duration_seconds_;
}
inline double Media::duration_seconds() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.duration_seconds)
  return _internal_duration_seconds();
}
inline void Media::_internal_set_duration_seconds(double value) {
  
  _impl_.duration_seconds_ = value;
}
inline void Media::set_duration_seconds(double value) {
  _internal_set_duration_seconds(value);
  // @@protoc_insertion_point(field_set:sonet.media.Media.duration_seconds)
}

// string original_url = 9;
inline void Media::clear_original_url() {
  _impl_.original_url_.ClearToEmpty();
}
inline const std::string& Media::original_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.original_url)
  return _internal_original_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_original_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.original_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.original_url)
}
inline std::string* Media::mutable_original_url() {
  std::string* _s = _internal_mutable_original_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.original_url)
  return _s;
}
inline const std::string& Media::_internal_original_url() const {
  return _impl_.original_url_.Get();
}
inline void Media::_internal_set_original_url(const std::string& value) {
  
  _impl_.original_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_original_url() {
  
  return _impl_.original_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_original_url() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.original_url)
  return _impl_.original_url_.Release();
}
inline void Media::set_allocated_original_url(std::string* original_url) {
  if (original_url != nullptr) {
    
  } else {
    
  }
  _impl_.original_url_.SetAllocated(original_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.original_url_.IsDefault()) {
    _impl_.original_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.original_url)
}

// string thumbnail_url = 10;
inline void Media::clear_thumbnail_url() {
  _impl_.thumbnail_url_.ClearToEmpty();
}
inline const std::string& Media::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thumbnail_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.thumbnail_url)
}
inline std::string* Media::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.thumbnail_url)
  return _s;
}
inline const std::string& Media::_internal_thumbnail_url() const {
  return _impl_.thumbnail_url_.Get();
}
inline void Media::_internal_set_thumbnail_url(const std::string& value) {
  
  _impl_.thumbnail_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_thumbnail_url() {
  
  return _impl_.thumbnail_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.thumbnail_url)
  return _impl_.thumbnail_url_.Release();
}
inline void Media::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    
  } else {
    
  }
  _impl_.thumbnail_url_.SetAllocated(thumbnail_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnail_url_.IsDefault()) {
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.thumbnail_url)
}

// string hls_url = 11;
inline void Media::clear_hls_url() {
  _impl_.hls_url_.ClearToEmpty();
}
inline const std::string& Media::hls_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.hls_url)
  return _internal_hls_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_hls_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hls_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.hls_url)
}
inline std::string* Media::mutable_hls_url() {
  std::string* _s = _internal_mutable_hls_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.hls_url)
  return _s;
}
inline const std::string& Media::_internal_hls_url() const {
  return _impl_.hls_url_.Get();
}
inline void Media::_internal_set_hls_url(const std::string& value) {
  
  _impl_.hls_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_hls_url() {
  
  return _impl_.hls_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_hls_url() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.hls_url)
  return _impl_.hls_url_.Release();
}
inline void Media::set_allocated_hls_url(std::string* hls_url) {
  if (hls_url != nullptr) {
    
  } else {
    
  }
  _impl_.hls_url_.SetAllocated(hls_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hls_url_.IsDefault()) {
    _impl_.hls_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.hls_url)
}

// string created_at = 12;
inline void Media::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& Media::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.created_at)
}
inline std::string* Media::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.created_at)
  return _s;
}
inline const std::string& Media::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void Media::_internal_set_created_at(const std::string& value) {
  
  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_created_at() {
  
  return _impl_.created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.created_at)
  return _impl_.created_at_.Release();
}
inline void Media::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  _impl_.created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.created_at)
}

// string webp_url = 13;
inline void Media::clear_webp_url() {
  _impl_.webp_url_.ClearToEmpty();
}
inline const std::string& Media::webp_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.webp_url)
  return _internal_webp_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_webp_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.webp_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.webp_url)
}
inline std::string* Media::mutable_webp_url() {
  std::string* _s = _internal_mutable_webp_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.webp_url)
  return _s;
}
inline const std::string& Media::_internal_webp_url() const {
  return _impl_.webp_url_.Get();
}
inline void Media::_internal_set_webp_url(const std::string& value) {
  
  _impl_.webp_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_webp_url() {
  
  return _impl_.webp_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_webp_url() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.webp_url)
  return _impl_.webp_url_.Release();
}
inline void Media::set_allocated_webp_url(std::string* webp_url) {
  if (webp_url != nullptr) {
    
  } else {
    
  }
  _impl_.webp_url_.SetAllocated(webp_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webp_url_.IsDefault()) {
    _impl_.webp_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.webp_url)
}

// string mp4_url = 14;
inline void Media::clear_mp4_url() {
  _impl_.mp4_url_.ClearToEmpty();
}
inline const std::string& Media::mp4_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.Media.mp4_url)
  return _internal_mp4_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_mp4_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mp4_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.Media.mp4_url)
}
inline std::string* Media::mutable_mp4_url() {
  std::string* _s = _internal_mutable_mp4_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.Media.mp4_url)
  return _s;
}
inline const std::string& Media::_internal_mp4_url() const {
  return _impl_.mp4_url_.Get();
}
inline void Media::_internal_set_mp4_url(const std::string& value) {
  
  _impl_.mp4_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_mp4_url() {
  
  return _impl_.mp4_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_mp4_url() {
  // @@protoc_insertion_point(field_release:sonet.media.Media.mp4_url)
  return _impl_.mp4_url_.Release();
}
inline void Media::set_allocated_mp4_url(std::string* mp4_url) {
  if (mp4_url != nullptr) {
    
  } else {
    
  }
  _impl_.mp4_url_.SetAllocated(mp4_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mp4_url_.IsDefault()) {
    _impl_.mp4_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.Media.mp4_url)
}

// -------------------------------------------------------------------

// UploadInit

// string owner_user_id = 1;
inline void UploadInit::clear_owner_user_id() {
  _impl_.owner_user_id_.ClearToEmpty();
}
inline const std::string& UploadInit::owner_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadInit.owner_user_id)
  return _internal_owner_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadInit::set_owner_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadInit.owner_user_id)
}
inline std::string* UploadInit::mutable_owner_user_id() {
  std::string* _s = _internal_mutable_owner_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadInit.owner_user_id)
  return _s;
}
inline const std::string& UploadInit::_internal_owner_user_id() const {
  return _impl_.owner_user_id_.Get();
}
inline void UploadInit::_internal_set_owner_user_id(const std::string& value) {
  
  _impl_.owner_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadInit::_internal_mutable_owner_user_id() {
  
  return _impl_.owner_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadInit::release_owner_user_id() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadInit.owner_user_id)
  return _impl_.owner_user_id_.Release();
}
inline void UploadInit::set_allocated_owner_user_id(std::string* owner_user_id) {
  if (owner_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.owner_user_id_.SetAllocated(owner_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_user_id_.IsDefault()) {
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadInit.owner_user_id)
}

// .sonet.media.MediaType type = 2;
inline void UploadInit::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::media::MediaType UploadInit::_internal_type() const {
  return static_cast< ::sonet::media::MediaType >(_impl_.type_);
}
inline ::sonet::media::MediaType UploadInit::type() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadInit.type)
  return _internal_type();
}
inline void UploadInit::_internal_set_type(::sonet::media::MediaType value) {
  
  _impl_.type_ = value;
}
inline void UploadInit::set_type(::sonet::media::MediaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.media.UploadInit.type)
}

// string original_filename = 3;
inline void UploadInit::clear_original_filename() {
  _impl_.original_filename_.ClearToEmpty();
}
inline const std::string& UploadInit::original_filename() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadInit.original_filename)
  return _internal_original_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadInit::set_original_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.original_filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadInit.original_filename)
}
inline std::string* UploadInit::mutable_original_filename() {
  std::string* _s = _internal_mutable_original_filename();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadInit.original_filename)
  return _s;
}
inline const std::string& UploadInit::_internal_original_filename() const {
  return _impl_.original_filename_.Get();
}
inline void UploadInit::_internal_set_original_filename(const std::string& value) {
  
  _impl_.original_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadInit::_internal_mutable_original_filename() {
  
  return _impl_.original_filename_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadInit::release_original_filename() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadInit.original_filename)
  return _impl_.original_filename_.Release();
}
inline void UploadInit::set_allocated_original_filename(std::string* original_filename) {
  if (original_filename != nullptr) {
    
  } else {
    
  }
  _impl_.original_filename_.SetAllocated(original_filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.original_filename_.IsDefault()) {
    _impl_.original_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadInit.original_filename)
}

// string mime_type = 4;
inline void UploadInit::clear_mime_type() {
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& UploadInit::mime_type() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadInit.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadInit::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadInit.mime_type)
}
inline std::string* UploadInit::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadInit.mime_type)
  return _s;
}
inline const std::string& UploadInit::_internal_mime_type() const {
  return _impl_.mime_type_.Get();
}
inline void UploadInit::_internal_set_mime_type(const std::string& value) {
  
  _impl_.mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadInit::_internal_mutable_mime_type() {
  
  return _impl_.mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadInit::release_mime_type() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadInit.mime_type)
  return _impl_.mime_type_.Release();
}
inline void UploadInit::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  _impl_.mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadInit.mime_type)
}

// -------------------------------------------------------------------

// UploadChunk

// bytes content = 1;
inline void UploadChunk::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& UploadChunk::content() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadChunk.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadChunk::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadChunk.content)
}
inline std::string* UploadChunk::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadChunk.content)
  return _s;
}
inline const std::string& UploadChunk::_internal_content() const {
  return _impl_.content_.Get();
}
inline void UploadChunk::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadChunk::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadChunk::release_content() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadChunk.content)
  return _impl_.content_.Release();
}
inline void UploadChunk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadChunk.content)
}

// -------------------------------------------------------------------

// UploadRequest

// .sonet.media.UploadInit init = 1;
inline bool UploadRequest::_internal_has_init() const {
  return payload_case() == kInit;
}
inline bool UploadRequest::has_init() const {
  return _internal_has_init();
}
inline void UploadRequest::set_has_init() {
  _impl_._oneof_case_[0] = kInit;
}
inline void UploadRequest::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.init_;
    }
    clear_has_payload();
  }
}
inline ::sonet::media::UploadInit* UploadRequest::release_init() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadRequest.init)
  if (_internal_has_init()) {
    clear_has_payload();
    ::sonet::media::UploadInit* temp = _impl_.payload_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sonet::media::UploadInit& UploadRequest::_internal_init() const {
  return _internal_has_init()
      ? *_impl_.payload_.init_
      : reinterpret_cast< ::sonet::media::UploadInit&>(::sonet::media::_UploadInit_default_instance_);
}
inline const ::sonet::media::UploadInit& UploadRequest::init() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadRequest.init)
  return _internal_init();
}
inline ::sonet::media::UploadInit* UploadRequest::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sonet.media.UploadRequest.init)
  if (_internal_has_init()) {
    clear_has_payload();
    ::sonet::media::UploadInit* temp = _impl_.payload_.init_;
    _impl_.payload_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_init(::sonet::media::UploadInit* init) {
  clear_payload();
  if (init) {
    set_has_init();
    _impl_.payload_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.media.UploadRequest.init)
}
inline ::sonet::media::UploadInit* UploadRequest::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_payload();
    set_has_init();
    _impl_.payload_.init_ = CreateMaybeMessage< ::sonet::media::UploadInit >(GetArenaForAllocation());
  }
  return _impl_.payload_.init_;
}
inline ::sonet::media::UploadInit* UploadRequest::mutable_init() {
  ::sonet::media::UploadInit* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadRequest.init)
  return _msg;
}

// .sonet.media.UploadChunk chunk = 2;
inline bool UploadRequest::_internal_has_chunk() const {
  return payload_case() == kChunk;
}
inline bool UploadRequest::has_chunk() const {
  return _internal_has_chunk();
}
inline void UploadRequest::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void UploadRequest::clear_chunk() {
  if (_internal_has_chunk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.chunk_;
    }
    clear_has_payload();
  }
}
inline ::sonet::media::UploadChunk* UploadRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_payload();
    ::sonet::media::UploadChunk* temp = _impl_.payload_.chunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sonet::media::UploadChunk& UploadRequest::_internal_chunk() const {
  return _internal_has_chunk()
      ? *_impl_.payload_.chunk_
      : reinterpret_cast< ::sonet::media::UploadChunk&>(::sonet::media::_UploadChunk_default_instance_);
}
inline const ::sonet::media::UploadChunk& UploadRequest::chunk() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadRequest.chunk)
  return _internal_chunk();
}
inline ::sonet::media::UploadChunk* UploadRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sonet.media.UploadRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_payload();
    ::sonet::media::UploadChunk* temp = _impl_.payload_.chunk_;
    _impl_.payload_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_chunk(::sonet::media::UploadChunk* chunk) {
  clear_payload();
  if (chunk) {
    set_has_chunk();
    _impl_.payload_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.media.UploadRequest.chunk)
}
inline ::sonet::media::UploadChunk* UploadRequest::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_payload();
    set_has_chunk();
    _impl_.payload_.chunk_ = CreateMaybeMessage< ::sonet::media::UploadChunk >(GetArenaForAllocation());
  }
  return _impl_.payload_.chunk_;
}
inline ::sonet::media::UploadChunk* UploadRequest::mutable_chunk() {
  ::sonet::media::UploadChunk* _msg = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadRequest.chunk)
  return _msg;
}

inline bool UploadRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void UploadRequest::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline UploadRequest::PayloadCase UploadRequest::payload_case() const {
  return UploadRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadResponse

// string media_id = 1;
inline void UploadResponse::clear_media_id() {
  _impl_.media_id_.ClearToEmpty();
}
inline const std::string& UploadResponse::media_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.media_id)
  return _internal_media_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_media_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.media_id)
}
inline std::string* UploadResponse::mutable_media_id() {
  std::string* _s = _internal_mutable_media_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadResponse.media_id)
  return _s;
}
inline const std::string& UploadResponse::_internal_media_id() const {
  return _impl_.media_id_.Get();
}
inline void UploadResponse::_internal_set_media_id(const std::string& value) {
  
  _impl_.media_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_media_id() {
  
  return _impl_.media_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_media_id() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadResponse.media_id)
  return _impl_.media_id_.Release();
}
inline void UploadResponse::set_allocated_media_id(std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  _impl_.media_id_.SetAllocated(media_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_id_.IsDefault()) {
    _impl_.media_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadResponse.media_id)
}

// .sonet.media.MediaType type = 2;
inline void UploadResponse::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::media::MediaType UploadResponse::_internal_type() const {
  return static_cast< ::sonet::media::MediaType >(_impl_.type_);
}
inline ::sonet::media::MediaType UploadResponse::type() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.type)
  return _internal_type();
}
inline void UploadResponse::_internal_set_type(::sonet::media::MediaType value) {
  
  _impl_.type_ = value;
}
inline void UploadResponse::set_type(::sonet::media::MediaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.type)
}

// string url = 3;
inline void UploadResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& UploadResponse::url() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.url)
}
inline std::string* UploadResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadResponse.url)
  return _s;
}
inline const std::string& UploadResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void UploadResponse::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_url() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadResponse.url)
  return _impl_.url_.Release();
}
inline void UploadResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadResponse.url)
}

// string thumbnail_url = 4;
inline void UploadResponse::clear_thumbnail_url() {
  _impl_.thumbnail_url_.ClearToEmpty();
}
inline const std::string& UploadResponse::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thumbnail_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.thumbnail_url)
}
inline std::string* UploadResponse::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadResponse.thumbnail_url)
  return _s;
}
inline const std::string& UploadResponse::_internal_thumbnail_url() const {
  return _impl_.thumbnail_url_.Get();
}
inline void UploadResponse::_internal_set_thumbnail_url(const std::string& value) {
  
  _impl_.thumbnail_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_thumbnail_url() {
  
  return _impl_.thumbnail_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadResponse.thumbnail_url)
  return _impl_.thumbnail_url_.Release();
}
inline void UploadResponse::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    
  } else {
    
  }
  _impl_.thumbnail_url_.SetAllocated(thumbnail_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnail_url_.IsDefault()) {
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadResponse.thumbnail_url)
}

// string hls_url = 5;
inline void UploadResponse::clear_hls_url() {
  _impl_.hls_url_.ClearToEmpty();
}
inline const std::string& UploadResponse::hls_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.hls_url)
  return _internal_hls_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_hls_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hls_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.hls_url)
}
inline std::string* UploadResponse::mutable_hls_url() {
  std::string* _s = _internal_mutable_hls_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadResponse.hls_url)
  return _s;
}
inline const std::string& UploadResponse::_internal_hls_url() const {
  return _impl_.hls_url_.Get();
}
inline void UploadResponse::_internal_set_hls_url(const std::string& value) {
  
  _impl_.hls_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_hls_url() {
  
  return _impl_.hls_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_hls_url() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadResponse.hls_url)
  return _impl_.hls_url_.Release();
}
inline void UploadResponse::set_allocated_hls_url(std::string* hls_url) {
  if (hls_url != nullptr) {
    
  } else {
    
  }
  _impl_.hls_url_.SetAllocated(hls_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hls_url_.IsDefault()) {
    _impl_.hls_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadResponse.hls_url)
}

// string webp_url = 6;
inline void UploadResponse::clear_webp_url() {
  _impl_.webp_url_.ClearToEmpty();
}
inline const std::string& UploadResponse::webp_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.webp_url)
  return _internal_webp_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_webp_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.webp_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.webp_url)
}
inline std::string* UploadResponse::mutable_webp_url() {
  std::string* _s = _internal_mutable_webp_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadResponse.webp_url)
  return _s;
}
inline const std::string& UploadResponse::_internal_webp_url() const {
  return _impl_.webp_url_.Get();
}
inline void UploadResponse::_internal_set_webp_url(const std::string& value) {
  
  _impl_.webp_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_webp_url() {
  
  return _impl_.webp_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_webp_url() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadResponse.webp_url)
  return _impl_.webp_url_.Release();
}
inline void UploadResponse::set_allocated_webp_url(std::string* webp_url) {
  if (webp_url != nullptr) {
    
  } else {
    
  }
  _impl_.webp_url_.SetAllocated(webp_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webp_url_.IsDefault()) {
    _impl_.webp_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadResponse.webp_url)
}

// string mp4_url = 7;
inline void UploadResponse::clear_mp4_url() {
  _impl_.mp4_url_.ClearToEmpty();
}
inline const std::string& UploadResponse::mp4_url() const {
  // @@protoc_insertion_point(field_get:sonet.media.UploadResponse.mp4_url)
  return _internal_mp4_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_mp4_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mp4_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.UploadResponse.mp4_url)
}
inline std::string* UploadResponse::mutable_mp4_url() {
  std::string* _s = _internal_mutable_mp4_url();
  // @@protoc_insertion_point(field_mutable:sonet.media.UploadResponse.mp4_url)
  return _s;
}
inline const std::string& UploadResponse::_internal_mp4_url() const {
  return _impl_.mp4_url_.Get();
}
inline void UploadResponse::_internal_set_mp4_url(const std::string& value) {
  
  _impl_.mp4_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_mp4_url() {
  
  return _impl_.mp4_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_mp4_url() {
  // @@protoc_insertion_point(field_release:sonet.media.UploadResponse.mp4_url)
  return _impl_.mp4_url_.Release();
}
inline void UploadResponse::set_allocated_mp4_url(std::string* mp4_url) {
  if (mp4_url != nullptr) {
    
  } else {
    
  }
  _impl_.mp4_url_.SetAllocated(mp4_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mp4_url_.IsDefault()) {
    _impl_.mp4_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadResponse.mp4_url)
}

// -------------------------------------------------------------------

// GetMediaRequest

// string media_id = 1;
inline void GetMediaRequest::clear_media_id() {
  _impl_.media_id_.ClearToEmpty();
}
inline const std::string& GetMediaRequest::media_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.GetMediaRequest.media_id)
  return _internal_media_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMediaRequest::set_media_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.GetMediaRequest.media_id)
}
inline std::string* GetMediaRequest::mutable_media_id() {
  std::string* _s = _internal_mutable_media_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.GetMediaRequest.media_id)
  return _s;
}
inline const std::string& GetMediaRequest::_internal_media_id() const {
  return _impl_.media_id_.Get();
}
inline void GetMediaRequest::_internal_set_media_id(const std::string& value) {
  
  _impl_.media_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMediaRequest::_internal_mutable_media_id() {
  
  return _impl_.media_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMediaRequest::release_media_id() {
  // @@protoc_insertion_point(field_release:sonet.media.GetMediaRequest.media_id)
  return _impl_.media_id_.Release();
}
inline void GetMediaRequest::set_allocated_media_id(std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  _impl_.media_id_.SetAllocated(media_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_id_.IsDefault()) {
    _impl_.media_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.GetMediaRequest.media_id)
}

// -------------------------------------------------------------------

// GetMediaResponse

// .sonet.media.Media media = 1;
inline bool GetMediaResponse::_internal_has_media() const {
  return this != internal_default_instance() && _impl_.media_ != nullptr;
}
inline bool GetMediaResponse::has_media() const {
  return _internal_has_media();
}
inline void GetMediaResponse::clear_media() {
  if (GetArenaForAllocation() == nullptr && _impl_.media_ != nullptr) {
    delete _impl_.media_;
  }
  _impl_.media_ = nullptr;
}
inline const ::sonet::media::Media& GetMediaResponse::_internal_media() const {
  const ::sonet::media::Media* p = _impl_.media_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::media::Media&>(
      ::sonet::media::_Media_default_instance_);
}
inline const ::sonet::media::Media& GetMediaResponse::media() const {
  // @@protoc_insertion_point(field_get:sonet.media.GetMediaResponse.media)
  return _internal_media();
}
inline void GetMediaResponse::unsafe_arena_set_allocated_media(
    ::sonet::media::Media* media) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_);
  }
  _impl_.media_ = media;
  if (media) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.media.GetMediaResponse.media)
}
inline ::sonet::media::Media* GetMediaResponse::release_media() {
  
  ::sonet::media::Media* temp = _impl_.media_;
  _impl_.media_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::media::Media* GetMediaResponse::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:sonet.media.GetMediaResponse.media)
  
  ::sonet::media::Media* temp = _impl_.media_;
  _impl_.media_ = nullptr;
  return temp;
}
inline ::sonet::media::Media* GetMediaResponse::_internal_mutable_media() {
  
  if (_impl_.media_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::media::Media>(GetArenaForAllocation());
    _impl_.media_ = p;
  }
  return _impl_.media_;
}
inline ::sonet::media::Media* GetMediaResponse::mutable_media() {
  ::sonet::media::Media* _msg = _internal_mutable_media();
  // @@protoc_insertion_point(field_mutable:sonet.media.GetMediaResponse.media)
  return _msg;
}
inline void GetMediaResponse::set_allocated_media(::sonet::media::Media* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_;
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media);
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.media_ = media;
  // @@protoc_insertion_point(field_set_allocated:sonet.media.GetMediaResponse.media)
}

// -------------------------------------------------------------------

// DeleteMediaRequest

// string media_id = 1;
inline void DeleteMediaRequest::clear_media_id() {
  _impl_.media_id_.ClearToEmpty();
}
inline const std::string& DeleteMediaRequest::media_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.DeleteMediaRequest.media_id)
  return _internal_media_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMediaRequest::set_media_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.DeleteMediaRequest.media_id)
}
inline std::string* DeleteMediaRequest::mutable_media_id() {
  std::string* _s = _internal_mutable_media_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.DeleteMediaRequest.media_id)
  return _s;
}
inline const std::string& DeleteMediaRequest::_internal_media_id() const {
  return _impl_.media_id_.Get();
}
inline void DeleteMediaRequest::_internal_set_media_id(const std::string& value) {
  
  _impl_.media_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteMediaRequest::_internal_mutable_media_id() {
  
  return _impl_.media_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteMediaRequest::release_media_id() {
  // @@protoc_insertion_point(field_release:sonet.media.DeleteMediaRequest.media_id)
  return _impl_.media_id_.Release();
}
inline void DeleteMediaRequest::set_allocated_media_id(std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  _impl_.media_id_.SetAllocated(media_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_id_.IsDefault()) {
    _impl_.media_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.DeleteMediaRequest.media_id)
}

// -------------------------------------------------------------------

// DeleteMediaResponse

// bool deleted = 1;
inline void DeleteMediaResponse::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool DeleteMediaResponse::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool DeleteMediaResponse::deleted() const {
  // @@protoc_insertion_point(field_get:sonet.media.DeleteMediaResponse.deleted)
  return _internal_deleted();
}
inline void DeleteMediaResponse::_internal_set_deleted(bool value) {
  
  _impl_.deleted_ = value;
}
inline void DeleteMediaResponse::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:sonet.media.DeleteMediaResponse.deleted)
}

// -------------------------------------------------------------------

// ListUserMediaRequest

// string owner_user_id = 1;
inline void ListUserMediaRequest::clear_owner_user_id() {
  _impl_.owner_user_id_.ClearToEmpty();
}
inline const std::string& ListUserMediaRequest::owner_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaRequest.owner_user_id)
  return _internal_owner_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListUserMediaRequest::set_owner_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.ListUserMediaRequest.owner_user_id)
}
inline std::string* ListUserMediaRequest::mutable_owner_user_id() {
  std::string* _s = _internal_mutable_owner_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.ListUserMediaRequest.owner_user_id)
  return _s;
}
inline const std::string& ListUserMediaRequest::_internal_owner_user_id() const {
  return _impl_.owner_user_id_.Get();
}
inline void ListUserMediaRequest::_internal_set_owner_user_id(const std::string& value) {
  
  _impl_.owner_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListUserMediaRequest::_internal_mutable_owner_user_id() {
  
  return _impl_.owner_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListUserMediaRequest::release_owner_user_id() {
  // @@protoc_insertion_point(field_release:sonet.media.ListUserMediaRequest.owner_user_id)
  return _impl_.owner_user_id_.Release();
}
inline void ListUserMediaRequest::set_allocated_owner_user_id(std::string* owner_user_id) {
  if (owner_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.owner_user_id_.SetAllocated(owner_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_user_id_.IsDefault()) {
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.ListUserMediaRequest.owner_user_id)
}

// uint32 page = 2;
inline void ListUserMediaRequest::clear_page() {
  _impl_.page_ = 0u;
}
inline uint32_t ListUserMediaRequest::_internal_page() const {
  return _impl_.page_;
}
inline uint32_t ListUserMediaRequest::page() const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaRequest.page)
  return _internal_page();
}
inline void ListUserMediaRequest::_internal_set_page(uint32_t value) {
  
  _impl_.page_ = value;
}
inline void ListUserMediaRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:sonet.media.ListUserMediaRequest.page)
}

// uint32 page_size = 3;
inline void ListUserMediaRequest::clear_page_size() {
  _impl_.page_size_ = 0u;
}
inline uint32_t ListUserMediaRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline uint32_t ListUserMediaRequest::page_size() const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaRequest.page_size)
  return _internal_page_size();
}
inline void ListUserMediaRequest::_internal_set_page_size(uint32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListUserMediaRequest::set_page_size(uint32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:sonet.media.ListUserMediaRequest.page_size)
}

// -------------------------------------------------------------------

// ListUserMediaResponse

// repeated .sonet.media.Media items = 1;
inline int ListUserMediaResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ListUserMediaResponse::items_size() const {
  return _internal_items_size();
}
inline void ListUserMediaResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::sonet::media::Media* ListUserMediaResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.media.ListUserMediaResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::media::Media >*
ListUserMediaResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:sonet.media.ListUserMediaResponse.items)
  return &_impl_.items_;
}
inline const ::sonet::media::Media& ListUserMediaResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::sonet::media::Media& ListUserMediaResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaResponse.items)
  return _internal_items(index);
}
inline ::sonet::media::Media* ListUserMediaResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::sonet::media::Media* ListUserMediaResponse::add_items() {
  ::sonet::media::Media* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:sonet.media.ListUserMediaResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::media::Media >&
ListUserMediaResponse::items() const {
  // @@protoc_insertion_point(field_list:sonet.media.ListUserMediaResponse.items)
  return _impl_.items_;
}

// uint32 page = 2;
inline void ListUserMediaResponse::clear_page() {
  _impl_.page_ = 0u;
}
inline uint32_t ListUserMediaResponse::_internal_page() const {
  return _impl_.page_;
}
inline uint32_t ListUserMediaResponse::page() const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaResponse.page)
  return _internal_page();
}
inline void ListUserMediaResponse::_internal_set_page(uint32_t value) {
  
  _impl_.page_ = value;
}
inline void ListUserMediaResponse::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:sonet.media.ListUserMediaResponse.page)
}

// uint32 page_size = 3;
inline void ListUserMediaResponse::clear_page_size() {
  _impl_.page_size_ = 0u;
}
inline uint32_t ListUserMediaResponse::_internal_page_size() const {
  return _impl_.page_size_;
}
inline uint32_t ListUserMediaResponse::page_size() const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaResponse.page_size)
  return _internal_page_size();
}
inline void ListUserMediaResponse::_internal_set_page_size(uint32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListUserMediaResponse::set_page_size(uint32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:sonet.media.ListUserMediaResponse.page_size)
}

// uint32 total_pages = 4;
inline void ListUserMediaResponse::clear_total_pages() {
  _impl_.total_pages_ = 0u;
}
inline uint32_t ListUserMediaResponse::_internal_total_pages() const {
  return _impl_.total_pages_;
}
inline uint32_t ListUserMediaResponse::total_pages() const {
  // @@protoc_insertion_point(field_get:sonet.media.ListUserMediaResponse.total_pages)
  return _internal_total_pages();
}
inline void ListUserMediaResponse::_internal_set_total_pages(uint32_t value) {
  
  _impl_.total_pages_ = value;
}
inline void ListUserMediaResponse::set_total_pages(uint32_t value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:sonet.media.ListUserMediaResponse.total_pages)
}

// -------------------------------------------------------------------

// ToggleMediaLikeRequest

// string media_id = 1;
inline void ToggleMediaLikeRequest::clear_media_id() {
  _impl_.media_id_.ClearToEmpty();
}
inline const std::string& ToggleMediaLikeRequest::media_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.ToggleMediaLikeRequest.media_id)
  return _internal_media_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToggleMediaLikeRequest::set_media_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.ToggleMediaLikeRequest.media_id)
}
inline std::string* ToggleMediaLikeRequest::mutable_media_id() {
  std::string* _s = _internal_mutable_media_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.ToggleMediaLikeRequest.media_id)
  return _s;
}
inline const std::string& ToggleMediaLikeRequest::_internal_media_id() const {
  return _impl_.media_id_.Get();
}
inline void ToggleMediaLikeRequest::_internal_set_media_id(const std::string& value) {
  
  _impl_.media_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ToggleMediaLikeRequest::_internal_mutable_media_id() {
  
  return _impl_.media_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ToggleMediaLikeRequest::release_media_id() {
  // @@protoc_insertion_point(field_release:sonet.media.ToggleMediaLikeRequest.media_id)
  return _impl_.media_id_.Release();
}
inline void ToggleMediaLikeRequest::set_allocated_media_id(std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  _impl_.media_id_.SetAllocated(media_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_id_.IsDefault()) {
    _impl_.media_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.ToggleMediaLikeRequest.media_id)
}

// string user_id = 2;
inline void ToggleMediaLikeRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ToggleMediaLikeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.ToggleMediaLikeRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToggleMediaLikeRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.ToggleMediaLikeRequest.user_id)
}
inline std::string* ToggleMediaLikeRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.ToggleMediaLikeRequest.user_id)
  return _s;
}
inline const std::string& ToggleMediaLikeRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ToggleMediaLikeRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ToggleMediaLikeRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ToggleMediaLikeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.media.ToggleMediaLikeRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ToggleMediaLikeRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.ToggleMediaLikeRequest.user_id)
}

// bool is_liked = 3;
inline void ToggleMediaLikeRequest::clear_is_liked() {
  _impl_.is_liked_ = false;
}
inline bool ToggleMediaLikeRequest::_internal_is_liked() const {
  return _impl_.is_liked_;
}
inline bool ToggleMediaLikeRequest::is_liked() const {
  // @@protoc_insertion_point(field_get:sonet.media.ToggleMediaLikeRequest.is_liked)
  return _internal_is_liked();
}
inline void ToggleMediaLikeRequest::_internal_set_is_liked(bool value) {
  
  _impl_.is_liked_ = value;
}
inline void ToggleMediaLikeRequest::set_is_liked(bool value) {
  _internal_set_is_liked(value);
  // @@protoc_insertion_point(field_set:sonet.media.ToggleMediaLikeRequest.is_liked)
}

// -------------------------------------------------------------------

// ToggleMediaLikeResponse

// string media_id = 1;
inline void ToggleMediaLikeResponse::clear_media_id() {
  _impl_.media_id_.ClearToEmpty();
}
inline const std::string& ToggleMediaLikeResponse::media_id() const {
  // @@protoc_insertion_point(field_get:sonet.media.ToggleMediaLikeResponse.media_id)
  return _internal_media_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToggleMediaLikeResponse::set_media_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.media_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.ToggleMediaLikeResponse.media_id)
}
inline std::string* ToggleMediaLikeResponse::mutable_media_id() {
  std::string* _s = _internal_mutable_media_id();
  // @@protoc_insertion_point(field_mutable:sonet.media.ToggleMediaLikeResponse.media_id)
  return _s;
}
inline const std::string& ToggleMediaLikeResponse::_internal_media_id() const {
  return _impl_.media_id_.Get();
}
inline void ToggleMediaLikeResponse::_internal_set_media_id(const std::string& value) {
  
  _impl_.media_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ToggleMediaLikeResponse::_internal_mutable_media_id() {
  
  return _impl_.media_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ToggleMediaLikeResponse::release_media_id() {
  // @@protoc_insertion_point(field_release:sonet.media.ToggleMediaLikeResponse.media_id)
  return _impl_.media_id_.Release();
}
inline void ToggleMediaLikeResponse::set_allocated_media_id(std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  _impl_.media_id_.SetAllocated(media_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_id_.IsDefault()) {
    _impl_.media_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.ToggleMediaLikeResponse.media_id)
}

// uint32 like_count = 2;
inline void ToggleMediaLikeResponse::clear_like_count() {
  _impl_.like_count_ = 0u;
}
inline uint32_t ToggleMediaLikeResponse::_internal_like_count() const {
  return _impl_.like_count_;
}
inline uint32_t ToggleMediaLikeResponse::like_count() const {
  // @@protoc_insertion_point(field_get:sonet.media.ToggleMediaLikeResponse.like_count)
  return _internal_like_count();
}
inline void ToggleMediaLikeResponse::_internal_set_like_count(uint32_t value) {
  
  _impl_.like_count_ = value;
}
inline void ToggleMediaLikeResponse::set_like_count(uint32_t value) {
  _internal_set_like_count(value);
  // @@protoc_insertion_point(field_set:sonet.media.ToggleMediaLikeResponse.like_count)
}

// bool is_liked = 3;
inline void ToggleMediaLikeResponse::clear_is_liked() {
  _impl_.is_liked_ = false;
}
inline bool ToggleMediaLikeResponse::_internal_is_liked() const {
  return _impl_.is_liked_;
}
inline bool ToggleMediaLikeResponse::is_liked() const {
  // @@protoc_insertion_point(field_get:sonet.media.ToggleMediaLikeResponse.is_liked)
  return _internal_is_liked();
}
inline void ToggleMediaLikeResponse::_internal_set_is_liked(bool value) {
  
  _impl_.is_liked_ = value;
}
inline void ToggleMediaLikeResponse::set_is_liked(bool value) {
  _internal_set_is_liked(value);
  // @@protoc_insertion_point(field_set:sonet.media.ToggleMediaLikeResponse.is_liked)
}

// -------------------------------------------------------------------

// HealthCheckRequest

// -------------------------------------------------------------------

// HealthCheckResponse

// string status = 1;
inline void HealthCheckResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:sonet.media.HealthCheckResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HealthCheckResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.media.HealthCheckResponse.status)
}
inline std::string* HealthCheckResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:sonet.media.HealthCheckResponse.status)
  return _s;
}
inline const std::string& HealthCheckResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void HealthCheckResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* HealthCheckResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* HealthCheckResponse::release_status() {
  // @@protoc_insertion_point(field_release:sonet.media.HealthCheckResponse.status)
  return _impl_.status_.Release();
}
inline void HealthCheckResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.media.HealthCheckResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace media
}  // namespace sonet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sonet::media::MediaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::media::MediaType>() {
  return ::sonet::media::MediaType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fmedia_2eproto
