// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/messaging.proto

#include "services/messaging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace messaging {
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encrypted_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_to_message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.delivered_at_)*/nullptr
  , /*decltype(_impl_.read_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.encryption_)*/0
  , /*decltype(_impl_.is_edited_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR Chat_SettingsEntry_DoNotUse::Chat_SettingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Chat_SettingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chat_SettingsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chat_SettingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Chat_SettingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chat_SettingsEntry_DoNotUseDefaultTypeInternal _Chat_SettingsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Chat::Chat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_ids_)*/{}
  , /*decltype(_impl_.settings_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_activity_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_archived_)*/false
  , /*decltype(_impl_.is_muted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDefaultTypeInternal() {}
  union {
    Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDefaultTypeInternal _Chat_default_instance_;
PROTOBUF_CONSTEXPR TypingIndicator::TypingIndicator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.is_typing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypingIndicatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypingIndicatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypingIndicatorDefaultTypeInternal() {}
  union {
    TypingIndicator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypingIndicatorDefaultTypeInternal _TypingIndicator_default_instance_;
PROTOBUF_CONSTEXPR ReadReceipt::ReadReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.read_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadReceiptDefaultTypeInternal() {}
  union {
    ReadReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadReceiptDefaultTypeInternal _ReadReceipt_default_instance_;
PROTOBUF_CONSTEXPR Attachment_MetadataEntry_DoNotUse::Attachment_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Attachment_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Attachment_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Attachment_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Attachment_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Attachment_MetadataEntry_DoNotUseDefaultTypeInternal _Attachment_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Attachment::Attachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.attachment_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentDefaultTypeInternal() {}
  union {
    Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentDefaultTypeInternal _Attachment_default_instance_;
PROTOBUF_CONSTEXPR SendMessageRequest::SendMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachment_ids_)*/{}
  , /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_to_message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.encryption_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageRequestDefaultTypeInternal() {}
  union {
    SendMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR SendMessageResponse::SendMessageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageResponseDefaultTypeInternal() {}
  union {
    SendMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR GetMessagesRequest::GetMessagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.before_)*/nullptr
  , /*decltype(_impl_.after_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMessagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMessagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMessagesRequestDefaultTypeInternal() {}
  union {
    GetMessagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMessagesRequestDefaultTypeInternal _GetMessagesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMessagesResponse::GetMessagesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMessagesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMessagesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMessagesResponseDefaultTypeInternal() {}
  union {
    GetMessagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMessagesResponseDefaultTypeInternal _GetMessagesResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateChatRequest::CreateChatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.participant_ids_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChatRequestDefaultTypeInternal() {}
  union {
    CreateChatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChatRequestDefaultTypeInternal _CreateChatRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateChatResponse::CreateChatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChatResponseDefaultTypeInternal() {}
  union {
    CreateChatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChatResponseDefaultTypeInternal _CreateChatResponse_default_instance_;
PROTOBUF_CONSTEXPR GetChatsRequest::GetChatsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetChatsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatsRequestDefaultTypeInternal() {}
  union {
    GetChatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatsRequestDefaultTypeInternal _GetChatsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetChatsResponse::GetChatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chats_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetChatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatsResponseDefaultTypeInternal() {}
  union {
    GetChatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatsResponseDefaultTypeInternal _GetChatsResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateMessageStatusRequest::UpdateMessageStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateMessageStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMessageStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMessageStatusRequestDefaultTypeInternal() {}
  union {
    UpdateMessageStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMessageStatusRequestDefaultTypeInternal _UpdateMessageStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateMessageStatusResponse::UpdateMessageStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateMessageStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMessageStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMessageStatusResponseDefaultTypeInternal() {}
  union {
    UpdateMessageStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMessageStatusResponseDefaultTypeInternal _UpdateMessageStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchMessagesRequest::SearchMessagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchMessagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchMessagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchMessagesRequestDefaultTypeInternal() {}
  union {
    SearchMessagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchMessagesRequestDefaultTypeInternal _SearchMessagesRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchMessagesResponse::SearchMessagesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchMessagesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchMessagesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchMessagesResponseDefaultTypeInternal() {}
  union {
    SearchMessagesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchMessagesResponseDefaultTypeInternal _SearchMessagesResponse_default_instance_;
PROTOBUF_CONSTEXPR UploadAttachmentRequest::UploadAttachmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadAttachmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadAttachmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadAttachmentRequestDefaultTypeInternal() {}
  union {
    UploadAttachmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadAttachmentRequestDefaultTypeInternal _UploadAttachmentRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadAttachmentResponse::UploadAttachmentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.attachment_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadAttachmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadAttachmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadAttachmentResponseDefaultTypeInternal() {}
  union {
    UploadAttachmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadAttachmentResponseDefaultTypeInternal _UploadAttachmentResponse_default_instance_;
PROTOBUF_CONSTEXPR SetTypingRequest::SetTypingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_typing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetTypingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTypingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTypingRequestDefaultTypeInternal() {}
  union {
    SetTypingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTypingRequestDefaultTypeInternal _SetTypingRequest_default_instance_;
PROTOBUF_CONSTEXPR SetTypingResponse::SetTypingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetTypingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTypingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTypingResponseDefaultTypeInternal() {}
  union {
    SetTypingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTypingResponseDefaultTypeInternal _SetTypingResponse_default_instance_;
PROTOBUF_CONSTEXPR WebSocketMessage::WebSocketMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WebSocketMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebSocketMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebSocketMessageDefaultTypeInternal() {}
  union {
    WebSocketMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebSocketMessageDefaultTypeInternal _WebSocketMessage_default_instance_;
}  // namespace messaging
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2fmessaging_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2fmessaging_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fmessaging_2eproto = nullptr;

const uint32_t TableStruct_services_2fmessaging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.encryption_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.encrypted_content_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.attachments_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.reply_to_message_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.is_edited_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.delivered_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Message, _impl_.read_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat_SettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.creator_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.participant_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.last_message_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.last_activity_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.is_archived_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.is_muted_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.avatar_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Chat, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::TypingIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::TypingIndicator, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::TypingIndicator, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::TypingIndicator, _impl_.is_typing_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::TypingIndicator, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::ReadReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::ReadReceipt, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::ReadReceipt, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::ReadReceipt, _impl_.read_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.attachment_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::Attachment, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _impl_.attachment_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _impl_.reply_to_message_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageRequest, _impl_.encryption_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SendMessageResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesRequest, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesRequest, _impl_.before_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesRequest, _impl_.after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesResponse, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetMessagesResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatRequest, _impl_.participant_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatRequest, _impl_.avatar_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::CreateChatResponse, _impl_.chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsResponse, _impl_.chats_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::GetChatsResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UpdateMessageStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UpdateMessageStatusRequest, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UpdateMessageStatusRequest, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UpdateMessageStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UpdateMessageStatusResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesRequest, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesResponse, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SearchMessagesResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentRequest, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentRequest, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::UploadAttachmentResponse, _impl_.attachment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SetTypingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SetTypingRequest, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SetTypingRequest, _impl_.is_typing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SetTypingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::SetTypingResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::WebSocketMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::WebSocketMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sonet::messaging::WebSocketMessage, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::messaging::Message)},
  { 21, 29, -1, sizeof(::sonet::messaging::Chat_SettingsEntry_DoNotUse)},
  { 31, -1, -1, sizeof(::sonet::messaging::Chat)},
  { 51, -1, -1, sizeof(::sonet::messaging::TypingIndicator)},
  { 61, -1, -1, sizeof(::sonet::messaging::ReadReceipt)},
  { 70, 78, -1, sizeof(::sonet::messaging::Attachment_MetadataEntry_DoNotUse)},
  { 80, -1, -1, sizeof(::sonet::messaging::Attachment)},
  { 93, -1, -1, sizeof(::sonet::messaging::SendMessageRequest)},
  { 105, -1, -1, sizeof(::sonet::messaging::SendMessageResponse)},
  { 113, -1, -1, sizeof(::sonet::messaging::GetMessagesRequest)},
  { 123, -1, -1, sizeof(::sonet::messaging::GetMessagesResponse)},
  { 132, -1, -1, sizeof(::sonet::messaging::CreateChatRequest)},
  { 143, -1, -1, sizeof(::sonet::messaging::CreateChatResponse)},
  { 151, -1, -1, sizeof(::sonet::messaging::GetChatsRequest)},
  { 160, -1, -1, sizeof(::sonet::messaging::GetChatsResponse)},
  { 169, -1, -1, sizeof(::sonet::messaging::UpdateMessageStatusRequest)},
  { 177, -1, -1, sizeof(::sonet::messaging::UpdateMessageStatusResponse)},
  { 184, -1, -1, sizeof(::sonet::messaging::SearchMessagesRequest)},
  { 195, -1, -1, sizeof(::sonet::messaging::SearchMessagesResponse)},
  { 204, -1, -1, sizeof(::sonet::messaging::UploadAttachmentRequest)},
  { 213, -1, -1, sizeof(::sonet::messaging::UploadAttachmentResponse)},
  { 221, -1, -1, sizeof(::sonet::messaging::SetTypingRequest)},
  { 229, -1, -1, sizeof(::sonet::messaging::SetTypingResponse)},
  { 236, -1, -1, sizeof(::sonet::messaging::WebSocketMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::messaging::_Message_default_instance_._instance,
  &::sonet::messaging::_Chat_SettingsEntry_DoNotUse_default_instance_._instance,
  &::sonet::messaging::_Chat_default_instance_._instance,
  &::sonet::messaging::_TypingIndicator_default_instance_._instance,
  &::sonet::messaging::_ReadReceipt_default_instance_._instance,
  &::sonet::messaging::_Attachment_MetadataEntry_DoNotUse_default_instance_._instance,
  &::sonet::messaging::_Attachment_default_instance_._instance,
  &::sonet::messaging::_SendMessageRequest_default_instance_._instance,
  &::sonet::messaging::_SendMessageResponse_default_instance_._instance,
  &::sonet::messaging::_GetMessagesRequest_default_instance_._instance,
  &::sonet::messaging::_GetMessagesResponse_default_instance_._instance,
  &::sonet::messaging::_CreateChatRequest_default_instance_._instance,
  &::sonet::messaging::_CreateChatResponse_default_instance_._instance,
  &::sonet::messaging::_GetChatsRequest_default_instance_._instance,
  &::sonet::messaging::_GetChatsResponse_default_instance_._instance,
  &::sonet::messaging::_UpdateMessageStatusRequest_default_instance_._instance,
  &::sonet::messaging::_UpdateMessageStatusResponse_default_instance_._instance,
  &::sonet::messaging::_SearchMessagesRequest_default_instance_._instance,
  &::sonet::messaging::_SearchMessagesResponse_default_instance_._instance,
  &::sonet::messaging::_UploadAttachmentRequest_default_instance_._instance,
  &::sonet::messaging::_UploadAttachmentResponse_default_instance_._instance,
  &::sonet::messaging::_SetTypingRequest_default_instance_._instance,
  &::sonet::messaging::_SetTypingResponse_default_instance_._instance,
  &::sonet::messaging::_WebSocketMessage_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fmessaging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030services/messaging.proto\022\017sonet.messag"
  "ing\032\023common/common.proto\032\026common/timesta"
  "mp.proto\032\027common/pagination.proto\"\366\003\n\007Me"
  "ssage\022\022\n\nmessage_id\030\001 \001(\t\022\017\n\007chat_id\030\002 \001"
  "(\t\022\021\n\tsender_id\030\003 \001(\t\022\017\n\007content\030\004 \001(\t\022*"
  "\n\004type\030\005 \001(\0162\034.sonet.messaging.MessageTy"
  "pe\022.\n\006status\030\006 \001(\0162\036.sonet.messaging.Mes"
  "sageStatus\0223\n\nencryption\030\007 \001(\0162\037.sonet.m"
  "essaging.EncryptionType\022\031\n\021encrypted_con"
  "tent\030\010 \001(\t\022\023\n\013attachments\030\t \003(\t\022\033\n\023reply"
  "_to_message_id\030\n \001(\t\022\021\n\tis_edited\030\013 \001(\010\022"
  "+\n\ncreated_at\030\014 \001(\0132\027.sonet.common.Times"
  "tamp\022+\n\nupdated_at\030\r \001(\0132\027.sonet.common."
  "Timestamp\022-\n\014delivered_at\030\016 \001(\0132\027.sonet."
  "common.Timestamp\022(\n\007read_at\030\017 \001(\0132\027.sone"
  "t.common.Timestamp\"\326\003\n\004Chat\022\017\n\007chat_id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022"
  "\'\n\004type\030\004 \001(\0162\031.sonet.messaging.ChatType"
  "\022\022\n\ncreator_id\030\005 \001(\t\022\027\n\017participant_ids\030"
  "\006 \003(\t\022\027\n\017last_message_id\030\007 \001(\t\022.\n\rlast_a"
  "ctivity\030\010 \001(\0132\027.sonet.common.Timestamp\022\023"
  "\n\013is_archived\030\t \001(\010\022\020\n\010is_muted\030\n \001(\010\022\022\n"
  "\navatar_url\030\013 \001(\t\0225\n\010settings\030\014 \003(\0132#.so"
  "net.messaging.Chat.SettingsEntry\022+\n\ncrea"
  "ted_at\030\r \001(\0132\027.sonet.common.Timestamp\022+\n"
  "\nupdated_at\030\016 \001(\0132\027.sonet.common.Timesta"
  "mp\032/\n\rSettingsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\"r\n\017TypingIndicator\022\017\n\007chat_i"
  "d\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\021\n\tis_typing\030\003 "
  "\001(\010\022*\n\ttimestamp\030\004 \001(\0132\027.sonet.common.Ti"
  "mestamp\"\\\n\013ReadReceipt\022\022\n\nmessage_id\030\001 \001"
  "(\t\022\017\n\007user_id\030\002 \001(\t\022(\n\007read_at\030\003 \001(\0132\027.s"
  "onet.common.Timestamp\"\353\001\n\nAttachment\022\025\n\r"
  "attachment_id\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t\022\024\n"
  "\014content_type\030\003 \001(\t\022\014\n\004size\030\004 \001(\003\022\013\n\003url"
  "\030\005 \001(\t\022\025\n\rthumbnail_url\030\006 \001(\t\022;\n\010metadat"
  "a\030\007 \003(\0132).sonet.messaging.Attachment.Met"
  "adataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"\314\001\n\022SendMessageReque"
  "st\022\017\n\007chat_id\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022*\n\004"
  "type\030\003 \001(\0162\034.sonet.messaging.MessageType"
  "\022\026\n\016attachment_ids\030\004 \003(\t\022\033\n\023reply_to_mes"
  "sage_id\030\005 \001(\t\0223\n\nencryption\030\006 \001(\0162\037.sone"
  "t.messaging.EncryptionType\"f\n\023SendMessag"
  "eResponse\022$\n\006status\030\001 \001(\0132\024.sonet.common"
  ".Status\022)\n\007message\030\002 \001(\0132\030.sonet.messagi"
  "ng.Message\"\253\001\n\022GetMessagesRequest\022\017\n\007cha"
  "t_id\030\001 \001(\t\0223\n\npagination\030\002 \001(\0132\037.sonet.c"
  "ommon.PaginationRequest\022\'\n\006before\030\003 \001(\0132"
  "\027.sonet.common.Timestamp\022&\n\005after\030\004 \001(\0132"
  "\027.sonet.common.Timestamp\"\235\001\n\023GetMessages"
  "Response\022$\n\006status\030\001 \001(\0132\024.sonet.common."
  "Status\022*\n\010messages\030\002 \003(\0132\030.sonet.messagi"
  "ng.Message\0224\n\npagination\030\003 \001(\0132 .sonet.c"
  "ommon.PaginationResponse\"\214\001\n\021CreateChatR"
  "equest\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001("
  "\t\022\'\n\004type\030\003 \001(\0162\031.sonet.messaging.ChatTy"
  "pe\022\027\n\017participant_ids\030\004 \003(\t\022\022\n\navatar_ur"
  "l\030\005 \001(\t\"_\n\022CreateChatResponse\022$\n\006status\030"
  "\001 \001(\0132\024.sonet.common.Status\022#\n\004chat\030\002 \001("
  "\0132\025.sonet.messaging.Chat\"\200\001\n\017GetChatsReq"
  "uest\022\017\n\007user_id\030\001 \001(\t\022\'\n\004type\030\002 \001(\0162\031.so"
  "net.messaging.ChatType\0223\n\npagination\030\003 \001"
  "(\0132\037.sonet.common.PaginationRequest\"\224\001\n\020"
  "GetChatsResponse\022$\n\006status\030\001 \001(\0132\024.sonet"
  ".common.Status\022$\n\005chats\030\002 \003(\0132\025.sonet.me"
  "ssaging.Chat\0224\n\npagination\030\003 \001(\0132 .sonet"
  ".common.PaginationResponse\"`\n\032UpdateMess"
  "ageStatusRequest\022\022\n\nmessage_id\030\001 \001(\t\022.\n\006"
  "status\030\002 \001(\0162\036.sonet.messaging.MessageSt"
  "atus\"C\n\033UpdateMessageStatusResponse\022$\n\006s"
  "tatus\030\001 \001(\0132\024.sonet.common.Status\"\251\001\n\025Se"
  "archMessagesRequest\022\r\n\005query\030\001 \001(\t\022\017\n\007ch"
  "at_id\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022*\n\004type\030\004 \001"
  "(\0162\034.sonet.messaging.MessageType\0223\n\npagi"
  "nation\030\005 \001(\0132\037.sonet.common.PaginationRe"
  "quest\"\240\001\n\026SearchMessagesResponse\022$\n\006stat"
  "us\030\001 \001(\0132\024.sonet.common.Status\022*\n\010messag"
  "es\030\002 \003(\0132\030.sonet.messaging.Message\0224\n\npa"
  "gination\030\003 \001(\0132 .sonet.common.Pagination"
  "Response\"O\n\027UploadAttachmentRequest\022\020\n\010f"
  "ilename\030\001 \001(\t\022\024\n\014content_type\030\002 \001(\t\022\014\n\004d"
  "ata\030\003 \001(\014\"q\n\030UploadAttachmentResponse\022$\n"
  "\006status\030\001 \001(\0132\024.sonet.common.Status\022/\n\na"
  "ttachment\030\002 \001(\0132\033.sonet.messaging.Attach"
  "ment\"6\n\020SetTypingRequest\022\017\n\007chat_id\030\001 \001("
  "\t\022\021\n\tis_typing\030\002 \001(\010\"9\n\021SetTypingRespons"
  "e\022$\n\006status\030\001 \001(\0132\024.sonet.common.Status\""
  "\371\001\n\020WebSocketMessage\022/\n\013new_message\030\001 \001("
  "\0132\030.sonet.messaging.MessageH\000\0222\n\006typing\030"
  "\002 \001(\0132 .sonet.messaging.TypingIndicatorH"
  "\000\0224\n\014read_receipt\030\003 \001(\0132\034.sonet.messagin"
  "g.ReadReceiptH\000\022\?\n\025message_status_update"
  "\030\004 \001(\0162\036.sonet.messaging.MessageStatusH\000"
  "B\t\n\007payload*\325\001\n\013MessageType\022\034\n\030MESSAGE_T"
  "YPE_UNSPECIFIED\020\000\022\025\n\021MESSAGE_TYPE_TEXT\020\001"
  "\022\026\n\022MESSAGE_TYPE_IMAGE\020\002\022\026\n\022MESSAGE_TYPE"
  "_VIDEO\020\003\022\026\n\022MESSAGE_TYPE_AUDIO\020\004\022\025\n\021MESS"
  "AGE_TYPE_FILE\020\005\022\031\n\025MESSAGE_TYPE_LOCATION"
  "\020\006\022\027\n\023MESSAGE_TYPE_SYSTEM\020\007*\232\001\n\rMessageS"
  "tatus\022\036\n\032MESSAGE_STATUS_UNSPECIFIED\020\000\022\027\n"
  "\023MESSAGE_STATUS_SENT\020\001\022\034\n\030MESSAGE_STATUS"
  "_DELIVERED\020\002\022\027\n\023MESSAGE_STATUS_READ\020\003\022\031\n"
  "\025MESSAGE_STATUS_FAILED\020\004*g\n\010ChatType\022\031\n\025"
  "CHAT_TYPE_UNSPECIFIED\020\000\022\024\n\020CHAT_TYPE_DIR"
  "ECT\020\001\022\023\n\017CHAT_TYPE_GROUP\020\002\022\025\n\021CHAT_TYPE_"
  "CHANNEL\020\003*\200\001\n\016EncryptionType\022\037\n\033ENCRYPTI"
  "ON_TYPE_UNSPECIFIED\020\000\022\030\n\024ENCRYPTION_TYPE"
  "_NONE\020\001\022\032\n\026ENCRYPTION_TYPE_AES256\020\002\022\027\n\023E"
  "NCRYPTION_TYPE_E2E\020\0032\334\006\n\020MessagingServic"
  "e\022X\n\013SendMessage\022#.sonet.messaging.SendM"
  "essageRequest\032$.sonet.messaging.SendMess"
  "ageResponse\022X\n\013GetMessages\022#.sonet.messa"
  "ging.GetMessagesRequest\032$.sonet.messagin"
  "g.GetMessagesResponse\022p\n\023UpdateMessageSt"
  "atus\022+.sonet.messaging.UpdateMessageStat"
  "usRequest\032,.sonet.messaging.UpdateMessag"
  "eStatusResponse\022a\n\016SearchMessages\022&.sone"
  "t.messaging.SearchMessagesRequest\032\'.sone"
  "t.messaging.SearchMessagesResponse\022U\n\nCr"
  "eateChat\022\".sonet.messaging.CreateChatReq"
  "uest\032#.sonet.messaging.CreateChatRespons"
  "e\022O\n\010GetChats\022 .sonet.messaging.GetChats"
  "Request\032!.sonet.messaging.GetChatsRespon"
  "se\022g\n\020UploadAttachment\022(.sonet.messaging"
  ".UploadAttachmentRequest\032).sonet.messagi"
  "ng.UploadAttachmentResponse\022R\n\tSetTyping"
  "\022!.sonet.messaging.SetTypingRequest\032\".so"
  "net.messaging.SetTypingResponse\022Z\n\016Strea"
  "mMessages\022!.sonet.messaging.WebSocketMes"
  "sage\032!.sonet.messaging.WebSocketMessage("
  "\0010\001B\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2fmessaging_2eproto_deps[3] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_common_2fpagination_2eproto,
  &::descriptor_table_common_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2fmessaging_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fmessaging_2eproto = {
    false, false, 5256, descriptor_table_protodef_services_2fmessaging_2eproto,
    "services/messaging.proto",
    &descriptor_table_services_2fmessaging_2eproto_once, descriptor_table_services_2fmessaging_2eproto_deps, 3, 24,
    schemas, file_default_instances, TableStruct_services_2fmessaging_2eproto::offsets,
    file_level_metadata_services_2fmessaging_2eproto, file_level_enum_descriptors_services_2fmessaging_2eproto,
    file_level_service_descriptors_services_2fmessaging_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fmessaging_2eproto_getter() {
  return &descriptor_table_services_2fmessaging_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fmessaging_2eproto(&descriptor_table_services_2fmessaging_2eproto);
namespace sonet {
namespace messaging {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fmessaging_2eproto);
  return file_level_enum_descriptors_services_2fmessaging_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fmessaging_2eproto);
  return file_level_enum_descriptors_services_2fmessaging_2eproto[1];
}
bool MessageStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fmessaging_2eproto);
  return file_level_enum_descriptors_services_2fmessaging_2eproto[2];
}
bool ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fmessaging_2eproto);
  return file_level_enum_descriptors_services_2fmessaging_2eproto[3];
}
bool EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Message::_Internal {
 public:
  static const ::sonet::common::Timestamp& created_at(const Message* msg);
  static const ::sonet::common::Timestamp& updated_at(const Message* msg);
  static const ::sonet::common::Timestamp& delivered_at(const Message* msg);
  static const ::sonet::common::Timestamp& read_at(const Message* msg);
};

const ::sonet::common::Timestamp&
Message::_Internal::created_at(const Message* msg) {
  return *msg->_impl_.created_at_;
}
const ::sonet::common::Timestamp&
Message::_Internal::updated_at(const Message* msg) {
  return *msg->_impl_.updated_at_;
}
const ::sonet::common::Timestamp&
Message::_Internal::delivered_at(const Message* msg) {
  return *msg->_impl_.delivered_at_;
}
const ::sonet::common::Timestamp&
Message::_Internal::read_at(const Message* msg) {
  return *msg->_impl_.read_at_;
}
void Message::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Message::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void Message::clear_delivered_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.delivered_at_ != nullptr) {
    delete _impl_.delivered_at_;
  }
  _impl_.delivered_at_ = nullptr;
}
void Message::clear_read_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.read_at_ != nullptr) {
    delete _impl_.read_at_;
  }
  _impl_.read_at_ = nullptr;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.encrypted_content_){}
    , decltype(_impl_.reply_to_message_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.delivered_at_){nullptr}
    , decltype(_impl_.read_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.encryption_){}
    , decltype(_impl_.is_edited_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encrypted_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_content().empty()) {
    _this->_impl_.encrypted_content_.Set(from._internal_encrypted_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_to_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_to_message_id().empty()) {
    _this->_impl_.reply_to_message_id_.Set(from._internal_reply_to_message_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::sonet::common::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_delivered_at()) {
    _this->_impl_.delivered_at_ = new ::sonet::common::Timestamp(*from._impl_.delivered_at_);
  }
  if (from._internal_has_read_at()) {
    _this->_impl_.read_at_ = new ::sonet::common::Timestamp(*from._impl_.read_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_edited_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_edited_));
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){arena}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.encrypted_content_){}
    , decltype(_impl_.reply_to_message_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.delivered_at_){nullptr}
    , decltype(_impl_.read_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.encryption_){0}
    , decltype(_impl_.is_edited_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_to_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:sonet.messaging.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.message_id_.Destroy();
  _impl_.chat_id_.Destroy();
  _impl_.sender_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.encrypted_content_.Destroy();
  _impl_.reply_to_message_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.delivered_at_;
  if (this != internal_default_instance()) delete _impl_.read_at_;
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _impl_.message_id_.ClearToEmpty();
  _impl_.chat_id_.ClearToEmpty();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.encrypted_content_.ClearToEmpty();
  _impl_.reply_to_message_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delivered_at_ != nullptr) {
    delete _impl_.delivered_at_;
  }
  _impl_.delivered_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.read_at_ != nullptr) {
    delete _impl_.read_at_;
  }
  _impl_.read_at_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_edited_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_edited_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // string sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.sender_id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.content"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.MessageType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::messaging::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.MessageStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::sonet::messaging::MessageStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.EncryptionType encryption = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::sonet::messaging::EncryptionType>(val));
        } else
          goto handle_unusual;
        continue;
      // string encrypted_content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_encrypted_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.encrypted_content"));
        } else
          goto handle_unusual;
        continue;
      // repeated string attachments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attachments();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.attachments"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string reply_to_message_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_reply_to_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Message.reply_to_message_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_edited = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_edited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp updated_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp delivered_at = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_delivered_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp read_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string chat_id = 2;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.chat_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_id(), target);
  }

  // string sender_id = 3;
  if (!this->_internal_sender_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.sender_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_id(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  // .sonet.messaging.MessageType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .sonet.messaging.MessageStatus status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // .sonet.messaging.EncryptionType encryption = 7;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_encryption(), target);
  }

  // string encrypted_content = 8;
  if (!this->_internal_encrypted_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_content().data(), static_cast<int>(this->_internal_encrypted_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.encrypted_content");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_encrypted_content(), target);
  }

  // repeated string attachments = 9;
  for (int i = 0, n = this->_internal_attachments_size(); i < n; i++) {
    const auto& s = this->_internal_attachments(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.attachments");
    target = stream->WriteString(9, s, target);
  }

  // string reply_to_message_id = 10;
  if (!this->_internal_reply_to_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_message_id().data(), static_cast<int>(this->_internal_reply_to_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Message.reply_to_message_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_reply_to_message_id(), target);
  }

  // bool is_edited = 11;
  if (this->_internal_is_edited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_edited(), target);
  }

  // .sonet.common.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp updated_at = 13;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp delivered_at = 14;
  if (this->_internal_has_delivered_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::delivered_at(this),
        _Internal::delivered_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp read_at = 15;
  if (this->_internal_has_read_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::read_at(this),
        _Internal::read_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attachments = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attachments_.size());
  for (int i = 0, n = _impl_.attachments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attachments_.Get(i));
  }

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string chat_id = 2;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // string sender_id = 3;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string encrypted_content = 8;
  if (!this->_internal_encrypted_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_content());
  }

  // string reply_to_message_id = 10;
  if (!this->_internal_reply_to_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_message_id());
  }

  // .sonet.common.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.common.Timestamp updated_at = 13;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .sonet.common.Timestamp delivered_at = 14;
  if (this->_internal_has_delivered_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delivered_at_);
  }

  // .sonet.common.Timestamp read_at = 15;
  if (this->_internal_has_read_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.read_at_);
  }

  // .sonet.messaging.MessageType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .sonet.messaging.MessageStatus status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .sonet.messaging.EncryptionType encryption = 7;
  if (this->_internal_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  // bool is_edited = 11;
  if (this->_internal_is_edited() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_encrypted_content().empty()) {
    _this->_internal_set_encrypted_content(from._internal_encrypted_content());
  }
  if (!from._internal_reply_to_message_id().empty()) {
    _this->_internal_set_reply_to_message_id(from._internal_reply_to_message_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_delivered_at()) {
    _this->_internal_mutable_delivered_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_delivered_at());
  }
  if (from._internal_has_read_at()) {
    _this->_internal_mutable_read_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_read_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  if (from._internal_is_edited() != 0) {
    _this->_internal_set_is_edited(from._internal_is_edited());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_id_, lhs_arena,
      &other->_impl_.sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_content_, lhs_arena,
      &other->_impl_.encrypted_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_message_id_, lhs_arena,
      &other->_impl_.reply_to_message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.is_edited_)
      + sizeof(Message::_impl_.is_edited_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[0]);
}

// ===================================================================

Chat_SettingsEntry_DoNotUse::Chat_SettingsEntry_DoNotUse() {}
Chat_SettingsEntry_DoNotUse::Chat_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Chat_SettingsEntry_DoNotUse::MergeFrom(const Chat_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Chat_SettingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[1]);
}

// ===================================================================

class Chat::_Internal {
 public:
  static const ::sonet::common::Timestamp& last_activity(const Chat* msg);
  static const ::sonet::common::Timestamp& created_at(const Chat* msg);
  static const ::sonet::common::Timestamp& updated_at(const Chat* msg);
};

const ::sonet::common::Timestamp&
Chat::_Internal::last_activity(const Chat* msg) {
  return *msg->_impl_.last_activity_;
}
const ::sonet::common::Timestamp&
Chat::_Internal::created_at(const Chat* msg) {
  return *msg->_impl_.created_at_;
}
const ::sonet::common::Timestamp&
Chat::_Internal::updated_at(const Chat* msg) {
  return *msg->_impl_.updated_at_;
}
void Chat::clear_last_activity() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_activity_ != nullptr) {
    delete _impl_.last_activity_;
  }
  _impl_.last_activity_ = nullptr;
}
void Chat::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Chat::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
Chat::Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Chat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){from._impl_.participant_ids_}
    , /*decltype(_impl_.settings_)*/{}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.creator_id_){}
    , decltype(_impl_.last_message_id_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.last_activity_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_archived_){}
    , decltype(_impl_.is_muted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_id().empty()) {
    _this->_impl_.creator_id_.Set(from._internal_creator_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_message_id().empty()) {
    _this->_impl_.last_message_id_.Set(from._internal_last_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar_url().empty()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_activity()) {
    _this->_impl_.last_activity_ = new ::sonet::common::Timestamp(*from._impl_.last_activity_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::sonet::common::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_muted_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_muted_));
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.Chat)
}

inline void Chat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){arena}
    , /*decltype(_impl_.settings_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.creator_id_){}
    , decltype(_impl_.last_message_id_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.last_activity_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_archived_){false}
    , decltype(_impl_.is_muted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:sonet.messaging.Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_ids_.~RepeatedPtrField();
  _impl_.settings_.Destruct();
  _impl_.settings_.~MapField();
  _impl_.chat_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.creator_id_.Destroy();
  _impl_.last_message_id_.Destroy();
  _impl_.avatar_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_activity_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void Chat::ArenaDtor(void* object) {
  Chat* _this = reinterpret_cast< Chat* >(object);
  _this->_impl_.settings_.Destruct();
}
void Chat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_ids_.Clear();
  _impl_.settings_.Clear();
  _impl_.chat_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.creator_id_.ClearToEmpty();
  _impl_.last_message_id_.ClearToEmpty();
  _impl_.avatar_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_activity_ != nullptr) {
    delete _impl_.last_activity_;
  }
  _impl_.last_activity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_muted_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_muted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.description"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.ChatType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::messaging::ChatType>(val));
        } else
          goto handle_unusual;
        continue;
      // string creator_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_creator_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.creator_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string participant_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_participant_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.participant_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string last_message_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_last_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.last_message_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_activity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_archived = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_archived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_muted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string avatar_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Chat.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> settings = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp updated_at = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.chat_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .sonet.messaging.ChatType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string creator_id = 5;
  if (!this->_internal_creator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.creator_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_creator_id(), target);
  }

  // repeated string participant_ids = 6;
  for (int i = 0, n = this->_internal_participant_ids_size(); i < n; i++) {
    const auto& s = this->_internal_participant_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.participant_ids");
    target = stream->WriteString(6, s, target);
  }

  // string last_message_id = 7;
  if (!this->_internal_last_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_message_id().data(), static_cast<int>(this->_internal_last_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.last_message_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_last_message_id(), target);
  }

  // .sonet.common.Timestamp last_activity = 8;
  if (this->_internal_has_last_activity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::last_activity(this),
        _Internal::last_activity(this).GetCachedSize(), target, stream);
  }

  // bool is_archived = 9;
  if (this->_internal_is_archived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_archived(), target);
  }

  // bool is_muted = 10;
  if (this->_internal_is_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_muted(), target);
  }

  // string avatar_url = 11;
  if (!this->_internal_avatar_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Chat.avatar_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_avatar_url(), target);
  }

  // map<string, string> settings = 12;
  if (!this->_internal_settings().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Chat_SettingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_settings();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.messaging.Chat.SettingsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.messaging.Chat.SettingsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .sonet.common.Timestamp created_at = 13;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp updated_at = 14;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string participant_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.participant_ids_.size());
  for (int i = 0, n = _impl_.participant_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.participant_ids_.Get(i));
  }

  // map<string, string> settings = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_settings().begin();
      it != this->_internal_settings().end(); ++it) {
    total_size += Chat_SettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string creator_id = 5;
  if (!this->_internal_creator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_id());
  }

  // string last_message_id = 7;
  if (!this->_internal_last_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_message_id());
  }

  // string avatar_url = 11;
  if (!this->_internal_avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // .sonet.common.Timestamp last_activity = 8;
  if (this->_internal_has_last_activity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_activity_);
  }

  // .sonet.common.Timestamp created_at = 13;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.common.Timestamp updated_at = 14;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .sonet.messaging.ChatType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_archived = 9;
  if (this->_internal_is_archived() != 0) {
    total_size += 1 + 1;
  }

  // bool is_muted = 10;
  if (this->_internal_is_muted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat::GetClassData() const { return &_class_data_; }


void Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chat*>(&to_msg);
  auto& from = static_cast<const Chat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.Chat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_ids_.MergeFrom(from._impl_.participant_ids_);
  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_creator_id().empty()) {
    _this->_internal_set_creator_id(from._internal_creator_id());
  }
  if (!from._internal_last_message_id().empty()) {
    _this->_internal_set_last_message_id(from._internal_last_message_id());
  }
  if (!from._internal_avatar_url().empty()) {
    _this->_internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from._internal_has_last_activity()) {
    _this->_internal_mutable_last_activity()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_activity());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_archived() != 0) {
    _this->_internal_set_is_archived(from._internal_is_archived());
  }
  if (from._internal_is_muted() != 0) {
    _this->_internal_set_is_muted(from._internal_is_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_ids_.InternalSwap(&other->_impl_.participant_ids_);
  _impl_.settings_.InternalSwap(&other->_impl_.settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_id_, lhs_arena,
      &other->_impl_.creator_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_message_id_, lhs_arena,
      &other->_impl_.last_message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chat, _impl_.is_muted_)
      + sizeof(Chat::_impl_.is_muted_)
      - PROTOBUF_FIELD_OFFSET(Chat, _impl_.last_activity_)>(
          reinterpret_cast<char*>(&_impl_.last_activity_),
          reinterpret_cast<char*>(&other->_impl_.last_activity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[2]);
}

// ===================================================================

class TypingIndicator::_Internal {
 public:
  static const ::sonet::common::Timestamp& timestamp(const TypingIndicator* msg);
};

const ::sonet::common::Timestamp&
TypingIndicator::_Internal::timestamp(const TypingIndicator* msg) {
  return *msg->_impl_.timestamp_;
}
void TypingIndicator::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
TypingIndicator::TypingIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.TypingIndicator)
}
TypingIndicator::TypingIndicator(const TypingIndicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypingIndicator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.is_typing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::sonet::common::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.is_typing_ = from._impl_.is_typing_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.TypingIndicator)
}

inline void TypingIndicator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.is_typing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypingIndicator::~TypingIndicator() {
  // @@protoc_insertion_point(destructor:sonet.messaging.TypingIndicator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypingIndicator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_id_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void TypingIndicator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypingIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.TypingIndicator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.is_typing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypingIndicator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.TypingIndicator.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.TypingIndicator.user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_typing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_typing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypingIndicator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.TypingIndicator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.TypingIndicator.chat_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.TypingIndicator.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // bool is_typing = 3;
  if (this->_internal_is_typing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_typing(), target);
  }

  // .sonet.common.Timestamp timestamp = 4;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.TypingIndicator)
  return target;
}

size_t TypingIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.TypingIndicator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.Timestamp timestamp = 4;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // bool is_typing = 3;
  if (this->_internal_is_typing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypingIndicator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypingIndicator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypingIndicator::GetClassData() const { return &_class_data_; }


void TypingIndicator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypingIndicator*>(&to_msg);
  auto& from = static_cast<const TypingIndicator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.TypingIndicator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::sonet::common::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_is_typing() != 0) {
    _this->_internal_set_is_typing(from._internal_is_typing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypingIndicator::CopyFrom(const TypingIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.TypingIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypingIndicator::IsInitialized() const {
  return true;
}

void TypingIndicator::InternalSwap(TypingIndicator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypingIndicator, _impl_.is_typing_)
      + sizeof(TypingIndicator::_impl_.is_typing_)
      - PROTOBUF_FIELD_OFFSET(TypingIndicator, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypingIndicator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[3]);
}

// ===================================================================

class ReadReceipt::_Internal {
 public:
  static const ::sonet::common::Timestamp& read_at(const ReadReceipt* msg);
};

const ::sonet::common::Timestamp&
ReadReceipt::_Internal::read_at(const ReadReceipt* msg) {
  return *msg->_impl_.read_at_;
}
void ReadReceipt::clear_read_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.read_at_ != nullptr) {
    delete _impl_.read_at_;
  }
  _impl_.read_at_ = nullptr;
}
ReadReceipt::ReadReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.ReadReceipt)
}
ReadReceipt::ReadReceipt(const ReadReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.read_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_read_at()) {
    _this->_impl_.read_at_ = new ::sonet::common::Timestamp(*from._impl_.read_at_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.ReadReceipt)
}

inline void ReadReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.read_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadReceipt::~ReadReceipt() {
  // @@protoc_insertion_point(destructor:sonet.messaging.ReadReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_id_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.read_at_;
}

void ReadReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.ReadReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.read_at_ != nullptr) {
    delete _impl_.read_at_;
  }
  _impl_.read_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.ReadReceipt.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.ReadReceipt.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp read_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.ReadReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.ReadReceipt.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.ReadReceipt.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // .sonet.common.Timestamp read_at = 3;
  if (this->_internal_has_read_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::read_at(this),
        _Internal::read_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.ReadReceipt)
  return target;
}

size_t ReadReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.ReadReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.Timestamp read_at = 3;
  if (this->_internal_has_read_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.read_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadReceipt::GetClassData() const { return &_class_data_; }


void ReadReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadReceipt*>(&to_msg);
  auto& from = static_cast<const ReadReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.ReadReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_read_at()) {
    _this->_internal_mutable_read_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_read_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadReceipt::CopyFrom(const ReadReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.ReadReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReceipt::IsInitialized() const {
  return true;
}

void ReadReceipt::InternalSwap(ReadReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.read_at_, other->_impl_.read_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[4]);
}

// ===================================================================

Attachment_MetadataEntry_DoNotUse::Attachment_MetadataEntry_DoNotUse() {}
Attachment_MetadataEntry_DoNotUse::Attachment_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Attachment_MetadataEntry_DoNotUse::MergeFrom(const Attachment_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Attachment_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[5]);
}

// ===================================================================

class Attachment::_Internal {
 public:
};

Attachment::Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Attachment::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.Attachment)
}
Attachment::Attachment(const Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.attachment_id_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.attachment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attachment_id().empty()) {
    _this->_impl_.attachment_id_.Set(from._internal_attachment_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.Attachment)
}

inline void Attachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.attachment_id_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attachment_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachment_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Attachment::~Attachment() {
  // @@protoc_insertion_point(destructor:sonet.messaging.Attachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.attachment_id_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.content_type_.Destroy();
  _impl_.url_.Destroy();
  _impl_.thumbnail_url_.Destroy();
}

void Attachment::ArenaDtor(void* object) {
  Attachment* _this = reinterpret_cast< Attachment* >(object);
  _this->_impl_.metadata_.Destruct();
}
void Attachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.Attachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.attachment_id_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string attachment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_attachment_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Attachment.attachment_id"));
        } else
          goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Attachment.filename"));
        } else
          goto handle_unusual;
        continue;
      // string content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Attachment.content_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Attachment.url"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.Attachment.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.Attachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string attachment_id = 1;
  if (!this->_internal_attachment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachment_id().data(), static_cast<int>(this->_internal_attachment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Attachment.attachment_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_attachment_id(), target);
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Attachment.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // string content_type = 3;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Attachment.content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content_type(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Attachment.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // string thumbnail_url = 6;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.Attachment.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_thumbnail_url(), target);
  }

  // map<string, string> metadata = 7;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Attachment_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.messaging.Attachment.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.messaging.Attachment.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.Attachment)
  return target;
}

size_t Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.Attachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Attachment_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string attachment_id = 1;
  if (!this->_internal_attachment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachment_id());
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string content_type = 3;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string thumbnail_url = 6;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attachment::GetClassData() const { return &_class_data_; }


void Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attachment*>(&to_msg);
  auto& from = static_cast<const Attachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.Attachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_attachment_id().empty()) {
    _this->_internal_set_attachment_id(from._internal_attachment_id());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attachment::CopyFrom(const Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attachment::IsInitialized() const {
  return true;
}

void Attachment::InternalSwap(Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachment_id_, lhs_arena,
      &other->_impl_.attachment_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[6]);
}

// ===================================================================

class SendMessageRequest::_Internal {
 public:
};

SendMessageRequest::SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.SendMessageRequest)
}
SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachment_ids_){from._impl_.attachment_ids_}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.reply_to_message_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.encryption_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_to_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_to_message_id().empty()) {
    _this->_impl_.reply_to_message_id_.Set(from._internal_reply_to_message_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encryption_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.encryption_));
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.SendMessageRequest)
}

inline void SendMessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachment_ids_){arena}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.reply_to_message_id_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.encryption_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_to_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.SendMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachment_ids_.~RepeatedPtrField();
  _impl_.chat_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.reply_to_message_id_.Destroy();
}

void SendMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.SendMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachment_ids_.Clear();
  _impl_.chat_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.reply_to_message_id_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encryption_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.encryption_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SendMessageRequest.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SendMessageRequest.content"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.MessageType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::messaging::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string attachment_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attachment_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SendMessageRequest.attachment_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string reply_to_message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reply_to_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SendMessageRequest.reply_to_message_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.EncryptionType encryption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::sonet::messaging::EncryptionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.SendMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SendMessageRequest.chat_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SendMessageRequest.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // .sonet.messaging.MessageType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated string attachment_ids = 4;
  for (int i = 0, n = this->_internal_attachment_ids_size(); i < n; i++) {
    const auto& s = this->_internal_attachment_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SendMessageRequest.attachment_ids");
    target = stream->WriteString(4, s, target);
  }

  // string reply_to_message_id = 5;
  if (!this->_internal_reply_to_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_message_id().data(), static_cast<int>(this->_internal_reply_to_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SendMessageRequest.reply_to_message_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reply_to_message_id(), target);
  }

  // .sonet.messaging.EncryptionType encryption = 6;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_encryption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.SendMessageRequest)
  return target;
}

size_t SendMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.SendMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attachment_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attachment_ids_.size());
  for (int i = 0, n = _impl_.attachment_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attachment_ids_.Get(i));
  }

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string reply_to_message_id = 5;
  if (!this->_internal_reply_to_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_message_id());
  }

  // .sonet.messaging.MessageType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .sonet.messaging.EncryptionType encryption = 6;
  if (this->_internal_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageRequest::GetClassData() const { return &_class_data_; }


void SendMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachment_ids_.MergeFrom(from._impl_.attachment_ids_);
  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_reply_to_message_id().empty()) {
    _this->_internal_set_reply_to_message_id(from._internal_reply_to_message_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  return true;
}

void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachment_ids_.InternalSwap(&other->_impl_.attachment_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_message_id_, lhs_arena,
      &other->_impl_.reply_to_message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageRequest, _impl_.encryption_)
      + sizeof(SendMessageRequest::_impl_.encryption_)
      - PROTOBUF_FIELD_OFFSET(SendMessageRequest, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[7]);
}

// ===================================================================

class SendMessageResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const SendMessageResponse* msg);
  static const ::sonet::messaging::Message& message(const SendMessageResponse* msg);
};

const ::sonet::common::Status&
SendMessageResponse::_Internal::status(const SendMessageResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::messaging::Message&
SendMessageResponse::_Internal::message(const SendMessageResponse* msg) {
  return *msg->_impl_.message_;
}
void SendMessageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SendMessageResponse::SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.SendMessageResponse)
}
SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::sonet::messaging::Message(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.SendMessageResponse)
}

inline void SendMessageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.SendMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.message_;
}

void SendMessageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.SendMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.SendMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.messaging.Message message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.SendMessageResponse)
  return target;
}

size_t SendMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.SendMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.messaging.Message message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageResponse::GetClassData() const { return &_class_data_; }


void SendMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageResponse*>(&to_msg);
  auto& from = static_cast<const SendMessageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::sonet::messaging::Message::MergeFrom(
        from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  return true;
}

void SendMessageResponse::InternalSwap(SendMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageResponse, _impl_.message_)
      + sizeof(SendMessageResponse::_impl_.message_)
      - PROTOBUF_FIELD_OFFSET(SendMessageResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[8]);
}

// ===================================================================

class GetMessagesRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const GetMessagesRequest* msg);
  static const ::sonet::common::Timestamp& before(const GetMessagesRequest* msg);
  static const ::sonet::common::Timestamp& after(const GetMessagesRequest* msg);
};

const ::sonet::common::PaginationRequest&
GetMessagesRequest::_Internal::pagination(const GetMessagesRequest* msg) {
  return *msg->_impl_.pagination_;
}
const ::sonet::common::Timestamp&
GetMessagesRequest::_Internal::before(const GetMessagesRequest* msg) {
  return *msg->_impl_.before_;
}
const ::sonet::common::Timestamp&
GetMessagesRequest::_Internal::after(const GetMessagesRequest* msg) {
  return *msg->_impl_.after_;
}
void GetMessagesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
void GetMessagesRequest::clear_before() {
  if (GetArenaForAllocation() == nullptr && _impl_.before_ != nullptr) {
    delete _impl_.before_;
  }
  _impl_.before_ = nullptr;
}
void GetMessagesRequest::clear_after() {
  if (GetArenaForAllocation() == nullptr && _impl_.after_ != nullptr) {
    delete _impl_.after_;
  }
  _impl_.after_ = nullptr;
}
GetMessagesRequest::GetMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.GetMessagesRequest)
}
GetMessagesRequest::GetMessagesRequest(const GetMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMessagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.before_){nullptr}
    , decltype(_impl_.after_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  if (from._internal_has_before()) {
    _this->_impl_.before_ = new ::sonet::common::Timestamp(*from._impl_.before_);
  }
  if (from._internal_has_after()) {
    _this->_impl_.after_ = new ::sonet::common::Timestamp(*from._impl_.after_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.GetMessagesRequest)
}

inline void GetMessagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.before_){nullptr}
    , decltype(_impl_.after_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMessagesRequest::~GetMessagesRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.GetMessagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (this != internal_default_instance()) delete _impl_.before_;
  if (this != internal_default_instance()) delete _impl_.after_;
}

void GetMessagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.GetMessagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.before_ != nullptr) {
    delete _impl_.before_;
  }
  _impl_.before_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.after_ != nullptr) {
    delete _impl_.after_;
  }
  _impl_.after_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.GetMessagesRequest.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp before = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_before(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_after(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMessagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.GetMessagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.GetMessagesRequest.chat_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat_id(), target);
  }

  // .sonet.common.PaginationRequest pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp before = 3;
  if (this->_internal_has_before()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::before(this),
        _Internal::before(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp after = 4;
  if (this->_internal_has_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::after(this),
        _Internal::after(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.GetMessagesRequest)
  return target;
}

size_t GetMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.GetMessagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // .sonet.common.PaginationRequest pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .sonet.common.Timestamp before = 3;
  if (this->_internal_has_before()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.before_);
  }

  // .sonet.common.Timestamp after = 4;
  if (this->_internal_has_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.after_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMessagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMessagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMessagesRequest::GetClassData() const { return &_class_data_; }


void GetMessagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMessagesRequest*>(&to_msg);
  auto& from = static_cast<const GetMessagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.GetMessagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_has_before()) {
    _this->_internal_mutable_before()->::sonet::common::Timestamp::MergeFrom(
        from._internal_before());
  }
  if (from._internal_has_after()) {
    _this->_internal_mutable_after()->::sonet::common::Timestamp::MergeFrom(
        from._internal_after());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMessagesRequest::CopyFrom(const GetMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.GetMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessagesRequest::IsInitialized() const {
  return true;
}

void GetMessagesRequest::InternalSwap(GetMessagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessagesRequest, _impl_.after_)
      + sizeof(GetMessagesRequest::_impl_.after_)
      - PROTOBUF_FIELD_OFFSET(GetMessagesRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[9]);
}

// ===================================================================

class GetMessagesResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const GetMessagesResponse* msg);
  static const ::sonet::common::PaginationResponse& pagination(const GetMessagesResponse* msg);
};

const ::sonet::common::Status&
GetMessagesResponse::_Internal::status(const GetMessagesResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::common::PaginationResponse&
GetMessagesResponse::_Internal::pagination(const GetMessagesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetMessagesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetMessagesResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetMessagesResponse::GetMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.GetMessagesResponse)
}
GetMessagesResponse::GetMessagesResponse(const GetMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMessagesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.GetMessagesResponse)
}

inline void GetMessagesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMessagesResponse::~GetMessagesResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.GetMessagesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMessagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetMessagesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.GetMessagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessagesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.messaging.Message messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMessagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.GetMessagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .sonet.messaging.Message messages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.GetMessagesResponse)
  return target;
}

size_t GetMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.GetMessagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.messaging.Message messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMessagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMessagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMessagesResponse::GetClassData() const { return &_class_data_; }


void GetMessagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMessagesResponse*>(&to_msg);
  auto& from = static_cast<const GetMessagesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.GetMessagesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMessagesResponse::CopyFrom(const GetMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.GetMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessagesResponse::IsInitialized() const {
  return true;
}

void GetMessagesResponse::InternalSwap(GetMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessagesResponse, _impl_.pagination_)
      + sizeof(GetMessagesResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(GetMessagesResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessagesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[10]);
}

// ===================================================================

class CreateChatRequest::_Internal {
 public:
};

CreateChatRequest::CreateChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.CreateChatRequest)
}
CreateChatRequest::CreateChatRequest(const CreateChatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){from._impl_.participant_ids_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar_url().empty()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.CreateChatRequest)
}

inline void CreateChatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.participant_ids_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateChatRequest::~CreateChatRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.CreateChatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_ids_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.avatar_url_.Destroy();
}

void CreateChatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.CreateChatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participant_ids_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.avatar_url_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.CreateChatRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.CreateChatRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.ChatType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::messaging::ChatType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string participant_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_participant_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.CreateChatRequest.participant_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string avatar_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.CreateChatRequest.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateChatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.CreateChatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.CreateChatRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.CreateChatRequest.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .sonet.messaging.ChatType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated string participant_ids = 4;
  for (int i = 0, n = this->_internal_participant_ids_size(); i < n; i++) {
    const auto& s = this->_internal_participant_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.CreateChatRequest.participant_ids");
    target = stream->WriteString(4, s, target);
  }

  // string avatar_url = 5;
  if (!this->_internal_avatar_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.CreateChatRequest.avatar_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.CreateChatRequest)
  return target;
}

size_t CreateChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.CreateChatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string participant_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.participant_ids_.size());
  for (int i = 0, n = _impl_.participant_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.participant_ids_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string avatar_url = 5;
  if (!this->_internal_avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // .sonet.messaging.ChatType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChatRequest::GetClassData() const { return &_class_data_; }


void CreateChatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChatRequest*>(&to_msg);
  auto& from = static_cast<const CreateChatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.CreateChatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.participant_ids_.MergeFrom(from._impl_.participant_ids_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_avatar_url().empty()) {
    _this->_internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChatRequest::CopyFrom(const CreateChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.CreateChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRequest::IsInitialized() const {
  return true;
}

void CreateChatRequest::InternalSwap(CreateChatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participant_ids_.InternalSwap(&other->_impl_.participant_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[11]);
}

// ===================================================================

class CreateChatResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const CreateChatResponse* msg);
  static const ::sonet::messaging::Chat& chat(const CreateChatResponse* msg);
};

const ::sonet::common::Status&
CreateChatResponse::_Internal::status(const CreateChatResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::messaging::Chat&
CreateChatResponse::_Internal::chat(const CreateChatResponse* msg) {
  return *msg->_impl_.chat_;
}
void CreateChatResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
CreateChatResponse::CreateChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.CreateChatResponse)
}
CreateChatResponse::CreateChatResponse(const CreateChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::sonet::messaging::Chat(*from._impl_.chat_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.CreateChatResponse)
}

inline void CreateChatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateChatResponse::~CreateChatResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.CreateChatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.chat_;
}

void CreateChatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.CreateChatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.Chat chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateChatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.CreateChatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.messaging.Chat chat = 2;
  if (this->_internal_has_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.CreateChatResponse)
  return target;
}

size_t CreateChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.CreateChatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.messaging.Chat chat = 2;
  if (this->_internal_has_chat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChatResponse::GetClassData() const { return &_class_data_; }


void CreateChatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChatResponse*>(&to_msg);
  auto& from = static_cast<const CreateChatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.CreateChatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_chat()) {
    _this->_internal_mutable_chat()->::sonet::messaging::Chat::MergeFrom(
        from._internal_chat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChatResponse::CopyFrom(const CreateChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.CreateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatResponse::IsInitialized() const {
  return true;
}

void CreateChatResponse::InternalSwap(CreateChatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateChatResponse, _impl_.chat_)
      + sizeof(CreateChatResponse::_impl_.chat_)
      - PROTOBUF_FIELD_OFFSET(CreateChatResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[12]);
}

// ===================================================================

class GetChatsRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const GetChatsRequest* msg);
};

const ::sonet::common::PaginationRequest&
GetChatsRequest::_Internal::pagination(const GetChatsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetChatsRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetChatsRequest::GetChatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.GetChatsRequest)
}
GetChatsRequest::GetChatsRequest(const GetChatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetChatsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.GetChatsRequest)
}

inline void GetChatsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChatsRequest::~GetChatsRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.GetChatsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetChatsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.GetChatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChatsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.GetChatsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.ChatType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::messaging::ChatType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.GetChatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.GetChatsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.messaging.ChatType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.GetChatsRequest)
  return target;
}

size_t GetChatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.GetChatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .sonet.messaging.ChatType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetChatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChatsRequest::GetClassData() const { return &_class_data_; }


void GetChatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetChatsRequest*>(&to_msg);
  auto& from = static_cast<const GetChatsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.GetChatsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatsRequest::CopyFrom(const GetChatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.GetChatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatsRequest::IsInitialized() const {
  return true;
}

void GetChatsRequest::InternalSwap(GetChatsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChatsRequest, _impl_.type_)
      + sizeof(GetChatsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetChatsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[13]);
}

// ===================================================================

class GetChatsResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const GetChatsResponse* msg);
  static const ::sonet::common::PaginationResponse& pagination(const GetChatsResponse* msg);
};

const ::sonet::common::Status&
GetChatsResponse::_Internal::status(const GetChatsResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::common::PaginationResponse&
GetChatsResponse::_Internal::pagination(const GetChatsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetChatsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void GetChatsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetChatsResponse::GetChatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.GetChatsResponse)
}
GetChatsResponse::GetChatsResponse(const GetChatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetChatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chats_){from._impl_.chats_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.GetChatsResponse)
}

inline void GetChatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chats_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetChatsResponse::~GetChatsResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.GetChatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetChatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.GetChatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.messaging.Chat chats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.GetChatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .sonet.messaging.Chat chats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chats_size()); i < n; i++) {
    const auto& repfield = this->_internal_chats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.GetChatsResponse)
  return target;
}

size_t GetChatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.GetChatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.messaging.Chat chats = 2;
  total_size += 1UL * this->_internal_chats_size();
  for (const auto& msg : this->_impl_.chats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetChatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChatsResponse::GetClassData() const { return &_class_data_; }


void GetChatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetChatsResponse*>(&to_msg);
  auto& from = static_cast<const GetChatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.GetChatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chats_.MergeFrom(from._impl_.chats_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatsResponse::CopyFrom(const GetChatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.GetChatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatsResponse::IsInitialized() const {
  return true;
}

void GetChatsResponse::InternalSwap(GetChatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chats_.InternalSwap(&other->_impl_.chats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChatsResponse, _impl_.pagination_)
      + sizeof(GetChatsResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(GetChatsResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[14]);
}

// ===================================================================

class UpdateMessageStatusRequest::_Internal {
 public:
};

UpdateMessageStatusRequest::UpdateMessageStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.UpdateMessageStatusRequest)
}
UpdateMessageStatusRequest::UpdateMessageStatusRequest(const UpdateMessageStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateMessageStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.UpdateMessageStatusRequest)
}

inline void UpdateMessageStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateMessageStatusRequest::~UpdateMessageStatusRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.UpdateMessageStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateMessageStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_id_.Destroy();
}

void UpdateMessageStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateMessageStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.UpdateMessageStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessageStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.UpdateMessageStatusRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.MessageStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::sonet::messaging::MessageStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateMessageStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.UpdateMessageStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.UpdateMessageStatusRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // .sonet.messaging.MessageStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.UpdateMessageStatusRequest)
  return target;
}

size_t UpdateMessageStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.UpdateMessageStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .sonet.messaging.MessageStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMessageStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateMessageStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMessageStatusRequest::GetClassData() const { return &_class_data_; }


void UpdateMessageStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateMessageStatusRequest*>(&to_msg);
  auto& from = static_cast<const UpdateMessageStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.UpdateMessageStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMessageStatusRequest::CopyFrom(const UpdateMessageStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.UpdateMessageStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessageStatusRequest::IsInitialized() const {
  return true;
}

void UpdateMessageStatusRequest::InternalSwap(UpdateMessageStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessageStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[15]);
}

// ===================================================================

class UpdateMessageStatusResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const UpdateMessageStatusResponse* msg);
};

const ::sonet::common::Status&
UpdateMessageStatusResponse::_Internal::status(const UpdateMessageStatusResponse* msg) {
  return *msg->_impl_.status_;
}
void UpdateMessageStatusResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
UpdateMessageStatusResponse::UpdateMessageStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.UpdateMessageStatusResponse)
}
UpdateMessageStatusResponse::UpdateMessageStatusResponse(const UpdateMessageStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateMessageStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.UpdateMessageStatusResponse)
}

inline void UpdateMessageStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateMessageStatusResponse::~UpdateMessageStatusResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.UpdateMessageStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateMessageStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void UpdateMessageStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateMessageStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.UpdateMessageStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessageStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateMessageStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.UpdateMessageStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.UpdateMessageStatusResponse)
  return target;
}

size_t UpdateMessageStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.UpdateMessageStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMessageStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateMessageStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMessageStatusResponse::GetClassData() const { return &_class_data_; }


void UpdateMessageStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateMessageStatusResponse*>(&to_msg);
  auto& from = static_cast<const UpdateMessageStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.UpdateMessageStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMessageStatusResponse::CopyFrom(const UpdateMessageStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.UpdateMessageStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessageStatusResponse::IsInitialized() const {
  return true;
}

void UpdateMessageStatusResponse::InternalSwap(UpdateMessageStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessageStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[16]);
}

// ===================================================================

class SearchMessagesRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const SearchMessagesRequest* msg);
};

const ::sonet::common::PaginationRequest&
SearchMessagesRequest::_Internal::pagination(const SearchMessagesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void SearchMessagesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
SearchMessagesRequest::SearchMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.SearchMessagesRequest)
}
SearchMessagesRequest::SearchMessagesRequest(const SearchMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchMessagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.SearchMessagesRequest)
}

inline void SearchMessagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){}
    , decltype(_impl_.chat_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchMessagesRequest::~SearchMessagesRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.SearchMessagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchMessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_.Destroy();
  _impl_.chat_id_.Destroy();
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void SearchMessagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.SearchMessagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.ClearToEmpty();
  _impl_.chat_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchMessagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SearchMessagesRequest.query"));
        } else
          goto handle_unusual;
        continue;
      // string chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SearchMessagesRequest.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SearchMessagesRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.MessageType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::messaging::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchMessagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.SearchMessagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SearchMessagesRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // string chat_id = 2;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SearchMessagesRequest.chat_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_id(), target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SearchMessagesRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // .sonet.messaging.MessageType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .sonet.common.PaginationRequest pagination = 5;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.SearchMessagesRequest)
  return target;
}

size_t SearchMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.SearchMessagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string chat_id = 2;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.PaginationRequest pagination = 5;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .sonet.messaging.MessageType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchMessagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchMessagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchMessagesRequest::GetClassData() const { return &_class_data_; }


void SearchMessagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchMessagesRequest*>(&to_msg);
  auto& from = static_cast<const SearchMessagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.SearchMessagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchMessagesRequest::CopyFrom(const SearchMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.SearchMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchMessagesRequest::IsInitialized() const {
  return true;
}

void SearchMessagesRequest::InternalSwap(SearchMessagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchMessagesRequest, _impl_.type_)
      + sizeof(SearchMessagesRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SearchMessagesRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchMessagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[17]);
}

// ===================================================================

class SearchMessagesResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const SearchMessagesResponse* msg);
  static const ::sonet::common::PaginationResponse& pagination(const SearchMessagesResponse* msg);
};

const ::sonet::common::Status&
SearchMessagesResponse::_Internal::status(const SearchMessagesResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::common::PaginationResponse&
SearchMessagesResponse::_Internal::pagination(const SearchMessagesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void SearchMessagesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SearchMessagesResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
SearchMessagesResponse::SearchMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.SearchMessagesResponse)
}
SearchMessagesResponse::SearchMessagesResponse(const SearchMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchMessagesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.SearchMessagesResponse)
}

inline void SearchMessagesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchMessagesResponse::~SearchMessagesResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.SearchMessagesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchMessagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void SearchMessagesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.SearchMessagesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchMessagesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.messaging.Message messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchMessagesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.SearchMessagesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .sonet.messaging.Message messages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.SearchMessagesResponse)
  return target;
}

size_t SearchMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.SearchMessagesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.messaging.Message messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchMessagesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchMessagesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchMessagesResponse::GetClassData() const { return &_class_data_; }


void SearchMessagesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchMessagesResponse*>(&to_msg);
  auto& from = static_cast<const SearchMessagesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.SearchMessagesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchMessagesResponse::CopyFrom(const SearchMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.SearchMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchMessagesResponse::IsInitialized() const {
  return true;
}

void SearchMessagesResponse::InternalSwap(SearchMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchMessagesResponse, _impl_.pagination_)
      + sizeof(SearchMessagesResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(SearchMessagesResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchMessagesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[18]);
}

// ===================================================================

class UploadAttachmentRequest::_Internal {
 public:
};

UploadAttachmentRequest::UploadAttachmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.UploadAttachmentRequest)
}
UploadAttachmentRequest::UploadAttachmentRequest(const UploadAttachmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadAttachmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.UploadAttachmentRequest)
}

inline void UploadAttachmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadAttachmentRequest::~UploadAttachmentRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.UploadAttachmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadAttachmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.content_type_.Destroy();
  _impl_.data_.Destroy();
}

void UploadAttachmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadAttachmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.UploadAttachmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadAttachmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.UploadAttachmentRequest.filename"));
        } else
          goto handle_unusual;
        continue;
      // string content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.UploadAttachmentRequest.content_type"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadAttachmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.UploadAttachmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.UploadAttachmentRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string content_type = 2;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.UploadAttachmentRequest.content_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content_type(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.UploadAttachmentRequest)
  return target;
}

size_t UploadAttachmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.UploadAttachmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string content_type = 2;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadAttachmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadAttachmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadAttachmentRequest::GetClassData() const { return &_class_data_; }


void UploadAttachmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadAttachmentRequest*>(&to_msg);
  auto& from = static_cast<const UploadAttachmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.UploadAttachmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadAttachmentRequest::CopyFrom(const UploadAttachmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.UploadAttachmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadAttachmentRequest::IsInitialized() const {
  return true;
}

void UploadAttachmentRequest::InternalSwap(UploadAttachmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadAttachmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[19]);
}

// ===================================================================

class UploadAttachmentResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const UploadAttachmentResponse* msg);
  static const ::sonet::messaging::Attachment& attachment(const UploadAttachmentResponse* msg);
};

const ::sonet::common::Status&
UploadAttachmentResponse::_Internal::status(const UploadAttachmentResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::messaging::Attachment&
UploadAttachmentResponse::_Internal::attachment(const UploadAttachmentResponse* msg) {
  return *msg->_impl_.attachment_;
}
void UploadAttachmentResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
UploadAttachmentResponse::UploadAttachmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.UploadAttachmentResponse)
}
UploadAttachmentResponse::UploadAttachmentResponse(const UploadAttachmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadAttachmentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.attachment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_attachment()) {
    _this->_impl_.attachment_ = new ::sonet::messaging::Attachment(*from._impl_.attachment_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.UploadAttachmentResponse)
}

inline void UploadAttachmentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.attachment_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UploadAttachmentResponse::~UploadAttachmentResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.UploadAttachmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadAttachmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.attachment_;
}

void UploadAttachmentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadAttachmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.UploadAttachmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attachment_ != nullptr) {
    delete _impl_.attachment_;
  }
  _impl_.attachment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadAttachmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.Attachment attachment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadAttachmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.UploadAttachmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.messaging.Attachment attachment = 2;
  if (this->_internal_has_attachment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attachment(this),
        _Internal::attachment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.UploadAttachmentResponse)
  return target;
}

size_t UploadAttachmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.UploadAttachmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.messaging.Attachment attachment = 2;
  if (this->_internal_has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attachment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadAttachmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadAttachmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadAttachmentResponse::GetClassData() const { return &_class_data_; }


void UploadAttachmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadAttachmentResponse*>(&to_msg);
  auto& from = static_cast<const UploadAttachmentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.UploadAttachmentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_attachment()) {
    _this->_internal_mutable_attachment()->::sonet::messaging::Attachment::MergeFrom(
        from._internal_attachment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadAttachmentResponse::CopyFrom(const UploadAttachmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.UploadAttachmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadAttachmentResponse::IsInitialized() const {
  return true;
}

void UploadAttachmentResponse::InternalSwap(UploadAttachmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadAttachmentResponse, _impl_.attachment_)
      + sizeof(UploadAttachmentResponse::_impl_.attachment_)
      - PROTOBUF_FIELD_OFFSET(UploadAttachmentResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadAttachmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[20]);
}

// ===================================================================

class SetTypingRequest::_Internal {
 public:
};

SetTypingRequest::SetTypingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.SetTypingRequest)
}
SetTypingRequest::SetTypingRequest(const SetTypingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetTypingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_id_){}
    , decltype(_impl_.is_typing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_id().empty()) {
    _this->_impl_.chat_id_.Set(from._internal_chat_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_typing_ = from._impl_.is_typing_;
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.SetTypingRequest)
}

inline void SetTypingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_id_){}
    , decltype(_impl_.is_typing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetTypingRequest::~SetTypingRequest() {
  // @@protoc_insertion_point(destructor:sonet.messaging.SetTypingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTypingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_id_.Destroy();
}

void SetTypingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTypingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.SetTypingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_id_.ClearToEmpty();
  _impl_.is_typing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTypingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.messaging.SetTypingRequest.chat_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_typing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_typing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTypingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.SetTypingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.messaging.SetTypingRequest.chat_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat_id(), target);
  }

  // bool is_typing = 2;
  if (this->_internal_is_typing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_typing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.SetTypingRequest)
  return target;
}

size_t SetTypingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.SetTypingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat_id = 1;
  if (!this->_internal_chat_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_id());
  }

  // bool is_typing = 2;
  if (this->_internal_is_typing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTypingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetTypingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTypingRequest::GetClassData() const { return &_class_data_; }


void SetTypingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetTypingRequest*>(&to_msg);
  auto& from = static_cast<const SetTypingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.SetTypingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat_id().empty()) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  if (from._internal_is_typing() != 0) {
    _this->_internal_set_is_typing(from._internal_is_typing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTypingRequest::CopyFrom(const SetTypingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.SetTypingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTypingRequest::IsInitialized() const {
  return true;
}

void SetTypingRequest::InternalSwap(SetTypingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_id_, lhs_arena,
      &other->_impl_.chat_id_, rhs_arena
  );
  swap(_impl_.is_typing_, other->_impl_.is_typing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTypingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[21]);
}

// ===================================================================

class SetTypingResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const SetTypingResponse* msg);
};

const ::sonet::common::Status&
SetTypingResponse::_Internal::status(const SetTypingResponse* msg) {
  return *msg->_impl_.status_;
}
void SetTypingResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SetTypingResponse::SetTypingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.SetTypingResponse)
}
SetTypingResponse::SetTypingResponse(const SetTypingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetTypingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.SetTypingResponse)
}

inline void SetTypingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetTypingResponse::~SetTypingResponse() {
  // @@protoc_insertion_point(destructor:sonet.messaging.SetTypingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTypingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SetTypingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTypingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.SetTypingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTypingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTypingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.SetTypingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.SetTypingResponse)
  return target;
}

size_t SetTypingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.SetTypingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTypingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetTypingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTypingResponse::GetClassData() const { return &_class_data_; }


void SetTypingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetTypingResponse*>(&to_msg);
  auto& from = static_cast<const SetTypingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.SetTypingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTypingResponse::CopyFrom(const SetTypingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.SetTypingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTypingResponse::IsInitialized() const {
  return true;
}

void SetTypingResponse::InternalSwap(SetTypingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTypingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[22]);
}

// ===================================================================

class WebSocketMessage::_Internal {
 public:
  static const ::sonet::messaging::Message& new_message(const WebSocketMessage* msg);
  static const ::sonet::messaging::TypingIndicator& typing(const WebSocketMessage* msg);
  static const ::sonet::messaging::ReadReceipt& read_receipt(const WebSocketMessage* msg);
};

const ::sonet::messaging::Message&
WebSocketMessage::_Internal::new_message(const WebSocketMessage* msg) {
  return *msg->_impl_.payload_.new_message_;
}
const ::sonet::messaging::TypingIndicator&
WebSocketMessage::_Internal::typing(const WebSocketMessage* msg) {
  return *msg->_impl_.payload_.typing_;
}
const ::sonet::messaging::ReadReceipt&
WebSocketMessage::_Internal::read_receipt(const WebSocketMessage* msg) {
  return *msg->_impl_.payload_.read_receipt_;
}
void WebSocketMessage::set_allocated_new_message(::sonet::messaging::Message* new_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (new_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_message);
    if (message_arena != submessage_arena) {
      new_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_message, submessage_arena);
    }
    set_has_new_message();
    _impl_.payload_.new_message_ = new_message;
  }
  // @@protoc_insertion_point(field_set_allocated:sonet.messaging.WebSocketMessage.new_message)
}
void WebSocketMessage::set_allocated_typing(::sonet::messaging::TypingIndicator* typing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (typing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(typing);
    if (message_arena != submessage_arena) {
      typing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typing, submessage_arena);
    }
    set_has_typing();
    _impl_.payload_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_set_allocated:sonet.messaging.WebSocketMessage.typing)
}
void WebSocketMessage::set_allocated_read_receipt(::sonet::messaging::ReadReceipt* read_receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (read_receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(read_receipt);
    if (message_arena != submessage_arena) {
      read_receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_receipt, submessage_arena);
    }
    set_has_read_receipt();
    _impl_.payload_.read_receipt_ = read_receipt;
  }
  // @@protoc_insertion_point(field_set_allocated:sonet.messaging.WebSocketMessage.read_receipt)
}
WebSocketMessage::WebSocketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.messaging.WebSocketMessage)
}
WebSocketMessage::WebSocketMessage(const WebSocketMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebSocketMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kNewMessage: {
      _this->_internal_mutable_new_message()->::sonet::messaging::Message::MergeFrom(
          from._internal_new_message());
      break;
    }
    case kTyping: {
      _this->_internal_mutable_typing()->::sonet::messaging::TypingIndicator::MergeFrom(
          from._internal_typing());
      break;
    }
    case kReadReceipt: {
      _this->_internal_mutable_read_receipt()->::sonet::messaging::ReadReceipt::MergeFrom(
          from._internal_read_receipt());
      break;
    }
    case kMessageStatusUpdate: {
      _this->_internal_set_message_status_update(from._internal_message_status_update());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sonet.messaging.WebSocketMessage)
}

inline void WebSocketMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

WebSocketMessage::~WebSocketMessage() {
  // @@protoc_insertion_point(destructor:sonet.messaging.WebSocketMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebSocketMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void WebSocketMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebSocketMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:sonet.messaging.WebSocketMessage)
  switch (payload_case()) {
    case kNewMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.new_message_;
      }
      break;
    }
    case kTyping: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.typing_;
      }
      break;
    }
    case kReadReceipt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.read_receipt_;
      }
      break;
    }
    case kMessageStatusUpdate: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void WebSocketMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.messaging.WebSocketMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebSocketMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.messaging.Message new_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.TypingIndicator typing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_typing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.ReadReceipt read_receipt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_receipt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.messaging.MessageStatus message_status_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_status_update(static_cast<::sonet::messaging::MessageStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebSocketMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.messaging.WebSocketMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.messaging.Message new_message = 1;
  if (_internal_has_new_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::new_message(this),
        _Internal::new_message(this).GetCachedSize(), target, stream);
  }

  // .sonet.messaging.TypingIndicator typing = 2;
  if (_internal_has_typing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::typing(this),
        _Internal::typing(this).GetCachedSize(), target, stream);
  }

  // .sonet.messaging.ReadReceipt read_receipt = 3;
  if (_internal_has_read_receipt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::read_receipt(this),
        _Internal::read_receipt(this).GetCachedSize(), target, stream);
  }

  // .sonet.messaging.MessageStatus message_status_update = 4;
  if (_internal_has_message_status_update()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_message_status_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.messaging.WebSocketMessage)
  return target;
}

size_t WebSocketMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.messaging.WebSocketMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .sonet.messaging.Message new_message = 1;
    case kNewMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.new_message_);
      break;
    }
    // .sonet.messaging.TypingIndicator typing = 2;
    case kTyping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.typing_);
      break;
    }
    // .sonet.messaging.ReadReceipt read_receipt = 3;
    case kReadReceipt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.read_receipt_);
      break;
    }
    // .sonet.messaging.MessageStatus message_status_update = 4;
    case kMessageStatusUpdate: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_message_status_update());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebSocketMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebSocketMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebSocketMessage::GetClassData() const { return &_class_data_; }


void WebSocketMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebSocketMessage*>(&to_msg);
  auto& from = static_cast<const WebSocketMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.messaging.WebSocketMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kNewMessage: {
      _this->_internal_mutable_new_message()->::sonet::messaging::Message::MergeFrom(
          from._internal_new_message());
      break;
    }
    case kTyping: {
      _this->_internal_mutable_typing()->::sonet::messaging::TypingIndicator::MergeFrom(
          from._internal_typing());
      break;
    }
    case kReadReceipt: {
      _this->_internal_mutable_read_receipt()->::sonet::messaging::ReadReceipt::MergeFrom(
          from._internal_read_receipt());
      break;
    }
    case kMessageStatusUpdate: {
      _this->_internal_set_message_status_update(from._internal_message_status_update());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebSocketMessage::CopyFrom(const WebSocketMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.messaging.WebSocketMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketMessage::IsInitialized() const {
  return true;
}

void WebSocketMessage::InternalSwap(WebSocketMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebSocketMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::messaging::Message*
Arena::CreateMaybeMessage< ::sonet::messaging::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::Chat_SettingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::messaging::Chat_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::Chat_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::Chat*
Arena::CreateMaybeMessage< ::sonet::messaging::Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::TypingIndicator*
Arena::CreateMaybeMessage< ::sonet::messaging::TypingIndicator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::TypingIndicator >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::ReadReceipt*
Arena::CreateMaybeMessage< ::sonet::messaging::ReadReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::ReadReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::Attachment_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::messaging::Attachment_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::Attachment_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::Attachment*
Arena::CreateMaybeMessage< ::sonet::messaging::Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::SendMessageRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::SendMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::SendMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::SendMessageResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::SendMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::SendMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::GetMessagesRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::GetMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::GetMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::GetMessagesResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::GetMessagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::GetMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::CreateChatRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::CreateChatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::CreateChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::CreateChatResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::CreateChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::CreateChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::GetChatsRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::GetChatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::GetChatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::GetChatsResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::GetChatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::GetChatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::UpdateMessageStatusRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::UpdateMessageStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::UpdateMessageStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::UpdateMessageStatusResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::UpdateMessageStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::UpdateMessageStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::SearchMessagesRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::SearchMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::SearchMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::SearchMessagesResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::SearchMessagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::SearchMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::UploadAttachmentRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::UploadAttachmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::UploadAttachmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::UploadAttachmentResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::UploadAttachmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::UploadAttachmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::SetTypingRequest*
Arena::CreateMaybeMessage< ::sonet::messaging::SetTypingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::SetTypingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::SetTypingResponse*
Arena::CreateMaybeMessage< ::sonet::messaging::SetTypingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::SetTypingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::messaging::WebSocketMessage*
Arena::CreateMaybeMessage< ::sonet::messaging::WebSocketMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::messaging::WebSocketMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
