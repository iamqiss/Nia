// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/messaging.proto

#include "services/messaging.pb.h"
#include "services/messaging.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace messaging {

static const char* MessagingService_method_names[] = {
  "/sonet.messaging.MessagingService/SendMessage",
  "/sonet.messaging.MessagingService/GetMessages",
  "/sonet.messaging.MessagingService/UpdateMessageStatus",
  "/sonet.messaging.MessagingService/SearchMessages",
  "/sonet.messaging.MessagingService/CreateChat",
  "/sonet.messaging.MessagingService/GetChats",
  "/sonet.messaging.MessagingService/UploadAttachment",
  "/sonet.messaging.MessagingService/SetTyping",
  "/sonet.messaging.MessagingService/StreamMessages",
};

std::unique_ptr< MessagingService::Stub> MessagingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessagingService::Stub> stub(new MessagingService::Stub(channel, options));
  return stub;
}

MessagingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(MessagingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessages_(MessagingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMessageStatus_(MessagingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchMessages_(MessagingService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChat_(MessagingService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChats_(MessagingService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadAttachment_(MessagingService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTyping_(MessagingService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamMessages_(MessagingService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status MessagingService::Stub::SendMessage(::grpc::ClientContext* context, const ::sonet::messaging::SendMessageRequest& request, ::sonet::messaging::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::SendMessageRequest, ::sonet::messaging::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::sonet::messaging::SendMessageRequest* request, ::sonet::messaging::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::SendMessageRequest, ::sonet::messaging::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::sonet::messaging::SendMessageRequest* request, ::sonet::messaging::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::SendMessageResponse>* MessagingService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::sonet::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::SendMessageResponse, ::sonet::messaging::SendMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::SendMessageResponse>* MessagingService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::sonet::messaging::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::GetMessages(::grpc::ClientContext* context, const ::sonet::messaging::GetMessagesRequest& request, ::sonet::messaging::GetMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::GetMessagesRequest, ::sonet::messaging::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessages_, context, request, response);
}

void MessagingService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::sonet::messaging::GetMessagesRequest* request, ::sonet::messaging::GetMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::GetMessagesRequest, ::sonet::messaging::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::GetMessages(::grpc::ClientContext* context, const ::sonet::messaging::GetMessagesRequest* request, ::sonet::messaging::GetMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::GetMessagesResponse>* MessagingService::Stub::PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::sonet::messaging::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::GetMessagesResponse, ::sonet::messaging::GetMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::GetMessagesResponse>* MessagingService::Stub::AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::sonet::messaging::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::UpdateMessageStatus(::grpc::ClientContext* context, const ::sonet::messaging::UpdateMessageStatusRequest& request, ::sonet::messaging::UpdateMessageStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::UpdateMessageStatusRequest, ::sonet::messaging::UpdateMessageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMessageStatus_, context, request, response);
}

void MessagingService::Stub::async::UpdateMessageStatus(::grpc::ClientContext* context, const ::sonet::messaging::UpdateMessageStatusRequest* request, ::sonet::messaging::UpdateMessageStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::UpdateMessageStatusRequest, ::sonet::messaging::UpdateMessageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessageStatus_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::UpdateMessageStatus(::grpc::ClientContext* context, const ::sonet::messaging::UpdateMessageStatusRequest* request, ::sonet::messaging::UpdateMessageStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessageStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::UpdateMessageStatusResponse>* MessagingService::Stub::PrepareAsyncUpdateMessageStatusRaw(::grpc::ClientContext* context, const ::sonet::messaging::UpdateMessageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::UpdateMessageStatusResponse, ::sonet::messaging::UpdateMessageStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMessageStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::UpdateMessageStatusResponse>* MessagingService::Stub::AsyncUpdateMessageStatusRaw(::grpc::ClientContext* context, const ::sonet::messaging::UpdateMessageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMessageStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::SearchMessages(::grpc::ClientContext* context, const ::sonet::messaging::SearchMessagesRequest& request, ::sonet::messaging::SearchMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::SearchMessagesRequest, ::sonet::messaging::SearchMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchMessages_, context, request, response);
}

void MessagingService::Stub::async::SearchMessages(::grpc::ClientContext* context, const ::sonet::messaging::SearchMessagesRequest* request, ::sonet::messaging::SearchMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::SearchMessagesRequest, ::sonet::messaging::SearchMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchMessages_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SearchMessages(::grpc::ClientContext* context, const ::sonet::messaging::SearchMessagesRequest* request, ::sonet::messaging::SearchMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::SearchMessagesResponse>* MessagingService::Stub::PrepareAsyncSearchMessagesRaw(::grpc::ClientContext* context, const ::sonet::messaging::SearchMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::SearchMessagesResponse, ::sonet::messaging::SearchMessagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::SearchMessagesResponse>* MessagingService::Stub::AsyncSearchMessagesRaw(::grpc::ClientContext* context, const ::sonet::messaging::SearchMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::CreateChat(::grpc::ClientContext* context, const ::sonet::messaging::CreateChatRequest& request, ::sonet::messaging::CreateChatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::CreateChatRequest, ::sonet::messaging::CreateChatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChat_, context, request, response);
}

void MessagingService::Stub::async::CreateChat(::grpc::ClientContext* context, const ::sonet::messaging::CreateChatRequest* request, ::sonet::messaging::CreateChatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::CreateChatRequest, ::sonet::messaging::CreateChatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChat_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::CreateChat(::grpc::ClientContext* context, const ::sonet::messaging::CreateChatRequest* request, ::sonet::messaging::CreateChatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::CreateChatResponse>* MessagingService::Stub::PrepareAsyncCreateChatRaw(::grpc::ClientContext* context, const ::sonet::messaging::CreateChatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::CreateChatResponse, ::sonet::messaging::CreateChatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::CreateChatResponse>* MessagingService::Stub::AsyncCreateChatRaw(::grpc::ClientContext* context, const ::sonet::messaging::CreateChatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::GetChats(::grpc::ClientContext* context, const ::sonet::messaging::GetChatsRequest& request, ::sonet::messaging::GetChatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::GetChatsRequest, ::sonet::messaging::GetChatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChats_, context, request, response);
}

void MessagingService::Stub::async::GetChats(::grpc::ClientContext* context, const ::sonet::messaging::GetChatsRequest* request, ::sonet::messaging::GetChatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::GetChatsRequest, ::sonet::messaging::GetChatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChats_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::GetChats(::grpc::ClientContext* context, const ::sonet::messaging::GetChatsRequest* request, ::sonet::messaging::GetChatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::GetChatsResponse>* MessagingService::Stub::PrepareAsyncGetChatsRaw(::grpc::ClientContext* context, const ::sonet::messaging::GetChatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::GetChatsResponse, ::sonet::messaging::GetChatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::GetChatsResponse>* MessagingService::Stub::AsyncGetChatsRaw(::grpc::ClientContext* context, const ::sonet::messaging::GetChatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::UploadAttachment(::grpc::ClientContext* context, const ::sonet::messaging::UploadAttachmentRequest& request, ::sonet::messaging::UploadAttachmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::UploadAttachmentRequest, ::sonet::messaging::UploadAttachmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadAttachment_, context, request, response);
}

void MessagingService::Stub::async::UploadAttachment(::grpc::ClientContext* context, const ::sonet::messaging::UploadAttachmentRequest* request, ::sonet::messaging::UploadAttachmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::UploadAttachmentRequest, ::sonet::messaging::UploadAttachmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadAttachment_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::UploadAttachment(::grpc::ClientContext* context, const ::sonet::messaging::UploadAttachmentRequest* request, ::sonet::messaging::UploadAttachmentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadAttachment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::UploadAttachmentResponse>* MessagingService::Stub::PrepareAsyncUploadAttachmentRaw(::grpc::ClientContext* context, const ::sonet::messaging::UploadAttachmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::UploadAttachmentResponse, ::sonet::messaging::UploadAttachmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadAttachment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::UploadAttachmentResponse>* MessagingService::Stub::AsyncUploadAttachmentRaw(::grpc::ClientContext* context, const ::sonet::messaging::UploadAttachmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadAttachmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::SetTyping(::grpc::ClientContext* context, const ::sonet::messaging::SetTypingRequest& request, ::sonet::messaging::SetTypingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::messaging::SetTypingRequest, ::sonet::messaging::SetTypingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTyping_, context, request, response);
}

void MessagingService::Stub::async::SetTyping(::grpc::ClientContext* context, const ::sonet::messaging::SetTypingRequest* request, ::sonet::messaging::SetTypingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::messaging::SetTypingRequest, ::sonet::messaging::SetTypingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTyping_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SetTyping(::grpc::ClientContext* context, const ::sonet::messaging::SetTypingRequest* request, ::sonet::messaging::SetTypingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTyping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::SetTypingResponse>* MessagingService::Stub::PrepareAsyncSetTypingRaw(::grpc::ClientContext* context, const ::sonet::messaging::SetTypingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::messaging::SetTypingResponse, ::sonet::messaging::SetTypingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTyping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::messaging::SetTypingResponse>* MessagingService::Stub::AsyncSetTypingRaw(::grpc::ClientContext* context, const ::sonet::messaging::SetTypingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTypingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>* MessagingService::Stub::StreamMessagesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>::Create(channel_.get(), rpcmethod_StreamMessages_, context);
}

void MessagingService::Stub::async::StreamMessages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sonet::messaging::WebSocketMessage,::sonet::messaging::WebSocketMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sonet::messaging::WebSocketMessage,::sonet::messaging::WebSocketMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMessages_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>* MessagingService::Stub::AsyncStreamMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>::Create(channel_.get(), cq, rpcmethod_StreamMessages_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>* MessagingService::Stub::PrepareAsyncStreamMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>::Create(channel_.get(), cq, rpcmethod_StreamMessages_, context, false, nullptr);
}

MessagingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::SendMessageRequest, ::sonet::messaging::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::SendMessageRequest* req,
             ::sonet::messaging::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::GetMessagesRequest, ::sonet::messaging::GetMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::GetMessagesRequest* req,
             ::sonet::messaging::GetMessagesResponse* resp) {
               return service->GetMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::UpdateMessageStatusRequest, ::sonet::messaging::UpdateMessageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::UpdateMessageStatusRequest* req,
             ::sonet::messaging::UpdateMessageStatusResponse* resp) {
               return service->UpdateMessageStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::SearchMessagesRequest, ::sonet::messaging::SearchMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::SearchMessagesRequest* req,
             ::sonet::messaging::SearchMessagesResponse* resp) {
               return service->SearchMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::CreateChatRequest, ::sonet::messaging::CreateChatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::CreateChatRequest* req,
             ::sonet::messaging::CreateChatResponse* resp) {
               return service->CreateChat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::GetChatsRequest, ::sonet::messaging::GetChatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::GetChatsRequest* req,
             ::sonet::messaging::GetChatsResponse* resp) {
               return service->GetChats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::UploadAttachmentRequest, ::sonet::messaging::UploadAttachmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::UploadAttachmentRequest* req,
             ::sonet::messaging::UploadAttachmentResponse* resp) {
               return service->UploadAttachment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::sonet::messaging::SetTypingRequest, ::sonet::messaging::SetTypingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::messaging::SetTypingRequest* req,
             ::sonet::messaging::SetTypingResponse* resp) {
               return service->SetTyping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< MessagingService::Service, ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sonet::messaging::WebSocketMessage,
             ::sonet::messaging::WebSocketMessage>* stream) {
               return service->StreamMessages(ctx, stream);
             }, this)));
}

MessagingService::Service::~Service() {
}

::grpc::Status MessagingService::Service::SendMessage(::grpc::ServerContext* context, const ::sonet::messaging::SendMessageRequest* request, ::sonet::messaging::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::GetMessages(::grpc::ServerContext* context, const ::sonet::messaging::GetMessagesRequest* request, ::sonet::messaging::GetMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::UpdateMessageStatus(::grpc::ServerContext* context, const ::sonet::messaging::UpdateMessageStatusRequest* request, ::sonet::messaging::UpdateMessageStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::SearchMessages(::grpc::ServerContext* context, const ::sonet::messaging::SearchMessagesRequest* request, ::sonet::messaging::SearchMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::CreateChat(::grpc::ServerContext* context, const ::sonet::messaging::CreateChatRequest* request, ::sonet::messaging::CreateChatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::GetChats(::grpc::ServerContext* context, const ::sonet::messaging::GetChatsRequest* request, ::sonet::messaging::GetChatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::UploadAttachment(::grpc::ServerContext* context, const ::sonet::messaging::UploadAttachmentRequest* request, ::sonet::messaging::UploadAttachmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::SetTyping(::grpc::ServerContext* context, const ::sonet::messaging::SetTypingRequest* request, ::sonet::messaging::SetTypingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::StreamMessages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sonet::messaging::WebSocketMessage, ::sonet::messaging::WebSocketMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace messaging

