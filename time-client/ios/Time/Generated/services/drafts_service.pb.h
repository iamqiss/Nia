// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/drafts_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fdrafts_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fdrafts_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fdrafts_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fdrafts_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fdrafts_5fservice_2eproto;
namespace sonet {
namespace drafts {
namespace v1 {
class AutoSaveDraftRequest;
struct AutoSaveDraftRequestDefaultTypeInternal;
extern AutoSaveDraftRequestDefaultTypeInternal _AutoSaveDraftRequest_default_instance_;
class AutoSaveDraftResponse;
struct AutoSaveDraftResponseDefaultTypeInternal;
extern AutoSaveDraftResponseDefaultTypeInternal _AutoSaveDraftResponse_default_instance_;
class CreateDraftRequest;
struct CreateDraftRequestDefaultTypeInternal;
extern CreateDraftRequestDefaultTypeInternal _CreateDraftRequest_default_instance_;
class CreateDraftResponse;
struct CreateDraftResponseDefaultTypeInternal;
extern CreateDraftResponseDefaultTypeInternal _CreateDraftResponse_default_instance_;
class DeleteDraftRequest;
struct DeleteDraftRequestDefaultTypeInternal;
extern DeleteDraftRequestDefaultTypeInternal _DeleteDraftRequest_default_instance_;
class DeleteDraftResponse;
struct DeleteDraftResponseDefaultTypeInternal;
extern DeleteDraftResponseDefaultTypeInternal _DeleteDraftResponse_default_instance_;
class Draft;
struct DraftDefaultTypeInternal;
extern DraftDefaultTypeInternal _Draft_default_instance_;
class DraftImage;
struct DraftImageDefaultTypeInternal;
extern DraftImageDefaultTypeInternal _DraftImage_default_instance_;
class DraftVideo;
struct DraftVideoDefaultTypeInternal;
extern DraftVideoDefaultTypeInternal _DraftVideo_default_instance_;
class GetDraftRequest;
struct GetDraftRequestDefaultTypeInternal;
extern GetDraftRequestDefaultTypeInternal _GetDraftRequest_default_instance_;
class GetDraftResponse;
struct GetDraftResponseDefaultTypeInternal;
extern GetDraftResponseDefaultTypeInternal _GetDraftResponse_default_instance_;
class GetUserDraftsRequest;
struct GetUserDraftsRequestDefaultTypeInternal;
extern GetUserDraftsRequestDefaultTypeInternal _GetUserDraftsRequest_default_instance_;
class GetUserDraftsResponse;
struct GetUserDraftsResponseDefaultTypeInternal;
extern GetUserDraftsResponseDefaultTypeInternal _GetUserDraftsResponse_default_instance_;
class UpdateDraftRequest;
struct UpdateDraftRequestDefaultTypeInternal;
extern UpdateDraftRequestDefaultTypeInternal _UpdateDraftRequest_default_instance_;
class UpdateDraftResponse;
struct UpdateDraftResponseDefaultTypeInternal;
extern UpdateDraftResponseDefaultTypeInternal _UpdateDraftResponse_default_instance_;
}  // namespace v1
}  // namespace drafts
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::drafts::v1::AutoSaveDraftRequest* Arena::CreateMaybeMessage<::sonet::drafts::v1::AutoSaveDraftRequest>(Arena*);
template<> ::sonet::drafts::v1::AutoSaveDraftResponse* Arena::CreateMaybeMessage<::sonet::drafts::v1::AutoSaveDraftResponse>(Arena*);
template<> ::sonet::drafts::v1::CreateDraftRequest* Arena::CreateMaybeMessage<::sonet::drafts::v1::CreateDraftRequest>(Arena*);
template<> ::sonet::drafts::v1::CreateDraftResponse* Arena::CreateMaybeMessage<::sonet::drafts::v1::CreateDraftResponse>(Arena*);
template<> ::sonet::drafts::v1::DeleteDraftRequest* Arena::CreateMaybeMessage<::sonet::drafts::v1::DeleteDraftRequest>(Arena*);
template<> ::sonet::drafts::v1::DeleteDraftResponse* Arena::CreateMaybeMessage<::sonet::drafts::v1::DeleteDraftResponse>(Arena*);
template<> ::sonet::drafts::v1::Draft* Arena::CreateMaybeMessage<::sonet::drafts::v1::Draft>(Arena*);
template<> ::sonet::drafts::v1::DraftImage* Arena::CreateMaybeMessage<::sonet::drafts::v1::DraftImage>(Arena*);
template<> ::sonet::drafts::v1::DraftVideo* Arena::CreateMaybeMessage<::sonet::drafts::v1::DraftVideo>(Arena*);
template<> ::sonet::drafts::v1::GetDraftRequest* Arena::CreateMaybeMessage<::sonet::drafts::v1::GetDraftRequest>(Arena*);
template<> ::sonet::drafts::v1::GetDraftResponse* Arena::CreateMaybeMessage<::sonet::drafts::v1::GetDraftResponse>(Arena*);
template<> ::sonet::drafts::v1::GetUserDraftsRequest* Arena::CreateMaybeMessage<::sonet::drafts::v1::GetUserDraftsRequest>(Arena*);
template<> ::sonet::drafts::v1::GetUserDraftsResponse* Arena::CreateMaybeMessage<::sonet::drafts::v1::GetUserDraftsResponse>(Arena*);
template<> ::sonet::drafts::v1::UpdateDraftRequest* Arena::CreateMaybeMessage<::sonet::drafts::v1::UpdateDraftRequest>(Arena*);
template<> ::sonet::drafts::v1::UpdateDraftResponse* Arena::CreateMaybeMessage<::sonet::drafts::v1::UpdateDraftResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace drafts {
namespace v1 {

// ===================================================================

class CreateDraftRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.CreateDraftRequest) */ {
 public:
  inline CreateDraftRequest() : CreateDraftRequest(nullptr) {}
  ~CreateDraftRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateDraftRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDraftRequest(const CreateDraftRequest& from);
  CreateDraftRequest(CreateDraftRequest&& from) noexcept
    : CreateDraftRequest() {
    *this = ::std::move(from);
  }

  inline CreateDraftRequest& operator=(const CreateDraftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDraftRequest& operator=(CreateDraftRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDraftRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDraftRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDraftRequest*>(
               &_CreateDraftRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateDraftRequest& a, CreateDraftRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDraftRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDraftRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDraftRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDraftRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDraftRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDraftRequest& from) {
    CreateDraftRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDraftRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.CreateDraftRequest";
  }
  protected:
  explicit CreateDraftRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 6,
    kLabelsFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kContentFieldNumber = 2,
    kReplyToUriFieldNumber = 3,
    kQuoteUriFieldNumber = 4,
    kMentionHandleFieldNumber = 5,
    kThreadgateFieldNumber = 9,
    kInteractionSettingsFieldNumber = 10,
    kVideoFieldNumber = 7,
    kIsAutoSavedFieldNumber = 11,
  };
  // repeated .sonet.drafts.v1.DraftImage images = 6;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::sonet::drafts::v1::DraftImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
      mutable_images();
  private:
  const ::sonet::drafts::v1::DraftImage& _internal_images(int index) const;
  ::sonet::drafts::v1::DraftImage* _internal_add_images();
  public:
  const ::sonet::drafts::v1::DraftImage& images(int index) const;
  ::sonet::drafts::v1::DraftImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
      images() const;

  // repeated string labels = 8;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string reply_to_uri = 3;
  void clear_reply_to_uri();
  const std::string& reply_to_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_uri();
  PROTOBUF_NODISCARD std::string* release_reply_to_uri();
  void set_allocated_reply_to_uri(std::string* reply_to_uri);
  private:
  const std::string& _internal_reply_to_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_uri(const std::string& value);
  std::string* _internal_mutable_reply_to_uri();
  public:

  // string quote_uri = 4;
  void clear_quote_uri();
  const std::string& quote_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_uri();
  PROTOBUF_NODISCARD std::string* release_quote_uri();
  void set_allocated_quote_uri(std::string* quote_uri);
  private:
  const std::string& _internal_quote_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_uri(const std::string& value);
  std::string* _internal_mutable_quote_uri();
  public:

  // string mention_handle = 5;
  void clear_mention_handle();
  const std::string& mention_handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mention_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mention_handle();
  PROTOBUF_NODISCARD std::string* release_mention_handle();
  void set_allocated_mention_handle(std::string* mention_handle);
  private:
  const std::string& _internal_mention_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mention_handle(const std::string& value);
  std::string* _internal_mutable_mention_handle();
  public:

  // bytes threadgate = 9;
  void clear_threadgate();
  const std::string& threadgate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threadgate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threadgate();
  PROTOBUF_NODISCARD std::string* release_threadgate();
  void set_allocated_threadgate(std::string* threadgate);
  private:
  const std::string& _internal_threadgate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threadgate(const std::string& value);
  std::string* _internal_mutable_threadgate();
  public:

  // bytes interaction_settings = 10;
  void clear_interaction_settings();
  const std::string& interaction_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interaction_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interaction_settings();
  PROTOBUF_NODISCARD std::string* release_interaction_settings();
  void set_allocated_interaction_settings(std::string* interaction_settings);
  private:
  const std::string& _internal_interaction_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interaction_settings(const std::string& value);
  std::string* _internal_mutable_interaction_settings();
  public:

  // .sonet.drafts.v1.DraftVideo video = 7;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::sonet::drafts::v1::DraftVideo& video() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::DraftVideo* release_video();
  ::sonet::drafts::v1::DraftVideo* mutable_video();
  void set_allocated_video(::sonet::drafts::v1::DraftVideo* video);
  private:
  const ::sonet::drafts::v1::DraftVideo& _internal_video() const;
  ::sonet::drafts::v1::DraftVideo* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::sonet::drafts::v1::DraftVideo* video);
  ::sonet::drafts::v1::DraftVideo* unsafe_arena_release_video();

  // bool is_auto_saved = 11;
  void clear_is_auto_saved();
  bool is_auto_saved() const;
  void set_is_auto_saved(bool value);
  private:
  bool _internal_is_auto_saved() const;
  void _internal_set_is_auto_saved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.CreateDraftRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage > images_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mention_handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threadgate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interaction_settings_;
    ::sonet::drafts::v1::DraftVideo* video_;
    bool is_auto_saved_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateDraftResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.CreateDraftResponse) */ {
 public:
  inline CreateDraftResponse() : CreateDraftResponse(nullptr) {}
  ~CreateDraftResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateDraftResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDraftResponse(const CreateDraftResponse& from);
  CreateDraftResponse(CreateDraftResponse&& from) noexcept
    : CreateDraftResponse() {
    *this = ::std::move(from);
  }

  inline CreateDraftResponse& operator=(const CreateDraftResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDraftResponse& operator=(CreateDraftResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDraftResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDraftResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDraftResponse*>(
               &_CreateDraftResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateDraftResponse& a, CreateDraftResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDraftResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDraftResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDraftResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDraftResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDraftResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDraftResponse& from) {
    CreateDraftResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDraftResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.CreateDraftResponse";
  }
  protected:
  explicit CreateDraftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kDraftFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.drafts.v1.Draft draft = 3;
  bool has_draft() const;
  private:
  bool _internal_has_draft() const;
  public:
  void clear_draft();
  const ::sonet::drafts::v1::Draft& draft() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::Draft* release_draft();
  ::sonet::drafts::v1::Draft* mutable_draft();
  void set_allocated_draft(::sonet::drafts::v1::Draft* draft);
  private:
  const ::sonet::drafts::v1::Draft& _internal_draft() const;
  ::sonet::drafts::v1::Draft* _internal_mutable_draft();
  public:
  void unsafe_arena_set_allocated_draft(
      ::sonet::drafts::v1::Draft* draft);
  ::sonet::drafts::v1::Draft* unsafe_arena_release_draft();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.CreateDraftResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::drafts::v1::Draft* draft_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUserDraftsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.GetUserDraftsRequest) */ {
 public:
  inline GetUserDraftsRequest() : GetUserDraftsRequest(nullptr) {}
  ~GetUserDraftsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserDraftsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserDraftsRequest(const GetUserDraftsRequest& from);
  GetUserDraftsRequest(GetUserDraftsRequest&& from) noexcept
    : GetUserDraftsRequest() {
    *this = ::std::move(from);
  }

  inline GetUserDraftsRequest& operator=(const GetUserDraftsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserDraftsRequest& operator=(GetUserDraftsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserDraftsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserDraftsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserDraftsRequest*>(
               &_GetUserDraftsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetUserDraftsRequest& a, GetUserDraftsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserDraftsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserDraftsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserDraftsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserDraftsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserDraftsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserDraftsRequest& from) {
    GetUserDraftsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserDraftsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.GetUserDraftsRequest";
  }
  protected:
  explicit GetUserDraftsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kCursorFieldNumber = 3,
    kLimitFieldNumber = 2,
    kIncludeAutoSavedFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string cursor = 3;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // bool include_auto_saved = 4;
  void clear_include_auto_saved();
  bool include_auto_saved() const;
  void set_include_auto_saved(bool value);
  private:
  bool _internal_include_auto_saved() const;
  void _internal_set_include_auto_saved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.GetUserDraftsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t limit_;
    bool include_auto_saved_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUserDraftsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.GetUserDraftsResponse) */ {
 public:
  inline GetUserDraftsResponse() : GetUserDraftsResponse(nullptr) {}
  ~GetUserDraftsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUserDraftsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserDraftsResponse(const GetUserDraftsResponse& from);
  GetUserDraftsResponse(GetUserDraftsResponse&& from) noexcept
    : GetUserDraftsResponse() {
    *this = ::std::move(from);
  }

  inline GetUserDraftsResponse& operator=(const GetUserDraftsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserDraftsResponse& operator=(GetUserDraftsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserDraftsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserDraftsResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserDraftsResponse*>(
               &_GetUserDraftsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserDraftsResponse& a, GetUserDraftsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserDraftsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserDraftsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserDraftsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserDraftsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserDraftsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserDraftsResponse& from) {
    GetUserDraftsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserDraftsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.GetUserDraftsResponse";
  }
  protected:
  explicit GetUserDraftsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDraftsFieldNumber = 3,
    kErrorMessageFieldNumber = 2,
    kNextCursorFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated .sonet.drafts.v1.Draft drafts = 3;
  int drafts_size() const;
  private:
  int _internal_drafts_size() const;
  public:
  void clear_drafts();
  ::sonet::drafts::v1::Draft* mutable_drafts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::Draft >*
      mutable_drafts();
  private:
  const ::sonet::drafts::v1::Draft& _internal_drafts(int index) const;
  ::sonet::drafts::v1::Draft* _internal_add_drafts();
  public:
  const ::sonet::drafts::v1::Draft& drafts(int index) const;
  ::sonet::drafts::v1::Draft* add_drafts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::Draft >&
      drafts() const;

  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string next_cursor = 4;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.GetUserDraftsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::Draft > drafts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDraftRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.GetDraftRequest) */ {
 public:
  inline GetDraftRequest() : GetDraftRequest(nullptr) {}
  ~GetDraftRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDraftRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDraftRequest(const GetDraftRequest& from);
  GetDraftRequest(GetDraftRequest&& from) noexcept
    : GetDraftRequest() {
    *this = ::std::move(from);
  }

  inline GetDraftRequest& operator=(const GetDraftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDraftRequest& operator=(GetDraftRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDraftRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDraftRequest* internal_default_instance() {
    return reinterpret_cast<const GetDraftRequest*>(
               &_GetDraftRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDraftRequest& a, GetDraftRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDraftRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDraftRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDraftRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDraftRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDraftRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDraftRequest& from) {
    GetDraftRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDraftRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.GetDraftRequest";
  }
  protected:
  explicit GetDraftRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDraftIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string draft_id = 1;
  void clear_draft_id();
  const std::string& draft_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_draft_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_draft_id();
  PROTOBUF_NODISCARD std::string* release_draft_id();
  void set_allocated_draft_id(std::string* draft_id);
  private:
  const std::string& _internal_draft_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_draft_id(const std::string& value);
  std::string* _internal_mutable_draft_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.GetDraftRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr draft_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDraftResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.GetDraftResponse) */ {
 public:
  inline GetDraftResponse() : GetDraftResponse(nullptr) {}
  ~GetDraftResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDraftResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDraftResponse(const GetDraftResponse& from);
  GetDraftResponse(GetDraftResponse&& from) noexcept
    : GetDraftResponse() {
    *this = ::std::move(from);
  }

  inline GetDraftResponse& operator=(const GetDraftResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDraftResponse& operator=(GetDraftResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDraftResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDraftResponse* internal_default_instance() {
    return reinterpret_cast<const GetDraftResponse*>(
               &_GetDraftResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDraftResponse& a, GetDraftResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDraftResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDraftResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDraftResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDraftResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDraftResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDraftResponse& from) {
    GetDraftResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDraftResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.GetDraftResponse";
  }
  protected:
  explicit GetDraftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kDraftFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.drafts.v1.Draft draft = 3;
  bool has_draft() const;
  private:
  bool _internal_has_draft() const;
  public:
  void clear_draft();
  const ::sonet::drafts::v1::Draft& draft() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::Draft* release_draft();
  ::sonet::drafts::v1::Draft* mutable_draft();
  void set_allocated_draft(::sonet::drafts::v1::Draft* draft);
  private:
  const ::sonet::drafts::v1::Draft& _internal_draft() const;
  ::sonet::drafts::v1::Draft* _internal_mutable_draft();
  public:
  void unsafe_arena_set_allocated_draft(
      ::sonet::drafts::v1::Draft* draft);
  ::sonet::drafts::v1::Draft* unsafe_arena_release_draft();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.GetDraftResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::drafts::v1::Draft* draft_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDraftRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.UpdateDraftRequest) */ {
 public:
  inline UpdateDraftRequest() : UpdateDraftRequest(nullptr) {}
  ~UpdateDraftRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateDraftRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDraftRequest(const UpdateDraftRequest& from);
  UpdateDraftRequest(UpdateDraftRequest&& from) noexcept
    : UpdateDraftRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDraftRequest& operator=(const UpdateDraftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDraftRequest& operator=(UpdateDraftRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDraftRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDraftRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDraftRequest*>(
               &_UpdateDraftRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateDraftRequest& a, UpdateDraftRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDraftRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDraftRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDraftRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDraftRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDraftRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDraftRequest& from) {
    UpdateDraftRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDraftRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.UpdateDraftRequest";
  }
  protected:
  explicit UpdateDraftRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 7,
    kLabelsFieldNumber = 9,
    kDraftIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kContentFieldNumber = 3,
    kReplyToUriFieldNumber = 4,
    kQuoteUriFieldNumber = 5,
    kMentionHandleFieldNumber = 6,
    kThreadgateFieldNumber = 10,
    kInteractionSettingsFieldNumber = 11,
    kVideoFieldNumber = 8,
  };
  // repeated .sonet.drafts.v1.DraftImage images = 7;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::sonet::drafts::v1::DraftImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
      mutable_images();
  private:
  const ::sonet::drafts::v1::DraftImage& _internal_images(int index) const;
  ::sonet::drafts::v1::DraftImage* _internal_add_images();
  public:
  const ::sonet::drafts::v1::DraftImage& images(int index) const;
  ::sonet::drafts::v1::DraftImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
      images() const;

  // repeated string labels = 9;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string draft_id = 1;
  void clear_draft_id();
  const std::string& draft_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_draft_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_draft_id();
  PROTOBUF_NODISCARD std::string* release_draft_id();
  void set_allocated_draft_id(std::string* draft_id);
  private:
  const std::string& _internal_draft_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_draft_id(const std::string& value);
  std::string* _internal_mutable_draft_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string reply_to_uri = 4;
  void clear_reply_to_uri();
  const std::string& reply_to_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_uri();
  PROTOBUF_NODISCARD std::string* release_reply_to_uri();
  void set_allocated_reply_to_uri(std::string* reply_to_uri);
  private:
  const std::string& _internal_reply_to_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_uri(const std::string& value);
  std::string* _internal_mutable_reply_to_uri();
  public:

  // string quote_uri = 5;
  void clear_quote_uri();
  const std::string& quote_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_uri();
  PROTOBUF_NODISCARD std::string* release_quote_uri();
  void set_allocated_quote_uri(std::string* quote_uri);
  private:
  const std::string& _internal_quote_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_uri(const std::string& value);
  std::string* _internal_mutable_quote_uri();
  public:

  // string mention_handle = 6;
  void clear_mention_handle();
  const std::string& mention_handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mention_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mention_handle();
  PROTOBUF_NODISCARD std::string* release_mention_handle();
  void set_allocated_mention_handle(std::string* mention_handle);
  private:
  const std::string& _internal_mention_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mention_handle(const std::string& value);
  std::string* _internal_mutable_mention_handle();
  public:

  // bytes threadgate = 10;
  void clear_threadgate();
  const std::string& threadgate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threadgate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threadgate();
  PROTOBUF_NODISCARD std::string* release_threadgate();
  void set_allocated_threadgate(std::string* threadgate);
  private:
  const std::string& _internal_threadgate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threadgate(const std::string& value);
  std::string* _internal_mutable_threadgate();
  public:

  // bytes interaction_settings = 11;
  void clear_interaction_settings();
  const std::string& interaction_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interaction_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interaction_settings();
  PROTOBUF_NODISCARD std::string* release_interaction_settings();
  void set_allocated_interaction_settings(std::string* interaction_settings);
  private:
  const std::string& _internal_interaction_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interaction_settings(const std::string& value);
  std::string* _internal_mutable_interaction_settings();
  public:

  // .sonet.drafts.v1.DraftVideo video = 8;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::sonet::drafts::v1::DraftVideo& video() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::DraftVideo* release_video();
  ::sonet::drafts::v1::DraftVideo* mutable_video();
  void set_allocated_video(::sonet::drafts::v1::DraftVideo* video);
  private:
  const ::sonet::drafts::v1::DraftVideo& _internal_video() const;
  ::sonet::drafts::v1::DraftVideo* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::sonet::drafts::v1::DraftVideo* video);
  ::sonet::drafts::v1::DraftVideo* unsafe_arena_release_video();

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.UpdateDraftRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage > images_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr draft_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mention_handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threadgate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interaction_settings_;
    ::sonet::drafts::v1::DraftVideo* video_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDraftResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.UpdateDraftResponse) */ {
 public:
  inline UpdateDraftResponse() : UpdateDraftResponse(nullptr) {}
  ~UpdateDraftResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateDraftResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDraftResponse(const UpdateDraftResponse& from);
  UpdateDraftResponse(UpdateDraftResponse&& from) noexcept
    : UpdateDraftResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDraftResponse& operator=(const UpdateDraftResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDraftResponse& operator=(UpdateDraftResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDraftResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDraftResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDraftResponse*>(
               &_UpdateDraftResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateDraftResponse& a, UpdateDraftResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDraftResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDraftResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDraftResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDraftResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDraftResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDraftResponse& from) {
    UpdateDraftResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDraftResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.UpdateDraftResponse";
  }
  protected:
  explicit UpdateDraftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kDraftFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.drafts.v1.Draft draft = 3;
  bool has_draft() const;
  private:
  bool _internal_has_draft() const;
  public:
  void clear_draft();
  const ::sonet::drafts::v1::Draft& draft() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::Draft* release_draft();
  ::sonet::drafts::v1::Draft* mutable_draft();
  void set_allocated_draft(::sonet::drafts::v1::Draft* draft);
  private:
  const ::sonet::drafts::v1::Draft& _internal_draft() const;
  ::sonet::drafts::v1::Draft* _internal_mutable_draft();
  public:
  void unsafe_arena_set_allocated_draft(
      ::sonet::drafts::v1::Draft* draft);
  ::sonet::drafts::v1::Draft* unsafe_arena_release_draft();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.UpdateDraftResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::drafts::v1::Draft* draft_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDraftRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.DeleteDraftRequest) */ {
 public:
  inline DeleteDraftRequest() : DeleteDraftRequest(nullptr) {}
  ~DeleteDraftRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteDraftRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDraftRequest(const DeleteDraftRequest& from);
  DeleteDraftRequest(DeleteDraftRequest&& from) noexcept
    : DeleteDraftRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDraftRequest& operator=(const DeleteDraftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDraftRequest& operator=(DeleteDraftRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDraftRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDraftRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDraftRequest*>(
               &_DeleteDraftRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteDraftRequest& a, DeleteDraftRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDraftRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDraftRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDraftRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDraftRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDraftRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDraftRequest& from) {
    DeleteDraftRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDraftRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.DeleteDraftRequest";
  }
  protected:
  explicit DeleteDraftRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDraftIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string draft_id = 1;
  void clear_draft_id();
  const std::string& draft_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_draft_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_draft_id();
  PROTOBUF_NODISCARD std::string* release_draft_id();
  void set_allocated_draft_id(std::string* draft_id);
  private:
  const std::string& _internal_draft_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_draft_id(const std::string& value);
  std::string* _internal_mutable_draft_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.DeleteDraftRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr draft_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDraftResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.DeleteDraftResponse) */ {
 public:
  inline DeleteDraftResponse() : DeleteDraftResponse(nullptr) {}
  ~DeleteDraftResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteDraftResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDraftResponse(const DeleteDraftResponse& from);
  DeleteDraftResponse(DeleteDraftResponse&& from) noexcept
    : DeleteDraftResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDraftResponse& operator=(const DeleteDraftResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDraftResponse& operator=(DeleteDraftResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDraftResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDraftResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDraftResponse*>(
               &_DeleteDraftResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteDraftResponse& a, DeleteDraftResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDraftResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDraftResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDraftResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDraftResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDraftResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDraftResponse& from) {
    DeleteDraftResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDraftResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.DeleteDraftResponse";
  }
  protected:
  explicit DeleteDraftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.DeleteDraftResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AutoSaveDraftRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.AutoSaveDraftRequest) */ {
 public:
  inline AutoSaveDraftRequest() : AutoSaveDraftRequest(nullptr) {}
  ~AutoSaveDraftRequest() override;
  explicit PROTOBUF_CONSTEXPR AutoSaveDraftRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoSaveDraftRequest(const AutoSaveDraftRequest& from);
  AutoSaveDraftRequest(AutoSaveDraftRequest&& from) noexcept
    : AutoSaveDraftRequest() {
    *this = ::std::move(from);
  }

  inline AutoSaveDraftRequest& operator=(const AutoSaveDraftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoSaveDraftRequest& operator=(AutoSaveDraftRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoSaveDraftRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoSaveDraftRequest* internal_default_instance() {
    return reinterpret_cast<const AutoSaveDraftRequest*>(
               &_AutoSaveDraftRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AutoSaveDraftRequest& a, AutoSaveDraftRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoSaveDraftRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoSaveDraftRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoSaveDraftRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoSaveDraftRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoSaveDraftRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoSaveDraftRequest& from) {
    AutoSaveDraftRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoSaveDraftRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.AutoSaveDraftRequest";
  }
  protected:
  explicit AutoSaveDraftRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 6,
    kLabelsFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kContentFieldNumber = 2,
    kReplyToUriFieldNumber = 3,
    kQuoteUriFieldNumber = 4,
    kMentionHandleFieldNumber = 5,
    kThreadgateFieldNumber = 9,
    kInteractionSettingsFieldNumber = 10,
    kVideoFieldNumber = 7,
  };
  // repeated .sonet.drafts.v1.DraftImage images = 6;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::sonet::drafts::v1::DraftImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
      mutable_images();
  private:
  const ::sonet::drafts::v1::DraftImage& _internal_images(int index) const;
  ::sonet::drafts::v1::DraftImage* _internal_add_images();
  public:
  const ::sonet::drafts::v1::DraftImage& images(int index) const;
  ::sonet::drafts::v1::DraftImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
      images() const;

  // repeated string labels = 8;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string reply_to_uri = 3;
  void clear_reply_to_uri();
  const std::string& reply_to_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_uri();
  PROTOBUF_NODISCARD std::string* release_reply_to_uri();
  void set_allocated_reply_to_uri(std::string* reply_to_uri);
  private:
  const std::string& _internal_reply_to_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_uri(const std::string& value);
  std::string* _internal_mutable_reply_to_uri();
  public:

  // string quote_uri = 4;
  void clear_quote_uri();
  const std::string& quote_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_uri();
  PROTOBUF_NODISCARD std::string* release_quote_uri();
  void set_allocated_quote_uri(std::string* quote_uri);
  private:
  const std::string& _internal_quote_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_uri(const std::string& value);
  std::string* _internal_mutable_quote_uri();
  public:

  // string mention_handle = 5;
  void clear_mention_handle();
  const std::string& mention_handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mention_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mention_handle();
  PROTOBUF_NODISCARD std::string* release_mention_handle();
  void set_allocated_mention_handle(std::string* mention_handle);
  private:
  const std::string& _internal_mention_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mention_handle(const std::string& value);
  std::string* _internal_mutable_mention_handle();
  public:

  // bytes threadgate = 9;
  void clear_threadgate();
  const std::string& threadgate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threadgate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threadgate();
  PROTOBUF_NODISCARD std::string* release_threadgate();
  void set_allocated_threadgate(std::string* threadgate);
  private:
  const std::string& _internal_threadgate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threadgate(const std::string& value);
  std::string* _internal_mutable_threadgate();
  public:

  // bytes interaction_settings = 10;
  void clear_interaction_settings();
  const std::string& interaction_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interaction_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interaction_settings();
  PROTOBUF_NODISCARD std::string* release_interaction_settings();
  void set_allocated_interaction_settings(std::string* interaction_settings);
  private:
  const std::string& _internal_interaction_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interaction_settings(const std::string& value);
  std::string* _internal_mutable_interaction_settings();
  public:

  // .sonet.drafts.v1.DraftVideo video = 7;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::sonet::drafts::v1::DraftVideo& video() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::DraftVideo* release_video();
  ::sonet::drafts::v1::DraftVideo* mutable_video();
  void set_allocated_video(::sonet::drafts::v1::DraftVideo* video);
  private:
  const ::sonet::drafts::v1::DraftVideo& _internal_video() const;
  ::sonet::drafts::v1::DraftVideo* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::sonet::drafts::v1::DraftVideo* video);
  ::sonet::drafts::v1::DraftVideo* unsafe_arena_release_video();

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.AutoSaveDraftRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage > images_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mention_handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threadgate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interaction_settings_;
    ::sonet::drafts::v1::DraftVideo* video_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AutoSaveDraftResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.AutoSaveDraftResponse) */ {
 public:
  inline AutoSaveDraftResponse() : AutoSaveDraftResponse(nullptr) {}
  ~AutoSaveDraftResponse() override;
  explicit PROTOBUF_CONSTEXPR AutoSaveDraftResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoSaveDraftResponse(const AutoSaveDraftResponse& from);
  AutoSaveDraftResponse(AutoSaveDraftResponse&& from) noexcept
    : AutoSaveDraftResponse() {
    *this = ::std::move(from);
  }

  inline AutoSaveDraftResponse& operator=(const AutoSaveDraftResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoSaveDraftResponse& operator=(AutoSaveDraftResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoSaveDraftResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoSaveDraftResponse* internal_default_instance() {
    return reinterpret_cast<const AutoSaveDraftResponse*>(
               &_AutoSaveDraftResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AutoSaveDraftResponse& a, AutoSaveDraftResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoSaveDraftResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoSaveDraftResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoSaveDraftResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoSaveDraftResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoSaveDraftResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoSaveDraftResponse& from) {
    AutoSaveDraftResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoSaveDraftResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.AutoSaveDraftResponse";
  }
  protected:
  explicit AutoSaveDraftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kDraftFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .sonet.drafts.v1.Draft draft = 3;
  bool has_draft() const;
  private:
  bool _internal_has_draft() const;
  public:
  void clear_draft();
  const ::sonet::drafts::v1::Draft& draft() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::Draft* release_draft();
  ::sonet::drafts::v1::Draft* mutable_draft();
  void set_allocated_draft(::sonet::drafts::v1::Draft* draft);
  private:
  const ::sonet::drafts::v1::Draft& _internal_draft() const;
  ::sonet::drafts::v1::Draft* _internal_mutable_draft();
  public:
  void unsafe_arena_set_allocated_draft(
      ::sonet::drafts::v1::Draft* draft);
  ::sonet::drafts::v1::Draft* unsafe_arena_release_draft();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.AutoSaveDraftResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::sonet::drafts::v1::Draft* draft_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Draft final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.Draft) */ {
 public:
  inline Draft() : Draft(nullptr) {}
  ~Draft() override;
  explicit PROTOBUF_CONSTEXPR Draft(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Draft(const Draft& from);
  Draft(Draft&& from) noexcept
    : Draft() {
    *this = ::std::move(from);
  }

  inline Draft& operator=(const Draft& from) {
    CopyFrom(from);
    return *this;
  }
  inline Draft& operator=(Draft&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Draft& default_instance() {
    return *internal_default_instance();
  }
  static inline const Draft* internal_default_instance() {
    return reinterpret_cast<const Draft*>(
               &_Draft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Draft& a, Draft& b) {
    a.Swap(&b);
  }
  inline void Swap(Draft* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Draft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Draft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Draft>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Draft& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Draft& from) {
    Draft::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Draft* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.Draft";
  }
  protected:
  explicit Draft(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 8,
    kLabelsFieldNumber = 10,
    kDraftIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kTitleFieldNumber = 3,
    kContentFieldNumber = 4,
    kReplyToUriFieldNumber = 5,
    kQuoteUriFieldNumber = 6,
    kMentionHandleFieldNumber = 7,
    kThreadgateFieldNumber = 11,
    kInteractionSettingsFieldNumber = 12,
    kVideoFieldNumber = 9,
    kCreatedAtFieldNumber = 13,
    kUpdatedAtFieldNumber = 14,
    kIsAutoSavedFieldNumber = 15,
  };
  // repeated .sonet.drafts.v1.DraftImage images = 8;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::sonet::drafts::v1::DraftImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
      mutable_images();
  private:
  const ::sonet::drafts::v1::DraftImage& _internal_images(int index) const;
  ::sonet::drafts::v1::DraftImage* _internal_add_images();
  public:
  const ::sonet::drafts::v1::DraftImage& images(int index) const;
  ::sonet::drafts::v1::DraftImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
      images() const;

  // repeated string labels = 10;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string draft_id = 1;
  void clear_draft_id();
  const std::string& draft_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_draft_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_draft_id();
  PROTOBUF_NODISCARD std::string* release_draft_id();
  void set_allocated_draft_id(std::string* draft_id);
  private:
  const std::string& _internal_draft_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_draft_id(const std::string& value);
  std::string* _internal_mutable_draft_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string reply_to_uri = 5;
  void clear_reply_to_uri();
  const std::string& reply_to_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_uri();
  PROTOBUF_NODISCARD std::string* release_reply_to_uri();
  void set_allocated_reply_to_uri(std::string* reply_to_uri);
  private:
  const std::string& _internal_reply_to_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_uri(const std::string& value);
  std::string* _internal_mutable_reply_to_uri();
  public:

  // string quote_uri = 6;
  void clear_quote_uri();
  const std::string& quote_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_uri();
  PROTOBUF_NODISCARD std::string* release_quote_uri();
  void set_allocated_quote_uri(std::string* quote_uri);
  private:
  const std::string& _internal_quote_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_uri(const std::string& value);
  std::string* _internal_mutable_quote_uri();
  public:

  // string mention_handle = 7;
  void clear_mention_handle();
  const std::string& mention_handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mention_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mention_handle();
  PROTOBUF_NODISCARD std::string* release_mention_handle();
  void set_allocated_mention_handle(std::string* mention_handle);
  private:
  const std::string& _internal_mention_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mention_handle(const std::string& value);
  std::string* _internal_mutable_mention_handle();
  public:

  // bytes threadgate = 11;
  void clear_threadgate();
  const std::string& threadgate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_threadgate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_threadgate();
  PROTOBUF_NODISCARD std::string* release_threadgate();
  void set_allocated_threadgate(std::string* threadgate);
  private:
  const std::string& _internal_threadgate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threadgate(const std::string& value);
  std::string* _internal_mutable_threadgate();
  public:

  // bytes interaction_settings = 12;
  void clear_interaction_settings();
  const std::string& interaction_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interaction_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interaction_settings();
  PROTOBUF_NODISCARD std::string* release_interaction_settings();
  void set_allocated_interaction_settings(std::string* interaction_settings);
  private:
  const std::string& _internal_interaction_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interaction_settings(const std::string& value);
  std::string* _internal_mutable_interaction_settings();
  public:

  // .sonet.drafts.v1.DraftVideo video = 9;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::sonet::drafts::v1::DraftVideo& video() const;
  PROTOBUF_NODISCARD ::sonet::drafts::v1::DraftVideo* release_video();
  ::sonet::drafts::v1::DraftVideo* mutable_video();
  void set_allocated_video(::sonet::drafts::v1::DraftVideo* video);
  private:
  const ::sonet::drafts::v1::DraftVideo& _internal_video() const;
  ::sonet::drafts::v1::DraftVideo* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::sonet::drafts::v1::DraftVideo* video);
  ::sonet::drafts::v1::DraftVideo* unsafe_arena_release_video();

  // .google.protobuf.Timestamp created_at = 13;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 14;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // bool is_auto_saved = 15;
  void clear_is_auto_saved();
  bool is_auto_saved() const;
  void set_is_auto_saved(bool value);
  private:
  bool _internal_is_auto_saved() const;
  void _internal_set_is_auto_saved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.Draft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage > images_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr draft_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mention_handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threadgate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interaction_settings_;
    ::sonet::drafts::v1::DraftVideo* video_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    bool is_auto_saved_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DraftImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.DraftImage) */ {
 public:
  inline DraftImage() : DraftImage(nullptr) {}
  ~DraftImage() override;
  explicit PROTOBUF_CONSTEXPR DraftImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DraftImage(const DraftImage& from);
  DraftImage(DraftImage&& from) noexcept
    : DraftImage() {
    *this = ::std::move(from);
  }

  inline DraftImage& operator=(const DraftImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DraftImage& operator=(DraftImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DraftImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DraftImage* internal_default_instance() {
    return reinterpret_cast<const DraftImage*>(
               &_DraftImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DraftImage& a, DraftImage& b) {
    a.Swap(&b);
  }
  inline void Swap(DraftImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DraftImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DraftImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DraftImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DraftImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DraftImage& from) {
    DraftImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DraftImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.DraftImage";
  }
  protected:
  explicit DraftImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kAltTextFieldNumber = 4,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string alt_text = 4;
  void clear_alt_text();
  const std::string& alt_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alt_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alt_text();
  PROTOBUF_NODISCARD std::string* release_alt_text();
  void set_allocated_alt_text(std::string* alt_text);
  private:
  const std::string& _internal_alt_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alt_text(const std::string& value);
  std::string* _internal_mutable_alt_text();
  public:

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.DraftImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alt_text_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DraftVideo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.drafts.v1.DraftVideo) */ {
 public:
  inline DraftVideo() : DraftVideo(nullptr) {}
  ~DraftVideo() override;
  explicit PROTOBUF_CONSTEXPR DraftVideo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DraftVideo(const DraftVideo& from);
  DraftVideo(DraftVideo&& from) noexcept
    : DraftVideo() {
    *this = ::std::move(from);
  }

  inline DraftVideo& operator=(const DraftVideo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DraftVideo& operator=(DraftVideo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DraftVideo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DraftVideo* internal_default_instance() {
    return reinterpret_cast<const DraftVideo*>(
               &_DraftVideo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DraftVideo& a, DraftVideo& b) {
    a.Swap(&b);
  }
  inline void Swap(DraftVideo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DraftVideo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DraftVideo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DraftVideo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DraftVideo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DraftVideo& from) {
    DraftVideo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DraftVideo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.drafts.v1.DraftVideo";
  }
  protected:
  explicit DraftVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.drafts.v1.DraftVideo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdrafts_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateDraftRequest

// string user_id = 1;
inline void CreateDraftRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.user_id)
}
inline std::string* CreateDraftRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.user_id)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CreateDraftRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateDraftRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.user_id)
}

// string content = 2;
inline void CreateDraftRequest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::content() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.content)
}
inline std::string* CreateDraftRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.content)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CreateDraftRequest::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_content() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.content)
  return _impl_.content_.Release();
}
inline void CreateDraftRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.content)
}

// string reply_to_uri = 3;
inline void CreateDraftRequest::clear_reply_to_uri() {
  _impl_.reply_to_uri_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::reply_to_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.reply_to_uri)
  return _internal_reply_to_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_reply_to_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.reply_to_uri)
}
inline std::string* CreateDraftRequest::mutable_reply_to_uri() {
  std::string* _s = _internal_mutable_reply_to_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.reply_to_uri)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_reply_to_uri() const {
  return _impl_.reply_to_uri_.Get();
}
inline void CreateDraftRequest::_internal_set_reply_to_uri(const std::string& value) {
  
  _impl_.reply_to_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_reply_to_uri() {
  
  return _impl_.reply_to_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_reply_to_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.reply_to_uri)
  return _impl_.reply_to_uri_.Release();
}
inline void CreateDraftRequest::set_allocated_reply_to_uri(std::string* reply_to_uri) {
  if (reply_to_uri != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_uri_.SetAllocated(reply_to_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_uri_.IsDefault()) {
    _impl_.reply_to_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.reply_to_uri)
}

// string quote_uri = 4;
inline void CreateDraftRequest::clear_quote_uri() {
  _impl_.quote_uri_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::quote_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.quote_uri)
  return _internal_quote_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_quote_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.quote_uri)
}
inline std::string* CreateDraftRequest::mutable_quote_uri() {
  std::string* _s = _internal_mutable_quote_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.quote_uri)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_quote_uri() const {
  return _impl_.quote_uri_.Get();
}
inline void CreateDraftRequest::_internal_set_quote_uri(const std::string& value) {
  
  _impl_.quote_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_quote_uri() {
  
  return _impl_.quote_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_quote_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.quote_uri)
  return _impl_.quote_uri_.Release();
}
inline void CreateDraftRequest::set_allocated_quote_uri(std::string* quote_uri) {
  if (quote_uri != nullptr) {
    
  } else {
    
  }
  _impl_.quote_uri_.SetAllocated(quote_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_uri_.IsDefault()) {
    _impl_.quote_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.quote_uri)
}

// string mention_handle = 5;
inline void CreateDraftRequest::clear_mention_handle() {
  _impl_.mention_handle_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::mention_handle() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.mention_handle)
  return _internal_mention_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_mention_handle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mention_handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.mention_handle)
}
inline std::string* CreateDraftRequest::mutable_mention_handle() {
  std::string* _s = _internal_mutable_mention_handle();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.mention_handle)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_mention_handle() const {
  return _impl_.mention_handle_.Get();
}
inline void CreateDraftRequest::_internal_set_mention_handle(const std::string& value) {
  
  _impl_.mention_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_mention_handle() {
  
  return _impl_.mention_handle_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_mention_handle() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.mention_handle)
  return _impl_.mention_handle_.Release();
}
inline void CreateDraftRequest::set_allocated_mention_handle(std::string* mention_handle) {
  if (mention_handle != nullptr) {
    
  } else {
    
  }
  _impl_.mention_handle_.SetAllocated(mention_handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mention_handle_.IsDefault()) {
    _impl_.mention_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.mention_handle)
}

// repeated .sonet.drafts.v1.DraftImage images = 6;
inline int CreateDraftRequest::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int CreateDraftRequest::images_size() const {
  return _internal_images_size();
}
inline void CreateDraftRequest::clear_images() {
  _impl_.images_.Clear();
}
inline ::sonet::drafts::v1::DraftImage* CreateDraftRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
CreateDraftRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.CreateDraftRequest.images)
  return &_impl_.images_;
}
inline const ::sonet::drafts::v1::DraftImage& CreateDraftRequest::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::sonet::drafts::v1::DraftImage& CreateDraftRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.images)
  return _internal_images(index);
}
inline ::sonet::drafts::v1::DraftImage* CreateDraftRequest::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::sonet::drafts::v1::DraftImage* CreateDraftRequest::add_images() {
  ::sonet::drafts::v1::DraftImage* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.CreateDraftRequest.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
CreateDraftRequest::images() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.CreateDraftRequest.images)
  return _impl_.images_;
}

// .sonet.drafts.v1.DraftVideo video = 7;
inline bool CreateDraftRequest::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool CreateDraftRequest::has_video() const {
  return _internal_has_video();
}
inline void CreateDraftRequest::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
inline const ::sonet::drafts::v1::DraftVideo& CreateDraftRequest::_internal_video() const {
  const ::sonet::drafts::v1::DraftVideo* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::DraftVideo&>(
      ::sonet::drafts::v1::_DraftVideo_default_instance_);
}
inline const ::sonet::drafts::v1::DraftVideo& CreateDraftRequest::video() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.video)
  return _internal_video();
}
inline void CreateDraftRequest::unsafe_arena_set_allocated_video(
    ::sonet::drafts::v1::DraftVideo* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.CreateDraftRequest.video)
}
inline ::sonet::drafts::v1::DraftVideo* CreateDraftRequest::release_video() {
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* CreateDraftRequest::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.video)
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* CreateDraftRequest::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::DraftVideo>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::sonet::drafts::v1::DraftVideo* CreateDraftRequest::mutable_video() {
  ::sonet::drafts::v1::DraftVideo* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.video)
  return _msg;
}
inline void CreateDraftRequest::set_allocated_video(::sonet::drafts::v1::DraftVideo* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.video)
}

// repeated string labels = 8;
inline int CreateDraftRequest::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int CreateDraftRequest::labels_size() const {
  return _internal_labels_size();
}
inline void CreateDraftRequest::clear_labels() {
  _impl_.labels_.Clear();
}
inline std::string* CreateDraftRequest::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:sonet.drafts.v1.CreateDraftRequest.labels)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const std::string& CreateDraftRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.labels)
  return _internal_labels(index);
}
inline std::string* CreateDraftRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.labels)
  return _impl_.labels_.Mutable(index);
}
inline void CreateDraftRequest::set_labels(int index, const std::string& value) {
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline void CreateDraftRequest::set_labels(int index, std::string&& value) {
  _impl_.labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline void CreateDraftRequest::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline void CreateDraftRequest::set_labels(int index, const char* value, size_t size) {
  _impl_.labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline std::string* CreateDraftRequest::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline void CreateDraftRequest::add_labels(const std::string& value) {
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline void CreateDraftRequest::add_labels(std::string&& value) {
  _impl_.labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline void CreateDraftRequest::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline void CreateDraftRequest::add_labels(const char* value, size_t size) {
  _impl_.labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.drafts.v1.CreateDraftRequest.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDraftRequest::labels() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.CreateDraftRequest.labels)
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDraftRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.CreateDraftRequest.labels)
  return &_impl_.labels_;
}

// bytes threadgate = 9;
inline void CreateDraftRequest::clear_threadgate() {
  _impl_.threadgate_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::threadgate() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.threadgate)
  return _internal_threadgate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_threadgate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threadgate_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.threadgate)
}
inline std::string* CreateDraftRequest::mutable_threadgate() {
  std::string* _s = _internal_mutable_threadgate();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.threadgate)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_threadgate() const {
  return _impl_.threadgate_.Get();
}
inline void CreateDraftRequest::_internal_set_threadgate(const std::string& value) {
  
  _impl_.threadgate_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_threadgate() {
  
  return _impl_.threadgate_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_threadgate() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.threadgate)
  return _impl_.threadgate_.Release();
}
inline void CreateDraftRequest::set_allocated_threadgate(std::string* threadgate) {
  if (threadgate != nullptr) {
    
  } else {
    
  }
  _impl_.threadgate_.SetAllocated(threadgate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threadgate_.IsDefault()) {
    _impl_.threadgate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.threadgate)
}

// bytes interaction_settings = 10;
inline void CreateDraftRequest::clear_interaction_settings() {
  _impl_.interaction_settings_.ClearToEmpty();
}
inline const std::string& CreateDraftRequest::interaction_settings() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.interaction_settings)
  return _internal_interaction_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftRequest::set_interaction_settings(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interaction_settings_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.interaction_settings)
}
inline std::string* CreateDraftRequest::mutable_interaction_settings() {
  std::string* _s = _internal_mutable_interaction_settings();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftRequest.interaction_settings)
  return _s;
}
inline const std::string& CreateDraftRequest::_internal_interaction_settings() const {
  return _impl_.interaction_settings_.Get();
}
inline void CreateDraftRequest::_internal_set_interaction_settings(const std::string& value) {
  
  _impl_.interaction_settings_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::_internal_mutable_interaction_settings() {
  
  return _impl_.interaction_settings_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftRequest::release_interaction_settings() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftRequest.interaction_settings)
  return _impl_.interaction_settings_.Release();
}
inline void CreateDraftRequest::set_allocated_interaction_settings(std::string* interaction_settings) {
  if (interaction_settings != nullptr) {
    
  } else {
    
  }
  _impl_.interaction_settings_.SetAllocated(interaction_settings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interaction_settings_.IsDefault()) {
    _impl_.interaction_settings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftRequest.interaction_settings)
}

// bool is_auto_saved = 11;
inline void CreateDraftRequest::clear_is_auto_saved() {
  _impl_.is_auto_saved_ = false;
}
inline bool CreateDraftRequest::_internal_is_auto_saved() const {
  return _impl_.is_auto_saved_;
}
inline bool CreateDraftRequest::is_auto_saved() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftRequest.is_auto_saved)
  return _internal_is_auto_saved();
}
inline void CreateDraftRequest::_internal_set_is_auto_saved(bool value) {
  
  _impl_.is_auto_saved_ = value;
}
inline void CreateDraftRequest::set_is_auto_saved(bool value) {
  _internal_set_is_auto_saved(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftRequest.is_auto_saved)
}

// -------------------------------------------------------------------

// CreateDraftResponse

// bool success = 1;
inline void CreateDraftResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool CreateDraftResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool CreateDraftResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftResponse.success)
  return _internal_success();
}
inline void CreateDraftResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CreateDraftResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftResponse.success)
}

// string error_message = 2;
inline void CreateDraftResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CreateDraftResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDraftResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.CreateDraftResponse.error_message)
}
inline std::string* CreateDraftResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftResponse.error_message)
  return _s;
}
inline const std::string& CreateDraftResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CreateDraftResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDraftResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateDraftResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CreateDraftResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftResponse.error_message)
}

// .sonet.drafts.v1.Draft draft = 3;
inline bool CreateDraftResponse::_internal_has_draft() const {
  return this != internal_default_instance() && _impl_.draft_ != nullptr;
}
inline bool CreateDraftResponse::has_draft() const {
  return _internal_has_draft();
}
inline void CreateDraftResponse::clear_draft() {
  if (GetArenaForAllocation() == nullptr && _impl_.draft_ != nullptr) {
    delete _impl_.draft_;
  }
  _impl_.draft_ = nullptr;
}
inline const ::sonet::drafts::v1::Draft& CreateDraftResponse::_internal_draft() const {
  const ::sonet::drafts::v1::Draft* p = _impl_.draft_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::Draft&>(
      ::sonet::drafts::v1::_Draft_default_instance_);
}
inline const ::sonet::drafts::v1::Draft& CreateDraftResponse::draft() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.CreateDraftResponse.draft)
  return _internal_draft();
}
inline void CreateDraftResponse::unsafe_arena_set_allocated_draft(
    ::sonet::drafts::v1::Draft* draft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.draft_);
  }
  _impl_.draft_ = draft;
  if (draft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.CreateDraftResponse.draft)
}
inline ::sonet::drafts::v1::Draft* CreateDraftResponse::release_draft() {
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::Draft* CreateDraftResponse::unsafe_arena_release_draft() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.CreateDraftResponse.draft)
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::Draft* CreateDraftResponse::_internal_mutable_draft() {
  
  if (_impl_.draft_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::Draft>(GetArenaForAllocation());
    _impl_.draft_ = p;
  }
  return _impl_.draft_;
}
inline ::sonet::drafts::v1::Draft* CreateDraftResponse::mutable_draft() {
  ::sonet::drafts::v1::Draft* _msg = _internal_mutable_draft();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.CreateDraftResponse.draft)
  return _msg;
}
inline void CreateDraftResponse::set_allocated_draft(::sonet::drafts::v1::Draft* draft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.draft_;
  }
  if (draft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(draft);
    if (message_arena != submessage_arena) {
      draft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draft, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.draft_ = draft;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.CreateDraftResponse.draft)
}

// -------------------------------------------------------------------

// GetUserDraftsRequest

// string user_id = 1;
inline void GetUserDraftsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetUserDraftsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserDraftsRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsRequest.user_id)
}
inline std::string* GetUserDraftsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetUserDraftsRequest.user_id)
  return _s;
}
inline const std::string& GetUserDraftsRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetUserDraftsRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserDraftsRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserDraftsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetUserDraftsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetUserDraftsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetUserDraftsRequest.user_id)
}

// int32 limit = 2;
inline void GetUserDraftsRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetUserDraftsRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetUserDraftsRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsRequest.limit)
  return _internal_limit();
}
inline void GetUserDraftsRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetUserDraftsRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsRequest.limit)
}

// string cursor = 3;
inline void GetUserDraftsRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetUserDraftsRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserDraftsRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsRequest.cursor)
}
inline std::string* GetUserDraftsRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetUserDraftsRequest.cursor)
  return _s;
}
inline const std::string& GetUserDraftsRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetUserDraftsRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserDraftsRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserDraftsRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetUserDraftsRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void GetUserDraftsRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetUserDraftsRequest.cursor)
}

// bool include_auto_saved = 4;
inline void GetUserDraftsRequest::clear_include_auto_saved() {
  _impl_.include_auto_saved_ = false;
}
inline bool GetUserDraftsRequest::_internal_include_auto_saved() const {
  return _impl_.include_auto_saved_;
}
inline bool GetUserDraftsRequest::include_auto_saved() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsRequest.include_auto_saved)
  return _internal_include_auto_saved();
}
inline void GetUserDraftsRequest::_internal_set_include_auto_saved(bool value) {
  
  _impl_.include_auto_saved_ = value;
}
inline void GetUserDraftsRequest::set_include_auto_saved(bool value) {
  _internal_set_include_auto_saved(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsRequest.include_auto_saved)
}

// -------------------------------------------------------------------

// GetUserDraftsResponse

// bool success = 1;
inline void GetUserDraftsResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetUserDraftsResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetUserDraftsResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsResponse.success)
  return _internal_success();
}
inline void GetUserDraftsResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetUserDraftsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsResponse.success)
}

// string error_message = 2;
inline void GetUserDraftsResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetUserDraftsResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserDraftsResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsResponse.error_message)
}
inline std::string* GetUserDraftsResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetUserDraftsResponse.error_message)
  return _s;
}
inline const std::string& GetUserDraftsResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetUserDraftsResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserDraftsResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserDraftsResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetUserDraftsResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetUserDraftsResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetUserDraftsResponse.error_message)
}

// repeated .sonet.drafts.v1.Draft drafts = 3;
inline int GetUserDraftsResponse::_internal_drafts_size() const {
  return _impl_.drafts_.size();
}
inline int GetUserDraftsResponse::drafts_size() const {
  return _internal_drafts_size();
}
inline void GetUserDraftsResponse::clear_drafts() {
  _impl_.drafts_.Clear();
}
inline ::sonet::drafts::v1::Draft* GetUserDraftsResponse::mutable_drafts(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetUserDraftsResponse.drafts)
  return _impl_.drafts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::Draft >*
GetUserDraftsResponse::mutable_drafts() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.GetUserDraftsResponse.drafts)
  return &_impl_.drafts_;
}
inline const ::sonet::drafts::v1::Draft& GetUserDraftsResponse::_internal_drafts(int index) const {
  return _impl_.drafts_.Get(index);
}
inline const ::sonet::drafts::v1::Draft& GetUserDraftsResponse::drafts(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsResponse.drafts)
  return _internal_drafts(index);
}
inline ::sonet::drafts::v1::Draft* GetUserDraftsResponse::_internal_add_drafts() {
  return _impl_.drafts_.Add();
}
inline ::sonet::drafts::v1::Draft* GetUserDraftsResponse::add_drafts() {
  ::sonet::drafts::v1::Draft* _add = _internal_add_drafts();
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.GetUserDraftsResponse.drafts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::Draft >&
GetUserDraftsResponse::drafts() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.GetUserDraftsResponse.drafts)
  return _impl_.drafts_;
}

// string next_cursor = 4;
inline void GetUserDraftsResponse::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& GetUserDraftsResponse::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetUserDraftsResponse.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserDraftsResponse::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetUserDraftsResponse.next_cursor)
}
inline std::string* GetUserDraftsResponse::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetUserDraftsResponse.next_cursor)
  return _s;
}
inline const std::string& GetUserDraftsResponse::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void GetUserDraftsResponse::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserDraftsResponse::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserDraftsResponse::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetUserDraftsResponse.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void GetUserDraftsResponse::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetUserDraftsResponse.next_cursor)
}

// -------------------------------------------------------------------

// GetDraftRequest

// string draft_id = 1;
inline void GetDraftRequest::clear_draft_id() {
  _impl_.draft_id_.ClearToEmpty();
}
inline const std::string& GetDraftRequest::draft_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetDraftRequest.draft_id)
  return _internal_draft_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDraftRequest::set_draft_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.draft_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetDraftRequest.draft_id)
}
inline std::string* GetDraftRequest::mutable_draft_id() {
  std::string* _s = _internal_mutable_draft_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetDraftRequest.draft_id)
  return _s;
}
inline const std::string& GetDraftRequest::_internal_draft_id() const {
  return _impl_.draft_id_.Get();
}
inline void GetDraftRequest::_internal_set_draft_id(const std::string& value) {
  
  _impl_.draft_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDraftRequest::_internal_mutable_draft_id() {
  
  return _impl_.draft_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDraftRequest::release_draft_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetDraftRequest.draft_id)
  return _impl_.draft_id_.Release();
}
inline void GetDraftRequest::set_allocated_draft_id(std::string* draft_id) {
  if (draft_id != nullptr) {
    
  } else {
    
  }
  _impl_.draft_id_.SetAllocated(draft_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.draft_id_.IsDefault()) {
    _impl_.draft_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetDraftRequest.draft_id)
}

// string user_id = 2;
inline void GetDraftRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetDraftRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetDraftRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDraftRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetDraftRequest.user_id)
}
inline std::string* GetDraftRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetDraftRequest.user_id)
  return _s;
}
inline const std::string& GetDraftRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetDraftRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDraftRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDraftRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetDraftRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetDraftRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetDraftRequest.user_id)
}

// -------------------------------------------------------------------

// GetDraftResponse

// bool success = 1;
inline void GetDraftResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetDraftResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GetDraftResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetDraftResponse.success)
  return _internal_success();
}
inline void GetDraftResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetDraftResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetDraftResponse.success)
}

// string error_message = 2;
inline void GetDraftResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& GetDraftResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetDraftResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDraftResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.GetDraftResponse.error_message)
}
inline std::string* GetDraftResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetDraftResponse.error_message)
  return _s;
}
inline const std::string& GetDraftResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void GetDraftResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDraftResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDraftResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetDraftResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void GetDraftResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetDraftResponse.error_message)
}

// .sonet.drafts.v1.Draft draft = 3;
inline bool GetDraftResponse::_internal_has_draft() const {
  return this != internal_default_instance() && _impl_.draft_ != nullptr;
}
inline bool GetDraftResponse::has_draft() const {
  return _internal_has_draft();
}
inline void GetDraftResponse::clear_draft() {
  if (GetArenaForAllocation() == nullptr && _impl_.draft_ != nullptr) {
    delete _impl_.draft_;
  }
  _impl_.draft_ = nullptr;
}
inline const ::sonet::drafts::v1::Draft& GetDraftResponse::_internal_draft() const {
  const ::sonet::drafts::v1::Draft* p = _impl_.draft_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::Draft&>(
      ::sonet::drafts::v1::_Draft_default_instance_);
}
inline const ::sonet::drafts::v1::Draft& GetDraftResponse::draft() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.GetDraftResponse.draft)
  return _internal_draft();
}
inline void GetDraftResponse::unsafe_arena_set_allocated_draft(
    ::sonet::drafts::v1::Draft* draft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.draft_);
  }
  _impl_.draft_ = draft;
  if (draft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.GetDraftResponse.draft)
}
inline ::sonet::drafts::v1::Draft* GetDraftResponse::release_draft() {
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::Draft* GetDraftResponse::unsafe_arena_release_draft() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.GetDraftResponse.draft)
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::Draft* GetDraftResponse::_internal_mutable_draft() {
  
  if (_impl_.draft_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::Draft>(GetArenaForAllocation());
    _impl_.draft_ = p;
  }
  return _impl_.draft_;
}
inline ::sonet::drafts::v1::Draft* GetDraftResponse::mutable_draft() {
  ::sonet::drafts::v1::Draft* _msg = _internal_mutable_draft();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.GetDraftResponse.draft)
  return _msg;
}
inline void GetDraftResponse::set_allocated_draft(::sonet::drafts::v1::Draft* draft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.draft_;
  }
  if (draft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(draft);
    if (message_arena != submessage_arena) {
      draft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draft, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.draft_ = draft;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.GetDraftResponse.draft)
}

// -------------------------------------------------------------------

// UpdateDraftRequest

// string draft_id = 1;
inline void UpdateDraftRequest::clear_draft_id() {
  _impl_.draft_id_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::draft_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.draft_id)
  return _internal_draft_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_draft_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.draft_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.draft_id)
}
inline std::string* UpdateDraftRequest::mutable_draft_id() {
  std::string* _s = _internal_mutable_draft_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.draft_id)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_draft_id() const {
  return _impl_.draft_id_.Get();
}
inline void UpdateDraftRequest::_internal_set_draft_id(const std::string& value) {
  
  _impl_.draft_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_draft_id() {
  
  return _impl_.draft_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_draft_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.draft_id)
  return _impl_.draft_id_.Release();
}
inline void UpdateDraftRequest::set_allocated_draft_id(std::string* draft_id) {
  if (draft_id != nullptr) {
    
  } else {
    
  }
  _impl_.draft_id_.SetAllocated(draft_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.draft_id_.IsDefault()) {
    _impl_.draft_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.draft_id)
}

// string user_id = 2;
inline void UpdateDraftRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.user_id)
}
inline std::string* UpdateDraftRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.user_id)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UpdateDraftRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UpdateDraftRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.user_id)
}

// string content = 3;
inline void UpdateDraftRequest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::content() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.content)
}
inline std::string* UpdateDraftRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.content)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void UpdateDraftRequest::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_content() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.content)
  return _impl_.content_.Release();
}
inline void UpdateDraftRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.content)
}

// string reply_to_uri = 4;
inline void UpdateDraftRequest::clear_reply_to_uri() {
  _impl_.reply_to_uri_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::reply_to_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.reply_to_uri)
  return _internal_reply_to_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_reply_to_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.reply_to_uri)
}
inline std::string* UpdateDraftRequest::mutable_reply_to_uri() {
  std::string* _s = _internal_mutable_reply_to_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.reply_to_uri)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_reply_to_uri() const {
  return _impl_.reply_to_uri_.Get();
}
inline void UpdateDraftRequest::_internal_set_reply_to_uri(const std::string& value) {
  
  _impl_.reply_to_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_reply_to_uri() {
  
  return _impl_.reply_to_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_reply_to_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.reply_to_uri)
  return _impl_.reply_to_uri_.Release();
}
inline void UpdateDraftRequest::set_allocated_reply_to_uri(std::string* reply_to_uri) {
  if (reply_to_uri != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_uri_.SetAllocated(reply_to_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_uri_.IsDefault()) {
    _impl_.reply_to_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.reply_to_uri)
}

// string quote_uri = 5;
inline void UpdateDraftRequest::clear_quote_uri() {
  _impl_.quote_uri_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::quote_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.quote_uri)
  return _internal_quote_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_quote_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.quote_uri)
}
inline std::string* UpdateDraftRequest::mutable_quote_uri() {
  std::string* _s = _internal_mutable_quote_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.quote_uri)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_quote_uri() const {
  return _impl_.quote_uri_.Get();
}
inline void UpdateDraftRequest::_internal_set_quote_uri(const std::string& value) {
  
  _impl_.quote_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_quote_uri() {
  
  return _impl_.quote_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_quote_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.quote_uri)
  return _impl_.quote_uri_.Release();
}
inline void UpdateDraftRequest::set_allocated_quote_uri(std::string* quote_uri) {
  if (quote_uri != nullptr) {
    
  } else {
    
  }
  _impl_.quote_uri_.SetAllocated(quote_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_uri_.IsDefault()) {
    _impl_.quote_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.quote_uri)
}

// string mention_handle = 6;
inline void UpdateDraftRequest::clear_mention_handle() {
  _impl_.mention_handle_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::mention_handle() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.mention_handle)
  return _internal_mention_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_mention_handle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mention_handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.mention_handle)
}
inline std::string* UpdateDraftRequest::mutable_mention_handle() {
  std::string* _s = _internal_mutable_mention_handle();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.mention_handle)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_mention_handle() const {
  return _impl_.mention_handle_.Get();
}
inline void UpdateDraftRequest::_internal_set_mention_handle(const std::string& value) {
  
  _impl_.mention_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_mention_handle() {
  
  return _impl_.mention_handle_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_mention_handle() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.mention_handle)
  return _impl_.mention_handle_.Release();
}
inline void UpdateDraftRequest::set_allocated_mention_handle(std::string* mention_handle) {
  if (mention_handle != nullptr) {
    
  } else {
    
  }
  _impl_.mention_handle_.SetAllocated(mention_handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mention_handle_.IsDefault()) {
    _impl_.mention_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.mention_handle)
}

// repeated .sonet.drafts.v1.DraftImage images = 7;
inline int UpdateDraftRequest::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int UpdateDraftRequest::images_size() const {
  return _internal_images_size();
}
inline void UpdateDraftRequest::clear_images() {
  _impl_.images_.Clear();
}
inline ::sonet::drafts::v1::DraftImage* UpdateDraftRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
UpdateDraftRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.UpdateDraftRequest.images)
  return &_impl_.images_;
}
inline const ::sonet::drafts::v1::DraftImage& UpdateDraftRequest::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::sonet::drafts::v1::DraftImage& UpdateDraftRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.images)
  return _internal_images(index);
}
inline ::sonet::drafts::v1::DraftImage* UpdateDraftRequest::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::sonet::drafts::v1::DraftImage* UpdateDraftRequest::add_images() {
  ::sonet::drafts::v1::DraftImage* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.UpdateDraftRequest.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
UpdateDraftRequest::images() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.UpdateDraftRequest.images)
  return _impl_.images_;
}

// .sonet.drafts.v1.DraftVideo video = 8;
inline bool UpdateDraftRequest::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool UpdateDraftRequest::has_video() const {
  return _internal_has_video();
}
inline void UpdateDraftRequest::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
inline const ::sonet::drafts::v1::DraftVideo& UpdateDraftRequest::_internal_video() const {
  const ::sonet::drafts::v1::DraftVideo* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::DraftVideo&>(
      ::sonet::drafts::v1::_DraftVideo_default_instance_);
}
inline const ::sonet::drafts::v1::DraftVideo& UpdateDraftRequest::video() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.video)
  return _internal_video();
}
inline void UpdateDraftRequest::unsafe_arena_set_allocated_video(
    ::sonet::drafts::v1::DraftVideo* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.UpdateDraftRequest.video)
}
inline ::sonet::drafts::v1::DraftVideo* UpdateDraftRequest::release_video() {
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* UpdateDraftRequest::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.video)
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* UpdateDraftRequest::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::DraftVideo>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::sonet::drafts::v1::DraftVideo* UpdateDraftRequest::mutable_video() {
  ::sonet::drafts::v1::DraftVideo* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.video)
  return _msg;
}
inline void UpdateDraftRequest::set_allocated_video(::sonet::drafts::v1::DraftVideo* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.video)
}

// repeated string labels = 9;
inline int UpdateDraftRequest::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int UpdateDraftRequest::labels_size() const {
  return _internal_labels_size();
}
inline void UpdateDraftRequest::clear_labels() {
  _impl_.labels_.Clear();
}
inline std::string* UpdateDraftRequest::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:sonet.drafts.v1.UpdateDraftRequest.labels)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const std::string& UpdateDraftRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.labels)
  return _internal_labels(index);
}
inline std::string* UpdateDraftRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.labels)
  return _impl_.labels_.Mutable(index);
}
inline void UpdateDraftRequest::set_labels(int index, const std::string& value) {
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline void UpdateDraftRequest::set_labels(int index, std::string&& value) {
  _impl_.labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline void UpdateDraftRequest::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline void UpdateDraftRequest::set_labels(int index, const char* value, size_t size) {
  _impl_.labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline std::string* UpdateDraftRequest::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline void UpdateDraftRequest::add_labels(const std::string& value) {
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline void UpdateDraftRequest::add_labels(std::string&& value) {
  _impl_.labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline void UpdateDraftRequest::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline void UpdateDraftRequest::add_labels(const char* value, size_t size) {
  _impl_.labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.drafts.v1.UpdateDraftRequest.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateDraftRequest::labels() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.UpdateDraftRequest.labels)
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateDraftRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.UpdateDraftRequest.labels)
  return &_impl_.labels_;
}

// bytes threadgate = 10;
inline void UpdateDraftRequest::clear_threadgate() {
  _impl_.threadgate_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::threadgate() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.threadgate)
  return _internal_threadgate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_threadgate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threadgate_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.threadgate)
}
inline std::string* UpdateDraftRequest::mutable_threadgate() {
  std::string* _s = _internal_mutable_threadgate();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.threadgate)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_threadgate() const {
  return _impl_.threadgate_.Get();
}
inline void UpdateDraftRequest::_internal_set_threadgate(const std::string& value) {
  
  _impl_.threadgate_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_threadgate() {
  
  return _impl_.threadgate_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_threadgate() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.threadgate)
  return _impl_.threadgate_.Release();
}
inline void UpdateDraftRequest::set_allocated_threadgate(std::string* threadgate) {
  if (threadgate != nullptr) {
    
  } else {
    
  }
  _impl_.threadgate_.SetAllocated(threadgate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threadgate_.IsDefault()) {
    _impl_.threadgate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.threadgate)
}

// bytes interaction_settings = 11;
inline void UpdateDraftRequest::clear_interaction_settings() {
  _impl_.interaction_settings_.ClearToEmpty();
}
inline const std::string& UpdateDraftRequest::interaction_settings() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftRequest.interaction_settings)
  return _internal_interaction_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftRequest::set_interaction_settings(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interaction_settings_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftRequest.interaction_settings)
}
inline std::string* UpdateDraftRequest::mutable_interaction_settings() {
  std::string* _s = _internal_mutable_interaction_settings();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftRequest.interaction_settings)
  return _s;
}
inline const std::string& UpdateDraftRequest::_internal_interaction_settings() const {
  return _impl_.interaction_settings_.Get();
}
inline void UpdateDraftRequest::_internal_set_interaction_settings(const std::string& value) {
  
  _impl_.interaction_settings_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::_internal_mutable_interaction_settings() {
  
  return _impl_.interaction_settings_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftRequest::release_interaction_settings() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftRequest.interaction_settings)
  return _impl_.interaction_settings_.Release();
}
inline void UpdateDraftRequest::set_allocated_interaction_settings(std::string* interaction_settings) {
  if (interaction_settings != nullptr) {
    
  } else {
    
  }
  _impl_.interaction_settings_.SetAllocated(interaction_settings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interaction_settings_.IsDefault()) {
    _impl_.interaction_settings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftRequest.interaction_settings)
}

// -------------------------------------------------------------------

// UpdateDraftResponse

// bool success = 1;
inline void UpdateDraftResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UpdateDraftResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UpdateDraftResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftResponse.success)
  return _internal_success();
}
inline void UpdateDraftResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UpdateDraftResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftResponse.success)
}

// string error_message = 2;
inline void UpdateDraftResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& UpdateDraftResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDraftResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.UpdateDraftResponse.error_message)
}
inline std::string* UpdateDraftResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftResponse.error_message)
  return _s;
}
inline const std::string& UpdateDraftResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void UpdateDraftResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDraftResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateDraftResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void UpdateDraftResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftResponse.error_message)
}

// .sonet.drafts.v1.Draft draft = 3;
inline bool UpdateDraftResponse::_internal_has_draft() const {
  return this != internal_default_instance() && _impl_.draft_ != nullptr;
}
inline bool UpdateDraftResponse::has_draft() const {
  return _internal_has_draft();
}
inline void UpdateDraftResponse::clear_draft() {
  if (GetArenaForAllocation() == nullptr && _impl_.draft_ != nullptr) {
    delete _impl_.draft_;
  }
  _impl_.draft_ = nullptr;
}
inline const ::sonet::drafts::v1::Draft& UpdateDraftResponse::_internal_draft() const {
  const ::sonet::drafts::v1::Draft* p = _impl_.draft_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::Draft&>(
      ::sonet::drafts::v1::_Draft_default_instance_);
}
inline const ::sonet::drafts::v1::Draft& UpdateDraftResponse::draft() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.UpdateDraftResponse.draft)
  return _internal_draft();
}
inline void UpdateDraftResponse::unsafe_arena_set_allocated_draft(
    ::sonet::drafts::v1::Draft* draft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.draft_);
  }
  _impl_.draft_ = draft;
  if (draft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.UpdateDraftResponse.draft)
}
inline ::sonet::drafts::v1::Draft* UpdateDraftResponse::release_draft() {
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::Draft* UpdateDraftResponse::unsafe_arena_release_draft() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.UpdateDraftResponse.draft)
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::Draft* UpdateDraftResponse::_internal_mutable_draft() {
  
  if (_impl_.draft_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::Draft>(GetArenaForAllocation());
    _impl_.draft_ = p;
  }
  return _impl_.draft_;
}
inline ::sonet::drafts::v1::Draft* UpdateDraftResponse::mutable_draft() {
  ::sonet::drafts::v1::Draft* _msg = _internal_mutable_draft();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.UpdateDraftResponse.draft)
  return _msg;
}
inline void UpdateDraftResponse::set_allocated_draft(::sonet::drafts::v1::Draft* draft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.draft_;
  }
  if (draft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(draft);
    if (message_arena != submessage_arena) {
      draft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draft, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.draft_ = draft;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.UpdateDraftResponse.draft)
}

// -------------------------------------------------------------------

// DeleteDraftRequest

// string draft_id = 1;
inline void DeleteDraftRequest::clear_draft_id() {
  _impl_.draft_id_.ClearToEmpty();
}
inline const std::string& DeleteDraftRequest::draft_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DeleteDraftRequest.draft_id)
  return _internal_draft_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDraftRequest::set_draft_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.draft_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DeleteDraftRequest.draft_id)
}
inline std::string* DeleteDraftRequest::mutable_draft_id() {
  std::string* _s = _internal_mutable_draft_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.DeleteDraftRequest.draft_id)
  return _s;
}
inline const std::string& DeleteDraftRequest::_internal_draft_id() const {
  return _impl_.draft_id_.Get();
}
inline void DeleteDraftRequest::_internal_set_draft_id(const std::string& value) {
  
  _impl_.draft_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDraftRequest::_internal_mutable_draft_id() {
  
  return _impl_.draft_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDraftRequest::release_draft_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.DeleteDraftRequest.draft_id)
  return _impl_.draft_id_.Release();
}
inline void DeleteDraftRequest::set_allocated_draft_id(std::string* draft_id) {
  if (draft_id != nullptr) {
    
  } else {
    
  }
  _impl_.draft_id_.SetAllocated(draft_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.draft_id_.IsDefault()) {
    _impl_.draft_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.DeleteDraftRequest.draft_id)
}

// string user_id = 2;
inline void DeleteDraftRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& DeleteDraftRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DeleteDraftRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDraftRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DeleteDraftRequest.user_id)
}
inline std::string* DeleteDraftRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.DeleteDraftRequest.user_id)
  return _s;
}
inline const std::string& DeleteDraftRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void DeleteDraftRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDraftRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDraftRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.DeleteDraftRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void DeleteDraftRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.DeleteDraftRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteDraftResponse

// bool success = 1;
inline void DeleteDraftResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool DeleteDraftResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool DeleteDraftResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DeleteDraftResponse.success)
  return _internal_success();
}
inline void DeleteDraftResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void DeleteDraftResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DeleteDraftResponse.success)
}

// string error_message = 2;
inline void DeleteDraftResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& DeleteDraftResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DeleteDraftResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDraftResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DeleteDraftResponse.error_message)
}
inline std::string* DeleteDraftResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.DeleteDraftResponse.error_message)
  return _s;
}
inline const std::string& DeleteDraftResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void DeleteDraftResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDraftResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDraftResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.DeleteDraftResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void DeleteDraftResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.DeleteDraftResponse.error_message)
}

// -------------------------------------------------------------------

// AutoSaveDraftRequest

// string user_id = 1;
inline void AutoSaveDraftRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.user_id)
}
inline std::string* AutoSaveDraftRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.user_id)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.user_id)
}

// string content = 2;
inline void AutoSaveDraftRequest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::content() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.content)
}
inline std::string* AutoSaveDraftRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.content)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_content() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.content)
  return _impl_.content_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.content)
}

// string reply_to_uri = 3;
inline void AutoSaveDraftRequest::clear_reply_to_uri() {
  _impl_.reply_to_uri_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::reply_to_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.reply_to_uri)
  return _internal_reply_to_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_reply_to_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.reply_to_uri)
}
inline std::string* AutoSaveDraftRequest::mutable_reply_to_uri() {
  std::string* _s = _internal_mutable_reply_to_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.reply_to_uri)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_reply_to_uri() const {
  return _impl_.reply_to_uri_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_reply_to_uri(const std::string& value) {
  
  _impl_.reply_to_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_reply_to_uri() {
  
  return _impl_.reply_to_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_reply_to_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.reply_to_uri)
  return _impl_.reply_to_uri_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_reply_to_uri(std::string* reply_to_uri) {
  if (reply_to_uri != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_uri_.SetAllocated(reply_to_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_uri_.IsDefault()) {
    _impl_.reply_to_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.reply_to_uri)
}

// string quote_uri = 4;
inline void AutoSaveDraftRequest::clear_quote_uri() {
  _impl_.quote_uri_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::quote_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.quote_uri)
  return _internal_quote_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_quote_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.quote_uri)
}
inline std::string* AutoSaveDraftRequest::mutable_quote_uri() {
  std::string* _s = _internal_mutable_quote_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.quote_uri)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_quote_uri() const {
  return _impl_.quote_uri_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_quote_uri(const std::string& value) {
  
  _impl_.quote_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_quote_uri() {
  
  return _impl_.quote_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_quote_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.quote_uri)
  return _impl_.quote_uri_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_quote_uri(std::string* quote_uri) {
  if (quote_uri != nullptr) {
    
  } else {
    
  }
  _impl_.quote_uri_.SetAllocated(quote_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_uri_.IsDefault()) {
    _impl_.quote_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.quote_uri)
}

// string mention_handle = 5;
inline void AutoSaveDraftRequest::clear_mention_handle() {
  _impl_.mention_handle_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::mention_handle() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.mention_handle)
  return _internal_mention_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_mention_handle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mention_handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.mention_handle)
}
inline std::string* AutoSaveDraftRequest::mutable_mention_handle() {
  std::string* _s = _internal_mutable_mention_handle();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.mention_handle)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_mention_handle() const {
  return _impl_.mention_handle_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_mention_handle(const std::string& value) {
  
  _impl_.mention_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_mention_handle() {
  
  return _impl_.mention_handle_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_mention_handle() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.mention_handle)
  return _impl_.mention_handle_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_mention_handle(std::string* mention_handle) {
  if (mention_handle != nullptr) {
    
  } else {
    
  }
  _impl_.mention_handle_.SetAllocated(mention_handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mention_handle_.IsDefault()) {
    _impl_.mention_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.mention_handle)
}

// repeated .sonet.drafts.v1.DraftImage images = 6;
inline int AutoSaveDraftRequest::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int AutoSaveDraftRequest::images_size() const {
  return _internal_images_size();
}
inline void AutoSaveDraftRequest::clear_images() {
  _impl_.images_.Clear();
}
inline ::sonet::drafts::v1::DraftImage* AutoSaveDraftRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
AutoSaveDraftRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.AutoSaveDraftRequest.images)
  return &_impl_.images_;
}
inline const ::sonet::drafts::v1::DraftImage& AutoSaveDraftRequest::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::sonet::drafts::v1::DraftImage& AutoSaveDraftRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.images)
  return _internal_images(index);
}
inline ::sonet::drafts::v1::DraftImage* AutoSaveDraftRequest::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::sonet::drafts::v1::DraftImage* AutoSaveDraftRequest::add_images() {
  ::sonet::drafts::v1::DraftImage* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.AutoSaveDraftRequest.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
AutoSaveDraftRequest::images() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.AutoSaveDraftRequest.images)
  return _impl_.images_;
}

// .sonet.drafts.v1.DraftVideo video = 7;
inline bool AutoSaveDraftRequest::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool AutoSaveDraftRequest::has_video() const {
  return _internal_has_video();
}
inline void AutoSaveDraftRequest::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
inline const ::sonet::drafts::v1::DraftVideo& AutoSaveDraftRequest::_internal_video() const {
  const ::sonet::drafts::v1::DraftVideo* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::DraftVideo&>(
      ::sonet::drafts::v1::_DraftVideo_default_instance_);
}
inline const ::sonet::drafts::v1::DraftVideo& AutoSaveDraftRequest::video() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.video)
  return _internal_video();
}
inline void AutoSaveDraftRequest::unsafe_arena_set_allocated_video(
    ::sonet::drafts::v1::DraftVideo* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.video)
}
inline ::sonet::drafts::v1::DraftVideo* AutoSaveDraftRequest::release_video() {
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* AutoSaveDraftRequest::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.video)
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* AutoSaveDraftRequest::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::DraftVideo>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::sonet::drafts::v1::DraftVideo* AutoSaveDraftRequest::mutable_video() {
  ::sonet::drafts::v1::DraftVideo* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.video)
  return _msg;
}
inline void AutoSaveDraftRequest::set_allocated_video(::sonet::drafts::v1::DraftVideo* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.video)
}

// repeated string labels = 8;
inline int AutoSaveDraftRequest::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int AutoSaveDraftRequest::labels_size() const {
  return _internal_labels_size();
}
inline void AutoSaveDraftRequest::clear_labels() {
  _impl_.labels_.Clear();
}
inline std::string* AutoSaveDraftRequest::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:sonet.drafts.v1.AutoSaveDraftRequest.labels)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const std::string& AutoSaveDraftRequest::labels(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.labels)
  return _internal_labels(index);
}
inline std::string* AutoSaveDraftRequest::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.labels)
  return _impl_.labels_.Mutable(index);
}
inline void AutoSaveDraftRequest::set_labels(int index, const std::string& value) {
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline void AutoSaveDraftRequest::set_labels(int index, std::string&& value) {
  _impl_.labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline void AutoSaveDraftRequest::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline void AutoSaveDraftRequest::set_labels(int index, const char* value, size_t size) {
  _impl_.labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline std::string* AutoSaveDraftRequest::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline void AutoSaveDraftRequest::add_labels(const std::string& value) {
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline void AutoSaveDraftRequest::add_labels(std::string&& value) {
  _impl_.labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline void AutoSaveDraftRequest::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline void AutoSaveDraftRequest::add_labels(const char* value, size_t size) {
  _impl_.labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.drafts.v1.AutoSaveDraftRequest.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutoSaveDraftRequest::labels() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.AutoSaveDraftRequest.labels)
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutoSaveDraftRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.AutoSaveDraftRequest.labels)
  return &_impl_.labels_;
}

// bytes threadgate = 9;
inline void AutoSaveDraftRequest::clear_threadgate() {
  _impl_.threadgate_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::threadgate() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.threadgate)
  return _internal_threadgate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_threadgate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threadgate_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.threadgate)
}
inline std::string* AutoSaveDraftRequest::mutable_threadgate() {
  std::string* _s = _internal_mutable_threadgate();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.threadgate)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_threadgate() const {
  return _impl_.threadgate_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_threadgate(const std::string& value) {
  
  _impl_.threadgate_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_threadgate() {
  
  return _impl_.threadgate_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_threadgate() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.threadgate)
  return _impl_.threadgate_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_threadgate(std::string* threadgate) {
  if (threadgate != nullptr) {
    
  } else {
    
  }
  _impl_.threadgate_.SetAllocated(threadgate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threadgate_.IsDefault()) {
    _impl_.threadgate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.threadgate)
}

// bytes interaction_settings = 10;
inline void AutoSaveDraftRequest::clear_interaction_settings() {
  _impl_.interaction_settings_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftRequest::interaction_settings() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftRequest.interaction_settings)
  return _internal_interaction_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftRequest::set_interaction_settings(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interaction_settings_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftRequest.interaction_settings)
}
inline std::string* AutoSaveDraftRequest::mutable_interaction_settings() {
  std::string* _s = _internal_mutable_interaction_settings();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftRequest.interaction_settings)
  return _s;
}
inline const std::string& AutoSaveDraftRequest::_internal_interaction_settings() const {
  return _impl_.interaction_settings_.Get();
}
inline void AutoSaveDraftRequest::_internal_set_interaction_settings(const std::string& value) {
  
  _impl_.interaction_settings_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::_internal_mutable_interaction_settings() {
  
  return _impl_.interaction_settings_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftRequest::release_interaction_settings() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftRequest.interaction_settings)
  return _impl_.interaction_settings_.Release();
}
inline void AutoSaveDraftRequest::set_allocated_interaction_settings(std::string* interaction_settings) {
  if (interaction_settings != nullptr) {
    
  } else {
    
  }
  _impl_.interaction_settings_.SetAllocated(interaction_settings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interaction_settings_.IsDefault()) {
    _impl_.interaction_settings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftRequest.interaction_settings)
}

// -------------------------------------------------------------------

// AutoSaveDraftResponse

// bool success = 1;
inline void AutoSaveDraftResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool AutoSaveDraftResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool AutoSaveDraftResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftResponse.success)
  return _internal_success();
}
inline void AutoSaveDraftResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AutoSaveDraftResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftResponse.success)
}

// string error_message = 2;
inline void AutoSaveDraftResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& AutoSaveDraftResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutoSaveDraftResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.AutoSaveDraftResponse.error_message)
}
inline std::string* AutoSaveDraftResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftResponse.error_message)
  return _s;
}
inline const std::string& AutoSaveDraftResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void AutoSaveDraftResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* AutoSaveDraftResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* AutoSaveDraftResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void AutoSaveDraftResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftResponse.error_message)
}

// .sonet.drafts.v1.Draft draft = 3;
inline bool AutoSaveDraftResponse::_internal_has_draft() const {
  return this != internal_default_instance() && _impl_.draft_ != nullptr;
}
inline bool AutoSaveDraftResponse::has_draft() const {
  return _internal_has_draft();
}
inline void AutoSaveDraftResponse::clear_draft() {
  if (GetArenaForAllocation() == nullptr && _impl_.draft_ != nullptr) {
    delete _impl_.draft_;
  }
  _impl_.draft_ = nullptr;
}
inline const ::sonet::drafts::v1::Draft& AutoSaveDraftResponse::_internal_draft() const {
  const ::sonet::drafts::v1::Draft* p = _impl_.draft_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::Draft&>(
      ::sonet::drafts::v1::_Draft_default_instance_);
}
inline const ::sonet::drafts::v1::Draft& AutoSaveDraftResponse::draft() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.AutoSaveDraftResponse.draft)
  return _internal_draft();
}
inline void AutoSaveDraftResponse::unsafe_arena_set_allocated_draft(
    ::sonet::drafts::v1::Draft* draft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.draft_);
  }
  _impl_.draft_ = draft;
  if (draft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.AutoSaveDraftResponse.draft)
}
inline ::sonet::drafts::v1::Draft* AutoSaveDraftResponse::release_draft() {
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::Draft* AutoSaveDraftResponse::unsafe_arena_release_draft() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.AutoSaveDraftResponse.draft)
  
  ::sonet::drafts::v1::Draft* temp = _impl_.draft_;
  _impl_.draft_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::Draft* AutoSaveDraftResponse::_internal_mutable_draft() {
  
  if (_impl_.draft_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::Draft>(GetArenaForAllocation());
    _impl_.draft_ = p;
  }
  return _impl_.draft_;
}
inline ::sonet::drafts::v1::Draft* AutoSaveDraftResponse::mutable_draft() {
  ::sonet::drafts::v1::Draft* _msg = _internal_mutable_draft();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.AutoSaveDraftResponse.draft)
  return _msg;
}
inline void AutoSaveDraftResponse::set_allocated_draft(::sonet::drafts::v1::Draft* draft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.draft_;
  }
  if (draft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(draft);
    if (message_arena != submessage_arena) {
      draft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draft, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.draft_ = draft;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.AutoSaveDraftResponse.draft)
}

// -------------------------------------------------------------------

// Draft

// string draft_id = 1;
inline void Draft::clear_draft_id() {
  _impl_.draft_id_.ClearToEmpty();
}
inline const std::string& Draft::draft_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.draft_id)
  return _internal_draft_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_draft_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.draft_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.draft_id)
}
inline std::string* Draft::mutable_draft_id() {
  std::string* _s = _internal_mutable_draft_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.draft_id)
  return _s;
}
inline const std::string& Draft::_internal_draft_id() const {
  return _impl_.draft_id_.Get();
}
inline void Draft::_internal_set_draft_id(const std::string& value) {
  
  _impl_.draft_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_draft_id() {
  
  return _impl_.draft_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_draft_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.draft_id)
  return _impl_.draft_id_.Release();
}
inline void Draft::set_allocated_draft_id(std::string* draft_id) {
  if (draft_id != nullptr) {
    
  } else {
    
  }
  _impl_.draft_id_.SetAllocated(draft_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.draft_id_.IsDefault()) {
    _impl_.draft_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.draft_id)
}

// string user_id = 2;
inline void Draft::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& Draft::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.user_id)
}
inline std::string* Draft::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.user_id)
  return _s;
}
inline const std::string& Draft::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void Draft::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.user_id)
  return _impl_.user_id_.Release();
}
inline void Draft::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.user_id)
}

// string title = 3;
inline void Draft::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Draft::title() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.title)
}
inline std::string* Draft::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.title)
  return _s;
}
inline const std::string& Draft::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Draft::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_title() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.title)
  return _impl_.title_.Release();
}
inline void Draft::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.title)
}

// string content = 4;
inline void Draft::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Draft::content() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.content)
}
inline std::string* Draft::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.content)
  return _s;
}
inline const std::string& Draft::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Draft::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_content() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.content)
  return _impl_.content_.Release();
}
inline void Draft::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.content)
}

// string reply_to_uri = 5;
inline void Draft::clear_reply_to_uri() {
  _impl_.reply_to_uri_.ClearToEmpty();
}
inline const std::string& Draft::reply_to_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.reply_to_uri)
  return _internal_reply_to_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_reply_to_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.reply_to_uri)
}
inline std::string* Draft::mutable_reply_to_uri() {
  std::string* _s = _internal_mutable_reply_to_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.reply_to_uri)
  return _s;
}
inline const std::string& Draft::_internal_reply_to_uri() const {
  return _impl_.reply_to_uri_.Get();
}
inline void Draft::_internal_set_reply_to_uri(const std::string& value) {
  
  _impl_.reply_to_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_reply_to_uri() {
  
  return _impl_.reply_to_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_reply_to_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.reply_to_uri)
  return _impl_.reply_to_uri_.Release();
}
inline void Draft::set_allocated_reply_to_uri(std::string* reply_to_uri) {
  if (reply_to_uri != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_uri_.SetAllocated(reply_to_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_uri_.IsDefault()) {
    _impl_.reply_to_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.reply_to_uri)
}

// string quote_uri = 6;
inline void Draft::clear_quote_uri() {
  _impl_.quote_uri_.ClearToEmpty();
}
inline const std::string& Draft::quote_uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.quote_uri)
  return _internal_quote_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_quote_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.quote_uri)
}
inline std::string* Draft::mutable_quote_uri() {
  std::string* _s = _internal_mutable_quote_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.quote_uri)
  return _s;
}
inline const std::string& Draft::_internal_quote_uri() const {
  return _impl_.quote_uri_.Get();
}
inline void Draft::_internal_set_quote_uri(const std::string& value) {
  
  _impl_.quote_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_quote_uri() {
  
  return _impl_.quote_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_quote_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.quote_uri)
  return _impl_.quote_uri_.Release();
}
inline void Draft::set_allocated_quote_uri(std::string* quote_uri) {
  if (quote_uri != nullptr) {
    
  } else {
    
  }
  _impl_.quote_uri_.SetAllocated(quote_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_uri_.IsDefault()) {
    _impl_.quote_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.quote_uri)
}

// string mention_handle = 7;
inline void Draft::clear_mention_handle() {
  _impl_.mention_handle_.ClearToEmpty();
}
inline const std::string& Draft::mention_handle() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.mention_handle)
  return _internal_mention_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_mention_handle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mention_handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.mention_handle)
}
inline std::string* Draft::mutable_mention_handle() {
  std::string* _s = _internal_mutable_mention_handle();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.mention_handle)
  return _s;
}
inline const std::string& Draft::_internal_mention_handle() const {
  return _impl_.mention_handle_.Get();
}
inline void Draft::_internal_set_mention_handle(const std::string& value) {
  
  _impl_.mention_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_mention_handle() {
  
  return _impl_.mention_handle_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_mention_handle() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.mention_handle)
  return _impl_.mention_handle_.Release();
}
inline void Draft::set_allocated_mention_handle(std::string* mention_handle) {
  if (mention_handle != nullptr) {
    
  } else {
    
  }
  _impl_.mention_handle_.SetAllocated(mention_handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mention_handle_.IsDefault()) {
    _impl_.mention_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.mention_handle)
}

// repeated .sonet.drafts.v1.DraftImage images = 8;
inline int Draft::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int Draft::images_size() const {
  return _internal_images_size();
}
inline void Draft::clear_images() {
  _impl_.images_.Clear();
}
inline ::sonet::drafts::v1::DraftImage* Draft::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >*
Draft::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.Draft.images)
  return &_impl_.images_;
}
inline const ::sonet::drafts::v1::DraftImage& Draft::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::sonet::drafts::v1::DraftImage& Draft::images(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.images)
  return _internal_images(index);
}
inline ::sonet::drafts::v1::DraftImage* Draft::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::sonet::drafts::v1::DraftImage* Draft::add_images() {
  ::sonet::drafts::v1::DraftImage* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.Draft.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::drafts::v1::DraftImage >&
Draft::images() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.Draft.images)
  return _impl_.images_;
}

// .sonet.drafts.v1.DraftVideo video = 9;
inline bool Draft::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool Draft::has_video() const {
  return _internal_has_video();
}
inline void Draft::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
inline const ::sonet::drafts::v1::DraftVideo& Draft::_internal_video() const {
  const ::sonet::drafts::v1::DraftVideo* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::drafts::v1::DraftVideo&>(
      ::sonet::drafts::v1::_DraftVideo_default_instance_);
}
inline const ::sonet::drafts::v1::DraftVideo& Draft::video() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.video)
  return _internal_video();
}
inline void Draft::unsafe_arena_set_allocated_video(
    ::sonet::drafts::v1::DraftVideo* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.Draft.video)
}
inline ::sonet::drafts::v1::DraftVideo* Draft::release_video() {
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* Draft::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.video)
  
  ::sonet::drafts::v1::DraftVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::sonet::drafts::v1::DraftVideo* Draft::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::drafts::v1::DraftVideo>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::sonet::drafts::v1::DraftVideo* Draft::mutable_video() {
  ::sonet::drafts::v1::DraftVideo* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.video)
  return _msg;
}
inline void Draft::set_allocated_video(::sonet::drafts::v1::DraftVideo* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.video)
}

// repeated string labels = 10;
inline int Draft::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Draft::labels_size() const {
  return _internal_labels_size();
}
inline void Draft::clear_labels() {
  _impl_.labels_.Clear();
}
inline std::string* Draft::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:sonet.drafts.v1.Draft.labels)
  return _s;
}
inline const std::string& Draft::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const std::string& Draft::labels(int index) const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.labels)
  return _internal_labels(index);
}
inline std::string* Draft::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.labels)
  return _impl_.labels_.Mutable(index);
}
inline void Draft::set_labels(int index, const std::string& value) {
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.labels)
}
inline void Draft::set_labels(int index, std::string&& value) {
  _impl_.labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.labels)
}
inline void Draft::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.drafts.v1.Draft.labels)
}
inline void Draft::set_labels(int index, const char* value, size_t size) {
  _impl_.labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.drafts.v1.Draft.labels)
}
inline std::string* Draft::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline void Draft::add_labels(const std::string& value) {
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.Draft.labels)
}
inline void Draft::add_labels(std::string&& value) {
  _impl_.labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.drafts.v1.Draft.labels)
}
inline void Draft::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.drafts.v1.Draft.labels)
}
inline void Draft::add_labels(const char* value, size_t size) {
  _impl_.labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.drafts.v1.Draft.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Draft::labels() const {
  // @@protoc_insertion_point(field_list:sonet.drafts.v1.Draft.labels)
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Draft::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:sonet.drafts.v1.Draft.labels)
  return &_impl_.labels_;
}

// bytes threadgate = 11;
inline void Draft::clear_threadgate() {
  _impl_.threadgate_.ClearToEmpty();
}
inline const std::string& Draft::threadgate() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.threadgate)
  return _internal_threadgate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_threadgate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.threadgate_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.threadgate)
}
inline std::string* Draft::mutable_threadgate() {
  std::string* _s = _internal_mutable_threadgate();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.threadgate)
  return _s;
}
inline const std::string& Draft::_internal_threadgate() const {
  return _impl_.threadgate_.Get();
}
inline void Draft::_internal_set_threadgate(const std::string& value) {
  
  _impl_.threadgate_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_threadgate() {
  
  return _impl_.threadgate_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_threadgate() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.threadgate)
  return _impl_.threadgate_.Release();
}
inline void Draft::set_allocated_threadgate(std::string* threadgate) {
  if (threadgate != nullptr) {
    
  } else {
    
  }
  _impl_.threadgate_.SetAllocated(threadgate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.threadgate_.IsDefault()) {
    _impl_.threadgate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.threadgate)
}

// bytes interaction_settings = 12;
inline void Draft::clear_interaction_settings() {
  _impl_.interaction_settings_.ClearToEmpty();
}
inline const std::string& Draft::interaction_settings() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.interaction_settings)
  return _internal_interaction_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Draft::set_interaction_settings(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interaction_settings_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.interaction_settings)
}
inline std::string* Draft::mutable_interaction_settings() {
  std::string* _s = _internal_mutable_interaction_settings();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.interaction_settings)
  return _s;
}
inline const std::string& Draft::_internal_interaction_settings() const {
  return _impl_.interaction_settings_.Get();
}
inline void Draft::_internal_set_interaction_settings(const std::string& value) {
  
  _impl_.interaction_settings_.Set(value, GetArenaForAllocation());
}
inline std::string* Draft::_internal_mutable_interaction_settings() {
  
  return _impl_.interaction_settings_.Mutable(GetArenaForAllocation());
}
inline std::string* Draft::release_interaction_settings() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.interaction_settings)
  return _impl_.interaction_settings_.Release();
}
inline void Draft::set_allocated_interaction_settings(std::string* interaction_settings) {
  if (interaction_settings != nullptr) {
    
  } else {
    
  }
  _impl_.interaction_settings_.SetAllocated(interaction_settings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interaction_settings_.IsDefault()) {
    _impl_.interaction_settings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.interaction_settings)
}

// .google.protobuf.Timestamp created_at = 13;
inline bool Draft::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool Draft::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Draft::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Draft::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.created_at)
  return _internal_created_at();
}
inline void Draft::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.Draft.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.created_at)
  return _msg;
}
inline void Draft::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.created_at)
}

// .google.protobuf.Timestamp updated_at = 14;
inline bool Draft::_internal_has_updated_at() const {
  return this != internal_default_instance() && _impl_.updated_at_ != nullptr;
}
inline bool Draft::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Draft::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Draft::updated_at() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.updated_at)
  return _internal_updated_at();
}
inline void Draft::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.drafts.v1.Draft.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.Draft.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::_internal_mutable_updated_at() {
  
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Draft::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.Draft.updated_at)
  return _msg;
}
inline void Draft::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.Draft.updated_at)
}

// bool is_auto_saved = 15;
inline void Draft::clear_is_auto_saved() {
  _impl_.is_auto_saved_ = false;
}
inline bool Draft::_internal_is_auto_saved() const {
  return _impl_.is_auto_saved_;
}
inline bool Draft::is_auto_saved() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.Draft.is_auto_saved)
  return _internal_is_auto_saved();
}
inline void Draft::_internal_set_is_auto_saved(bool value) {
  
  _impl_.is_auto_saved_ = value;
}
inline void Draft::set_is_auto_saved(bool value) {
  _internal_set_is_auto_saved(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.Draft.is_auto_saved)
}

// -------------------------------------------------------------------

// DraftImage

// string uri = 1;
inline void DraftImage::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& DraftImage::uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftImage.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DraftImage::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftImage.uri)
}
inline std::string* DraftImage::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.DraftImage.uri)
  return _s;
}
inline const std::string& DraftImage::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void DraftImage::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* DraftImage::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* DraftImage::release_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.DraftImage.uri)
  return _impl_.uri_.Release();
}
inline void DraftImage::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.DraftImage.uri)
}

// int32 width = 2;
inline void DraftImage::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t DraftImage::_internal_width() const {
  return _impl_.width_;
}
inline int32_t DraftImage::width() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftImage.width)
  return _internal_width();
}
inline void DraftImage::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void DraftImage::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftImage.width)
}

// int32 height = 3;
inline void DraftImage::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t DraftImage::_internal_height() const {
  return _impl_.height_;
}
inline int32_t DraftImage::height() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftImage.height)
  return _internal_height();
}
inline void DraftImage::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void DraftImage::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftImage.height)
}

// string alt_text = 4;
inline void DraftImage::clear_alt_text() {
  _impl_.alt_text_.ClearToEmpty();
}
inline const std::string& DraftImage::alt_text() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftImage.alt_text)
  return _internal_alt_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DraftImage::set_alt_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alt_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftImage.alt_text)
}
inline std::string* DraftImage::mutable_alt_text() {
  std::string* _s = _internal_mutable_alt_text();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.DraftImage.alt_text)
  return _s;
}
inline const std::string& DraftImage::_internal_alt_text() const {
  return _impl_.alt_text_.Get();
}
inline void DraftImage::_internal_set_alt_text(const std::string& value) {
  
  _impl_.alt_text_.Set(value, GetArenaForAllocation());
}
inline std::string* DraftImage::_internal_mutable_alt_text() {
  
  return _impl_.alt_text_.Mutable(GetArenaForAllocation());
}
inline std::string* DraftImage::release_alt_text() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.DraftImage.alt_text)
  return _impl_.alt_text_.Release();
}
inline void DraftImage::set_allocated_alt_text(std::string* alt_text) {
  if (alt_text != nullptr) {
    
  } else {
    
  }
  _impl_.alt_text_.SetAllocated(alt_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alt_text_.IsDefault()) {
    _impl_.alt_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.DraftImage.alt_text)
}

// -------------------------------------------------------------------

// DraftVideo

// string uri = 1;
inline void DraftVideo::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& DraftVideo::uri() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftVideo.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DraftVideo::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftVideo.uri)
}
inline std::string* DraftVideo::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:sonet.drafts.v1.DraftVideo.uri)
  return _s;
}
inline const std::string& DraftVideo::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void DraftVideo::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* DraftVideo::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* DraftVideo::release_uri() {
  // @@protoc_insertion_point(field_release:sonet.drafts.v1.DraftVideo.uri)
  return _impl_.uri_.Release();
}
inline void DraftVideo::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.drafts.v1.DraftVideo.uri)
}

// int32 width = 2;
inline void DraftVideo::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t DraftVideo::_internal_width() const {
  return _impl_.width_;
}
inline int32_t DraftVideo::width() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftVideo.width)
  return _internal_width();
}
inline void DraftVideo::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void DraftVideo::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftVideo.width)
}

// int32 height = 3;
inline void DraftVideo::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t DraftVideo::_internal_height() const {
  return _impl_.height_;
}
inline int32_t DraftVideo::height() const {
  // @@protoc_insertion_point(field_get:sonet.drafts.v1.DraftVideo.height)
  return _internal_height();
}
inline void DraftVideo::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void DraftVideo::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sonet.drafts.v1.DraftVideo.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace drafts
}  // namespace sonet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fdrafts_5fservice_2eproto
