// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/notification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fnotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fnotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/pagination.pb.h"
#include "common/timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fnotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fnotification_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fnotification_2eproto;
namespace sonet {
namespace notification {
class ListNotificationsRequest;
struct ListNotificationsRequestDefaultTypeInternal;
extern ListNotificationsRequestDefaultTypeInternal _ListNotificationsRequest_default_instance_;
class ListNotificationsResponse;
struct ListNotificationsResponseDefaultTypeInternal;
extern ListNotificationsResponseDefaultTypeInternal _ListNotificationsResponse_default_instance_;
class MarkNotificationReadRequest;
struct MarkNotificationReadRequestDefaultTypeInternal;
extern MarkNotificationReadRequestDefaultTypeInternal _MarkNotificationReadRequest_default_instance_;
class MarkNotificationReadResponse;
struct MarkNotificationReadResponseDefaultTypeInternal;
extern MarkNotificationReadResponseDefaultTypeInternal _MarkNotificationReadResponse_default_instance_;
class Notification;
struct NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
}  // namespace notification
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::notification::ListNotificationsRequest* Arena::CreateMaybeMessage<::sonet::notification::ListNotificationsRequest>(Arena*);
template<> ::sonet::notification::ListNotificationsResponse* Arena::CreateMaybeMessage<::sonet::notification::ListNotificationsResponse>(Arena*);
template<> ::sonet::notification::MarkNotificationReadRequest* Arena::CreateMaybeMessage<::sonet::notification::MarkNotificationReadRequest>(Arena*);
template<> ::sonet::notification::MarkNotificationReadResponse* Arena::CreateMaybeMessage<::sonet::notification::MarkNotificationReadResponse>(Arena*);
template<> ::sonet::notification::Notification* Arena::CreateMaybeMessage<::sonet::notification::Notification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace notification {

enum NotificationType : int {
  NOTIFICATION_TYPE_UNKNOWN = 0,
  NOTIFICATION_TYPE_LIKE = 1,
  NOTIFICATION_TYPE_REPLY = 2,
  NOTIFICATION_TYPE_MENTION = 3,
  NOTIFICATION_TYPE_FOLLOW = 4,
  NOTIFICATION_TYPE_RENOTE = 5,
  NotificationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NotificationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NotificationType_IsValid(int value);
constexpr NotificationType NotificationType_MIN = NOTIFICATION_TYPE_UNKNOWN;
constexpr NotificationType NotificationType_MAX = NOTIFICATION_TYPE_RENOTE;
constexpr int NotificationType_ARRAYSIZE = NotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationType_descriptor();
template<typename T>
inline const std::string& NotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotificationType_descriptor(), enum_t_value);
}
inline bool NotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationType>(
    NotificationType_descriptor(), name, value);
}
// ===================================================================

class Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.notification.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  ~Notification() override;
  explicit PROTOBUF_CONSTEXPR Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Notification& from) {
    Notification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.notification.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kActorUserIdFieldNumber = 4,
    kNoteIdFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kTypeFieldNumber = 3,
    kIsReadFieldNumber = 6,
  };
  // string notification_id = 1;
  void clear_notification_id();
  const std::string& notification_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_id();
  PROTOBUF_NODISCARD std::string* release_notification_id();
  void set_allocated_notification_id(std::string* notification_id);
  private:
  const std::string& _internal_notification_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_id(const std::string& value);
  std::string* _internal_mutable_notification_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string actor_user_id = 4;
  void clear_actor_user_id();
  const std::string& actor_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_actor_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_actor_user_id();
  PROTOBUF_NODISCARD std::string* release_actor_user_id();
  void set_allocated_actor_user_id(std::string* actor_user_id);
  private:
  const std::string& _internal_actor_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_user_id(const std::string& value);
  std::string* _internal_mutable_actor_user_id();
  public:

  // string note_id = 5;
  void clear_note_id();
  const std::string& note_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_id();
  PROTOBUF_NODISCARD std::string* release_note_id();
  void set_allocated_note_id(std::string* note_id);
  private:
  const std::string& _internal_note_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_id(const std::string& value);
  std::string* _internal_mutable_note_id();
  public:

  // .sonet.common.Timestamp created_at = 7;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::sonet::common::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::sonet::common::Timestamp* release_created_at();
  ::sonet::common::Timestamp* mutable_created_at();
  void set_allocated_created_at(::sonet::common::Timestamp* created_at);
  private:
  const ::sonet::common::Timestamp& _internal_created_at() const;
  ::sonet::common::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::sonet::common::Timestamp* created_at);
  ::sonet::common::Timestamp* unsafe_arena_release_created_at();

  // .sonet.notification.NotificationType type = 3;
  void clear_type();
  ::sonet::notification::NotificationType type() const;
  void set_type(::sonet::notification::NotificationType value);
  private:
  ::sonet::notification::NotificationType _internal_type() const;
  void _internal_set_type(::sonet::notification::NotificationType value);
  public:

  // bool is_read = 6;
  void clear_is_read();
  bool is_read() const;
  void set_is_read(bool value);
  private:
  bool _internal_is_read() const;
  void _internal_set_is_read(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.notification.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_id_;
    ::sonet::common::Timestamp* created_at_;
    int type_;
    bool is_read_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.notification.ListNotificationsRequest) */ {
 public:
  inline ListNotificationsRequest() : ListNotificationsRequest(nullptr) {}
  ~ListNotificationsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationsRequest(const ListNotificationsRequest& from);
  ListNotificationsRequest(ListNotificationsRequest&& from) noexcept
    : ListNotificationsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationsRequest& operator=(const ListNotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationsRequest& operator=(ListNotificationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationsRequest*>(
               &_ListNotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListNotificationsRequest& a, ListNotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationsRequest& from) {
    ListNotificationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.notification.ListNotificationsRequest";
  }
  protected:
  explicit ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kUnreadOnlyFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .sonet.common.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::Pagination* release_pagination();
  ::sonet::common::Pagination* mutable_pagination();
  void set_allocated_pagination(::sonet::common::Pagination* pagination);
  private:
  const ::sonet::common::Pagination& _internal_pagination() const;
  ::sonet::common::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::Pagination* pagination);
  ::sonet::common::Pagination* unsafe_arena_release_pagination();

  // bool unread_only = 3;
  void clear_unread_only();
  bool unread_only() const;
  void set_unread_only(bool value);
  private:
  bool _internal_unread_only() const;
  void _internal_set_unread_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.notification.ListNotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::sonet::common::Pagination* pagination_;
    bool unread_only_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.notification.ListNotificationsResponse) */ {
 public:
  inline ListNotificationsResponse() : ListNotificationsResponse(nullptr) {}
  ~ListNotificationsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListNotificationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNotificationsResponse(const ListNotificationsResponse& from);
  ListNotificationsResponse(ListNotificationsResponse&& from) noexcept
    : ListNotificationsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationsResponse& operator=(const ListNotificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationsResponse& operator=(ListNotificationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationsResponse*>(
               &_ListNotificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListNotificationsResponse& a, ListNotificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNotificationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNotificationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListNotificationsResponse& from) {
    ListNotificationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.notification.ListNotificationsResponse";
  }
  protected:
  explicit ListNotificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .sonet.notification.Notification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::sonet::notification::Notification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::notification::Notification >*
      mutable_notifications();
  private:
  const ::sonet::notification::Notification& _internal_notifications(int index) const;
  ::sonet::notification::Notification* _internal_add_notifications();
  public:
  const ::sonet::notification::Notification& notifications(int index) const;
  ::sonet::notification::Notification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::notification::Notification >&
      notifications() const;

  // .sonet.common.Pagination pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::common::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::sonet::common::Pagination* release_pagination();
  ::sonet::common::Pagination* mutable_pagination();
  void set_allocated_pagination(::sonet::common::Pagination* pagination);
  private:
  const ::sonet::common::Pagination& _internal_pagination() const;
  ::sonet::common::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::common::Pagination* pagination);
  ::sonet::common::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sonet.notification.ListNotificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::notification::Notification > notifications_;
    ::sonet::common::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class MarkNotificationReadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.notification.MarkNotificationReadRequest) */ {
 public:
  inline MarkNotificationReadRequest() : MarkNotificationReadRequest(nullptr) {}
  ~MarkNotificationReadRequest() override;
  explicit PROTOBUF_CONSTEXPR MarkNotificationReadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkNotificationReadRequest(const MarkNotificationReadRequest& from);
  MarkNotificationReadRequest(MarkNotificationReadRequest&& from) noexcept
    : MarkNotificationReadRequest() {
    *this = ::std::move(from);
  }

  inline MarkNotificationReadRequest& operator=(const MarkNotificationReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkNotificationReadRequest& operator=(MarkNotificationReadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkNotificationReadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkNotificationReadRequest* internal_default_instance() {
    return reinterpret_cast<const MarkNotificationReadRequest*>(
               &_MarkNotificationReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MarkNotificationReadRequest& a, MarkNotificationReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkNotificationReadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkNotificationReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkNotificationReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkNotificationReadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkNotificationReadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarkNotificationReadRequest& from) {
    MarkNotificationReadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkNotificationReadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.notification.MarkNotificationReadRequest";
  }
  protected:
  explicit MarkNotificationReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNotificationIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string notification_id = 2;
  void clear_notification_id();
  const std::string& notification_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_id();
  PROTOBUF_NODISCARD std::string* release_notification_id();
  void set_allocated_notification_id(std::string* notification_id);
  private:
  const std::string& _internal_notification_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_id(const std::string& value);
  std::string* _internal_mutable_notification_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.notification.MarkNotificationReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class MarkNotificationReadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.notification.MarkNotificationReadResponse) */ {
 public:
  inline MarkNotificationReadResponse() : MarkNotificationReadResponse(nullptr) {}
  ~MarkNotificationReadResponse() override;
  explicit PROTOBUF_CONSTEXPR MarkNotificationReadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkNotificationReadResponse(const MarkNotificationReadResponse& from);
  MarkNotificationReadResponse(MarkNotificationReadResponse&& from) noexcept
    : MarkNotificationReadResponse() {
    *this = ::std::move(from);
  }

  inline MarkNotificationReadResponse& operator=(const MarkNotificationReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkNotificationReadResponse& operator=(MarkNotificationReadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkNotificationReadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkNotificationReadResponse* internal_default_instance() {
    return reinterpret_cast<const MarkNotificationReadResponse*>(
               &_MarkNotificationReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MarkNotificationReadResponse& a, MarkNotificationReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkNotificationReadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkNotificationReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkNotificationReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkNotificationReadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkNotificationReadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarkNotificationReadResponse& from) {
    MarkNotificationReadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkNotificationReadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.notification.MarkNotificationReadResponse";
  }
  protected:
  explicit MarkNotificationReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.notification.MarkNotificationReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fnotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Notification

// string notification_id = 1;
inline void Notification::clear_notification_id() {
  _impl_.notification_id_.ClearToEmpty();
}
inline const std::string& Notification::notification_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.notification_id)
  return _internal_notification_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_notification_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notification_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.Notification.notification_id)
}
inline std::string* Notification::mutable_notification_id() {
  std::string* _s = _internal_mutable_notification_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.Notification.notification_id)
  return _s;
}
inline const std::string& Notification::_internal_notification_id() const {
  return _impl_.notification_id_.Get();
}
inline void Notification::_internal_set_notification_id(const std::string& value) {
  
  _impl_.notification_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_notification_id() {
  
  return _impl_.notification_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_notification_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.Notification.notification_id)
  return _impl_.notification_id_.Release();
}
inline void Notification::set_allocated_notification_id(std::string* notification_id) {
  if (notification_id != nullptr) {
    
  } else {
    
  }
  _impl_.notification_id_.SetAllocated(notification_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notification_id_.IsDefault()) {
    _impl_.notification_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.Notification.notification_id)
}

// string user_id = 2;
inline void Notification::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& Notification::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.Notification.user_id)
}
inline std::string* Notification::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.Notification.user_id)
  return _s;
}
inline const std::string& Notification::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void Notification::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.Notification.user_id)
  return _impl_.user_id_.Release();
}
inline void Notification::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.Notification.user_id)
}

// .sonet.notification.NotificationType type = 3;
inline void Notification::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::notification::NotificationType Notification::_internal_type() const {
  return static_cast< ::sonet::notification::NotificationType >(_impl_.type_);
}
inline ::sonet::notification::NotificationType Notification::type() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.type)
  return _internal_type();
}
inline void Notification::_internal_set_type(::sonet::notification::NotificationType value) {
  
  _impl_.type_ = value;
}
inline void Notification::set_type(::sonet::notification::NotificationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.notification.Notification.type)
}

// string actor_user_id = 4;
inline void Notification::clear_actor_user_id() {
  _impl_.actor_user_id_.ClearToEmpty();
}
inline const std::string& Notification::actor_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.actor_user_id)
  return _internal_actor_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_actor_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.actor_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.Notification.actor_user_id)
}
inline std::string* Notification::mutable_actor_user_id() {
  std::string* _s = _internal_mutable_actor_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.Notification.actor_user_id)
  return _s;
}
inline const std::string& Notification::_internal_actor_user_id() const {
  return _impl_.actor_user_id_.Get();
}
inline void Notification::_internal_set_actor_user_id(const std::string& value) {
  
  _impl_.actor_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_actor_user_id() {
  
  return _impl_.actor_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_actor_user_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.Notification.actor_user_id)
  return _impl_.actor_user_id_.Release();
}
inline void Notification::set_allocated_actor_user_id(std::string* actor_user_id) {
  if (actor_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.actor_user_id_.SetAllocated(actor_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.actor_user_id_.IsDefault()) {
    _impl_.actor_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.Notification.actor_user_id)
}

// string note_id = 5;
inline void Notification::clear_note_id() {
  _impl_.note_id_.ClearToEmpty();
}
inline const std::string& Notification::note_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.note_id)
  return _internal_note_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_note_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.note_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.Notification.note_id)
}
inline std::string* Notification::mutable_note_id() {
  std::string* _s = _internal_mutable_note_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.Notification.note_id)
  return _s;
}
inline const std::string& Notification::_internal_note_id() const {
  return _impl_.note_id_.Get();
}
inline void Notification::_internal_set_note_id(const std::string& value) {
  
  _impl_.note_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_note_id() {
  
  return _impl_.note_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_note_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.Notification.note_id)
  return _impl_.note_id_.Release();
}
inline void Notification::set_allocated_note_id(std::string* note_id) {
  if (note_id != nullptr) {
    
  } else {
    
  }
  _impl_.note_id_.SetAllocated(note_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_id_.IsDefault()) {
    _impl_.note_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.Notification.note_id)
}

// bool is_read = 6;
inline void Notification::clear_is_read() {
  _impl_.is_read_ = false;
}
inline bool Notification::_internal_is_read() const {
  return _impl_.is_read_;
}
inline bool Notification::is_read() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.is_read)
  return _internal_is_read();
}
inline void Notification::_internal_set_is_read(bool value) {
  
  _impl_.is_read_ = value;
}
inline void Notification::set_is_read(bool value) {
  _internal_set_is_read(value);
  // @@protoc_insertion_point(field_set:sonet.notification.Notification.is_read)
}

// .sonet.common.Timestamp created_at = 7;
inline bool Notification::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool Notification::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::sonet::common::Timestamp& Notification::_internal_created_at() const {
  const ::sonet::common::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Timestamp&>(
      ::sonet::common::_Timestamp_default_instance_);
}
inline const ::sonet::common::Timestamp& Notification::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.notification.Notification.created_at)
  return _internal_created_at();
}
inline void Notification::unsafe_arena_set_allocated_created_at(
    ::sonet::common::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.notification.Notification.created_at)
}
inline ::sonet::common::Timestamp* Notification::release_created_at() {
  
  ::sonet::common::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Timestamp* Notification::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.notification.Notification.created_at)
  
  ::sonet::common::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::sonet::common::Timestamp* Notification::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::sonet::common::Timestamp* Notification::mutable_created_at() {
  ::sonet::common::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.notification.Notification.created_at)
  return _msg;
}
inline void Notification::set_allocated_created_at(::sonet::common::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.Notification.created_at)
}

// -------------------------------------------------------------------

// ListNotificationsRequest

// string user_id = 1;
inline void ListNotificationsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ListNotificationsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.ListNotificationsRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNotificationsRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.ListNotificationsRequest.user_id)
}
inline std::string* ListNotificationsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.ListNotificationsRequest.user_id)
  return _s;
}
inline const std::string& ListNotificationsRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ListNotificationsRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListNotificationsRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListNotificationsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.ListNotificationsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ListNotificationsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.ListNotificationsRequest.user_id)
}

// .sonet.common.Pagination pagination = 2;
inline bool ListNotificationsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool ListNotificationsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::Pagination& ListNotificationsRequest::_internal_pagination() const {
  const ::sonet::common::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Pagination&>(
      ::sonet::common::_Pagination_default_instance_);
}
inline const ::sonet::common::Pagination& ListNotificationsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.notification.ListNotificationsRequest.pagination)
  return _internal_pagination();
}
inline void ListNotificationsRequest::unsafe_arena_set_allocated_pagination(
    ::sonet::common::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.notification.ListNotificationsRequest.pagination)
}
inline ::sonet::common::Pagination* ListNotificationsRequest::release_pagination() {
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Pagination* ListNotificationsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.notification.ListNotificationsRequest.pagination)
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::Pagination* ListNotificationsRequest::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::Pagination* ListNotificationsRequest::mutable_pagination() {
  ::sonet::common::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.notification.ListNotificationsRequest.pagination)
  return _msg;
}
inline void ListNotificationsRequest::set_allocated_pagination(::sonet::common::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.ListNotificationsRequest.pagination)
}

// bool unread_only = 3;
inline void ListNotificationsRequest::clear_unread_only() {
  _impl_.unread_only_ = false;
}
inline bool ListNotificationsRequest::_internal_unread_only() const {
  return _impl_.unread_only_;
}
inline bool ListNotificationsRequest::unread_only() const {
  // @@protoc_insertion_point(field_get:sonet.notification.ListNotificationsRequest.unread_only)
  return _internal_unread_only();
}
inline void ListNotificationsRequest::_internal_set_unread_only(bool value) {
  
  _impl_.unread_only_ = value;
}
inline void ListNotificationsRequest::set_unread_only(bool value) {
  _internal_set_unread_only(value);
  // @@protoc_insertion_point(field_set:sonet.notification.ListNotificationsRequest.unread_only)
}

// -------------------------------------------------------------------

// ListNotificationsResponse

// repeated .sonet.notification.Notification notifications = 1;
inline int ListNotificationsResponse::_internal_notifications_size() const {
  return _impl_.notifications_.size();
}
inline int ListNotificationsResponse::notifications_size() const {
  return _internal_notifications_size();
}
inline void ListNotificationsResponse::clear_notifications() {
  _impl_.notifications_.Clear();
}
inline ::sonet::notification::Notification* ListNotificationsResponse::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.notification.ListNotificationsResponse.notifications)
  return _impl_.notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::notification::Notification >*
ListNotificationsResponse::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:sonet.notification.ListNotificationsResponse.notifications)
  return &_impl_.notifications_;
}
inline const ::sonet::notification::Notification& ListNotificationsResponse::_internal_notifications(int index) const {
  return _impl_.notifications_.Get(index);
}
inline const ::sonet::notification::Notification& ListNotificationsResponse::notifications(int index) const {
  // @@protoc_insertion_point(field_get:sonet.notification.ListNotificationsResponse.notifications)
  return _internal_notifications(index);
}
inline ::sonet::notification::Notification* ListNotificationsResponse::_internal_add_notifications() {
  return _impl_.notifications_.Add();
}
inline ::sonet::notification::Notification* ListNotificationsResponse::add_notifications() {
  ::sonet::notification::Notification* _add = _internal_add_notifications();
  // @@protoc_insertion_point(field_add:sonet.notification.ListNotificationsResponse.notifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::notification::Notification >&
ListNotificationsResponse::notifications() const {
  // @@protoc_insertion_point(field_list:sonet.notification.ListNotificationsResponse.notifications)
  return _impl_.notifications_;
}

// .sonet.common.Pagination pagination = 2;
inline bool ListNotificationsResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool ListNotificationsResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sonet::common::Pagination& ListNotificationsResponse::_internal_pagination() const {
  const ::sonet::common::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::common::Pagination&>(
      ::sonet::common::_Pagination_default_instance_);
}
inline const ::sonet::common::Pagination& ListNotificationsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.notification.ListNotificationsResponse.pagination)
  return _internal_pagination();
}
inline void ListNotificationsResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::common::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.notification.ListNotificationsResponse.pagination)
}
inline ::sonet::common::Pagination* ListNotificationsResponse::release_pagination() {
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::common::Pagination* ListNotificationsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.notification.ListNotificationsResponse.pagination)
  
  ::sonet::common::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::common::Pagination* ListNotificationsResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::common::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::common::Pagination* ListNotificationsResponse::mutable_pagination() {
  ::sonet::common::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.notification.ListNotificationsResponse.pagination)
  return _msg;
}
inline void ListNotificationsResponse::set_allocated_pagination(::sonet::common::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.ListNotificationsResponse.pagination)
}

// -------------------------------------------------------------------

// MarkNotificationReadRequest

// string user_id = 1;
inline void MarkNotificationReadRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& MarkNotificationReadRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.MarkNotificationReadRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarkNotificationReadRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.MarkNotificationReadRequest.user_id)
}
inline std::string* MarkNotificationReadRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.MarkNotificationReadRequest.user_id)
  return _s;
}
inline const std::string& MarkNotificationReadRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void MarkNotificationReadRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarkNotificationReadRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MarkNotificationReadRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.MarkNotificationReadRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void MarkNotificationReadRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.MarkNotificationReadRequest.user_id)
}

// string notification_id = 2;
inline void MarkNotificationReadRequest::clear_notification_id() {
  _impl_.notification_id_.ClearToEmpty();
}
inline const std::string& MarkNotificationReadRequest::notification_id() const {
  // @@protoc_insertion_point(field_get:sonet.notification.MarkNotificationReadRequest.notification_id)
  return _internal_notification_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarkNotificationReadRequest::set_notification_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notification_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.notification.MarkNotificationReadRequest.notification_id)
}
inline std::string* MarkNotificationReadRequest::mutable_notification_id() {
  std::string* _s = _internal_mutable_notification_id();
  // @@protoc_insertion_point(field_mutable:sonet.notification.MarkNotificationReadRequest.notification_id)
  return _s;
}
inline const std::string& MarkNotificationReadRequest::_internal_notification_id() const {
  return _impl_.notification_id_.Get();
}
inline void MarkNotificationReadRequest::_internal_set_notification_id(const std::string& value) {
  
  _impl_.notification_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarkNotificationReadRequest::_internal_mutable_notification_id() {
  
  return _impl_.notification_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MarkNotificationReadRequest::release_notification_id() {
  // @@protoc_insertion_point(field_release:sonet.notification.MarkNotificationReadRequest.notification_id)
  return _impl_.notification_id_.Release();
}
inline void MarkNotificationReadRequest::set_allocated_notification_id(std::string* notification_id) {
  if (notification_id != nullptr) {
    
  } else {
    
  }
  _impl_.notification_id_.SetAllocated(notification_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notification_id_.IsDefault()) {
    _impl_.notification_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.notification.MarkNotificationReadRequest.notification_id)
}

// -------------------------------------------------------------------

// MarkNotificationReadResponse

// bool success = 1;
inline void MarkNotificationReadResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool MarkNotificationReadResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool MarkNotificationReadResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.notification.MarkNotificationReadResponse.success)
  return _internal_success();
}
inline void MarkNotificationReadResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void MarkNotificationReadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.notification.MarkNotificationReadResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace notification
}  // namespace sonet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sonet::notification::NotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::notification::NotificationType>() {
  return ::sonet::notification::NotificationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fnotification_2eproto
