// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/timeline.proto

#include "services/timeline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace timeline {
PROTOBUF_CONSTEXPR RankingSignals::RankingSignals(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.author_affinity_score_)*/0
  , /*decltype(_impl_.content_quality_score_)*/0
  , /*decltype(_impl_.engagement_velocity_)*/0
  , /*decltype(_impl_.recency_score_)*/0
  , /*decltype(_impl_.personalization_score_)*/0
  , /*decltype(_impl_.diversity_score_)*/0
  , /*decltype(_impl_.is_reply_to_following_)*/false
  , /*decltype(_impl_.mutual_follower_interactions_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankingSignalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankingSignalsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankingSignalsDefaultTypeInternal() {}
  union {
    RankingSignals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankingSignalsDefaultTypeInternal _RankingSignals_default_instance_;
PROTOBUF_CONSTEXPR TimelineItem::TimelineItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.injection_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_.ranking_signals_)*/nullptr
  , /*decltype(_impl_.injected_at_)*/nullptr
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.position_in_timeline_)*/0
  , /*decltype(_impl_.final_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimelineItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimelineItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimelineItemDefaultTypeInternal() {}
  union {
    TimelineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimelineItemDefaultTypeInternal _TimelineItem_default_instance_;
PROTOBUF_CONSTEXPR TimelineMetadata_AlgorithmParamsEntry_DoNotUse::TimelineMetadata_AlgorithmParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TimelineMetadata_AlgorithmParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimelineMetadata_AlgorithmParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimelineMetadata_AlgorithmParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TimelineMetadata_AlgorithmParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimelineMetadata_AlgorithmParamsEntry_DoNotUseDefaultTypeInternal _TimelineMetadata_AlgorithmParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TimelineMetadata::TimelineMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.algorithm_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.timeline_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_updated_)*/nullptr
  , /*decltype(_impl_.last_user_read_)*/nullptr
  , /*decltype(_impl_.total_items_)*/0
  , /*decltype(_impl_.new_items_since_last_fetch_)*/0
  , /*decltype(_impl_.algorithm_used_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimelineMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimelineMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimelineMetadataDefaultTypeInternal() {}
  union {
    TimelineMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimelineMetadataDefaultTypeInternal _TimelineMetadata_default_instance_;
PROTOBUF_CONSTEXPR TimelinePreferences::TimelinePreferences(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.muted_keywords_)*/{}
  , /*decltype(_impl_.muted_users_)*/{}
  , /*decltype(_impl_.preferred_languages_)*/{}
  , /*decltype(_impl_.preferred_algorithm_)*/0
  , /*decltype(_impl_.show_replies_)*/false
  , /*decltype(_impl_.show_renotes_)*/false
  , /*decltype(_impl_.show_recommended_content_)*/false
  , /*decltype(_impl_.show_trending_content_)*/false
  , /*decltype(_impl_.sensitive_content_warning_)*/false
  , /*decltype(_impl_.timeline_refresh_minutes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimelinePreferencesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimelinePreferencesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimelinePreferencesDefaultTypeInternal() {}
  union {
    TimelinePreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimelinePreferencesDefaultTypeInternal _TimelinePreferences_default_instance_;
PROTOBUF_CONSTEXPR TimelineUpdate::TimelineUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_items_)*/{}
  , /*decltype(_impl_.updated_item_ids_)*/{}
  , /*decltype(_impl_.deleted_item_ids_)*/{}
  , /*decltype(_impl_.update_timestamp_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.total_new_items_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimelineUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimelineUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimelineUpdateDefaultTypeInternal() {}
  union {
    TimelineUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimelineUpdateDefaultTypeInternal _TimelineUpdate_default_instance_;
PROTOBUF_CONSTEXPR GetTimelineRequest::GetTimelineRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.algorithm_)*/0
  , /*decltype(_impl_.include_ranking_signals_)*/false
  , /*decltype(_impl_.real_time_updates_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTimelineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTimelineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTimelineRequestDefaultTypeInternal() {}
  union {
    GetTimelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTimelineRequestDefaultTypeInternal _GetTimelineRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTimelineResponse::GetTimelineResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTimelineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTimelineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTimelineResponseDefaultTypeInternal() {}
  union {
    GetTimelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTimelineResponseDefaultTypeInternal _GetTimelineResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserTimelineRequest::GetUserTimelineRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.include_replies_)*/false
  , /*decltype(_impl_.include_renotes_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserTimelineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserTimelineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserTimelineRequestDefaultTypeInternal() {}
  union {
    GetUserTimelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserTimelineRequestDefaultTypeInternal _GetUserTimelineRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserTimelineResponse::GetUserTimelineResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserTimelineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserTimelineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserTimelineResponseDefaultTypeInternal() {}
  union {
    GetUserTimelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserTimelineResponseDefaultTypeInternal _GetUserTimelineResponse_default_instance_;
PROTOBUF_CONSTEXPR RefreshTimelineRequest::RefreshTimelineRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_.max_items_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RefreshTimelineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshTimelineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshTimelineRequestDefaultTypeInternal() {}
  union {
    RefreshTimelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshTimelineRequestDefaultTypeInternal _RefreshTimelineRequest_default_instance_;
PROTOBUF_CONSTEXPR RefreshTimelineResponse::RefreshTimelineResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_items_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_new_items_)*/0
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RefreshTimelineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshTimelineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshTimelineResponseDefaultTypeInternal() {}
  union {
    RefreshTimelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshTimelineResponseDefaultTypeInternal _RefreshTimelineResponse_default_instance_;
PROTOBUF_CONSTEXPR MarkTimelineReadRequest::MarkTimelineReadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.read_until_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkTimelineReadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkTimelineReadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkTimelineReadRequestDefaultTypeInternal() {}
  union {
    MarkTimelineReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkTimelineReadRequestDefaultTypeInternal _MarkTimelineReadRequest_default_instance_;
PROTOBUF_CONSTEXPR MarkTimelineReadResponse::MarkTimelineReadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkTimelineReadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkTimelineReadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkTimelineReadResponseDefaultTypeInternal() {}
  union {
    MarkTimelineReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkTimelineReadResponseDefaultTypeInternal _MarkTimelineReadResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateTimelinePreferencesRequest::UpdateTimelinePreferencesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferences_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateTimelinePreferencesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateTimelinePreferencesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateTimelinePreferencesRequestDefaultTypeInternal() {}
  union {
    UpdateTimelinePreferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateTimelinePreferencesRequestDefaultTypeInternal _UpdateTimelinePreferencesRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateTimelinePreferencesResponse::UpdateTimelinePreferencesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateTimelinePreferencesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateTimelinePreferencesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateTimelinePreferencesResponseDefaultTypeInternal() {}
  union {
    UpdateTimelinePreferencesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateTimelinePreferencesResponseDefaultTypeInternal _UpdateTimelinePreferencesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTimelinePreferencesRequest::GetTimelinePreferencesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTimelinePreferencesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTimelinePreferencesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTimelinePreferencesRequestDefaultTypeInternal() {}
  union {
    GetTimelinePreferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTimelinePreferencesRequestDefaultTypeInternal _GetTimelinePreferencesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTimelinePreferencesResponse::GetTimelinePreferencesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferences_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTimelinePreferencesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTimelinePreferencesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTimelinePreferencesResponseDefaultTypeInternal() {}
  union {
    GetTimelinePreferencesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTimelinePreferencesResponseDefaultTypeInternal _GetTimelinePreferencesResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeTimelineUpdatesRequest::SubscribeTimelineUpdatesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_metadata_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeTimelineUpdatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTimelineUpdatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTimelineUpdatesRequestDefaultTypeInternal() {}
  union {
    SubscribeTimelineUpdatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTimelineUpdatesRequestDefaultTypeInternal _SubscribeTimelineUpdatesRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HealthCheckResponse_DetailsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal _HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
}  // namespace timeline
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2ftimeline_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2ftimeline_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2ftimeline_2eproto = nullptr;

const uint32_t TableStruct_services_2ftimeline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.author_affinity_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.content_quality_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.engagement_velocity_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.recency_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.personalization_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.diversity_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.is_reply_to_following_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RankingSignals, _impl_.mutual_follower_interactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.ranking_signals_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.injected_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.final_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.injection_reason_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineItem, _impl_.position_in_timeline_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.total_items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.new_items_since_last_fetch_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.last_updated_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.last_user_read_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.algorithm_used_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.timeline_version_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineMetadata, _impl_.algorithm_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.preferred_algorithm_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.show_replies_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.show_renotes_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.show_recommended_content_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.show_trending_content_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.sensitive_content_warning_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.muted_keywords_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.muted_users_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.preferred_languages_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelinePreferences, _impl_.timeline_refresh_minutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _impl_.new_items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _impl_.updated_item_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _impl_.deleted_item_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _impl_.total_new_items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::TimelineUpdate, _impl_.update_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineRequest, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineRequest, _impl_.include_ranking_signals_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineRequest, _impl_.real_time_updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineResponse, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelineResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineRequest, _impl_.target_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineRequest, _impl_.include_replies_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineRequest, _impl_.include_renotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetUserTimelineResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineRequest, _impl_.since_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineRequest, _impl_.max_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineResponse, _impl_.new_items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineResponse, _impl_.total_new_items_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineResponse, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::RefreshTimelineResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::MarkTimelineReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::MarkTimelineReadRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::MarkTimelineReadRequest, _impl_.read_until_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::MarkTimelineReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::MarkTimelineReadResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::MarkTimelineReadResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::UpdateTimelinePreferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::UpdateTimelinePreferencesRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::UpdateTimelinePreferencesRequest, _impl_.preferences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::UpdateTimelinePreferencesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::UpdateTimelinePreferencesResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::UpdateTimelinePreferencesResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelinePreferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelinePreferencesRequest, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelinePreferencesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelinePreferencesResponse, _impl_.preferences_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelinePreferencesResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::GetTimelinePreferencesResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::SubscribeTimelineUpdatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::SubscribeTimelineUpdatesRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::SubscribeTimelineUpdatesRequest, _impl_.include_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::timeline::HealthCheckResponse, _impl_.details_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::timeline::RankingSignals)},
  { 14, -1, -1, sizeof(::sonet::timeline::TimelineItem)},
  { 27, 35, -1, sizeof(::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse)},
  { 37, -1, -1, sizeof(::sonet::timeline::TimelineMetadata)},
  { 50, -1, -1, sizeof(::sonet::timeline::TimelinePreferences)},
  { 66, -1, -1, sizeof(::sonet::timeline::TimelineUpdate)},
  { 78, -1, -1, sizeof(::sonet::timeline::GetTimelineRequest)},
  { 89, -1, -1, sizeof(::sonet::timeline::GetTimelineResponse)},
  { 100, -1, -1, sizeof(::sonet::timeline::GetUserTimelineRequest)},
  { 111, -1, -1, sizeof(::sonet::timeline::GetUserTimelineResponse)},
  { 121, -1, -1, sizeof(::sonet::timeline::RefreshTimelineRequest)},
  { 130, -1, -1, sizeof(::sonet::timeline::RefreshTimelineResponse)},
  { 141, -1, -1, sizeof(::sonet::timeline::MarkTimelineReadRequest)},
  { 149, -1, -1, sizeof(::sonet::timeline::MarkTimelineReadResponse)},
  { 157, -1, -1, sizeof(::sonet::timeline::UpdateTimelinePreferencesRequest)},
  { 165, -1, -1, sizeof(::sonet::timeline::UpdateTimelinePreferencesResponse)},
  { 173, -1, -1, sizeof(::sonet::timeline::GetTimelinePreferencesRequest)},
  { 180, -1, -1, sizeof(::sonet::timeline::GetTimelinePreferencesResponse)},
  { 189, -1, -1, sizeof(::sonet::timeline::SubscribeTimelineUpdatesRequest)},
  { 197, -1, -1, sizeof(::sonet::timeline::HealthCheckRequest)},
  { 203, 211, -1, sizeof(::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse)},
  { 213, -1, -1, sizeof(::sonet::timeline::HealthCheckResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::timeline::_RankingSignals_default_instance_._instance,
  &::sonet::timeline::_TimelineItem_default_instance_._instance,
  &::sonet::timeline::_TimelineMetadata_AlgorithmParamsEntry_DoNotUse_default_instance_._instance,
  &::sonet::timeline::_TimelineMetadata_default_instance_._instance,
  &::sonet::timeline::_TimelinePreferences_default_instance_._instance,
  &::sonet::timeline::_TimelineUpdate_default_instance_._instance,
  &::sonet::timeline::_GetTimelineRequest_default_instance_._instance,
  &::sonet::timeline::_GetTimelineResponse_default_instance_._instance,
  &::sonet::timeline::_GetUserTimelineRequest_default_instance_._instance,
  &::sonet::timeline::_GetUserTimelineResponse_default_instance_._instance,
  &::sonet::timeline::_RefreshTimelineRequest_default_instance_._instance,
  &::sonet::timeline::_RefreshTimelineResponse_default_instance_._instance,
  &::sonet::timeline::_MarkTimelineReadRequest_default_instance_._instance,
  &::sonet::timeline::_MarkTimelineReadResponse_default_instance_._instance,
  &::sonet::timeline::_UpdateTimelinePreferencesRequest_default_instance_._instance,
  &::sonet::timeline::_UpdateTimelinePreferencesResponse_default_instance_._instance,
  &::sonet::timeline::_GetTimelinePreferencesRequest_default_instance_._instance,
  &::sonet::timeline::_GetTimelinePreferencesResponse_default_instance_._instance,
  &::sonet::timeline::_SubscribeTimelineUpdatesRequest_default_instance_._instance,
  &::sonet::timeline::_HealthCheckRequest_default_instance_._instance,
  &::sonet::timeline::_HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_._instance,
  &::sonet::timeline::_HealthCheckResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2ftimeline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027services/timeline.proto\022\016sonet.timelin"
  "e\032\026common/timestamp.proto\032\027common/pagina"
  "tion.proto\032\023services/note.proto\"\377\001\n\016Rank"
  "ingSignals\022\035\n\025author_affinity_score\030\001 \001("
  "\001\022\035\n\025content_quality_score\030\002 \001(\001\022\033\n\023enga"
  "gement_velocity\030\003 \001(\001\022\025\n\rrecency_score\030\004"
  " \001(\001\022\035\n\025personalization_score\030\005 \001(\001\022\027\n\017d"
  "iversity_score\030\006 \001(\001\022\035\n\025is_reply_to_foll"
  "owing\030\007 \001(\010\022$\n\034mutual_follower_interacti"
  "ons\030\010 \001(\005\"\221\002\n\014TimelineItem\022\036\n\004note\030\001 \001(\013"
  "2\020.sonet.note.Note\022-\n\006source\030\002 \001(\0162\035.son"
  "et.timeline.ContentSource\0227\n\017ranking_sig"
  "nals\030\003 \001(\0132\036.sonet.timeline.RankingSigna"
  "ls\022,\n\013injected_at\030\004 \001(\0132\027.sonet.common.T"
  "imestamp\022\023\n\013final_score\030\005 \001(\001\022\030\n\020injecti"
  "on_reason\030\006 \001(\t\022\034\n\024position_in_timeline\030"
  "\007 \001(\005\"\211\003\n\020TimelineMetadata\022\023\n\013total_item"
  "s\030\001 \001(\005\022\"\n\032new_items_since_last_fetch\030\002 "
  "\001(\005\022-\n\014last_updated\030\003 \001(\0132\027.sonet.common"
  ".Timestamp\022/\n\016last_user_read\030\004 \001(\0132\027.son"
  "et.common.Timestamp\0229\n\016algorithm_used\030\005 "
  "\001(\0162!.sonet.timeline.TimelineAlgorithm\022\030"
  "\n\020timeline_version\030\006 \001(\t\022O\n\020algorithm_pa"
  "rams\030\007 \003(\01325.sonet.timeline.TimelineMeta"
  "data.AlgorithmParamsEntry\0326\n\024AlgorithmPa"
  "ramsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028"
  "\001\"\321\002\n\023TimelinePreferences\022>\n\023preferred_a"
  "lgorithm\030\001 \001(\0162!.sonet.timeline.Timeline"
  "Algorithm\022\024\n\014show_replies\030\002 \001(\010\022\024\n\014show_"
  "renotes\030\003 \001(\010\022 \n\030show_recommended_conten"
  "t\030\004 \001(\010\022\035\n\025show_trending_content\030\005 \001(\010\022!"
  "\n\031sensitive_content_warning\030\006 \001(\010\022\026\n\016mut"
  "ed_keywords\030\007 \003(\t\022\023\n\013muted_users\030\010 \003(\t\022\033"
  "\n\023preferred_languages\030\t \003(\t\022 \n\030timeline_"
  "refresh_minutes\030\n \001(\005\"\227\003\n\016TimelineUpdate"
  "\0227\n\004type\030\001 \001(\0162).sonet.timeline.Timeline"
  "Update.UpdateType\022/\n\tnew_items\030\002 \003(\0132\034.s"
  "onet.timeline.TimelineItem\022\030\n\020updated_it"
  "em_ids\030\003 \003(\t\022\030\n\020deleted_item_ids\030\004 \003(\t\022\027"
  "\n\017total_new_items\030\005 \001(\005\0221\n\020update_timest"
  "amp\030\006 \001(\0132\027.sonet.common.Timestamp\"\232\001\n\nU"
  "pdateType\022\027\n\023UPDATE_TYPE_UNKNOWN\020\000\022\031\n\025UP"
  "DATE_TYPE_NEW_ITEMS\020\001\022\034\n\030UPDATE_TYPE_ITE"
  "M_UPDATED\020\002\022\034\n\030UPDATE_TYPE_ITEM_DELETED\020"
  "\003\022\034\n\030UPDATE_TYPE_BULK_REFRESH\020\004\"\314\001\n\022GetT"
  "imelineRequest\022\017\n\007user_id\030\001 \001(\t\0224\n\talgor"
  "ithm\030\002 \001(\0162!.sonet.timeline.TimelineAlgo"
  "rithm\0223\n\npagination\030\003 \001(\0132\037.sonet.common"
  ".PaginationRequest\022\037\n\027include_ranking_si"
  "gnals\030\004 \001(\010\022\031\n\021real_time_updates\030\005 \001(\010\"\324"
  "\001\n\023GetTimelineResponse\022+\n\005items\030\001 \003(\0132\034."
  "sonet.timeline.TimelineItem\0222\n\010metadata\030"
  "\002 \001(\0132 .sonet.timeline.TimelineMetadata\022"
  "4\n\npagination\030\003 \001(\0132 .sonet.common.Pagin"
  "ationResponse\022\017\n\007success\030\004 \001(\010\022\025\n\rerror_"
  "message\030\005 \001(\t\"\263\001\n\026GetUserTimelineRequest"
  "\022\026\n\016target_user_id\030\001 \001(\t\022\032\n\022requesting_u"
  "ser_id\030\002 \001(\t\0223\n\npagination\030\003 \001(\0132\037.sonet"
  ".common.PaginationRequest\022\027\n\017include_rep"
  "lies\030\004 \001(\010\022\027\n\017include_renotes\030\005 \001(\010\"\244\001\n\027"
  "GetUserTimelineResponse\022+\n\005items\030\001 \003(\0132\034"
  ".sonet.timeline.TimelineItem\0224\n\npaginati"
  "on\030\002 \001(\0132 .sonet.common.PaginationRespon"
  "se\022\017\n\007success\030\003 \001(\010\022\025\n\rerror_message\030\004 \001"
  "(\t\"d\n\026RefreshTimelineRequest\022\017\n\007user_id\030"
  "\001 \001(\t\022&\n\005since\030\002 \001(\0132\027.sonet.common.Time"
  "stamp\022\021\n\tmax_items\030\003 \001(\005\"\235\001\n\027RefreshTime"
  "lineResponse\022/\n\tnew_items\030\001 \003(\0132\034.sonet."
  "timeline.TimelineItem\022\027\n\017total_new_items"
  "\030\002 \001(\005\022\020\n\010has_more\030\003 \001(\010\022\017\n\007success\030\004 \001("
  "\010\022\025\n\rerror_message\030\005 \001(\t\"W\n\027MarkTimeline"
  "ReadRequest\022\017\n\007user_id\030\001 \001(\t\022+\n\nread_unt"
  "il\030\002 \001(\0132\027.sonet.common.Timestamp\"B\n\030Mar"
  "kTimelineReadResponse\022\017\n\007success\030\001 \001(\010\022\025"
  "\n\rerror_message\030\002 \001(\t\"m\n UpdateTimelineP"
  "referencesRequest\022\017\n\007user_id\030\001 \001(\t\0228\n\013pr"
  "eferences\030\002 \001(\0132#.sonet.timeline.Timelin"
  "ePreferences\"K\n!UpdateTimelinePreference"
  "sResponse\022\017\n\007success\030\001 \001(\010\022\025\n\rerror_mess"
  "age\030\002 \001(\t\"0\n\035GetTimelinePreferencesReque"
  "st\022\017\n\007user_id\030\001 \001(\t\"\202\001\n\036GetTimelinePrefe"
  "rencesResponse\0228\n\013preferences\030\001 \001(\0132#.so"
  "net.timeline.TimelinePreferences\022\017\n\007succ"
  "ess\030\002 \001(\010\022\025\n\rerror_message\030\003 \001(\t\"L\n\037Subs"
  "cribeTimelineUpdatesRequest\022\017\n\007user_id\030\001"
  " \001(\t\022\030\n\020include_metadata\030\002 \001(\010\"\024\n\022Health"
  "CheckRequest\"\230\001\n\023HealthCheckResponse\022\016\n\006"
  "status\030\001 \001(\t\022A\n\007details\030\002 \003(\01320.sonet.ti"
  "meline.HealthCheckResponse.DetailsEntry\032"
  ".\n\014DetailsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001*\234\001\n\021TimelineAlgorithm\022\036\n\032TIMELIN"
  "E_ALGORITHM_UNKNOWN\020\000\022$\n TIMELINE_ALGORI"
  "THM_CHRONOLOGICAL\020\001\022\"\n\036TIMELINE_ALGORITH"
  "M_ALGORITHMIC\020\002\022\035\n\031TIMELINE_ALGORITHM_HY"
  "BRID\020\003*\275\001\n\rContentSource\022\032\n\026CONTENT_SOUR"
  "CE_UNKNOWN\020\000\022\034\n\030CONTENT_SOURCE_FOLLOWING"
  "\020\001\022\033\n\027CONTENT_SOURCE_TRENDING\020\002\022\036\n\032CONTE"
  "NT_SOURCE_RECOMMENDED\020\003\022\033\n\027CONTENT_SOURC"
  "E_PROMOTED\020\004\022\030\n\024CONTENT_SOURCE_LISTS\020\0052\333"
  "\006\n\017TimelineService\022V\n\013GetTimeline\022\".sone"
  "t.timeline.GetTimelineRequest\032#.sonet.ti"
  "meline.GetTimelineResponse\022b\n\017GetUserTim"
  "eline\022&.sonet.timeline.GetUserTimelineRe"
  "quest\032\'.sonet.timeline.GetUserTimelineRe"
  "sponse\022b\n\017RefreshTimeline\022&.sonet.timeli"
  "ne.RefreshTimelineRequest\032\'.sonet.timeli"
  "ne.RefreshTimelineResponse\022e\n\020MarkTimeli"
  "neRead\022\'.sonet.timeline.MarkTimelineRead"
  "Request\032(.sonet.timeline.MarkTimelineRea"
  "dResponse\022\200\001\n\031UpdateTimelinePreferences\022"
  "0.sonet.timeline.UpdateTimelinePreferenc"
  "esRequest\0321.sonet.timeline.UpdateTimelin"
  "ePreferencesResponse\022w\n\026GetTimelinePrefe"
  "rences\022-.sonet.timeline.GetTimelinePrefe"
  "rencesRequest\032..sonet.timeline.GetTimeli"
  "nePreferencesResponse\022m\n\030SubscribeTimeli"
  "neUpdates\022/.sonet.timeline.SubscribeTime"
  "lineUpdatesRequest\032\036.sonet.timeline.Time"
  "lineUpdate0\001\022V\n\013HealthCheck\022\".sonet.time"
  "line.HealthCheckRequest\032#.sonet.timeline"
  ".HealthCheckResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2ftimeline_2eproto_deps[3] = {
  &::descriptor_table_common_2fpagination_2eproto,
  &::descriptor_table_common_2ftimestamp_2eproto,
  &::descriptor_table_services_2fnote_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2ftimeline_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2ftimeline_2eproto = {
    false, false, 4828, descriptor_table_protodef_services_2ftimeline_2eproto,
    "services/timeline.proto",
    &descriptor_table_services_2ftimeline_2eproto_once, descriptor_table_services_2ftimeline_2eproto_deps, 3, 22,
    schemas, file_default_instances, TableStruct_services_2ftimeline_2eproto::offsets,
    file_level_metadata_services_2ftimeline_2eproto, file_level_enum_descriptors_services_2ftimeline_2eproto,
    file_level_service_descriptors_services_2ftimeline_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2ftimeline_2eproto_getter() {
  return &descriptor_table_services_2ftimeline_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2ftimeline_2eproto(&descriptor_table_services_2ftimeline_2eproto);
namespace sonet {
namespace timeline {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimelineUpdate_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2ftimeline_2eproto);
  return file_level_enum_descriptors_services_2ftimeline_2eproto[0];
}
bool TimelineUpdate_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TimelineUpdate_UpdateType TimelineUpdate::UPDATE_TYPE_UNKNOWN;
constexpr TimelineUpdate_UpdateType TimelineUpdate::UPDATE_TYPE_NEW_ITEMS;
constexpr TimelineUpdate_UpdateType TimelineUpdate::UPDATE_TYPE_ITEM_UPDATED;
constexpr TimelineUpdate_UpdateType TimelineUpdate::UPDATE_TYPE_ITEM_DELETED;
constexpr TimelineUpdate_UpdateType TimelineUpdate::UPDATE_TYPE_BULK_REFRESH;
constexpr TimelineUpdate_UpdateType TimelineUpdate::UpdateType_MIN;
constexpr TimelineUpdate_UpdateType TimelineUpdate::UpdateType_MAX;
constexpr int TimelineUpdate::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimelineAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2ftimeline_2eproto);
  return file_level_enum_descriptors_services_2ftimeline_2eproto[1];
}
bool TimelineAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2ftimeline_2eproto);
  return file_level_enum_descriptors_services_2ftimeline_2eproto[2];
}
bool ContentSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RankingSignals::_Internal {
 public:
};

RankingSignals::RankingSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.RankingSignals)
}
RankingSignals::RankingSignals(const RankingSignals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RankingSignals* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.author_affinity_score_){}
    , decltype(_impl_.content_quality_score_){}
    , decltype(_impl_.engagement_velocity_){}
    , decltype(_impl_.recency_score_){}
    , decltype(_impl_.personalization_score_){}
    , decltype(_impl_.diversity_score_){}
    , decltype(_impl_.is_reply_to_following_){}
    , decltype(_impl_.mutual_follower_interactions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.author_affinity_score_, &from._impl_.author_affinity_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mutual_follower_interactions_) -
    reinterpret_cast<char*>(&_impl_.author_affinity_score_)) + sizeof(_impl_.mutual_follower_interactions_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.RankingSignals)
}

inline void RankingSignals::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.author_affinity_score_){0}
    , decltype(_impl_.content_quality_score_){0}
    , decltype(_impl_.engagement_velocity_){0}
    , decltype(_impl_.recency_score_){0}
    , decltype(_impl_.personalization_score_){0}
    , decltype(_impl_.diversity_score_){0}
    , decltype(_impl_.is_reply_to_following_){false}
    , decltype(_impl_.mutual_follower_interactions_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RankingSignals::~RankingSignals() {
  // @@protoc_insertion_point(destructor:sonet.timeline.RankingSignals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankingSignals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RankingSignals::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RankingSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.RankingSignals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.author_affinity_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mutual_follower_interactions_) -
      reinterpret_cast<char*>(&_impl_.author_affinity_score_)) + sizeof(_impl_.mutual_follower_interactions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankingSignals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double author_affinity_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.author_affinity_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double content_quality_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.content_quality_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double engagement_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.engagement_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double recency_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.recency_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double personalization_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.personalization_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double diversity_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.diversity_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_reply_to_following = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_reply_to_following_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mutual_follower_interactions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mutual_follower_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankingSignals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.RankingSignals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double author_affinity_score = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_author_affinity_score = this->_internal_author_affinity_score();
  uint64_t raw_author_affinity_score;
  memcpy(&raw_author_affinity_score, &tmp_author_affinity_score, sizeof(tmp_author_affinity_score));
  if (raw_author_affinity_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_author_affinity_score(), target);
  }

  // double content_quality_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_content_quality_score = this->_internal_content_quality_score();
  uint64_t raw_content_quality_score;
  memcpy(&raw_content_quality_score, &tmp_content_quality_score, sizeof(tmp_content_quality_score));
  if (raw_content_quality_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_content_quality_score(), target);
  }

  // double engagement_velocity = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_velocity = this->_internal_engagement_velocity();
  uint64_t raw_engagement_velocity;
  memcpy(&raw_engagement_velocity, &tmp_engagement_velocity, sizeof(tmp_engagement_velocity));
  if (raw_engagement_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_engagement_velocity(), target);
  }

  // double recency_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_recency_score = this->_internal_recency_score();
  uint64_t raw_recency_score;
  memcpy(&raw_recency_score, &tmp_recency_score, sizeof(tmp_recency_score));
  if (raw_recency_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_recency_score(), target);
  }

  // double personalization_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_personalization_score = this->_internal_personalization_score();
  uint64_t raw_personalization_score;
  memcpy(&raw_personalization_score, &tmp_personalization_score, sizeof(tmp_personalization_score));
  if (raw_personalization_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_personalization_score(), target);
  }

  // double diversity_score = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diversity_score = this->_internal_diversity_score();
  uint64_t raw_diversity_score;
  memcpy(&raw_diversity_score, &tmp_diversity_score, sizeof(tmp_diversity_score));
  if (raw_diversity_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_diversity_score(), target);
  }

  // bool is_reply_to_following = 7;
  if (this->_internal_is_reply_to_following() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_reply_to_following(), target);
  }

  // int32 mutual_follower_interactions = 8;
  if (this->_internal_mutual_follower_interactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mutual_follower_interactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.RankingSignals)
  return target;
}

size_t RankingSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.RankingSignals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double author_affinity_score = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_author_affinity_score = this->_internal_author_affinity_score();
  uint64_t raw_author_affinity_score;
  memcpy(&raw_author_affinity_score, &tmp_author_affinity_score, sizeof(tmp_author_affinity_score));
  if (raw_author_affinity_score != 0) {
    total_size += 1 + 8;
  }

  // double content_quality_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_content_quality_score = this->_internal_content_quality_score();
  uint64_t raw_content_quality_score;
  memcpy(&raw_content_quality_score, &tmp_content_quality_score, sizeof(tmp_content_quality_score));
  if (raw_content_quality_score != 0) {
    total_size += 1 + 8;
  }

  // double engagement_velocity = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_velocity = this->_internal_engagement_velocity();
  uint64_t raw_engagement_velocity;
  memcpy(&raw_engagement_velocity, &tmp_engagement_velocity, sizeof(tmp_engagement_velocity));
  if (raw_engagement_velocity != 0) {
    total_size += 1 + 8;
  }

  // double recency_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_recency_score = this->_internal_recency_score();
  uint64_t raw_recency_score;
  memcpy(&raw_recency_score, &tmp_recency_score, sizeof(tmp_recency_score));
  if (raw_recency_score != 0) {
    total_size += 1 + 8;
  }

  // double personalization_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_personalization_score = this->_internal_personalization_score();
  uint64_t raw_personalization_score;
  memcpy(&raw_personalization_score, &tmp_personalization_score, sizeof(tmp_personalization_score));
  if (raw_personalization_score != 0) {
    total_size += 1 + 8;
  }

  // double diversity_score = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diversity_score = this->_internal_diversity_score();
  uint64_t raw_diversity_score;
  memcpy(&raw_diversity_score, &tmp_diversity_score, sizeof(tmp_diversity_score));
  if (raw_diversity_score != 0) {
    total_size += 1 + 8;
  }

  // bool is_reply_to_following = 7;
  if (this->_internal_is_reply_to_following() != 0) {
    total_size += 1 + 1;
  }

  // int32 mutual_follower_interactions = 8;
  if (this->_internal_mutual_follower_interactions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutual_follower_interactions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RankingSignals::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RankingSignals::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RankingSignals::GetClassData() const { return &_class_data_; }


void RankingSignals::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RankingSignals*>(&to_msg);
  auto& from = static_cast<const RankingSignals&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.RankingSignals)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_author_affinity_score = from._internal_author_affinity_score();
  uint64_t raw_author_affinity_score;
  memcpy(&raw_author_affinity_score, &tmp_author_affinity_score, sizeof(tmp_author_affinity_score));
  if (raw_author_affinity_score != 0) {
    _this->_internal_set_author_affinity_score(from._internal_author_affinity_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_content_quality_score = from._internal_content_quality_score();
  uint64_t raw_content_quality_score;
  memcpy(&raw_content_quality_score, &tmp_content_quality_score, sizeof(tmp_content_quality_score));
  if (raw_content_quality_score != 0) {
    _this->_internal_set_content_quality_score(from._internal_content_quality_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_velocity = from._internal_engagement_velocity();
  uint64_t raw_engagement_velocity;
  memcpy(&raw_engagement_velocity, &tmp_engagement_velocity, sizeof(tmp_engagement_velocity));
  if (raw_engagement_velocity != 0) {
    _this->_internal_set_engagement_velocity(from._internal_engagement_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_recency_score = from._internal_recency_score();
  uint64_t raw_recency_score;
  memcpy(&raw_recency_score, &tmp_recency_score, sizeof(tmp_recency_score));
  if (raw_recency_score != 0) {
    _this->_internal_set_recency_score(from._internal_recency_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_personalization_score = from._internal_personalization_score();
  uint64_t raw_personalization_score;
  memcpy(&raw_personalization_score, &tmp_personalization_score, sizeof(tmp_personalization_score));
  if (raw_personalization_score != 0) {
    _this->_internal_set_personalization_score(from._internal_personalization_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_diversity_score = from._internal_diversity_score();
  uint64_t raw_diversity_score;
  memcpy(&raw_diversity_score, &tmp_diversity_score, sizeof(tmp_diversity_score));
  if (raw_diversity_score != 0) {
    _this->_internal_set_diversity_score(from._internal_diversity_score());
  }
  if (from._internal_is_reply_to_following() != 0) {
    _this->_internal_set_is_reply_to_following(from._internal_is_reply_to_following());
  }
  if (from._internal_mutual_follower_interactions() != 0) {
    _this->_internal_set_mutual_follower_interactions(from._internal_mutual_follower_interactions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RankingSignals::CopyFrom(const RankingSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.RankingSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingSignals::IsInitialized() const {
  return true;
}

void RankingSignals::InternalSwap(RankingSignals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankingSignals, _impl_.mutual_follower_interactions_)
      + sizeof(RankingSignals::_impl_.mutual_follower_interactions_)
      - PROTOBUF_FIELD_OFFSET(RankingSignals, _impl_.author_affinity_score_)>(
          reinterpret_cast<char*>(&_impl_.author_affinity_score_),
          reinterpret_cast<char*>(&other->_impl_.author_affinity_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankingSignals::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[0]);
}

// ===================================================================

class TimelineItem::_Internal {
 public:
  static const ::sonet::note::Note& note(const TimelineItem* msg);
  static const ::sonet::timeline::RankingSignals& ranking_signals(const TimelineItem* msg);
  static const ::sonet::common::Timestamp& injected_at(const TimelineItem* msg);
};

const ::sonet::note::Note&
TimelineItem::_Internal::note(const TimelineItem* msg) {
  return *msg->_impl_.note_;
}
const ::sonet::timeline::RankingSignals&
TimelineItem::_Internal::ranking_signals(const TimelineItem* msg) {
  return *msg->_impl_.ranking_signals_;
}
const ::sonet::common::Timestamp&
TimelineItem::_Internal::injected_at(const TimelineItem* msg) {
  return *msg->_impl_.injected_at_;
}
void TimelineItem::clear_note() {
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
}
void TimelineItem::clear_injected_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.injected_at_ != nullptr) {
    delete _impl_.injected_at_;
  }
  _impl_.injected_at_ = nullptr;
}
TimelineItem::TimelineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.TimelineItem)
}
TimelineItem::TimelineItem(const TimelineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimelineItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.injection_reason_){}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.ranking_signals_){nullptr}
    , decltype(_impl_.injected_at_){nullptr}
    , decltype(_impl_.source_){}
    , decltype(_impl_.position_in_timeline_){}
    , decltype(_impl_.final_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.injection_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.injection_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_injection_reason().empty()) {
    _this->_impl_.injection_reason_.Set(from._internal_injection_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::sonet::note::Note(*from._impl_.note_);
  }
  if (from._internal_has_ranking_signals()) {
    _this->_impl_.ranking_signals_ = new ::sonet::timeline::RankingSignals(*from._impl_.ranking_signals_);
  }
  if (from._internal_has_injected_at()) {
    _this->_impl_.injected_at_ = new ::sonet::common::Timestamp(*from._impl_.injected_at_);
  }
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.final_score_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.final_score_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.TimelineItem)
}

inline void TimelineItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.injection_reason_){}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.ranking_signals_){nullptr}
    , decltype(_impl_.injected_at_){nullptr}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.position_in_timeline_){0}
    , decltype(_impl_.final_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.injection_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.injection_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimelineItem::~TimelineItem() {
  // @@protoc_insertion_point(destructor:sonet.timeline.TimelineItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimelineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.injection_reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.note_;
  if (this != internal_default_instance()) delete _impl_.ranking_signals_;
  if (this != internal_default_instance()) delete _impl_.injected_at_;
}

void TimelineItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimelineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.TimelineItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.injection_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ranking_signals_ != nullptr) {
    delete _impl_.ranking_signals_;
  }
  _impl_.ranking_signals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.injected_at_ != nullptr) {
    delete _impl_.injected_at_;
  }
  _impl_.injected_at_ = nullptr;
  ::memset(&_impl_.source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.final_score_) -
      reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.final_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimelineItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.note.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.timeline.ContentSource source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::sonet::timeline::ContentSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.timeline.RankingSignals ranking_signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranking_signals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp injected_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_injected_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double final_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.final_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string injection_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_injection_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelineItem.injection_reason"));
        } else
          goto handle_unusual;
        continue;
      // int32 position_in_timeline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.position_in_timeline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimelineItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.TimelineItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  // .sonet.timeline.ContentSource source = 2;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source(), target);
  }

  // .sonet.timeline.RankingSignals ranking_signals = 3;
  if (this->_internal_has_ranking_signals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ranking_signals(this),
        _Internal::ranking_signals(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp injected_at = 4;
  if (this->_internal_has_injected_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::injected_at(this),
        _Internal::injected_at(this).GetCachedSize(), target, stream);
  }

  // double final_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_final_score = this->_internal_final_score();
  uint64_t raw_final_score;
  memcpy(&raw_final_score, &tmp_final_score, sizeof(tmp_final_score));
  if (raw_final_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_final_score(), target);
  }

  // string injection_reason = 6;
  if (!this->_internal_injection_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_injection_reason().data(), static_cast<int>(this->_internal_injection_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelineItem.injection_reason");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_injection_reason(), target);
  }

  // int32 position_in_timeline = 7;
  if (this->_internal_position_in_timeline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_position_in_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.TimelineItem)
  return target;
}

size_t TimelineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.TimelineItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string injection_reason = 6;
  if (!this->_internal_injection_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_injection_reason());
  }

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.note_);
  }

  // .sonet.timeline.RankingSignals ranking_signals = 3;
  if (this->_internal_has_ranking_signals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ranking_signals_);
  }

  // .sonet.common.Timestamp injected_at = 4;
  if (this->_internal_has_injected_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.injected_at_);
  }

  // .sonet.timeline.ContentSource source = 2;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // int32 position_in_timeline = 7;
  if (this->_internal_position_in_timeline() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position_in_timeline());
  }

  // double final_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_final_score = this->_internal_final_score();
  uint64_t raw_final_score;
  memcpy(&raw_final_score, &tmp_final_score, sizeof(tmp_final_score));
  if (raw_final_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimelineItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimelineItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimelineItem::GetClassData() const { return &_class_data_; }


void TimelineItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimelineItem*>(&to_msg);
  auto& from = static_cast<const TimelineItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.TimelineItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_injection_reason().empty()) {
    _this->_internal_set_injection_reason(from._internal_injection_reason());
  }
  if (from._internal_has_note()) {
    _this->_internal_mutable_note()->::sonet::note::Note::MergeFrom(
        from._internal_note());
  }
  if (from._internal_has_ranking_signals()) {
    _this->_internal_mutable_ranking_signals()->::sonet::timeline::RankingSignals::MergeFrom(
        from._internal_ranking_signals());
  }
  if (from._internal_has_injected_at()) {
    _this->_internal_mutable_injected_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_injected_at());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_position_in_timeline() != 0) {
    _this->_internal_set_position_in_timeline(from._internal_position_in_timeline());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_final_score = from._internal_final_score();
  uint64_t raw_final_score;
  memcpy(&raw_final_score, &tmp_final_score, sizeof(tmp_final_score));
  if (raw_final_score != 0) {
    _this->_internal_set_final_score(from._internal_final_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimelineItem::CopyFrom(const TimelineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.TimelineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineItem::IsInitialized() const {
  return true;
}

void TimelineItem::InternalSwap(TimelineItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.injection_reason_, lhs_arena,
      &other->_impl_.injection_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimelineItem, _impl_.final_score_)
      + sizeof(TimelineItem::_impl_.final_score_)
      - PROTOBUF_FIELD_OFFSET(TimelineItem, _impl_.note_)>(
          reinterpret_cast<char*>(&_impl_.note_),
          reinterpret_cast<char*>(&other->_impl_.note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimelineItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[1]);
}

// ===================================================================

TimelineMetadata_AlgorithmParamsEntry_DoNotUse::TimelineMetadata_AlgorithmParamsEntry_DoNotUse() {}
TimelineMetadata_AlgorithmParamsEntry_DoNotUse::TimelineMetadata_AlgorithmParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TimelineMetadata_AlgorithmParamsEntry_DoNotUse::MergeFrom(const TimelineMetadata_AlgorithmParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TimelineMetadata_AlgorithmParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[2]);
}

// ===================================================================

class TimelineMetadata::_Internal {
 public:
  static const ::sonet::common::Timestamp& last_updated(const TimelineMetadata* msg);
  static const ::sonet::common::Timestamp& last_user_read(const TimelineMetadata* msg);
};

const ::sonet::common::Timestamp&
TimelineMetadata::_Internal::last_updated(const TimelineMetadata* msg) {
  return *msg->_impl_.last_updated_;
}
const ::sonet::common::Timestamp&
TimelineMetadata::_Internal::last_user_read(const TimelineMetadata* msg) {
  return *msg->_impl_.last_user_read_;
}
void TimelineMetadata::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
}
void TimelineMetadata::clear_last_user_read() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_user_read_ != nullptr) {
    delete _impl_.last_user_read_;
  }
  _impl_.last_user_read_ = nullptr;
}
TimelineMetadata::TimelineMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TimelineMetadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.TimelineMetadata)
}
TimelineMetadata::TimelineMetadata(const TimelineMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimelineMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.algorithm_params_)*/{}
    , decltype(_impl_.timeline_version_){}
    , decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.last_user_read_){nullptr}
    , decltype(_impl_.total_items_){}
    , decltype(_impl_.new_items_since_last_fetch_){}
    , decltype(_impl_.algorithm_used_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.algorithm_params_.MergeFrom(from._impl_.algorithm_params_);
  _impl_.timeline_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeline_version().empty()) {
    _this->_impl_.timeline_version_.Set(from._internal_timeline_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_updated()) {
    _this->_impl_.last_updated_ = new ::sonet::common::Timestamp(*from._impl_.last_updated_);
  }
  if (from._internal_has_last_user_read()) {
    _this->_impl_.last_user_read_ = new ::sonet::common::Timestamp(*from._impl_.last_user_read_);
  }
  ::memcpy(&_impl_.total_items_, &from._impl_.total_items_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.algorithm_used_) -
    reinterpret_cast<char*>(&_impl_.total_items_)) + sizeof(_impl_.algorithm_used_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.TimelineMetadata)
}

inline void TimelineMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.algorithm_params_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.timeline_version_){}
    , decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.last_user_read_){nullptr}
    , decltype(_impl_.total_items_){0}
    , decltype(_impl_.new_items_since_last_fetch_){0}
    , decltype(_impl_.algorithm_used_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.timeline_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimelineMetadata::~TimelineMetadata() {
  // @@protoc_insertion_point(destructor:sonet.timeline.TimelineMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TimelineMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.algorithm_params_.Destruct();
  _impl_.algorithm_params_.~MapField();
  _impl_.timeline_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_updated_;
  if (this != internal_default_instance()) delete _impl_.last_user_read_;
}

void TimelineMetadata::ArenaDtor(void* object) {
  TimelineMetadata* _this = reinterpret_cast< TimelineMetadata* >(object);
  _this->_impl_.algorithm_params_.Destruct();
}
void TimelineMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimelineMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.TimelineMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algorithm_params_.Clear();
  _impl_.timeline_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_user_read_ != nullptr) {
    delete _impl_.last_user_read_;
  }
  _impl_.last_user_read_ = nullptr;
  ::memset(&_impl_.total_items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.algorithm_used_) -
      reinterpret_cast<char*>(&_impl_.total_items_)) + sizeof(_impl_.algorithm_used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimelineMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 new_items_since_last_fetch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.new_items_since_last_fetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_user_read = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_user_read(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.timeline.TimelineAlgorithm algorithm_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm_used(static_cast<::sonet::timeline::TimelineAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // string timeline_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_timeline_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelineMetadata.timeline_version"));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> algorithm_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.algorithm_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimelineMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.TimelineMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_items = 1;
  if (this->_internal_total_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_items(), target);
  }

  // int32 new_items_since_last_fetch = 2;
  if (this->_internal_new_items_since_last_fetch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_items_since_last_fetch(), target);
  }

  // .sonet.common.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp last_user_read = 4;
  if (this->_internal_has_last_user_read()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_user_read(this),
        _Internal::last_user_read(this).GetCachedSize(), target, stream);
  }

  // .sonet.timeline.TimelineAlgorithm algorithm_used = 5;
  if (this->_internal_algorithm_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_algorithm_used(), target);
  }

  // string timeline_version = 6;
  if (!this->_internal_timeline_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeline_version().data(), static_cast<int>(this->_internal_timeline_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelineMetadata.timeline_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_timeline_version(), target);
  }

  // map<string, double> algorithm_params = 7;
  if (!this->_internal_algorithm_params().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = TimelineMetadata_AlgorithmParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_algorithm_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.timeline.TimelineMetadata.AlgorithmParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.TimelineMetadata)
  return target;
}

size_t TimelineMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.TimelineMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> algorithm_params = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_algorithm_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_algorithm_params().begin();
      it != this->_internal_algorithm_params().end(); ++it) {
    total_size += TimelineMetadata_AlgorithmParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string timeline_version = 6;
  if (!this->_internal_timeline_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeline_version());
  }

  // .sonet.common.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_updated_);
  }

  // .sonet.common.Timestamp last_user_read = 4;
  if (this->_internal_has_last_user_read()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_user_read_);
  }

  // int32 total_items = 1;
  if (this->_internal_total_items() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_items());
  }

  // int32 new_items_since_last_fetch = 2;
  if (this->_internal_new_items_since_last_fetch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_items_since_last_fetch());
  }

  // .sonet.timeline.TimelineAlgorithm algorithm_used = 5;
  if (this->_internal_algorithm_used() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm_used());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimelineMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimelineMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimelineMetadata::GetClassData() const { return &_class_data_; }


void TimelineMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimelineMetadata*>(&to_msg);
  auto& from = static_cast<const TimelineMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.TimelineMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.algorithm_params_.MergeFrom(from._impl_.algorithm_params_);
  if (!from._internal_timeline_version().empty()) {
    _this->_internal_set_timeline_version(from._internal_timeline_version());
  }
  if (from._internal_has_last_updated()) {
    _this->_internal_mutable_last_updated()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_updated());
  }
  if (from._internal_has_last_user_read()) {
    _this->_internal_mutable_last_user_read()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_user_read());
  }
  if (from._internal_total_items() != 0) {
    _this->_internal_set_total_items(from._internal_total_items());
  }
  if (from._internal_new_items_since_last_fetch() != 0) {
    _this->_internal_set_new_items_since_last_fetch(from._internal_new_items_since_last_fetch());
  }
  if (from._internal_algorithm_used() != 0) {
    _this->_internal_set_algorithm_used(from._internal_algorithm_used());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimelineMetadata::CopyFrom(const TimelineMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.TimelineMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineMetadata::IsInitialized() const {
  return true;
}

void TimelineMetadata::InternalSwap(TimelineMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.algorithm_params_.InternalSwap(&other->_impl_.algorithm_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeline_version_, lhs_arena,
      &other->_impl_.timeline_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimelineMetadata, _impl_.algorithm_used_)
      + sizeof(TimelineMetadata::_impl_.algorithm_used_)
      - PROTOBUF_FIELD_OFFSET(TimelineMetadata, _impl_.last_updated_)>(
          reinterpret_cast<char*>(&_impl_.last_updated_),
          reinterpret_cast<char*>(&other->_impl_.last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimelineMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[3]);
}

// ===================================================================

class TimelinePreferences::_Internal {
 public:
};

TimelinePreferences::TimelinePreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.TimelinePreferences)
}
TimelinePreferences::TimelinePreferences(const TimelinePreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimelinePreferences* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.muted_keywords_){from._impl_.muted_keywords_}
    , decltype(_impl_.muted_users_){from._impl_.muted_users_}
    , decltype(_impl_.preferred_languages_){from._impl_.preferred_languages_}
    , decltype(_impl_.preferred_algorithm_){}
    , decltype(_impl_.show_replies_){}
    , decltype(_impl_.show_renotes_){}
    , decltype(_impl_.show_recommended_content_){}
    , decltype(_impl_.show_trending_content_){}
    , decltype(_impl_.sensitive_content_warning_){}
    , decltype(_impl_.timeline_refresh_minutes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.preferred_algorithm_, &from._impl_.preferred_algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeline_refresh_minutes_) -
    reinterpret_cast<char*>(&_impl_.preferred_algorithm_)) + sizeof(_impl_.timeline_refresh_minutes_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.TimelinePreferences)
}

inline void TimelinePreferences::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.muted_keywords_){arena}
    , decltype(_impl_.muted_users_){arena}
    , decltype(_impl_.preferred_languages_){arena}
    , decltype(_impl_.preferred_algorithm_){0}
    , decltype(_impl_.show_replies_){false}
    , decltype(_impl_.show_renotes_){false}
    , decltype(_impl_.show_recommended_content_){false}
    , decltype(_impl_.show_trending_content_){false}
    , decltype(_impl_.sensitive_content_warning_){false}
    , decltype(_impl_.timeline_refresh_minutes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimelinePreferences::~TimelinePreferences() {
  // @@protoc_insertion_point(destructor:sonet.timeline.TimelinePreferences)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimelinePreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.muted_keywords_.~RepeatedPtrField();
  _impl_.muted_users_.~RepeatedPtrField();
  _impl_.preferred_languages_.~RepeatedPtrField();
}

void TimelinePreferences::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimelinePreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.TimelinePreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.muted_keywords_.Clear();
  _impl_.muted_users_.Clear();
  _impl_.preferred_languages_.Clear();
  ::memset(&_impl_.preferred_algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeline_refresh_minutes_) -
      reinterpret_cast<char*>(&_impl_.preferred_algorithm_)) + sizeof(_impl_.timeline_refresh_minutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimelinePreferences::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.timeline.TimelineAlgorithm preferred_algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preferred_algorithm(static_cast<::sonet::timeline::TimelineAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // bool show_replies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.show_replies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_renotes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.show_renotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_recommended_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.show_recommended_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_trending_content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.show_trending_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sensitive_content_warning = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sensitive_content_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string muted_keywords = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_muted_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelinePreferences.muted_keywords"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string muted_users = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_muted_users();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelinePreferences.muted_users"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string preferred_languages = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_preferred_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelinePreferences.preferred_languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 timeline_refresh_minutes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.timeline_refresh_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimelinePreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.TimelinePreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.timeline.TimelineAlgorithm preferred_algorithm = 1;
  if (this->_internal_preferred_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_preferred_algorithm(), target);
  }

  // bool show_replies = 2;
  if (this->_internal_show_replies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_show_replies(), target);
  }

  // bool show_renotes = 3;
  if (this->_internal_show_renotes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_show_renotes(), target);
  }

  // bool show_recommended_content = 4;
  if (this->_internal_show_recommended_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_show_recommended_content(), target);
  }

  // bool show_trending_content = 5;
  if (this->_internal_show_trending_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_trending_content(), target);
  }

  // bool sensitive_content_warning = 6;
  if (this->_internal_sensitive_content_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_sensitive_content_warning(), target);
  }

  // repeated string muted_keywords = 7;
  for (int i = 0, n = this->_internal_muted_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_muted_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelinePreferences.muted_keywords");
    target = stream->WriteString(7, s, target);
  }

  // repeated string muted_users = 8;
  for (int i = 0, n = this->_internal_muted_users_size(); i < n; i++) {
    const auto& s = this->_internal_muted_users(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelinePreferences.muted_users");
    target = stream->WriteString(8, s, target);
  }

  // repeated string preferred_languages = 9;
  for (int i = 0, n = this->_internal_preferred_languages_size(); i < n; i++) {
    const auto& s = this->_internal_preferred_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelinePreferences.preferred_languages");
    target = stream->WriteString(9, s, target);
  }

  // int32 timeline_refresh_minutes = 10;
  if (this->_internal_timeline_refresh_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_timeline_refresh_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.TimelinePreferences)
  return target;
}

size_t TimelinePreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.TimelinePreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string muted_keywords = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.muted_keywords_.size());
  for (int i = 0, n = _impl_.muted_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.muted_keywords_.Get(i));
  }

  // repeated string muted_users = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.muted_users_.size());
  for (int i = 0, n = _impl_.muted_users_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.muted_users_.Get(i));
  }

  // repeated string preferred_languages = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.preferred_languages_.size());
  for (int i = 0, n = _impl_.preferred_languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.preferred_languages_.Get(i));
  }

  // .sonet.timeline.TimelineAlgorithm preferred_algorithm = 1;
  if (this->_internal_preferred_algorithm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_preferred_algorithm());
  }

  // bool show_replies = 2;
  if (this->_internal_show_replies() != 0) {
    total_size += 1 + 1;
  }

  // bool show_renotes = 3;
  if (this->_internal_show_renotes() != 0) {
    total_size += 1 + 1;
  }

  // bool show_recommended_content = 4;
  if (this->_internal_show_recommended_content() != 0) {
    total_size += 1 + 1;
  }

  // bool show_trending_content = 5;
  if (this->_internal_show_trending_content() != 0) {
    total_size += 1 + 1;
  }

  // bool sensitive_content_warning = 6;
  if (this->_internal_sensitive_content_warning() != 0) {
    total_size += 1 + 1;
  }

  // int32 timeline_refresh_minutes = 10;
  if (this->_internal_timeline_refresh_minutes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeline_refresh_minutes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimelinePreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimelinePreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimelinePreferences::GetClassData() const { return &_class_data_; }


void TimelinePreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimelinePreferences*>(&to_msg);
  auto& from = static_cast<const TimelinePreferences&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.TimelinePreferences)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.muted_keywords_.MergeFrom(from._impl_.muted_keywords_);
  _this->_impl_.muted_users_.MergeFrom(from._impl_.muted_users_);
  _this->_impl_.preferred_languages_.MergeFrom(from._impl_.preferred_languages_);
  if (from._internal_preferred_algorithm() != 0) {
    _this->_internal_set_preferred_algorithm(from._internal_preferred_algorithm());
  }
  if (from._internal_show_replies() != 0) {
    _this->_internal_set_show_replies(from._internal_show_replies());
  }
  if (from._internal_show_renotes() != 0) {
    _this->_internal_set_show_renotes(from._internal_show_renotes());
  }
  if (from._internal_show_recommended_content() != 0) {
    _this->_internal_set_show_recommended_content(from._internal_show_recommended_content());
  }
  if (from._internal_show_trending_content() != 0) {
    _this->_internal_set_show_trending_content(from._internal_show_trending_content());
  }
  if (from._internal_sensitive_content_warning() != 0) {
    _this->_internal_set_sensitive_content_warning(from._internal_sensitive_content_warning());
  }
  if (from._internal_timeline_refresh_minutes() != 0) {
    _this->_internal_set_timeline_refresh_minutes(from._internal_timeline_refresh_minutes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimelinePreferences::CopyFrom(const TimelinePreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.TimelinePreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelinePreferences::IsInitialized() const {
  return true;
}

void TimelinePreferences::InternalSwap(TimelinePreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.muted_keywords_.InternalSwap(&other->_impl_.muted_keywords_);
  _impl_.muted_users_.InternalSwap(&other->_impl_.muted_users_);
  _impl_.preferred_languages_.InternalSwap(&other->_impl_.preferred_languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimelinePreferences, _impl_.timeline_refresh_minutes_)
      + sizeof(TimelinePreferences::_impl_.timeline_refresh_minutes_)
      - PROTOBUF_FIELD_OFFSET(TimelinePreferences, _impl_.preferred_algorithm_)>(
          reinterpret_cast<char*>(&_impl_.preferred_algorithm_),
          reinterpret_cast<char*>(&other->_impl_.preferred_algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimelinePreferences::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[4]);
}

// ===================================================================

class TimelineUpdate::_Internal {
 public:
  static const ::sonet::common::Timestamp& update_timestamp(const TimelineUpdate* msg);
};

const ::sonet::common::Timestamp&
TimelineUpdate::_Internal::update_timestamp(const TimelineUpdate* msg) {
  return *msg->_impl_.update_timestamp_;
}
void TimelineUpdate::clear_update_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_timestamp_ != nullptr) {
    delete _impl_.update_timestamp_;
  }
  _impl_.update_timestamp_ = nullptr;
}
TimelineUpdate::TimelineUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.TimelineUpdate)
}
TimelineUpdate::TimelineUpdate(const TimelineUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimelineUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_items_){from._impl_.new_items_}
    , decltype(_impl_.updated_item_ids_){from._impl_.updated_item_ids_}
    , decltype(_impl_.deleted_item_ids_){from._impl_.deleted_item_ids_}
    , decltype(_impl_.update_timestamp_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.total_new_items_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_update_timestamp()) {
    _this->_impl_.update_timestamp_ = new ::sonet::common::Timestamp(*from._impl_.update_timestamp_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_new_items_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.total_new_items_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.TimelineUpdate)
}

inline void TimelineUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_items_){arena}
    , decltype(_impl_.updated_item_ids_){arena}
    , decltype(_impl_.deleted_item_ids_){arena}
    , decltype(_impl_.update_timestamp_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.total_new_items_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimelineUpdate::~TimelineUpdate() {
  // @@protoc_insertion_point(destructor:sonet.timeline.TimelineUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimelineUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_items_.~RepeatedPtrField();
  _impl_.updated_item_ids_.~RepeatedPtrField();
  _impl_.deleted_item_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.update_timestamp_;
}

void TimelineUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimelineUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.TimelineUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_items_.Clear();
  _impl_.updated_item_ids_.Clear();
  _impl_.deleted_item_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.update_timestamp_ != nullptr) {
    delete _impl_.update_timestamp_;
  }
  _impl_.update_timestamp_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_new_items_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.total_new_items_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimelineUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.timeline.TimelineUpdate.UpdateType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::timeline::TimelineUpdate_UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.timeline.TimelineItem new_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string updated_item_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_updated_item_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelineUpdate.updated_item_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string deleted_item_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deleted_item_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.TimelineUpdate.deleted_item_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_new_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_new_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp update_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimelineUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.TimelineUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.timeline.TimelineUpdate.UpdateType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .sonet.timeline.TimelineItem new_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string updated_item_ids = 3;
  for (int i = 0, n = this->_internal_updated_item_ids_size(); i < n; i++) {
    const auto& s = this->_internal_updated_item_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelineUpdate.updated_item_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated string deleted_item_ids = 4;
  for (int i = 0, n = this->_internal_deleted_item_ids_size(); i < n; i++) {
    const auto& s = this->_internal_deleted_item_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.TimelineUpdate.deleted_item_ids");
    target = stream->WriteString(4, s, target);
  }

  // int32 total_new_items = 5;
  if (this->_internal_total_new_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_new_items(), target);
  }

  // .sonet.common.Timestamp update_timestamp = 6;
  if (this->_internal_has_update_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::update_timestamp(this),
        _Internal::update_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.TimelineUpdate)
  return target;
}

size_t TimelineUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.TimelineUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem new_items = 2;
  total_size += 1UL * this->_internal_new_items_size();
  for (const auto& msg : this->_impl_.new_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string updated_item_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.updated_item_ids_.size());
  for (int i = 0, n = _impl_.updated_item_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.updated_item_ids_.Get(i));
  }

  // repeated string deleted_item_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.deleted_item_ids_.size());
  for (int i = 0, n = _impl_.deleted_item_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.deleted_item_ids_.Get(i));
  }

  // .sonet.common.Timestamp update_timestamp = 6;
  if (this->_internal_has_update_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_timestamp_);
  }

  // .sonet.timeline.TimelineUpdate.UpdateType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 total_new_items = 5;
  if (this->_internal_total_new_items() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_new_items());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimelineUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimelineUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimelineUpdate::GetClassData() const { return &_class_data_; }


void TimelineUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimelineUpdate*>(&to_msg);
  auto& from = static_cast<const TimelineUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.TimelineUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.new_items_.MergeFrom(from._impl_.new_items_);
  _this->_impl_.updated_item_ids_.MergeFrom(from._impl_.updated_item_ids_);
  _this->_impl_.deleted_item_ids_.MergeFrom(from._impl_.deleted_item_ids_);
  if (from._internal_has_update_timestamp()) {
    _this->_internal_mutable_update_timestamp()->::sonet::common::Timestamp::MergeFrom(
        from._internal_update_timestamp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_total_new_items() != 0) {
    _this->_internal_set_total_new_items(from._internal_total_new_items());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimelineUpdate::CopyFrom(const TimelineUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.TimelineUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimelineUpdate::IsInitialized() const {
  return true;
}

void TimelineUpdate::InternalSwap(TimelineUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.new_items_.InternalSwap(&other->_impl_.new_items_);
  _impl_.updated_item_ids_.InternalSwap(&other->_impl_.updated_item_ids_);
  _impl_.deleted_item_ids_.InternalSwap(&other->_impl_.deleted_item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimelineUpdate, _impl_.total_new_items_)
      + sizeof(TimelineUpdate::_impl_.total_new_items_)
      - PROTOBUF_FIELD_OFFSET(TimelineUpdate, _impl_.update_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.update_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.update_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimelineUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[5]);
}

// ===================================================================

class GetTimelineRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const GetTimelineRequest* msg);
};

const ::sonet::common::PaginationRequest&
GetTimelineRequest::_Internal::pagination(const GetTimelineRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetTimelineRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetTimelineRequest::GetTimelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.GetTimelineRequest)
}
GetTimelineRequest::GetTimelineRequest(const GetTimelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTimelineRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.include_ranking_signals_){}
    , decltype(_impl_.real_time_updates_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  ::memcpy(&_impl_.algorithm_, &from._impl_.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.real_time_updates_) -
    reinterpret_cast<char*>(&_impl_.algorithm_)) + sizeof(_impl_.real_time_updates_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.GetTimelineRequest)
}

inline void GetTimelineRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.algorithm_){0}
    , decltype(_impl_.include_ranking_signals_){false}
    , decltype(_impl_.real_time_updates_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTimelineRequest::~GetTimelineRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.GetTimelineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTimelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetTimelineRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTimelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.GetTimelineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  ::memset(&_impl_.algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.real_time_updates_) -
      reinterpret_cast<char*>(&_impl_.algorithm_)) + sizeof(_impl_.real_time_updates_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTimelineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetTimelineRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.timeline.TimelineAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::sonet::timeline::TimelineAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_ranking_signals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_ranking_signals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool real_time_updates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.real_time_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTimelineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.GetTimelineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetTimelineRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.timeline.TimelineAlgorithm algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool include_ranking_signals = 4;
  if (this->_internal_include_ranking_signals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_ranking_signals(), target);
  }

  // bool real_time_updates = 5;
  if (this->_internal_real_time_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_real_time_updates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.GetTimelineRequest)
  return target;
}

size_t GetTimelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.GetTimelineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .sonet.timeline.TimelineAlgorithm algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  // bool include_ranking_signals = 4;
  if (this->_internal_include_ranking_signals() != 0) {
    total_size += 1 + 1;
  }

  // bool real_time_updates = 5;
  if (this->_internal_real_time_updates() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTimelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTimelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTimelineRequest::GetClassData() const { return &_class_data_; }


void GetTimelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTimelineRequest*>(&to_msg);
  auto& from = static_cast<const GetTimelineRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.GetTimelineRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_algorithm() != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_include_ranking_signals() != 0) {
    _this->_internal_set_include_ranking_signals(from._internal_include_ranking_signals());
  }
  if (from._internal_real_time_updates() != 0) {
    _this->_internal_set_real_time_updates(from._internal_real_time_updates());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTimelineRequest::CopyFrom(const GetTimelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.GetTimelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimelineRequest::IsInitialized() const {
  return true;
}

void GetTimelineRequest::InternalSwap(GetTimelineRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTimelineRequest, _impl_.real_time_updates_)
      + sizeof(GetTimelineRequest::_impl_.real_time_updates_)
      - PROTOBUF_FIELD_OFFSET(GetTimelineRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTimelineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[6]);
}

// ===================================================================

class GetTimelineResponse::_Internal {
 public:
  static const ::sonet::timeline::TimelineMetadata& metadata(const GetTimelineResponse* msg);
  static const ::sonet::common::PaginationResponse& pagination(const GetTimelineResponse* msg);
};

const ::sonet::timeline::TimelineMetadata&
GetTimelineResponse::_Internal::metadata(const GetTimelineResponse* msg) {
  return *msg->_impl_.metadata_;
}
const ::sonet::common::PaginationResponse&
GetTimelineResponse::_Internal::pagination(const GetTimelineResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetTimelineResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetTimelineResponse::GetTimelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.GetTimelineResponse)
}
GetTimelineResponse::GetTimelineResponse(const GetTimelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTimelineResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::sonet::timeline::TimelineMetadata(*from._impl_.metadata_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.GetTimelineResponse)
}

inline void GetTimelineResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTimelineResponse::~GetTimelineResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.GetTimelineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTimelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetTimelineResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTimelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.GetTimelineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTimelineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.timeline.TimelineItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.timeline.TimelineMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetTimelineResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTimelineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.GetTimelineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.timeline.TimelineMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetTimelineResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.GetTimelineResponse)
  return target;
}

size_t GetTimelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.GetTimelineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.timeline.TimelineMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTimelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTimelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTimelineResponse::GetClassData() const { return &_class_data_; }


void GetTimelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTimelineResponse*>(&to_msg);
  auto& from = static_cast<const GetTimelineResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.GetTimelineResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::sonet::timeline::TimelineMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTimelineResponse::CopyFrom(const GetTimelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.GetTimelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimelineResponse::IsInitialized() const {
  return true;
}

void GetTimelineResponse::InternalSwap(GetTimelineResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTimelineResponse, _impl_.success_)
      + sizeof(GetTimelineResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetTimelineResponse, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTimelineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[7]);
}

// ===================================================================

class GetUserTimelineRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const GetUserTimelineRequest* msg);
};

const ::sonet::common::PaginationRequest&
GetUserTimelineRequest::_Internal::pagination(const GetUserTimelineRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetUserTimelineRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetUserTimelineRequest::GetUserTimelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.GetUserTimelineRequest)
}
GetUserTimelineRequest::GetUserTimelineRequest(const GetUserTimelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserTimelineRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.include_replies_){}
    , decltype(_impl_.include_renotes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_user_id().empty()) {
    _this->_impl_.target_user_id_.Set(from._internal_target_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  ::memcpy(&_impl_.include_replies_, &from._impl_.include_replies_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_renotes_) -
    reinterpret_cast<char*>(&_impl_.include_replies_)) + sizeof(_impl_.include_renotes_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.GetUserTimelineRequest)
}

inline void GetUserTimelineRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.include_replies_){false}
    , decltype(_impl_.include_renotes_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserTimelineRequest::~GetUserTimelineRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.GetUserTimelineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserTimelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetUserTimelineRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserTimelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.GetUserTimelineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  ::memset(&_impl_.include_replies_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_renotes_) -
      reinterpret_cast<char*>(&_impl_.include_replies_)) + sizeof(_impl_.include_renotes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserTimelineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetUserTimelineRequest.target_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetUserTimelineRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_replies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_replies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_renotes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_renotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserTimelineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.GetUserTimelineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_user_id = 1;
  if (!this->_internal_target_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_user_id().data(), static_cast<int>(this->_internal_target_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetUserTimelineRequest.target_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetUserTimelineRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool include_replies = 4;
  if (this->_internal_include_replies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_replies(), target);
  }

  // bool include_renotes = 5;
  if (this->_internal_include_renotes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_renotes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.GetUserTimelineRequest)
  return target;
}

size_t GetUserTimelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.GetUserTimelineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_user_id = 1;
  if (!this->_internal_target_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool include_replies = 4;
  if (this->_internal_include_replies() != 0) {
    total_size += 1 + 1;
  }

  // bool include_renotes = 5;
  if (this->_internal_include_renotes() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserTimelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserTimelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserTimelineRequest::GetClassData() const { return &_class_data_; }


void GetUserTimelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserTimelineRequest*>(&to_msg);
  auto& from = static_cast<const GetUserTimelineRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.GetUserTimelineRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_user_id().empty()) {
    _this->_internal_set_target_user_id(from._internal_target_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_include_replies() != 0) {
    _this->_internal_set_include_replies(from._internal_include_replies());
  }
  if (from._internal_include_renotes() != 0) {
    _this->_internal_set_include_renotes(from._internal_include_renotes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserTimelineRequest::CopyFrom(const GetUserTimelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.GetUserTimelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTimelineRequest::IsInitialized() const {
  return true;
}

void GetUserTimelineRequest::InternalSwap(GetUserTimelineRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_user_id_, lhs_arena,
      &other->_impl_.target_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserTimelineRequest, _impl_.include_renotes_)
      + sizeof(GetUserTimelineRequest::_impl_.include_renotes_)
      - PROTOBUF_FIELD_OFFSET(GetUserTimelineRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserTimelineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[8]);
}

// ===================================================================

class GetUserTimelineResponse::_Internal {
 public:
  static const ::sonet::common::PaginationResponse& pagination(const GetUserTimelineResponse* msg);
};

const ::sonet::common::PaginationResponse&
GetUserTimelineResponse::_Internal::pagination(const GetUserTimelineResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetUserTimelineResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetUserTimelineResponse::GetUserTimelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.GetUserTimelineResponse)
}
GetUserTimelineResponse::GetUserTimelineResponse(const GetUserTimelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserTimelineResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.GetUserTimelineResponse)
}

inline void GetUserTimelineResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserTimelineResponse::~GetUserTimelineResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.GetUserTimelineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserTimelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetUserTimelineResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserTimelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.GetUserTimelineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserTimelineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.timeline.TimelineItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetUserTimelineResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserTimelineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.GetUserTimelineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetUserTimelineResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.GetUserTimelineResponse)
  return target;
}

size_t GetUserTimelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.GetUserTimelineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserTimelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserTimelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserTimelineResponse::GetClassData() const { return &_class_data_; }


void GetUserTimelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserTimelineResponse*>(&to_msg);
  auto& from = static_cast<const GetUserTimelineResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.GetUserTimelineResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserTimelineResponse::CopyFrom(const GetUserTimelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.GetUserTimelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTimelineResponse::IsInitialized() const {
  return true;
}

void GetUserTimelineResponse::InternalSwap(GetUserTimelineResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserTimelineResponse, _impl_.success_)
      + sizeof(GetUserTimelineResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetUserTimelineResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserTimelineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[9]);
}

// ===================================================================

class RefreshTimelineRequest::_Internal {
 public:
  static const ::sonet::common::Timestamp& since(const RefreshTimelineRequest* msg);
};

const ::sonet::common::Timestamp&
RefreshTimelineRequest::_Internal::since(const RefreshTimelineRequest* msg) {
  return *msg->_impl_.since_;
}
void RefreshTimelineRequest::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
RefreshTimelineRequest::RefreshTimelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.RefreshTimelineRequest)
}
RefreshTimelineRequest::RefreshTimelineRequest(const RefreshTimelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RefreshTimelineRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.max_items_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::sonet::common::Timestamp(*from._impl_.since_);
  }
  _this->_impl_.max_items_ = from._impl_.max_items_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.RefreshTimelineRequest)
}

inline void RefreshTimelineRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.max_items_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RefreshTimelineRequest::~RefreshTimelineRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.RefreshTimelineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RefreshTimelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.since_;
}

void RefreshTimelineRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RefreshTimelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.RefreshTimelineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  _impl_.max_items_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshTimelineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.RefreshTimelineRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp since = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshTimelineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.RefreshTimelineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.RefreshTimelineRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.common.Timestamp since = 2;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  // int32 max_items = 3;
  if (this->_internal_max_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.RefreshTimelineRequest)
  return target;
}

size_t RefreshTimelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.RefreshTimelineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.Timestamp since = 2;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  // int32 max_items = 3;
  if (this->_internal_max_items() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_items());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshTimelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RefreshTimelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshTimelineRequest::GetClassData() const { return &_class_data_; }


void RefreshTimelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RefreshTimelineRequest*>(&to_msg);
  auto& from = static_cast<const RefreshTimelineRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.RefreshTimelineRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::sonet::common::Timestamp::MergeFrom(
        from._internal_since());
  }
  if (from._internal_max_items() != 0) {
    _this->_internal_set_max_items(from._internal_max_items());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshTimelineRequest::CopyFrom(const RefreshTimelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.RefreshTimelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTimelineRequest::IsInitialized() const {
  return true;
}

void RefreshTimelineRequest::InternalSwap(RefreshTimelineRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshTimelineRequest, _impl_.max_items_)
      + sizeof(RefreshTimelineRequest::_impl_.max_items_)
      - PROTOBUF_FIELD_OFFSET(RefreshTimelineRequest, _impl_.since_)>(
          reinterpret_cast<char*>(&_impl_.since_),
          reinterpret_cast<char*>(&other->_impl_.since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshTimelineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[10]);
}

// ===================================================================

class RefreshTimelineResponse::_Internal {
 public:
};

RefreshTimelineResponse::RefreshTimelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.RefreshTimelineResponse)
}
RefreshTimelineResponse::RefreshTimelineResponse(const RefreshTimelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RefreshTimelineResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_items_){from._impl_.new_items_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.total_new_items_){}
    , decltype(_impl_.has_more_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_new_items_, &from._impl_.total_new_items_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.total_new_items_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.RefreshTimelineResponse)
}

inline void RefreshTimelineResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_items_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.total_new_items_){0}
    , decltype(_impl_.has_more_){false}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RefreshTimelineResponse::~RefreshTimelineResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.RefreshTimelineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RefreshTimelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_items_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
}

void RefreshTimelineResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RefreshTimelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.RefreshTimelineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_items_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.total_new_items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.total_new_items_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshTimelineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.timeline.TimelineItem new_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_new_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_new_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.RefreshTimelineResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshTimelineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.RefreshTimelineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem new_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 total_new_items = 2;
  if (this->_internal_total_new_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_new_items(), target);
  }

  // bool has_more = 3;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_more(), target);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.RefreshTimelineResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.RefreshTimelineResponse)
  return target;
}

size_t RefreshTimelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.RefreshTimelineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.timeline.TimelineItem new_items = 1;
  total_size += 1UL * this->_internal_new_items_size();
  for (const auto& msg : this->_impl_.new_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int32 total_new_items = 2;
  if (this->_internal_total_new_items() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_new_items());
  }

  // bool has_more = 3;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshTimelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RefreshTimelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshTimelineResponse::GetClassData() const { return &_class_data_; }


void RefreshTimelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RefreshTimelineResponse*>(&to_msg);
  auto& from = static_cast<const RefreshTimelineResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.RefreshTimelineResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.new_items_.MergeFrom(from._impl_.new_items_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_total_new_items() != 0) {
    _this->_internal_set_total_new_items(from._internal_total_new_items());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshTimelineResponse::CopyFrom(const RefreshTimelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.RefreshTimelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTimelineResponse::IsInitialized() const {
  return true;
}

void RefreshTimelineResponse::InternalSwap(RefreshTimelineResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.new_items_.InternalSwap(&other->_impl_.new_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshTimelineResponse, _impl_.success_)
      + sizeof(RefreshTimelineResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(RefreshTimelineResponse, _impl_.total_new_items_)>(
          reinterpret_cast<char*>(&_impl_.total_new_items_),
          reinterpret_cast<char*>(&other->_impl_.total_new_items_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshTimelineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[11]);
}

// ===================================================================

class MarkTimelineReadRequest::_Internal {
 public:
  static const ::sonet::common::Timestamp& read_until(const MarkTimelineReadRequest* msg);
};

const ::sonet::common::Timestamp&
MarkTimelineReadRequest::_Internal::read_until(const MarkTimelineReadRequest* msg) {
  return *msg->_impl_.read_until_;
}
void MarkTimelineReadRequest::clear_read_until() {
  if (GetArenaForAllocation() == nullptr && _impl_.read_until_ != nullptr) {
    delete _impl_.read_until_;
  }
  _impl_.read_until_ = nullptr;
}
MarkTimelineReadRequest::MarkTimelineReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.MarkTimelineReadRequest)
}
MarkTimelineReadRequest::MarkTimelineReadRequest(const MarkTimelineReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkTimelineReadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.read_until_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_read_until()) {
    _this->_impl_.read_until_ = new ::sonet::common::Timestamp(*from._impl_.read_until_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.MarkTimelineReadRequest)
}

inline void MarkTimelineReadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.read_until_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarkTimelineReadRequest::~MarkTimelineReadRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.MarkTimelineReadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkTimelineReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.read_until_;
}

void MarkTimelineReadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkTimelineReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.MarkTimelineReadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.read_until_ != nullptr) {
    delete _impl_.read_until_;
  }
  _impl_.read_until_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkTimelineReadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.MarkTimelineReadRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp read_until = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarkTimelineReadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.MarkTimelineReadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.MarkTimelineReadRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.common.Timestamp read_until = 2;
  if (this->_internal_has_read_until()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::read_until(this),
        _Internal::read_until(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.MarkTimelineReadRequest)
  return target;
}

size_t MarkTimelineReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.MarkTimelineReadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.Timestamp read_until = 2;
  if (this->_internal_has_read_until()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.read_until_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkTimelineReadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkTimelineReadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkTimelineReadRequest::GetClassData() const { return &_class_data_; }


void MarkTimelineReadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkTimelineReadRequest*>(&to_msg);
  auto& from = static_cast<const MarkTimelineReadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.MarkTimelineReadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_read_until()) {
    _this->_internal_mutable_read_until()->::sonet::common::Timestamp::MergeFrom(
        from._internal_read_until());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkTimelineReadRequest::CopyFrom(const MarkTimelineReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.MarkTimelineReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkTimelineReadRequest::IsInitialized() const {
  return true;
}

void MarkTimelineReadRequest::InternalSwap(MarkTimelineReadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.read_until_, other->_impl_.read_until_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkTimelineReadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[12]);
}

// ===================================================================

class MarkTimelineReadResponse::_Internal {
 public:
};

MarkTimelineReadResponse::MarkTimelineReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.MarkTimelineReadResponse)
}
MarkTimelineReadResponse::MarkTimelineReadResponse(const MarkTimelineReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkTimelineReadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.MarkTimelineReadResponse)
}

inline void MarkTimelineReadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarkTimelineReadResponse::~MarkTimelineReadResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.MarkTimelineReadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkTimelineReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void MarkTimelineReadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkTimelineReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.MarkTimelineReadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkTimelineReadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.MarkTimelineReadResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarkTimelineReadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.MarkTimelineReadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.MarkTimelineReadResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.MarkTimelineReadResponse)
  return target;
}

size_t MarkTimelineReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.MarkTimelineReadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkTimelineReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkTimelineReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkTimelineReadResponse::GetClassData() const { return &_class_data_; }


void MarkTimelineReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkTimelineReadResponse*>(&to_msg);
  auto& from = static_cast<const MarkTimelineReadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.MarkTimelineReadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkTimelineReadResponse::CopyFrom(const MarkTimelineReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.MarkTimelineReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkTimelineReadResponse::IsInitialized() const {
  return true;
}

void MarkTimelineReadResponse::InternalSwap(MarkTimelineReadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkTimelineReadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[13]);
}

// ===================================================================

class UpdateTimelinePreferencesRequest::_Internal {
 public:
  static const ::sonet::timeline::TimelinePreferences& preferences(const UpdateTimelinePreferencesRequest* msg);
};

const ::sonet::timeline::TimelinePreferences&
UpdateTimelinePreferencesRequest::_Internal::preferences(const UpdateTimelinePreferencesRequest* msg) {
  return *msg->_impl_.preferences_;
}
UpdateTimelinePreferencesRequest::UpdateTimelinePreferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.UpdateTimelinePreferencesRequest)
}
UpdateTimelinePreferencesRequest::UpdateTimelinePreferencesRequest(const UpdateTimelinePreferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateTimelinePreferencesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.preferences_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_preferences()) {
    _this->_impl_.preferences_ = new ::sonet::timeline::TimelinePreferences(*from._impl_.preferences_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.UpdateTimelinePreferencesRequest)
}

inline void UpdateTimelinePreferencesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.preferences_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateTimelinePreferencesRequest::~UpdateTimelinePreferencesRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.UpdateTimelinePreferencesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateTimelinePreferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.preferences_;
}

void UpdateTimelinePreferencesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateTimelinePreferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.UpdateTimelinePreferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.preferences_ != nullptr) {
    delete _impl_.preferences_;
  }
  _impl_.preferences_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTimelinePreferencesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.UpdateTimelinePreferencesRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.timeline.TimelinePreferences preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateTimelinePreferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.UpdateTimelinePreferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.UpdateTimelinePreferencesRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.timeline.TimelinePreferences preferences = 2;
  if (this->_internal_has_preferences()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::preferences(this),
        _Internal::preferences(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.UpdateTimelinePreferencesRequest)
  return target;
}

size_t UpdateTimelinePreferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.UpdateTimelinePreferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.timeline.TimelinePreferences preferences = 2;
  if (this->_internal_has_preferences()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTimelinePreferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateTimelinePreferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTimelinePreferencesRequest::GetClassData() const { return &_class_data_; }


void UpdateTimelinePreferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateTimelinePreferencesRequest*>(&to_msg);
  auto& from = static_cast<const UpdateTimelinePreferencesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.UpdateTimelinePreferencesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_preferences()) {
    _this->_internal_mutable_preferences()->::sonet::timeline::TimelinePreferences::MergeFrom(
        from._internal_preferences());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTimelinePreferencesRequest::CopyFrom(const UpdateTimelinePreferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.UpdateTimelinePreferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTimelinePreferencesRequest::IsInitialized() const {
  return true;
}

void UpdateTimelinePreferencesRequest::InternalSwap(UpdateTimelinePreferencesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.preferences_, other->_impl_.preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTimelinePreferencesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[14]);
}

// ===================================================================

class UpdateTimelinePreferencesResponse::_Internal {
 public:
};

UpdateTimelinePreferencesResponse::UpdateTimelinePreferencesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.UpdateTimelinePreferencesResponse)
}
UpdateTimelinePreferencesResponse::UpdateTimelinePreferencesResponse(const UpdateTimelinePreferencesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateTimelinePreferencesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.UpdateTimelinePreferencesResponse)
}

inline void UpdateTimelinePreferencesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateTimelinePreferencesResponse::~UpdateTimelinePreferencesResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.UpdateTimelinePreferencesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateTimelinePreferencesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void UpdateTimelinePreferencesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateTimelinePreferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.UpdateTimelinePreferencesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTimelinePreferencesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.UpdateTimelinePreferencesResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateTimelinePreferencesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.UpdateTimelinePreferencesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.UpdateTimelinePreferencesResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.UpdateTimelinePreferencesResponse)
  return target;
}

size_t UpdateTimelinePreferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.UpdateTimelinePreferencesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTimelinePreferencesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateTimelinePreferencesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTimelinePreferencesResponse::GetClassData() const { return &_class_data_; }


void UpdateTimelinePreferencesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateTimelinePreferencesResponse*>(&to_msg);
  auto& from = static_cast<const UpdateTimelinePreferencesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.UpdateTimelinePreferencesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTimelinePreferencesResponse::CopyFrom(const UpdateTimelinePreferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.UpdateTimelinePreferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTimelinePreferencesResponse::IsInitialized() const {
  return true;
}

void UpdateTimelinePreferencesResponse::InternalSwap(UpdateTimelinePreferencesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTimelinePreferencesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[15]);
}

// ===================================================================

class GetTimelinePreferencesRequest::_Internal {
 public:
};

GetTimelinePreferencesRequest::GetTimelinePreferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.GetTimelinePreferencesRequest)
}
GetTimelinePreferencesRequest::GetTimelinePreferencesRequest(const GetTimelinePreferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTimelinePreferencesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.GetTimelinePreferencesRequest)
}

inline void GetTimelinePreferencesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTimelinePreferencesRequest::~GetTimelinePreferencesRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.GetTimelinePreferencesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTimelinePreferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void GetTimelinePreferencesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTimelinePreferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.GetTimelinePreferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTimelinePreferencesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetTimelinePreferencesRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTimelinePreferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.GetTimelinePreferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetTimelinePreferencesRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.GetTimelinePreferencesRequest)
  return target;
}

size_t GetTimelinePreferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.GetTimelinePreferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTimelinePreferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTimelinePreferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTimelinePreferencesRequest::GetClassData() const { return &_class_data_; }


void GetTimelinePreferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTimelinePreferencesRequest*>(&to_msg);
  auto& from = static_cast<const GetTimelinePreferencesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.GetTimelinePreferencesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTimelinePreferencesRequest::CopyFrom(const GetTimelinePreferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.GetTimelinePreferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimelinePreferencesRequest::IsInitialized() const {
  return true;
}

void GetTimelinePreferencesRequest::InternalSwap(GetTimelinePreferencesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTimelinePreferencesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[16]);
}

// ===================================================================

class GetTimelinePreferencesResponse::_Internal {
 public:
  static const ::sonet::timeline::TimelinePreferences& preferences(const GetTimelinePreferencesResponse* msg);
};

const ::sonet::timeline::TimelinePreferences&
GetTimelinePreferencesResponse::_Internal::preferences(const GetTimelinePreferencesResponse* msg) {
  return *msg->_impl_.preferences_;
}
GetTimelinePreferencesResponse::GetTimelinePreferencesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.GetTimelinePreferencesResponse)
}
GetTimelinePreferencesResponse::GetTimelinePreferencesResponse(const GetTimelinePreferencesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTimelinePreferencesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.preferences_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_preferences()) {
    _this->_impl_.preferences_ = new ::sonet::timeline::TimelinePreferences(*from._impl_.preferences_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.GetTimelinePreferencesResponse)
}

inline void GetTimelinePreferencesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.preferences_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTimelinePreferencesResponse::~GetTimelinePreferencesResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.GetTimelinePreferencesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTimelinePreferencesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.preferences_;
}

void GetTimelinePreferencesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTimelinePreferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.GetTimelinePreferencesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.preferences_ != nullptr) {
    delete _impl_.preferences_;
  }
  _impl_.preferences_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTimelinePreferencesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.timeline.TimelinePreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.GetTimelinePreferencesResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTimelinePreferencesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.GetTimelinePreferencesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.timeline.TimelinePreferences preferences = 1;
  if (this->_internal_has_preferences()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preferences(this),
        _Internal::preferences(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.GetTimelinePreferencesResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.GetTimelinePreferencesResponse)
  return target;
}

size_t GetTimelinePreferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.GetTimelinePreferencesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.timeline.TimelinePreferences preferences = 1;
  if (this->_internal_has_preferences()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preferences_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTimelinePreferencesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTimelinePreferencesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTimelinePreferencesResponse::GetClassData() const { return &_class_data_; }


void GetTimelinePreferencesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTimelinePreferencesResponse*>(&to_msg);
  auto& from = static_cast<const GetTimelinePreferencesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.GetTimelinePreferencesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_preferences()) {
    _this->_internal_mutable_preferences()->::sonet::timeline::TimelinePreferences::MergeFrom(
        from._internal_preferences());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTimelinePreferencesResponse::CopyFrom(const GetTimelinePreferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.GetTimelinePreferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimelinePreferencesResponse::IsInitialized() const {
  return true;
}

void GetTimelinePreferencesResponse::InternalSwap(GetTimelinePreferencesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTimelinePreferencesResponse, _impl_.success_)
      + sizeof(GetTimelinePreferencesResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetTimelinePreferencesResponse, _impl_.preferences_)>(
          reinterpret_cast<char*>(&_impl_.preferences_),
          reinterpret_cast<char*>(&other->_impl_.preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTimelinePreferencesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[17]);
}

// ===================================================================

class SubscribeTimelineUpdatesRequest::_Internal {
 public:
};

SubscribeTimelineUpdatesRequest::SubscribeTimelineUpdatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.SubscribeTimelineUpdatesRequest)
}
SubscribeTimelineUpdatesRequest::SubscribeTimelineUpdatesRequest(const SubscribeTimelineUpdatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeTimelineUpdatesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.include_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_metadata_ = from._impl_.include_metadata_;
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.SubscribeTimelineUpdatesRequest)
}

inline void SubscribeTimelineUpdatesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.include_metadata_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeTimelineUpdatesRequest::~SubscribeTimelineUpdatesRequest() {
  // @@protoc_insertion_point(destructor:sonet.timeline.SubscribeTimelineUpdatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeTimelineUpdatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void SubscribeTimelineUpdatesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeTimelineUpdatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.SubscribeTimelineUpdatesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.include_metadata_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeTimelineUpdatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.SubscribeTimelineUpdatesRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool include_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeTimelineUpdatesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.SubscribeTimelineUpdatesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.SubscribeTimelineUpdatesRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // bool include_metadata = 2;
  if (this->_internal_include_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.SubscribeTimelineUpdatesRequest)
  return target;
}

size_t SubscribeTimelineUpdatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.SubscribeTimelineUpdatesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bool include_metadata = 2;
  if (this->_internal_include_metadata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeTimelineUpdatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeTimelineUpdatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeTimelineUpdatesRequest::GetClassData() const { return &_class_data_; }


void SubscribeTimelineUpdatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeTimelineUpdatesRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeTimelineUpdatesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.SubscribeTimelineUpdatesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_include_metadata() != 0) {
    _this->_internal_set_include_metadata(from._internal_include_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeTimelineUpdatesRequest::CopyFrom(const SubscribeTimelineUpdatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.SubscribeTimelineUpdatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeTimelineUpdatesRequest::IsInitialized() const {
  return true;
}

void SubscribeTimelineUpdatesRequest::InternalSwap(SubscribeTimelineUpdatesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.include_metadata_, other->_impl_.include_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTimelineUpdatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[18]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HealthCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.HealthCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[19]);
}

// ===================================================================

HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse() {}
HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HealthCheckResponse_DetailsEntry_DoNotUse::MergeFrom(const HealthCheckResponse_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse_DetailsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[20]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HealthCheckResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.timeline.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.timeline.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:sonet.timeline.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destruct();
  _impl_.details_.~MapField();
  _impl_.status_.Destroy();
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  _this->_impl_.details_.Destruct();
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.timeline.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.timeline.HealthCheckResponse.status"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.details_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.timeline.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.timeline.HealthCheckResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // map<string, string> details = 2;
  if (!this->_internal_details().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HealthCheckResponse_DetailsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_details();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.timeline.HealthCheckResponse.DetailsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.timeline.HealthCheckResponse.DetailsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.timeline.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.timeline.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> details = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_details_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_details().begin();
      it != this->_internal_details().end(); ++it) {
    total_size += HealthCheckResponse_DetailsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.timeline.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.timeline.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ftimeline_2eproto_getter, &descriptor_table_services_2ftimeline_2eproto_once,
      file_level_metadata_services_2ftimeline_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace timeline
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::timeline::RankingSignals*
Arena::CreateMaybeMessage< ::sonet::timeline::RankingSignals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::RankingSignals >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::TimelineItem*
Arena::CreateMaybeMessage< ::sonet::timeline::TimelineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::TimelineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::TimelineMetadata_AlgorithmParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::TimelineMetadata*
Arena::CreateMaybeMessage< ::sonet::timeline::TimelineMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::TimelineMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::TimelinePreferences*
Arena::CreateMaybeMessage< ::sonet::timeline::TimelinePreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::TimelinePreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::TimelineUpdate*
Arena::CreateMaybeMessage< ::sonet::timeline::TimelineUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::TimelineUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::GetTimelineRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::GetTimelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::GetTimelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::GetTimelineResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::GetTimelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::GetTimelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::GetUserTimelineRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::GetUserTimelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::GetUserTimelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::GetUserTimelineResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::GetUserTimelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::GetUserTimelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::RefreshTimelineRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::RefreshTimelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::RefreshTimelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::RefreshTimelineResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::RefreshTimelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::RefreshTimelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::MarkTimelineReadRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::MarkTimelineReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::MarkTimelineReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::MarkTimelineReadResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::MarkTimelineReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::MarkTimelineReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::UpdateTimelinePreferencesRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::UpdateTimelinePreferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::UpdateTimelinePreferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::UpdateTimelinePreferencesResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::UpdateTimelinePreferencesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::UpdateTimelinePreferencesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::GetTimelinePreferencesRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::GetTimelinePreferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::GetTimelinePreferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::GetTimelinePreferencesResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::GetTimelinePreferencesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::GetTimelinePreferencesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::SubscribeTimelineUpdatesRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::SubscribeTimelineUpdatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::SubscribeTimelineUpdatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::HealthCheckRequest*
Arena::CreateMaybeMessage< ::sonet::timeline::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::HealthCheckResponse_DetailsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::timeline::HealthCheckResponse*
Arena::CreateMaybeMessage< ::sonet::timeline::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::timeline::HealthCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
