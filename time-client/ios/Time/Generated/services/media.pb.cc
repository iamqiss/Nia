// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/media.proto

#include "services/media.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace media {
PROTOBUF_CONSTEXPR Media::Media(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hls_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.webp_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mp4_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.size_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.duration_seconds_)*/0
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MediaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaDefaultTypeInternal() {}
  union {
    Media _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaDefaultTypeInternal _Media_default_instance_;
PROTOBUF_CONSTEXPR UploadInit::UploadInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadInitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadInitDefaultTypeInternal() {}
  union {
    UploadInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadInitDefaultTypeInternal _UploadInit_default_instance_;
PROTOBUF_CONSTEXPR UploadChunk::UploadChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadChunkDefaultTypeInternal() {}
  union {
    UploadChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadChunkDefaultTypeInternal _UploadChunk_default_instance_;
PROTOBUF_CONSTEXPR UploadRequest::UploadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadRequestDefaultTypeInternal() {}
  union {
    UploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadResponse::UploadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hls_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.webp_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mp4_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadResponseDefaultTypeInternal() {}
  union {
    UploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
PROTOBUF_CONSTEXPR GetMediaRequest::GetMediaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMediaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMediaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMediaRequestDefaultTypeInternal() {}
  union {
    GetMediaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMediaRequestDefaultTypeInternal _GetMediaRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMediaResponse::GetMediaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMediaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMediaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMediaResponseDefaultTypeInternal() {}
  union {
    GetMediaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMediaResponseDefaultTypeInternal _GetMediaResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteMediaRequest::DeleteMediaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteMediaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMediaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMediaRequestDefaultTypeInternal() {}
  union {
    DeleteMediaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMediaRequestDefaultTypeInternal _DeleteMediaRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteMediaResponse::DeleteMediaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteMediaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteMediaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteMediaResponseDefaultTypeInternal() {}
  union {
    DeleteMediaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteMediaResponseDefaultTypeInternal _DeleteMediaResponse_default_instance_;
PROTOBUF_CONSTEXPR ListUserMediaRequest::ListUserMediaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.page_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListUserMediaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListUserMediaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListUserMediaRequestDefaultTypeInternal() {}
  union {
    ListUserMediaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListUserMediaRequestDefaultTypeInternal _ListUserMediaRequest_default_instance_;
PROTOBUF_CONSTEXPR ListUserMediaResponse::ListUserMediaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.page_size_)*/0u
  , /*decltype(_impl_.total_pages_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListUserMediaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListUserMediaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListUserMediaResponseDefaultTypeInternal() {}
  union {
    ListUserMediaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListUserMediaResponseDefaultTypeInternal _ListUserMediaResponse_default_instance_;
PROTOBUF_CONSTEXPR ToggleMediaLikeRequest::ToggleMediaLikeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_liked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToggleMediaLikeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToggleMediaLikeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToggleMediaLikeRequestDefaultTypeInternal() {}
  union {
    ToggleMediaLikeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToggleMediaLikeRequestDefaultTypeInternal _ToggleMediaLikeRequest_default_instance_;
PROTOBUF_CONSTEXPR ToggleMediaLikeResponse::ToggleMediaLikeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.like_count_)*/0u
  , /*decltype(_impl_.is_liked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToggleMediaLikeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToggleMediaLikeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToggleMediaLikeResponseDefaultTypeInternal() {}
  union {
    ToggleMediaLikeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToggleMediaLikeResponseDefaultTypeInternal _ToggleMediaLikeResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
}  // namespace media
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2fmedia_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2fmedia_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fmedia_2eproto = nullptr;

const uint32_t TableStruct_services_2fmedia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.owner_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.size_bytes_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.original_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.hls_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.webp_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::Media, _impl_.mp4_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadInit, _impl_.owner_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadInit, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadInit, _impl_.original_filename_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadInit, _impl_.mime_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadChunk, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.media_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.hls_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.webp_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::UploadResponse, _impl_.mp4_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::GetMediaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::GetMediaRequest, _impl_.media_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::GetMediaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::GetMediaResponse, _impl_.media_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::DeleteMediaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::DeleteMediaRequest, _impl_.media_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::DeleteMediaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::DeleteMediaResponse, _impl_.deleted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaRequest, _impl_.owner_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaRequest, _impl_.page_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaResponse, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaResponse, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ListUserMediaResponse, _impl_.total_pages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeRequest, _impl_.media_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeRequest, _impl_.is_liked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeResponse, _impl_.media_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeResponse, _impl_.like_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::media::ToggleMediaLikeResponse, _impl_.is_liked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::media::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::media::HealthCheckResponse, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::media::Media)},
  { 20, -1, -1, sizeof(::sonet::media::UploadInit)},
  { 30, -1, -1, sizeof(::sonet::media::UploadChunk)},
  { 37, -1, -1, sizeof(::sonet::media::UploadRequest)},
  { 46, -1, -1, sizeof(::sonet::media::UploadResponse)},
  { 59, -1, -1, sizeof(::sonet::media::GetMediaRequest)},
  { 66, -1, -1, sizeof(::sonet::media::GetMediaResponse)},
  { 73, -1, -1, sizeof(::sonet::media::DeleteMediaRequest)},
  { 80, -1, -1, sizeof(::sonet::media::DeleteMediaResponse)},
  { 87, -1, -1, sizeof(::sonet::media::ListUserMediaRequest)},
  { 96, -1, -1, sizeof(::sonet::media::ListUserMediaResponse)},
  { 106, -1, -1, sizeof(::sonet::media::ToggleMediaLikeRequest)},
  { 115, -1, -1, sizeof(::sonet::media::ToggleMediaLikeResponse)},
  { 124, -1, -1, sizeof(::sonet::media::HealthCheckRequest)},
  { 130, -1, -1, sizeof(::sonet::media::HealthCheckResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::media::_Media_default_instance_._instance,
  &::sonet::media::_UploadInit_default_instance_._instance,
  &::sonet::media::_UploadChunk_default_instance_._instance,
  &::sonet::media::_UploadRequest_default_instance_._instance,
  &::sonet::media::_UploadResponse_default_instance_._instance,
  &::sonet::media::_GetMediaRequest_default_instance_._instance,
  &::sonet::media::_GetMediaResponse_default_instance_._instance,
  &::sonet::media::_DeleteMediaRequest_default_instance_._instance,
  &::sonet::media::_DeleteMediaResponse_default_instance_._instance,
  &::sonet::media::_ListUserMediaRequest_default_instance_._instance,
  &::sonet::media::_ListUserMediaResponse_default_instance_._instance,
  &::sonet::media::_ToggleMediaLikeRequest_default_instance_._instance,
  &::sonet::media::_ToggleMediaLikeResponse_default_instance_._instance,
  &::sonet::media::_HealthCheckRequest_default_instance_._instance,
  &::sonet::media::_HealthCheckResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fmedia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024services/media.proto\022\013sonet.media\"\245\002\n\005"
  "Media\022\n\n\002id\030\001 \001(\t\022\025\n\rowner_user_id\030\002 \001(\t"
  "\022$\n\004type\030\003 \001(\0162\026.sonet.media.MediaType\022\021"
  "\n\tmime_type\030\004 \001(\t\022\022\n\nsize_bytes\030\005 \001(\004\022\r\n"
  "\005width\030\006 \001(\r\022\016\n\006height\030\007 \001(\r\022\030\n\020duration"
  "_seconds\030\010 \001(\001\022\024\n\014original_url\030\t \001(\t\022\025\n\r"
  "thumbnail_url\030\n \001(\t\022\017\n\007hls_url\030\013 \001(\t\022\022\n\n"
  "created_at\030\014 \001(\t\022\020\n\010webp_url\030\r \001(\t\022\017\n\007mp"
  "4_url\030\016 \001(\t\"w\n\nUploadInit\022\025\n\rowner_user_"
  "id\030\001 \001(\t\022$\n\004type\030\002 \001(\0162\026.sonet.media.Med"
  "iaType\022\031\n\021original_filename\030\003 \001(\t\022\021\n\tmim"
  "e_type\030\004 \001(\t\"\036\n\013UploadChunk\022\017\n\007content\030\001"
  " \001(\014\"n\n\rUploadRequest\022\'\n\004init\030\001 \001(\0132\027.so"
  "net.media.UploadInitH\000\022)\n\005chunk\030\002 \001(\0132\030."
  "sonet.media.UploadChunkH\000B\t\n\007payload\"\240\001\n"
  "\016UploadResponse\022\020\n\010media_id\030\001 \001(\t\022$\n\004typ"
  "e\030\002 \001(\0162\026.sonet.media.MediaType\022\013\n\003url\030\003"
  " \001(\t\022\025\n\rthumbnail_url\030\004 \001(\t\022\017\n\007hls_url\030\005"
  " \001(\t\022\020\n\010webp_url\030\006 \001(\t\022\017\n\007mp4_url\030\007 \001(\t\""
  "#\n\017GetMediaRequest\022\020\n\010media_id\030\001 \001(\t\"5\n\020"
  "GetMediaResponse\022!\n\005media\030\001 \001(\0132\022.sonet."
  "media.Media\"&\n\022DeleteMediaRequest\022\020\n\010med"
  "ia_id\030\001 \001(\t\"&\n\023DeleteMediaResponse\022\017\n\007de"
  "leted\030\001 \001(\010\"N\n\024ListUserMediaRequest\022\025\n\ro"
  "wner_user_id\030\001 \001(\t\022\014\n\004page\030\002 \001(\r\022\021\n\tpage"
  "_size\030\003 \001(\r\"p\n\025ListUserMediaResponse\022!\n\005"
  "items\030\001 \003(\0132\022.sonet.media.Media\022\014\n\004page\030"
  "\002 \001(\r\022\021\n\tpage_size\030\003 \001(\r\022\023\n\013total_pages\030"
  "\004 \001(\r\"M\n\026ToggleMediaLikeRequest\022\020\n\010media"
  "_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\020\n\010is_liked\030\003"
  " \001(\010\"Q\n\027ToggleMediaLikeResponse\022\020\n\010media"
  "_id\030\001 \001(\t\022\022\n\nlike_count\030\002 \001(\r\022\020\n\010is_like"
  "d\030\003 \001(\010\"\024\n\022HealthCheckRequest\"%\n\023HealthC"
  "heckResponse\022\016\n\006status\030\001 \001(\t*c\n\tMediaTyp"
  "e\022\026\n\022MEDIA_TYPE_UNKNOWN\020\000\022\024\n\020MEDIA_TYPE_"
  "IMAGE\020\001\022\024\n\020MEDIA_TYPE_VIDEO\020\002\022\022\n\016MEDIA_T"
  "YPE_GIF\020\0032\366\003\n\014MediaService\022C\n\006Upload\022\032.s"
  "onet.media.UploadRequest\032\033.sonet.media.U"
  "ploadResponse(\001\022G\n\010GetMedia\022\034.sonet.medi"
  "a.GetMediaRequest\032\035.sonet.media.GetMedia"
  "Response\022P\n\013DeleteMedia\022\037.sonet.media.De"
  "leteMediaRequest\032 .sonet.media.DeleteMed"
  "iaResponse\022V\n\rListUserMedia\022!.sonet.medi"
  "a.ListUserMediaRequest\032\".sonet.media.Lis"
  "tUserMediaResponse\022P\n\013HealthCheck\022\037.sone"
  "t.media.HealthCheckRequest\032 .sonet.media"
  ".HealthCheckResponse\022\\\n\017ToggleMediaLike\022"
  "#.sonet.media.ToggleMediaLikeRequest\032$.s"
  "onet.media.ToggleMediaLikeResponseb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_services_2fmedia_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fmedia_2eproto = {
    false, false, 1962, descriptor_table_protodef_services_2fmedia_2eproto,
    "services/media.proto",
    &descriptor_table_services_2fmedia_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_services_2fmedia_2eproto::offsets,
    file_level_metadata_services_2fmedia_2eproto, file_level_enum_descriptors_services_2fmedia_2eproto,
    file_level_service_descriptors_services_2fmedia_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fmedia_2eproto_getter() {
  return &descriptor_table_services_2fmedia_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fmedia_2eproto(&descriptor_table_services_2fmedia_2eproto);
namespace sonet {
namespace media {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fmedia_2eproto);
  return file_level_enum_descriptors_services_2fmedia_2eproto[0];
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Media::_Internal {
 public:
};

Media::Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.Media)
}
Media::Media(const Media& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Media* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.owner_user_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.original_url_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.hls_url_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.webp_url_){}
    , decltype(_impl_.mp4_url_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.size_bytes_){}
    , decltype(_impl_.duration_seconds_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_user_id().empty()) {
    _this->_impl_.owner_user_id_.Set(from._internal_owner_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_url().empty()) {
    _this->_impl_.original_url_.Set(from._internal_original_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hls_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hls_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hls_url().empty()) {
    _this->_impl_.hls_url_.Set(from._internal_hls_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    _this->_impl_.created_at_.Set(from._internal_created_at(), 
      _this->GetArenaForAllocation());
  }
  _impl_.webp_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webp_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_webp_url().empty()) {
    _this->_impl_.webp_url_.Set(from._internal_webp_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mp4_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mp4_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mp4_url().empty()) {
    _this->_impl_.mp4_url_.Set(from._internal_mp4_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:sonet.media.Media)
}

inline void Media::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.owner_user_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.original_url_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.hls_url_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.webp_url_){}
    , decltype(_impl_.mp4_url_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.size_bytes_){uint64_t{0u}}
    , decltype(_impl_.duration_seconds_){0}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hls_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hls_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webp_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webp_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mp4_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mp4_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:sonet.media.Media)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Media::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.owner_user_id_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.original_url_.Destroy();
  _impl_.thumbnail_url_.Destroy();
  _impl_.hls_url_.Destroy();
  _impl_.created_at_.Destroy();
  _impl_.webp_url_.Destroy();
  _impl_.mp4_url_.Destroy();
}

void Media::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.Media)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.owner_user_id_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.original_url_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  _impl_.hls_url_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.webp_url_.ClearToEmpty();
  _impl_.mp4_url_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Media::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.id"));
        } else
          goto handle_unusual;
        continue;
      // string owner_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.owner_user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.media.MediaType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::media::MediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double duration_seconds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string original_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_original_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.original_url"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // string hls_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_hls_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.hls_url"));
        } else
          goto handle_unusual;
        continue;
      // string created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_created_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.created_at"));
        } else
          goto handle_unusual;
        continue;
      // string webp_url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_webp_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.webp_url"));
        } else
          goto handle_unusual;
        continue;
      // string mp4_url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_mp4_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.Media.mp4_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Media::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.Media)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string owner_user_id = 2;
  if (!this->_internal_owner_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_user_id().data(), static_cast<int>(this->_internal_owner_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.owner_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_user_id(), target);
  }

  // .sonet.media.MediaType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.mime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mime_type(), target);
  }

  // uint64 size_bytes = 5;
  if (this->_internal_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size_bytes(), target);
  }

  // uint32 width = 6;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // uint32 height = 7;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_height(), target);
  }

  // double duration_seconds = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration_seconds = this->_internal_duration_seconds();
  uint64_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_duration_seconds(), target);
  }

  // string original_url = 9;
  if (!this->_internal_original_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_url().data(), static_cast<int>(this->_internal_original_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.original_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_original_url(), target);
  }

  // string thumbnail_url = 10;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_thumbnail_url(), target);
  }

  // string hls_url = 11;
  if (!this->_internal_hls_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hls_url().data(), static_cast<int>(this->_internal_hls_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.hls_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_hls_url(), target);
  }

  // string created_at = 12;
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.created_at");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_created_at(), target);
  }

  // string webp_url = 13;
  if (!this->_internal_webp_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webp_url().data(), static_cast<int>(this->_internal_webp_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.webp_url");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_webp_url(), target);
  }

  // string mp4_url = 14;
  if (!this->_internal_mp4_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mp4_url().data(), static_cast<int>(this->_internal_mp4_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.Media.mp4_url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_mp4_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.Media)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string owner_user_id = 2;
  if (!this->_internal_owner_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_user_id());
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string original_url = 9;
  if (!this->_internal_original_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_url());
  }

  // string thumbnail_url = 10;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // string hls_url = 11;
  if (!this->_internal_hls_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hls_url());
  }

  // string created_at = 12;
  if (!this->_internal_created_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string webp_url = 13;
  if (!this->_internal_webp_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webp_url());
  }

  // string mp4_url = 14;
  if (!this->_internal_mp4_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mp4_url());
  }

  // .sonet.media.MediaType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 width = 6;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint64 size_bytes = 5;
  if (this->_internal_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size_bytes());
  }

  // double duration_seconds = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration_seconds = this->_internal_duration_seconds();
  uint64_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 8;
  }

  // uint32 height = 7;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Media::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Media::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Media::GetClassData() const { return &_class_data_; }


void Media::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Media*>(&to_msg);
  auto& from = static_cast<const Media&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.Media)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_owner_user_id().empty()) {
    _this->_internal_set_owner_user_id(from._internal_owner_user_id());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_original_url().empty()) {
    _this->_internal_set_original_url(from._internal_original_url());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (!from._internal_hls_url().empty()) {
    _this->_internal_set_hls_url(from._internal_hls_url());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_webp_url().empty()) {
    _this->_internal_set_webp_url(from._internal_webp_url());
  }
  if (!from._internal_mp4_url().empty()) {
    _this->_internal_set_mp4_url(from._internal_mp4_url());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_size_bytes() != 0) {
    _this->_internal_set_size_bytes(from._internal_size_bytes());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_duration_seconds = from._internal_duration_seconds();
  uint64_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _this->_internal_set_duration_seconds(from._internal_duration_seconds());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  return true;
}

void Media::InternalSwap(Media* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_user_id_, lhs_arena,
      &other->_impl_.owner_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_url_, lhs_arena,
      &other->_impl_.original_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hls_url_, lhs_arena,
      &other->_impl_.hls_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.created_at_, lhs_arena,
      &other->_impl_.created_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.webp_url_, lhs_arena,
      &other->_impl_.webp_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mp4_url_, lhs_arena,
      &other->_impl_.mp4_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Media, _impl_.height_)
      + sizeof(Media::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Media, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Media::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[0]);
}

// ===================================================================

class UploadInit::_Internal {
 public:
};

UploadInit::UploadInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.UploadInit)
}
UploadInit::UploadInit(const UploadInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_user_id_){}
    , decltype(_impl_.original_filename_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_user_id().empty()) {
    _this->_impl_.owner_user_id_.Set(from._internal_owner_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_filename().empty()) {
    _this->_impl_.original_filename_.Set(from._internal_original_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.media.UploadInit)
}

inline void UploadInit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_user_id_){}
    , decltype(_impl_.original_filename_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadInit::~UploadInit() {
  // @@protoc_insertion_point(destructor:sonet.media.UploadInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_user_id_.Destroy();
  _impl_.original_filename_.Destroy();
  _impl_.mime_type_.Destroy();
}

void UploadInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadInit::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.UploadInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_user_id_.ClearToEmpty();
  _impl_.original_filename_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadInit.owner_user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.media.MediaType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::media::MediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // string original_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_original_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadInit.original_filename"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadInit.mime_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.UploadInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_user_id = 1;
  if (!this->_internal_owner_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_user_id().data(), static_cast<int>(this->_internal_owner_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadInit.owner_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_user_id(), target);
  }

  // .sonet.media.MediaType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string original_filename = 3;
  if (!this->_internal_original_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_filename().data(), static_cast<int>(this->_internal_original_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadInit.original_filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_original_filename(), target);
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadInit.mime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.UploadInit)
  return target;
}

size_t UploadInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.UploadInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_user_id = 1;
  if (!this->_internal_owner_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_user_id());
  }

  // string original_filename = 3;
  if (!this->_internal_original_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_filename());
  }

  // string mime_type = 4;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .sonet.media.MediaType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadInit::GetClassData() const { return &_class_data_; }


void UploadInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadInit*>(&to_msg);
  auto& from = static_cast<const UploadInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.UploadInit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_user_id().empty()) {
    _this->_internal_set_owner_user_id(from._internal_owner_user_id());
  }
  if (!from._internal_original_filename().empty()) {
    _this->_internal_set_original_filename(from._internal_original_filename());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadInit::CopyFrom(const UploadInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.UploadInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadInit::IsInitialized() const {
  return true;
}

void UploadInit::InternalSwap(UploadInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_user_id_, lhs_arena,
      &other->_impl_.owner_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_filename_, lhs_arena,
      &other->_impl_.original_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[1]);
}

// ===================================================================

class UploadChunk::_Internal {
 public:
};

UploadChunk::UploadChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.UploadChunk)
}
UploadChunk::UploadChunk(const UploadChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.media.UploadChunk)
}

inline void UploadChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadChunk::~UploadChunk() {
  // @@protoc_insertion_point(destructor:sonet.media.UploadChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void UploadChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.UploadChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.UploadChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.UploadChunk)
  return target;
}

size_t UploadChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.UploadChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadChunk::GetClassData() const { return &_class_data_; }


void UploadChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadChunk*>(&to_msg);
  auto& from = static_cast<const UploadChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.UploadChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadChunk::CopyFrom(const UploadChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.UploadChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadChunk::IsInitialized() const {
  return true;
}

void UploadChunk::InternalSwap(UploadChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[2]);
}

// ===================================================================

class UploadRequest::_Internal {
 public:
  static const ::sonet::media::UploadInit& init(const UploadRequest* msg);
  static const ::sonet::media::UploadChunk& chunk(const UploadRequest* msg);
};

const ::sonet::media::UploadInit&
UploadRequest::_Internal::init(const UploadRequest* msg) {
  return *msg->_impl_.payload_.init_;
}
const ::sonet::media::UploadChunk&
UploadRequest::_Internal::chunk(const UploadRequest* msg) {
  return *msg->_impl_.payload_.chunk_;
}
void UploadRequest::set_allocated_init(::sonet::media::UploadInit* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    _impl_.payload_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadRequest.init)
}
void UploadRequest::set_allocated_chunk(::sonet::media::UploadChunk* chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunk);
    if (message_arena != submessage_arena) {
      chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk, submessage_arena);
    }
    set_has_chunk();
    _impl_.payload_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:sonet.media.UploadRequest.chunk)
}
UploadRequest::UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.UploadRequest)
}
UploadRequest::UploadRequest(const UploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::sonet::media::UploadInit::MergeFrom(
          from._internal_init());
      break;
    }
    case kChunk: {
      _this->_internal_mutable_chunk()->::sonet::media::UploadChunk::MergeFrom(
          from._internal_chunk());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sonet.media.UploadRequest)
}

inline void UploadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:sonet.media.UploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void UploadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:sonet.media.UploadRequest)
  switch (payload_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.init_;
      }
      break;
    }
    case kChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.chunk_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.UploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.media.UploadInit init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.media.UploadChunk chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.UploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.media.UploadInit init = 1;
  if (_internal_has_init()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // .sonet.media.UploadChunk chunk = 2;
  if (_internal_has_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chunk(this),
        _Internal::chunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.UploadRequest)
  return target;
}

size_t UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.UploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .sonet.media.UploadInit init = 1;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.init_);
      break;
    }
    // .sonet.media.UploadChunk chunk = 2;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.chunk_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadRequest::GetClassData() const { return &_class_data_; }


void UploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadRequest*>(&to_msg);
  auto& from = static_cast<const UploadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.UploadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::sonet::media::UploadInit::MergeFrom(
          from._internal_init());
      break;
    }
    case kChunk: {
      _this->_internal_mutable_chunk()->::sonet::media::UploadChunk::MergeFrom(
          from._internal_chunk());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  return true;
}

void UploadRequest::InternalSwap(UploadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[3]);
}

// ===================================================================

class UploadResponse::_Internal {
 public:
};

UploadResponse::UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.UploadResponse)
}
UploadResponse::UploadResponse(const UploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.hls_url_){}
    , decltype(_impl_.webp_url_){}
    , decltype(_impl_.mp4_url_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_id().empty()) {
    _this->_impl_.media_id_.Set(from._internal_media_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    _this->_impl_.thumbnail_url_.Set(from._internal_thumbnail_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hls_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hls_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hls_url().empty()) {
    _this->_impl_.hls_url_.Set(from._internal_hls_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.webp_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webp_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_webp_url().empty()) {
    _this->_impl_.webp_url_.Set(from._internal_webp_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mp4_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mp4_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mp4_url().empty()) {
    _this->_impl_.mp4_url_.Set(from._internal_mp4_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.media.UploadResponse)
}

inline void UploadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.thumbnail_url_){}
    , decltype(_impl_.hls_url_){}
    , decltype(_impl_.webp_url_){}
    , decltype(_impl_.mp4_url_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hls_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hls_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webp_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webp_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mp4_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mp4_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadResponse::~UploadResponse() {
  // @@protoc_insertion_point(destructor:sonet.media.UploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_id_.Destroy();
  _impl_.url_.Destroy();
  _impl_.thumbnail_url_.Destroy();
  _impl_.hls_url_.Destroy();
  _impl_.webp_url_.Destroy();
  _impl_.mp4_url_.Destroy();
}

void UploadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.UploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_id_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.thumbnail_url_.ClearToEmpty();
  _impl_.hls_url_.ClearToEmpty();
  _impl_.webp_url_.ClearToEmpty();
  _impl_.mp4_url_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string media_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_media_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadResponse.media_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.media.MediaType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::media::MediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadResponse.url"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadResponse.thumbnail_url"));
        } else
          goto handle_unusual;
        continue;
      // string hls_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hls_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadResponse.hls_url"));
        } else
          goto handle_unusual;
        continue;
      // string webp_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_webp_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadResponse.webp_url"));
        } else
          goto handle_unusual;
        continue;
      // string mp4_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mp4_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.UploadResponse.mp4_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.UploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_id().data(), static_cast<int>(this->_internal_media_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadResponse.media_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_id(), target);
  }

  // .sonet.media.MediaType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadResponse.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string thumbnail_url = 4;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadResponse.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_thumbnail_url(), target);
  }

  // string hls_url = 5;
  if (!this->_internal_hls_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hls_url().data(), static_cast<int>(this->_internal_hls_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadResponse.hls_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hls_url(), target);
  }

  // string webp_url = 6;
  if (!this->_internal_webp_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webp_url().data(), static_cast<int>(this->_internal_webp_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadResponse.webp_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_webp_url(), target);
  }

  // string mp4_url = 7;
  if (!this->_internal_mp4_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mp4_url().data(), static_cast<int>(this->_internal_mp4_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.UploadResponse.mp4_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mp4_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.UploadResponse)
  return target;
}

size_t UploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.UploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_id());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string thumbnail_url = 4;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // string hls_url = 5;
  if (!this->_internal_hls_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hls_url());
  }

  // string webp_url = 6;
  if (!this->_internal_webp_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webp_url());
  }

  // string mp4_url = 7;
  if (!this->_internal_mp4_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mp4_url());
  }

  // .sonet.media.MediaType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadResponse::GetClassData() const { return &_class_data_; }


void UploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadResponse*>(&to_msg);
  auto& from = static_cast<const UploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.UploadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_media_id().empty()) {
    _this->_internal_set_media_id(from._internal_media_id());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _this->_internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (!from._internal_hls_url().empty()) {
    _this->_internal_set_hls_url(from._internal_hls_url());
  }
  if (!from._internal_webp_url().empty()) {
    _this->_internal_set_webp_url(from._internal_webp_url());
  }
  if (!from._internal_mp4_url().empty()) {
    _this->_internal_set_mp4_url(from._internal_mp4_url());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadResponse::CopyFrom(const UploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.UploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResponse::IsInitialized() const {
  return true;
}

void UploadResponse::InternalSwap(UploadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_id_, lhs_arena,
      &other->_impl_.media_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_url_, lhs_arena,
      &other->_impl_.thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hls_url_, lhs_arena,
      &other->_impl_.hls_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.webp_url_, lhs_arena,
      &other->_impl_.webp_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mp4_url_, lhs_arena,
      &other->_impl_.mp4_url_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[4]);
}

// ===================================================================

class GetMediaRequest::_Internal {
 public:
};

GetMediaRequest::GetMediaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.GetMediaRequest)
}
GetMediaRequest::GetMediaRequest(const GetMediaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMediaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_id().empty()) {
    _this->_impl_.media_id_.Set(from._internal_media_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.media.GetMediaRequest)
}

inline void GetMediaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMediaRequest::~GetMediaRequest() {
  // @@protoc_insertion_point(destructor:sonet.media.GetMediaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMediaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_id_.Destroy();
}

void GetMediaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMediaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.GetMediaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMediaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string media_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_media_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.GetMediaRequest.media_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMediaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.GetMediaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_id().data(), static_cast<int>(this->_internal_media_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.GetMediaRequest.media_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.GetMediaRequest)
  return target;
}

size_t GetMediaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.GetMediaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMediaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMediaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMediaRequest::GetClassData() const { return &_class_data_; }


void GetMediaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMediaRequest*>(&to_msg);
  auto& from = static_cast<const GetMediaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.GetMediaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_media_id().empty()) {
    _this->_internal_set_media_id(from._internal_media_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMediaRequest::CopyFrom(const GetMediaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.GetMediaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaRequest::IsInitialized() const {
  return true;
}

void GetMediaRequest::InternalSwap(GetMediaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_id_, lhs_arena,
      &other->_impl_.media_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMediaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[5]);
}

// ===================================================================

class GetMediaResponse::_Internal {
 public:
  static const ::sonet::media::Media& media(const GetMediaResponse* msg);
};

const ::sonet::media::Media&
GetMediaResponse::_Internal::media(const GetMediaResponse* msg) {
  return *msg->_impl_.media_;
}
GetMediaResponse::GetMediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.GetMediaResponse)
}
GetMediaResponse::GetMediaResponse(const GetMediaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMediaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media()) {
    _this->_impl_.media_ = new ::sonet::media::Media(*from._impl_.media_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.media.GetMediaResponse)
}

inline void GetMediaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMediaResponse::~GetMediaResponse() {
  // @@protoc_insertion_point(destructor:sonet.media.GetMediaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMediaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_;
}

void GetMediaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMediaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.GetMediaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.media_ != nullptr) {
    delete _impl_.media_;
  }
  _impl_.media_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMediaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.media.Media media = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMediaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.GetMediaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.media.Media media = 1;
  if (this->_internal_has_media()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::media(this),
        _Internal::media(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.GetMediaResponse)
  return target;
}

size_t GetMediaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.GetMediaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.media.Media media = 1;
  if (this->_internal_has_media()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMediaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMediaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMediaResponse::GetClassData() const { return &_class_data_; }


void GetMediaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMediaResponse*>(&to_msg);
  auto& from = static_cast<const GetMediaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.GetMediaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_media()) {
    _this->_internal_mutable_media()->::sonet::media::Media::MergeFrom(
        from._internal_media());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMediaResponse::CopyFrom(const GetMediaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.GetMediaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaResponse::IsInitialized() const {
  return true;
}

void GetMediaResponse::InternalSwap(GetMediaResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.media_, other->_impl_.media_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMediaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[6]);
}

// ===================================================================

class DeleteMediaRequest::_Internal {
 public:
};

DeleteMediaRequest::DeleteMediaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.DeleteMediaRequest)
}
DeleteMediaRequest::DeleteMediaRequest(const DeleteMediaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteMediaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_id().empty()) {
    _this->_impl_.media_id_.Set(from._internal_media_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.media.DeleteMediaRequest)
}

inline void DeleteMediaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteMediaRequest::~DeleteMediaRequest() {
  // @@protoc_insertion_point(destructor:sonet.media.DeleteMediaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMediaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_id_.Destroy();
}

void DeleteMediaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMediaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.DeleteMediaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMediaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string media_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_media_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.DeleteMediaRequest.media_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteMediaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.DeleteMediaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_id().data(), static_cast<int>(this->_internal_media_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.DeleteMediaRequest.media_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.DeleteMediaRequest)
  return target;
}

size_t DeleteMediaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.DeleteMediaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMediaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteMediaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMediaRequest::GetClassData() const { return &_class_data_; }


void DeleteMediaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteMediaRequest*>(&to_msg);
  auto& from = static_cast<const DeleteMediaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.DeleteMediaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_media_id().empty()) {
    _this->_internal_set_media_id(from._internal_media_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMediaRequest::CopyFrom(const DeleteMediaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.DeleteMediaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMediaRequest::IsInitialized() const {
  return true;
}

void DeleteMediaRequest::InternalSwap(DeleteMediaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_id_, lhs_arena,
      &other->_impl_.media_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMediaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[7]);
}

// ===================================================================

class DeleteMediaResponse::_Internal {
 public:
};

DeleteMediaResponse::DeleteMediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.DeleteMediaResponse)
}
DeleteMediaResponse::DeleteMediaResponse(const DeleteMediaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteMediaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.deleted_ = from._impl_.deleted_;
  // @@protoc_insertion_point(copy_constructor:sonet.media.DeleteMediaResponse)
}

inline void DeleteMediaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deleted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteMediaResponse::~DeleteMediaResponse() {
  // @@protoc_insertion_point(destructor:sonet.media.DeleteMediaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteMediaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteMediaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteMediaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.DeleteMediaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deleted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMediaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool deleted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteMediaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.DeleteMediaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deleted = 1;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_deleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.DeleteMediaResponse)
  return target;
}

size_t DeleteMediaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.DeleteMediaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool deleted = 1;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteMediaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteMediaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteMediaResponse::GetClassData() const { return &_class_data_; }


void DeleteMediaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteMediaResponse*>(&to_msg);
  auto& from = static_cast<const DeleteMediaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.DeleteMediaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteMediaResponse::CopyFrom(const DeleteMediaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.DeleteMediaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMediaResponse::IsInitialized() const {
  return true;
}

void DeleteMediaResponse::InternalSwap(DeleteMediaResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.deleted_, other->_impl_.deleted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMediaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[8]);
}

// ===================================================================

class ListUserMediaRequest::_Internal {
 public:
};

ListUserMediaRequest::ListUserMediaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.ListUserMediaRequest)
}
ListUserMediaRequest::ListUserMediaRequest(const ListUserMediaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListUserMediaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_user_id_){}
    , decltype(_impl_.page_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_user_id().empty()) {
    _this->_impl_.owner_user_id_.Set(from._internal_owner_user_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.page_size_));
  // @@protoc_insertion_point(copy_constructor:sonet.media.ListUserMediaRequest)
}

inline void ListUserMediaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_user_id_){}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.page_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListUserMediaRequest::~ListUserMediaRequest() {
  // @@protoc_insertion_point(destructor:sonet.media.ListUserMediaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListUserMediaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_user_id_.Destroy();
}

void ListUserMediaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListUserMediaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.ListUserMediaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_user_id_.ClearToEmpty();
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_size_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserMediaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.ListUserMediaRequest.owner_user_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListUserMediaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.ListUserMediaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_user_id = 1;
  if (!this->_internal_owner_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_user_id().data(), static_cast<int>(this->_internal_owner_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.ListUserMediaRequest.owner_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_user_id(), target);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.ListUserMediaRequest)
  return target;
}

size_t ListUserMediaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.ListUserMediaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_user_id = 1;
  if (!this->_internal_owner_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_user_id());
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUserMediaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListUserMediaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUserMediaRequest::GetClassData() const { return &_class_data_; }


void ListUserMediaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListUserMediaRequest*>(&to_msg);
  auto& from = static_cast<const ListUserMediaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.ListUserMediaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_user_id().empty()) {
    _this->_internal_set_owner_user_id(from._internal_owner_user_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUserMediaRequest::CopyFrom(const ListUserMediaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.ListUserMediaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserMediaRequest::IsInitialized() const {
  return true;
}

void ListUserMediaRequest::InternalSwap(ListUserMediaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_user_id_, lhs_arena,
      &other->_impl_.owner_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUserMediaRequest, _impl_.page_size_)
      + sizeof(ListUserMediaRequest::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(ListUserMediaRequest, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserMediaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[9]);
}

// ===================================================================

class ListUserMediaResponse::_Internal {
 public:
};

ListUserMediaResponse::ListUserMediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.ListUserMediaResponse)
}
ListUserMediaResponse::ListUserMediaResponse(const ListUserMediaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListUserMediaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.page_){}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.total_pages_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_pages_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.total_pages_));
  // @@protoc_insertion_point(copy_constructor:sonet.media.ListUserMediaResponse)
}

inline void ListUserMediaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.page_size_){0u}
    , decltype(_impl_.total_pages_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListUserMediaResponse::~ListUserMediaResponse() {
  // @@protoc_insertion_point(destructor:sonet.media.ListUserMediaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListUserMediaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListUserMediaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListUserMediaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.ListUserMediaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_pages_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.total_pages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserMediaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.media.Media items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_pages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListUserMediaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.ListUserMediaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.media.Media items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_size(), target);
  }

  // uint32 total_pages = 4;
  if (this->_internal_total_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_pages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.ListUserMediaResponse)
  return target;
}

size_t ListUserMediaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.ListUserMediaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.media.Media items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size());
  }

  // uint32 total_pages = 4;
  if (this->_internal_total_pages() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_pages());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUserMediaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListUserMediaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUserMediaResponse::GetClassData() const { return &_class_data_; }


void ListUserMediaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListUserMediaResponse*>(&to_msg);
  auto& from = static_cast<const ListUserMediaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.ListUserMediaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_total_pages() != 0) {
    _this->_internal_set_total_pages(from._internal_total_pages());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUserMediaResponse::CopyFrom(const ListUserMediaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.ListUserMediaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserMediaResponse::IsInitialized() const {
  return true;
}

void ListUserMediaResponse::InternalSwap(ListUserMediaResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUserMediaResponse, _impl_.total_pages_)
      + sizeof(ListUserMediaResponse::_impl_.total_pages_)
      - PROTOBUF_FIELD_OFFSET(ListUserMediaResponse, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserMediaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[10]);
}

// ===================================================================

class ToggleMediaLikeRequest::_Internal {
 public:
};

ToggleMediaLikeRequest::ToggleMediaLikeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.ToggleMediaLikeRequest)
}
ToggleMediaLikeRequest::ToggleMediaLikeRequest(const ToggleMediaLikeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToggleMediaLikeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.is_liked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_id().empty()) {
    _this->_impl_.media_id_.Set(from._internal_media_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_liked_ = from._impl_.is_liked_;
  // @@protoc_insertion_point(copy_constructor:sonet.media.ToggleMediaLikeRequest)
}

inline void ToggleMediaLikeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.is_liked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToggleMediaLikeRequest::~ToggleMediaLikeRequest() {
  // @@protoc_insertion_point(destructor:sonet.media.ToggleMediaLikeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToggleMediaLikeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_id_.Destroy();
  _impl_.user_id_.Destroy();
}

void ToggleMediaLikeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToggleMediaLikeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.ToggleMediaLikeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.is_liked_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToggleMediaLikeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string media_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_media_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.ToggleMediaLikeRequest.media_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.ToggleMediaLikeRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_liked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_liked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToggleMediaLikeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.ToggleMediaLikeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_id().data(), static_cast<int>(this->_internal_media_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.ToggleMediaLikeRequest.media_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.ToggleMediaLikeRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // bool is_liked = 3;
  if (this->_internal_is_liked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_liked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.ToggleMediaLikeRequest)
  return target;
}

size_t ToggleMediaLikeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.ToggleMediaLikeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bool is_liked = 3;
  if (this->_internal_is_liked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToggleMediaLikeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToggleMediaLikeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToggleMediaLikeRequest::GetClassData() const { return &_class_data_; }


void ToggleMediaLikeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToggleMediaLikeRequest*>(&to_msg);
  auto& from = static_cast<const ToggleMediaLikeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.ToggleMediaLikeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_media_id().empty()) {
    _this->_internal_set_media_id(from._internal_media_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_is_liked() != 0) {
    _this->_internal_set_is_liked(from._internal_is_liked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToggleMediaLikeRequest::CopyFrom(const ToggleMediaLikeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.ToggleMediaLikeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleMediaLikeRequest::IsInitialized() const {
  return true;
}

void ToggleMediaLikeRequest::InternalSwap(ToggleMediaLikeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_id_, lhs_arena,
      &other->_impl_.media_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.is_liked_, other->_impl_.is_liked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToggleMediaLikeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[11]);
}

// ===================================================================

class ToggleMediaLikeResponse::_Internal {
 public:
};

ToggleMediaLikeResponse::ToggleMediaLikeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.ToggleMediaLikeResponse)
}
ToggleMediaLikeResponse::ToggleMediaLikeResponse(const ToggleMediaLikeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToggleMediaLikeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , decltype(_impl_.like_count_){}
    , decltype(_impl_.is_liked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media_id().empty()) {
    _this->_impl_.media_id_.Set(from._internal_media_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.like_count_, &from._impl_.like_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_liked_) -
    reinterpret_cast<char*>(&_impl_.like_count_)) + sizeof(_impl_.is_liked_));
  // @@protoc_insertion_point(copy_constructor:sonet.media.ToggleMediaLikeResponse)
}

inline void ToggleMediaLikeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_id_){}
    , decltype(_impl_.like_count_){0u}
    , decltype(_impl_.is_liked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.media_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToggleMediaLikeResponse::~ToggleMediaLikeResponse() {
  // @@protoc_insertion_point(destructor:sonet.media.ToggleMediaLikeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToggleMediaLikeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_id_.Destroy();
}

void ToggleMediaLikeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToggleMediaLikeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.ToggleMediaLikeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_id_.ClearToEmpty();
  ::memset(&_impl_.like_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_liked_) -
      reinterpret_cast<char*>(&_impl_.like_count_)) + sizeof(_impl_.is_liked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToggleMediaLikeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string media_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_media_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.ToggleMediaLikeResponse.media_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 like_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.like_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_liked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_liked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToggleMediaLikeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.ToggleMediaLikeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_id().data(), static_cast<int>(this->_internal_media_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.ToggleMediaLikeResponse.media_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_id(), target);
  }

  // uint32 like_count = 2;
  if (this->_internal_like_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_like_count(), target);
  }

  // bool is_liked = 3;
  if (this->_internal_is_liked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_liked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.ToggleMediaLikeResponse)
  return target;
}

size_t ToggleMediaLikeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.ToggleMediaLikeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_id = 1;
  if (!this->_internal_media_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_id());
  }

  // uint32 like_count = 2;
  if (this->_internal_like_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_like_count());
  }

  // bool is_liked = 3;
  if (this->_internal_is_liked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToggleMediaLikeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToggleMediaLikeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToggleMediaLikeResponse::GetClassData() const { return &_class_data_; }


void ToggleMediaLikeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToggleMediaLikeResponse*>(&to_msg);
  auto& from = static_cast<const ToggleMediaLikeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.ToggleMediaLikeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_media_id().empty()) {
    _this->_internal_set_media_id(from._internal_media_id());
  }
  if (from._internal_like_count() != 0) {
    _this->_internal_set_like_count(from._internal_like_count());
  }
  if (from._internal_is_liked() != 0) {
    _this->_internal_set_is_liked(from._internal_is_liked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToggleMediaLikeResponse::CopyFrom(const ToggleMediaLikeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.ToggleMediaLikeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleMediaLikeResponse::IsInitialized() const {
  return true;
}

void ToggleMediaLikeResponse::InternalSwap(ToggleMediaLikeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_id_, lhs_arena,
      &other->_impl_.media_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToggleMediaLikeResponse, _impl_.is_liked_)
      + sizeof(ToggleMediaLikeResponse::_impl_.is_liked_)
      - PROTOBUF_FIELD_OFFSET(ToggleMediaLikeResponse, _impl_.like_count_)>(
          reinterpret_cast<char*>(&_impl_.like_count_),
          reinterpret_cast<char*>(&other->_impl_.like_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToggleMediaLikeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[12]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sonet.media.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HealthCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sonet.media.HealthCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[13]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.media.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.media.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:sonet.media.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.media.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.media.HealthCheckResponse.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.media.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.media.HealthCheckResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.media.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.media.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.media.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.media.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmedia_2eproto_getter, &descriptor_table_services_2fmedia_2eproto_once,
      file_level_metadata_services_2fmedia_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace media
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::media::Media*
Arena::CreateMaybeMessage< ::sonet::media::Media >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::Media >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::UploadInit*
Arena::CreateMaybeMessage< ::sonet::media::UploadInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::UploadInit >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::UploadChunk*
Arena::CreateMaybeMessage< ::sonet::media::UploadChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::UploadChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::UploadRequest*
Arena::CreateMaybeMessage< ::sonet::media::UploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::UploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::UploadResponse*
Arena::CreateMaybeMessage< ::sonet::media::UploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::UploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::GetMediaRequest*
Arena::CreateMaybeMessage< ::sonet::media::GetMediaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::GetMediaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::GetMediaResponse*
Arena::CreateMaybeMessage< ::sonet::media::GetMediaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::GetMediaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::DeleteMediaRequest*
Arena::CreateMaybeMessage< ::sonet::media::DeleteMediaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::DeleteMediaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::DeleteMediaResponse*
Arena::CreateMaybeMessage< ::sonet::media::DeleteMediaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::DeleteMediaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::ListUserMediaRequest*
Arena::CreateMaybeMessage< ::sonet::media::ListUserMediaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::ListUserMediaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::ListUserMediaResponse*
Arena::CreateMaybeMessage< ::sonet::media::ListUserMediaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::ListUserMediaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::ToggleMediaLikeRequest*
Arena::CreateMaybeMessage< ::sonet::media::ToggleMediaLikeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::ToggleMediaLikeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::ToggleMediaLikeResponse*
Arena::CreateMaybeMessage< ::sonet::media::ToggleMediaLikeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::ToggleMediaLikeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::HealthCheckRequest*
Arena::CreateMaybeMessage< ::sonet::media::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::media::HealthCheckResponse*
Arena::CreateMaybeMessage< ::sonet::media::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::media::HealthCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
