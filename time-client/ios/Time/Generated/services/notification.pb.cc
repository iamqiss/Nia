// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/notification.proto

#include "services/notification.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace notification {
PROTOBUF_CONSTEXPR Notification::Notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notification_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.actor_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_read_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDefaultTypeInternal _Notification_default_instance_;
PROTOBUF_CONSTEXPR ListNotificationsRequest::ListNotificationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.unread_only_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListNotificationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListNotificationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListNotificationsRequestDefaultTypeInternal() {}
  union {
    ListNotificationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListNotificationsRequestDefaultTypeInternal _ListNotificationsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListNotificationsResponse::ListNotificationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notifications_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListNotificationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListNotificationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListNotificationsResponseDefaultTypeInternal() {}
  union {
    ListNotificationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListNotificationsResponseDefaultTypeInternal _ListNotificationsResponse_default_instance_;
PROTOBUF_CONSTEXPR MarkNotificationReadRequest::MarkNotificationReadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notification_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkNotificationReadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkNotificationReadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkNotificationReadRequestDefaultTypeInternal() {}
  union {
    MarkNotificationReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkNotificationReadRequestDefaultTypeInternal _MarkNotificationReadRequest_default_instance_;
PROTOBUF_CONSTEXPR MarkNotificationReadResponse::MarkNotificationReadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkNotificationReadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkNotificationReadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkNotificationReadResponseDefaultTypeInternal() {}
  union {
    MarkNotificationReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkNotificationReadResponseDefaultTypeInternal _MarkNotificationReadResponse_default_instance_;
}  // namespace notification
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2fnotification_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2fnotification_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fnotification_2eproto = nullptr;

const uint32_t TableStruct_services_2fnotification_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.notification_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.actor_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.is_read_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::Notification, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsRequest, _impl_.unread_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsResponse, _impl_.notifications_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::ListNotificationsResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::MarkNotificationReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::MarkNotificationReadRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::notification::MarkNotificationReadRequest, _impl_.notification_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::MarkNotificationReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::notification::MarkNotificationReadResponse, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::notification::Notification)},
  { 13, -1, -1, sizeof(::sonet::notification::ListNotificationsRequest)},
  { 22, -1, -1, sizeof(::sonet::notification::ListNotificationsResponse)},
  { 30, -1, -1, sizeof(::sonet::notification::MarkNotificationReadRequest)},
  { 38, -1, -1, sizeof(::sonet::notification::MarkNotificationReadResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::notification::_Notification_default_instance_._instance,
  &::sonet::notification::_ListNotificationsRequest_default_instance_._instance,
  &::sonet::notification::_ListNotificationsResponse_default_instance_._instance,
  &::sonet::notification::_MarkNotificationReadRequest_default_instance_._instance,
  &::sonet::notification::_MarkNotificationReadResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fnotification_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033services/notification.proto\022\022sonet.not"
  "ification\032\027common/pagination.proto\032\026comm"
  "on/timestamp.proto\"\322\001\n\014Notification\022\027\n\017n"
  "otification_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\0222\n"
  "\004type\030\003 \001(\0162$.sonet.notification.Notific"
  "ationType\022\025\n\ractor_user_id\030\004 \001(\t\022\017\n\007note"
  "_id\030\005 \001(\t\022\017\n\007is_read\030\006 \001(\010\022+\n\ncreated_at"
  "\030\007 \001(\0132\027.sonet.common.Timestamp\"n\n\030ListN"
  "otificationsRequest\022\017\n\007user_id\030\001 \001(\t\022,\n\n"
  "pagination\030\002 \001(\0132\030.sonet.common.Paginati"
  "on\022\023\n\013unread_only\030\003 \001(\010\"\202\001\n\031ListNotifica"
  "tionsResponse\0227\n\rnotifications\030\001 \003(\0132 .s"
  "onet.notification.Notification\022,\n\npagina"
  "tion\030\002 \001(\0132\030.sonet.common.Pagination\"G\n\033"
  "MarkNotificationReadRequest\022\017\n\007user_id\030\001"
  " \001(\t\022\027\n\017notification_id\030\002 \001(\t\"/\n\034MarkNot"
  "ificationReadResponse\022\017\n\007success\030\001 \001(\010*\305"
  "\001\n\020NotificationType\022\035\n\031NOTIFICATION_TYPE"
  "_UNKNOWN\020\000\022\032\n\026NOTIFICATION_TYPE_LIKE\020\001\022\033"
  "\n\027NOTIFICATION_TYPE_REPLY\020\002\022\035\n\031NOTIFICAT"
  "ION_TYPE_MENTION\020\003\022\034\n\030NOTIFICATION_TYPE_"
  "FOLLOW\020\004\022\034\n\030NOTIFICATION_TYPE_RENOTE\020\0052\202"
  "\002\n\023NotificationService\022p\n\021ListNotificati"
  "ons\022,.sonet.notification.ListNotificatio"
  "nsRequest\032-.sonet.notification.ListNotif"
  "icationsResponse\022y\n\024MarkNotificationRead"
  "\022/.sonet.notification.MarkNotificationRe"
  "adRequest\0320.sonet.notification.MarkNotif"
  "icationReadResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2fnotification_2eproto_deps[2] = {
  &::descriptor_table_common_2fpagination_2eproto,
  &::descriptor_table_common_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2fnotification_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fnotification_2eproto = {
    false, false, 1147, descriptor_table_protodef_services_2fnotification_2eproto,
    "services/notification.proto",
    &descriptor_table_services_2fnotification_2eproto_once, descriptor_table_services_2fnotification_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_services_2fnotification_2eproto::offsets,
    file_level_metadata_services_2fnotification_2eproto, file_level_enum_descriptors_services_2fnotification_2eproto,
    file_level_service_descriptors_services_2fnotification_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fnotification_2eproto_getter() {
  return &descriptor_table_services_2fnotification_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fnotification_2eproto(&descriptor_table_services_2fnotification_2eproto);
namespace sonet {
namespace notification {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fnotification_2eproto);
  return file_level_enum_descriptors_services_2fnotification_2eproto[0];
}
bool NotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Notification::_Internal {
 public:
  static const ::sonet::common::Timestamp& created_at(const Notification* msg);
};

const ::sonet::common::Timestamp&
Notification::_Internal::created_at(const Notification* msg) {
  return *msg->_impl_.created_at_;
}
void Notification::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.notification.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Notification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.notification_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.actor_user_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_read_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notification_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notification_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notification_id().empty()) {
    _this->_impl_.notification_id_.Set(from._internal_notification_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.actor_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actor_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actor_user_id().empty()) {
    _this->_impl_.actor_user_id_.Set(from._internal_actor_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_read_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_read_));
  // @@protoc_insertion_point(copy_constructor:sonet.notification.Notification)
}

inline void Notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.notification_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.actor_user_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_read_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.notification_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notification_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actor_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actor_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:sonet.notification.Notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notification_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.actor_user_id_.Destroy();
  _impl_.note_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void Notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.notification.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notification_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.actor_user_id_.ClearToEmpty();
  _impl_.note_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_read_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_read_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string notification_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notification_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.Notification.notification_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.Notification.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.notification.NotificationType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::notification::NotificationType>(val));
        } else
          goto handle_unusual;
        continue;
      // string actor_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_actor_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.Notification.actor_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string note_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.Notification.note_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_read = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.notification.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string notification_id = 1;
  if (!this->_internal_notification_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notification_id().data(), static_cast<int>(this->_internal_notification_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.Notification.notification_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notification_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.Notification.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // .sonet.notification.NotificationType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string actor_user_id = 4;
  if (!this->_internal_actor_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor_user_id().data(), static_cast<int>(this->_internal_actor_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.Notification.actor_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_actor_user_id(), target);
  }

  // string note_id = 5;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.Notification.note_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_note_id(), target);
  }

  // bool is_read = 6;
  if (this->_internal_is_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_read(), target);
  }

  // .sonet.common.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.notification.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.notification.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string notification_id = 1;
  if (!this->_internal_notification_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notification_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string actor_user_id = 4;
  if (!this->_internal_actor_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor_user_id());
  }

  // string note_id = 5;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // .sonet.common.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.notification.NotificationType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_read = 6;
  if (this->_internal_is_read() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }


void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Notification*>(&to_msg);
  auto& from = static_cast<const Notification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.notification.Notification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_notification_id().empty()) {
    _this->_internal_set_notification_id(from._internal_notification_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_actor_user_id().empty()) {
    _this->_internal_set_actor_user_id(from._internal_actor_user_id());
  }
  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_read() != 0) {
    _this->_internal_set_is_read(from._internal_is_read());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.notification.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notification_id_, lhs_arena,
      &other->_impl_.notification_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.actor_user_id_, lhs_arena,
      &other->_impl_.actor_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, _impl_.is_read_)
      + sizeof(Notification::_impl_.is_read_)
      - PROTOBUF_FIELD_OFFSET(Notification, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnotification_2eproto_getter, &descriptor_table_services_2fnotification_2eproto_once,
      file_level_metadata_services_2fnotification_2eproto[0]);
}

// ===================================================================

class ListNotificationsRequest::_Internal {
 public:
  static const ::sonet::common::Pagination& pagination(const ListNotificationsRequest* msg);
};

const ::sonet::common::Pagination&
ListNotificationsRequest::_Internal::pagination(const ListNotificationsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void ListNotificationsRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
ListNotificationsRequest::ListNotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.notification.ListNotificationsRequest)
}
ListNotificationsRequest::ListNotificationsRequest(const ListNotificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListNotificationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.unread_only_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::Pagination(*from._impl_.pagination_);
  }
  _this->_impl_.unread_only_ = from._impl_.unread_only_;
  // @@protoc_insertion_point(copy_constructor:sonet.notification.ListNotificationsRequest)
}

inline void ListNotificationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.unread_only_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListNotificationsRequest::~ListNotificationsRequest() {
  // @@protoc_insertion_point(destructor:sonet.notification.ListNotificationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListNotificationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListNotificationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListNotificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.notification.ListNotificationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.unread_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.ListNotificationsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Pagination pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unread_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unread_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNotificationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.notification.ListNotificationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.ListNotificationsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.common.Pagination pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool unread_only = 3;
  if (this->_internal_unread_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_unread_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.notification.ListNotificationsRequest)
  return target;
}

size_t ListNotificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.notification.ListNotificationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.common.Pagination pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool unread_only = 3;
  if (this->_internal_unread_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNotificationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListNotificationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNotificationsRequest::GetClassData() const { return &_class_data_; }


void ListNotificationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListNotificationsRequest*>(&to_msg);
  auto& from = static_cast<const ListNotificationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.notification.ListNotificationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::Pagination::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_unread_only() != 0) {
    _this->_internal_set_unread_only(from._internal_unread_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNotificationsRequest::CopyFrom(const ListNotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.notification.ListNotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationsRequest::IsInitialized() const {
  return true;
}

void ListNotificationsRequest::InternalSwap(ListNotificationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListNotificationsRequest, _impl_.unread_only_)
      + sizeof(ListNotificationsRequest::_impl_.unread_only_)
      - PROTOBUF_FIELD_OFFSET(ListNotificationsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnotification_2eproto_getter, &descriptor_table_services_2fnotification_2eproto_once,
      file_level_metadata_services_2fnotification_2eproto[1]);
}

// ===================================================================

class ListNotificationsResponse::_Internal {
 public:
  static const ::sonet::common::Pagination& pagination(const ListNotificationsResponse* msg);
};

const ::sonet::common::Pagination&
ListNotificationsResponse::_Internal::pagination(const ListNotificationsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void ListNotificationsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
ListNotificationsResponse::ListNotificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.notification.ListNotificationsResponse)
}
ListNotificationsResponse::ListNotificationsResponse(const ListNotificationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListNotificationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.notifications_){from._impl_.notifications_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.notification.ListNotificationsResponse)
}

inline void ListNotificationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.notifications_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListNotificationsResponse::~ListNotificationsResponse() {
  // @@protoc_insertion_point(destructor:sonet.notification.ListNotificationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListNotificationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notifications_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListNotificationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListNotificationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.notification.ListNotificationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notifications_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.notification.Notification notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Pagination pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNotificationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.notification.ListNotificationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.notification.Notification notifications = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_notifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.Pagination pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.notification.ListNotificationsResponse)
  return target;
}

size_t ListNotificationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.notification.ListNotificationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.notification.Notification notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->_impl_.notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.common.Pagination pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNotificationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListNotificationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNotificationsResponse::GetClassData() const { return &_class_data_; }


void ListNotificationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListNotificationsResponse*>(&to_msg);
  auto& from = static_cast<const ListNotificationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.notification.ListNotificationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notifications_.MergeFrom(from._impl_.notifications_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNotificationsResponse::CopyFrom(const ListNotificationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.notification.ListNotificationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationsResponse::IsInitialized() const {
  return true;
}

void ListNotificationsResponse::InternalSwap(ListNotificationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.notifications_.InternalSwap(&other->_impl_.notifications_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnotification_2eproto_getter, &descriptor_table_services_2fnotification_2eproto_once,
      file_level_metadata_services_2fnotification_2eproto[2]);
}

// ===================================================================

class MarkNotificationReadRequest::_Internal {
 public:
};

MarkNotificationReadRequest::MarkNotificationReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.notification.MarkNotificationReadRequest)
}
MarkNotificationReadRequest::MarkNotificationReadRequest(const MarkNotificationReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkNotificationReadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.notification_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notification_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notification_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notification_id().empty()) {
    _this->_impl_.notification_id_.Set(from._internal_notification_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.notification.MarkNotificationReadRequest)
}

inline void MarkNotificationReadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.notification_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notification_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notification_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarkNotificationReadRequest::~MarkNotificationReadRequest() {
  // @@protoc_insertion_point(destructor:sonet.notification.MarkNotificationReadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkNotificationReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.notification_id_.Destroy();
}

void MarkNotificationReadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkNotificationReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.notification.MarkNotificationReadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.notification_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkNotificationReadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.MarkNotificationReadRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string notification_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_notification_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.notification.MarkNotificationReadRequest.notification_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarkNotificationReadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.notification.MarkNotificationReadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.MarkNotificationReadRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string notification_id = 2;
  if (!this->_internal_notification_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notification_id().data(), static_cast<int>(this->_internal_notification_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.notification.MarkNotificationReadRequest.notification_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notification_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.notification.MarkNotificationReadRequest)
  return target;
}

size_t MarkNotificationReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.notification.MarkNotificationReadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string notification_id = 2;
  if (!this->_internal_notification_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notification_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkNotificationReadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkNotificationReadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkNotificationReadRequest::GetClassData() const { return &_class_data_; }


void MarkNotificationReadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkNotificationReadRequest*>(&to_msg);
  auto& from = static_cast<const MarkNotificationReadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.notification.MarkNotificationReadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_notification_id().empty()) {
    _this->_internal_set_notification_id(from._internal_notification_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkNotificationReadRequest::CopyFrom(const MarkNotificationReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.notification.MarkNotificationReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkNotificationReadRequest::IsInitialized() const {
  return true;
}

void MarkNotificationReadRequest::InternalSwap(MarkNotificationReadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notification_id_, lhs_arena,
      &other->_impl_.notification_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkNotificationReadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnotification_2eproto_getter, &descriptor_table_services_2fnotification_2eproto_once,
      file_level_metadata_services_2fnotification_2eproto[3]);
}

// ===================================================================

class MarkNotificationReadResponse::_Internal {
 public:
};

MarkNotificationReadResponse::MarkNotificationReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.notification.MarkNotificationReadResponse)
}
MarkNotificationReadResponse::MarkNotificationReadResponse(const MarkNotificationReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkNotificationReadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.notification.MarkNotificationReadResponse)
}

inline void MarkNotificationReadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarkNotificationReadResponse::~MarkNotificationReadResponse() {
  // @@protoc_insertion_point(destructor:sonet.notification.MarkNotificationReadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkNotificationReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MarkNotificationReadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkNotificationReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.notification.MarkNotificationReadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkNotificationReadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarkNotificationReadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.notification.MarkNotificationReadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.notification.MarkNotificationReadResponse)
  return target;
}

size_t MarkNotificationReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.notification.MarkNotificationReadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkNotificationReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkNotificationReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkNotificationReadResponse::GetClassData() const { return &_class_data_; }


void MarkNotificationReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkNotificationReadResponse*>(&to_msg);
  auto& from = static_cast<const MarkNotificationReadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.notification.MarkNotificationReadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkNotificationReadResponse::CopyFrom(const MarkNotificationReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.notification.MarkNotificationReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkNotificationReadResponse::IsInitialized() const {
  return true;
}

void MarkNotificationReadResponse::InternalSwap(MarkNotificationReadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkNotificationReadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnotification_2eproto_getter, &descriptor_table_services_2fnotification_2eproto_once,
      file_level_metadata_services_2fnotification_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace notification
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::notification::Notification*
Arena::CreateMaybeMessage< ::sonet::notification::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::notification::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::notification::ListNotificationsRequest*
Arena::CreateMaybeMessage< ::sonet::notification::ListNotificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::notification::ListNotificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::notification::ListNotificationsResponse*
Arena::CreateMaybeMessage< ::sonet::notification::ListNotificationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::notification::ListNotificationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::notification::MarkNotificationReadRequest*
Arena::CreateMaybeMessage< ::sonet::notification::MarkNotificationReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::notification::MarkNotificationReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::notification::MarkNotificationReadResponse*
Arena::CreateMaybeMessage< ::sonet::notification::MarkNotificationReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::notification::MarkNotificationReadResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
