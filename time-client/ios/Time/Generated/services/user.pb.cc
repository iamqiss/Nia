// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/user.proto

#include "services/user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace user {
PROTOBUF_CONSTEXPR UserProfile_SettingsEntry_DoNotUse::UserProfile_SettingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UserProfile_SettingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserProfile_SettingsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserProfile_SettingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UserProfile_SettingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserProfile_SettingsEntry_DoNotUseDefaultTypeInternal _UserProfile_SettingsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UserProfile_PrivacySettingsEntry_DoNotUse::UserProfile_PrivacySettingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UserProfile_PrivacySettingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserProfile_PrivacySettingsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserProfile_PrivacySettingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UserProfile_PrivacySettingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserProfile_PrivacySettingsEntry_DoNotUseDefaultTypeInternal _UserProfile_PrivacySettingsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UserProfile::UserProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settings_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.privacy_settings_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.website_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.last_login_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.is_verified_)*/false
  , /*decltype(_impl_.is_private_)*/false
  , /*decltype(_impl_.follower_count_)*/uint64_t{0u}
  , /*decltype(_impl_.following_count_)*/uint64_t{0u}
  , /*decltype(_impl_.note_count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserProfileDefaultTypeInternal() {}
  union {
    UserProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserProfileDefaultTypeInternal _UserProfile_default_instance_;
PROTOBUF_CONSTEXPR AuthCredentials::AuthCredentials(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.two_factor_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthCredentialsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthCredentialsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthCredentialsDefaultTypeInternal() {}
  union {
    AuthCredentials _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthCredentialsDefaultTypeInternal _AuthCredentials_default_instance_;
PROTOBUF_CONSTEXPR Session::Session(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_agent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.last_activity_)*/nullptr
  , /*decltype(_impl_.expires_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_active_)*/false
  , /*decltype(_impl_.is_suspicious_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDefaultTypeInternal _Session_default_instance_;
PROTOBUF_CONSTEXPR TwoFactorAuth::TwoFactorAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.backup_codes_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qr_code_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.setup_at_)*/nullptr
  , /*decltype(_impl_.is_enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwoFactorAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwoFactorAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwoFactorAuthDefaultTypeInternal() {}
  union {
    TwoFactorAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwoFactorAuthDefaultTypeInternal _TwoFactorAuth_default_instance_;
PROTOBUF_CONSTEXPR RegisterUserRequest::RegisterUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invitation_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accept_terms_)*/false
  , /*decltype(_impl_.accept_privacy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterUserRequestDefaultTypeInternal() {}
  union {
    RegisterUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterUserRequestDefaultTypeInternal _RegisterUserRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterUserResponse::RegisterUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.verification_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterUserResponseDefaultTypeInternal() {}
  union {
    RegisterUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterUserResponseDefaultTypeInternal _RegisterUserResponse_default_instance_;
PROTOBUF_CONSTEXPR LoginUserRequest::LoginUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credentials_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginUserRequestDefaultTypeInternal() {}
  union {
    LoginUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginUserRequestDefaultTypeInternal _LoginUserRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginUserResponse::LoginUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.access_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refresh_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.session_)*/nullptr
  , /*decltype(_impl_.expires_in_)*/0
  , /*decltype(_impl_.requires_2fa_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginUserResponseDefaultTypeInternal() {}
  union {
    LoginUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginUserResponseDefaultTypeInternal _LoginUserResponse_default_instance_;
PROTOBUF_CONSTEXPR VerifyTokenRequest::VerifyTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyTokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyTokenRequestDefaultTypeInternal() {}
  union {
    VerifyTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyTokenRequestDefaultTypeInternal _VerifyTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR VerifyTokenResponse::VerifyTokenResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.session_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyTokenResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyTokenResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyTokenResponseDefaultTypeInternal() {}
  union {
    VerifyTokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyTokenResponseDefaultTypeInternal _VerifyTokenResponse_default_instance_;
PROTOBUF_CONSTEXPR RefreshTokenRequest::RefreshTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refresh_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RefreshTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshTokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshTokenRequestDefaultTypeInternal() {}
  union {
    RefreshTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshTokenRequestDefaultTypeInternal _RefreshTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR RefreshTokenResponse::RefreshTokenResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.access_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.expires_in_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RefreshTokenResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshTokenResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshTokenResponseDefaultTypeInternal() {}
  union {
    RefreshTokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshTokenResponseDefaultTypeInternal _RefreshTokenResponse_default_instance_;
PROTOBUF_CONSTEXPR LogoutRequest::LogoutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logout_all_devices_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogoutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutRequestDefaultTypeInternal() {}
  union {
    LogoutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
PROTOBUF_CONSTEXPR LogoutResponse::LogoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutResponseDefaultTypeInternal() {}
  union {
    LogoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
PROTOBUF_CONSTEXPR ChangePasswordRequest::ChangePasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.old_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangePasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePasswordRequestDefaultTypeInternal() {}
  union {
    ChangePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePasswordRequestDefaultTypeInternal _ChangePasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR ChangePasswordResponse::ChangePasswordResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangePasswordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePasswordResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePasswordResponseDefaultTypeInternal() {}
  union {
    ChangePasswordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePasswordResponseDefaultTypeInternal _ChangePasswordResponse_default_instance_;
PROTOBUF_CONSTEXPR ResetPasswordRequest::ResetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetPasswordRequestDefaultTypeInternal() {}
  union {
    ResetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetPasswordRequestDefaultTypeInternal _ResetPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR ResetPasswordResponse::ResetPasswordResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reset_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResetPasswordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetPasswordResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetPasswordResponseDefaultTypeInternal() {}
  union {
    ResetPasswordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetPasswordResponseDefaultTypeInternal _ResetPasswordResponse_default_instance_;
PROTOBUF_CONSTEXPR ConfirmPasswordResetRequest::ConfirmPasswordResetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reset_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmPasswordResetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmPasswordResetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmPasswordResetRequestDefaultTypeInternal() {}
  union {
    ConfirmPasswordResetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmPasswordResetRequestDefaultTypeInternal _ConfirmPasswordResetRequest_default_instance_;
PROTOBUF_CONSTEXPR ConfirmPasswordResetResponse::ConfirmPasswordResetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmPasswordResetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmPasswordResetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmPasswordResetResponseDefaultTypeInternal() {}
  union {
    ConfirmPasswordResetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmPasswordResetResponseDefaultTypeInternal _ConfirmPasswordResetResponse_default_instance_;
PROTOBUF_CONSTEXPR VerifyEmailRequest::VerifyEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.verification_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyEmailRequestDefaultTypeInternal() {}
  union {
    VerifyEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyEmailRequestDefaultTypeInternal _VerifyEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR VerifyEmailResponse::VerifyEmailResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyEmailResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyEmailResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyEmailResponseDefaultTypeInternal() {}
  union {
    VerifyEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyEmailResponseDefaultTypeInternal _VerifyEmailResponse_default_instance_;
PROTOBUF_CONSTEXPR ResendVerificationRequest::ResendVerificationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResendVerificationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResendVerificationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResendVerificationRequestDefaultTypeInternal() {}
  union {
    ResendVerificationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResendVerificationRequestDefaultTypeInternal _ResendVerificationRequest_default_instance_;
PROTOBUF_CONSTEXPR ResendVerificationResponse::ResendVerificationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResendVerificationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResendVerificationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResendVerificationResponseDefaultTypeInternal() {}
  union {
    ResendVerificationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResendVerificationResponseDefaultTypeInternal _ResendVerificationResponse_default_instance_;
PROTOBUF_CONSTEXPR SetupTwoFactorRequest::SetupTwoFactorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupTwoFactorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupTwoFactorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupTwoFactorRequestDefaultTypeInternal() {}
  union {
    SetupTwoFactorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupTwoFactorRequestDefaultTypeInternal _SetupTwoFactorRequest_default_instance_;
PROTOBUF_CONSTEXPR SetupTwoFactorResponse::SetupTwoFactorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.tfa_config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupTwoFactorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupTwoFactorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupTwoFactorResponseDefaultTypeInternal() {}
  union {
    SetupTwoFactorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupTwoFactorResponseDefaultTypeInternal _SetupTwoFactorResponse_default_instance_;
PROTOBUF_CONSTEXPR VerifyTwoFactorRequest::VerifyTwoFactorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyTwoFactorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyTwoFactorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyTwoFactorRequestDefaultTypeInternal() {}
  union {
    VerifyTwoFactorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyTwoFactorRequestDefaultTypeInternal _VerifyTwoFactorRequest_default_instance_;
PROTOBUF_CONSTEXPR VerifyTwoFactorResponse::VerifyTwoFactorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.is_verified_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyTwoFactorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyTwoFactorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyTwoFactorResponseDefaultTypeInternal() {}
  union {
    VerifyTwoFactorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyTwoFactorResponseDefaultTypeInternal _VerifyTwoFactorResponse_default_instance_;
PROTOBUF_CONSTEXPR DisableTwoFactorRequest::DisableTwoFactorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisableTwoFactorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableTwoFactorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableTwoFactorRequestDefaultTypeInternal() {}
  union {
    DisableTwoFactorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableTwoFactorRequestDefaultTypeInternal _DisableTwoFactorRequest_default_instance_;
PROTOBUF_CONSTEXPR DisableTwoFactorResponse::DisableTwoFactorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisableTwoFactorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableTwoFactorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableTwoFactorResponseDefaultTypeInternal() {}
  union {
    DisableTwoFactorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableTwoFactorResponseDefaultTypeInternal _DisableTwoFactorResponse_default_instance_;
PROTOBUF_CONSTEXPR GetActiveSessionsRequest::GetActiveSessionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetActiveSessionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActiveSessionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActiveSessionsRequestDefaultTypeInternal() {}
  union {
    GetActiveSessionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActiveSessionsRequestDefaultTypeInternal _GetActiveSessionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetActiveSessionsResponse::GetActiveSessionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetActiveSessionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActiveSessionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActiveSessionsResponseDefaultTypeInternal() {}
  union {
    GetActiveSessionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActiveSessionsResponseDefaultTypeInternal _GetActiveSessionsResponse_default_instance_;
PROTOBUF_CONSTEXPR TerminateSessionRequest::TerminateSessionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminateSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateSessionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateSessionRequestDefaultTypeInternal() {}
  union {
    TerminateSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateSessionRequestDefaultTypeInternal _TerminateSessionRequest_default_instance_;
PROTOBUF_CONSTEXPR TerminateSessionResponse::TerminateSessionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminateSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateSessionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateSessionResponseDefaultTypeInternal() {}
  union {
    TerminateSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateSessionResponseDefaultTypeInternal _TerminateSessionResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserProfileRequest::GetUserProfileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserProfileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserProfileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserProfileRequestDefaultTypeInternal() {}
  union {
    GetUserProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserProfileRequestDefaultTypeInternal _GetUserProfileRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserProfileResponse::GetUserProfileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserProfileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserProfileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserProfileResponseDefaultTypeInternal() {}
  union {
    GetUserProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserProfileResponseDefaultTypeInternal _GetUserProfileResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateUserProfileRequest_SettingsEntry_DoNotUse::UpdateUserProfileRequest_SettingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UpdateUserProfileRequest_SettingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateUserProfileRequest_SettingsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateUserProfileRequest_SettingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdateUserProfileRequest_SettingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateUserProfileRequest_SettingsEntry_DoNotUseDefaultTypeInternal _UpdateUserProfileRequest_SettingsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UpdateUserProfileRequest::UpdateUserProfileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settings_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.website_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_private_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateUserProfileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateUserProfileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateUserProfileRequestDefaultTypeInternal() {}
  union {
    UpdateUserProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateUserProfileRequestDefaultTypeInternal _UpdateUserProfileRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateUserProfileResponse::UpdateUserProfileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateUserProfileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateUserProfileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateUserProfileResponseDefaultTypeInternal() {}
  union {
    UpdateUserProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateUserProfileResponseDefaultTypeInternal _UpdateUserProfileResponse_default_instance_;
}  // namespace user
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2fuser_2eproto[41];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2fuser_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fuser_2eproto = nullptr;

const uint32_t TableStruct_services_2fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_SettingsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.bio_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.avatar_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.website_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.is_verified_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.is_private_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.last_login_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.follower_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.following_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.note_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UserProfile, _impl_.privacy_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::AuthCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::AuthCredentials, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::AuthCredentials, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::AuthCredentials, _impl_.two_factor_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.user_agent_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.last_activity_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.is_active_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.is_suspicious_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::Session, _impl_.location_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::TwoFactorAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::TwoFactorAuth, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::TwoFactorAuth, _impl_.is_enabled_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::TwoFactorAuth, _impl_.qr_code_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::TwoFactorAuth, _impl_.backup_codes_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::TwoFactorAuth, _impl_.setup_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.invitation_code_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.accept_terms_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserRequest, _impl_.accept_privacy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserResponse, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RegisterUserResponse, _impl_.verification_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserRequest, _impl_.credentials_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserRequest, _impl_.device_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _impl_.access_token_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _impl_.refresh_token_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _impl_.expires_in_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _impl_.session_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LoginUserResponse, _impl_.requires_2fa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTokenRequest, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTokenResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTokenResponse, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTokenResponse, _impl_.session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RefreshTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RefreshTokenRequest, _impl_.refresh_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RefreshTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::RefreshTokenResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RefreshTokenResponse, _impl_.access_token_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::RefreshTokenResponse, _impl_.expires_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LogoutRequest, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::LogoutRequest, _impl_.logout_all_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LogoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::LogoutResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ChangePasswordRequest, _impl_.old_password_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::ChangePasswordRequest, _impl_.new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ChangePasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ChangePasswordResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResetPasswordRequest, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResetPasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResetPasswordResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResetPasswordResponse, _impl_.reset_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ConfirmPasswordResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ConfirmPasswordResetRequest, _impl_.reset_token_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::ConfirmPasswordResetRequest, _impl_.new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ConfirmPasswordResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ConfirmPasswordResetResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyEmailRequest, _impl_.verification_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyEmailResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResendVerificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResendVerificationRequest, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResendVerificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::ResendVerificationResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::SetupTwoFactorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::SetupTwoFactorRequest, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::SetupTwoFactorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::SetupTwoFactorResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::SetupTwoFactorResponse, _impl_.tfa_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTwoFactorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTwoFactorRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTwoFactorRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTwoFactorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTwoFactorResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::VerifyTwoFactorResponse, _impl_.is_verified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::DisableTwoFactorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::DisableTwoFactorRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::DisableTwoFactorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::DisableTwoFactorResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetActiveSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetActiveSessionsRequest, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetActiveSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetActiveSessionsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetActiveSessionsResponse, _impl_.sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::TerminateSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::TerminateSessionRequest, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::TerminateSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::TerminateSessionResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetUserProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetUserProfileRequest, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetUserProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetUserProfileResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::GetUserProfileResponse, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.bio_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.website_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.is_private_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileRequest, _impl_.settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::user::UpdateUserProfileResponse, _impl_.user_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::sonet::user::UserProfile_SettingsEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::sonet::user::UserProfile)},
  { 45, -1, -1, sizeof(::sonet::user::AuthCredentials)},
  { 54, -1, -1, sizeof(::sonet::user::Session)},
  { 73, -1, -1, sizeof(::sonet::user::TwoFactorAuth)},
  { 84, -1, -1, sizeof(::sonet::user::RegisterUserRequest)},
  { 97, -1, -1, sizeof(::sonet::user::RegisterUserResponse)},
  { 106, -1, -1, sizeof(::sonet::user::LoginUserRequest)},
  { 114, -1, -1, sizeof(::sonet::user::LoginUserResponse)},
  { 126, -1, -1, sizeof(::sonet::user::VerifyTokenRequest)},
  { 133, -1, -1, sizeof(::sonet::user::VerifyTokenResponse)},
  { 142, -1, -1, sizeof(::sonet::user::RefreshTokenRequest)},
  { 149, -1, -1, sizeof(::sonet::user::RefreshTokenResponse)},
  { 158, -1, -1, sizeof(::sonet::user::LogoutRequest)},
  { 166, -1, -1, sizeof(::sonet::user::LogoutResponse)},
  { 173, -1, -1, sizeof(::sonet::user::ChangePasswordRequest)},
  { 181, -1, -1, sizeof(::sonet::user::ChangePasswordResponse)},
  { 188, -1, -1, sizeof(::sonet::user::ResetPasswordRequest)},
  { 195, -1, -1, sizeof(::sonet::user::ResetPasswordResponse)},
  { 203, -1, -1, sizeof(::sonet::user::ConfirmPasswordResetRequest)},
  { 211, -1, -1, sizeof(::sonet::user::ConfirmPasswordResetResponse)},
  { 218, -1, -1, sizeof(::sonet::user::VerifyEmailRequest)},
  { 225, -1, -1, sizeof(::sonet::user::VerifyEmailResponse)},
  { 232, -1, -1, sizeof(::sonet::user::ResendVerificationRequest)},
  { 239, -1, -1, sizeof(::sonet::user::ResendVerificationResponse)},
  { 246, -1, -1, sizeof(::sonet::user::SetupTwoFactorRequest)},
  { 253, -1, -1, sizeof(::sonet::user::SetupTwoFactorResponse)},
  { 261, -1, -1, sizeof(::sonet::user::VerifyTwoFactorRequest)},
  { 269, -1, -1, sizeof(::sonet::user::VerifyTwoFactorResponse)},
  { 277, -1, -1, sizeof(::sonet::user::DisableTwoFactorRequest)},
  { 284, -1, -1, sizeof(::sonet::user::DisableTwoFactorResponse)},
  { 291, -1, -1, sizeof(::sonet::user::GetActiveSessionsRequest)},
  { 298, -1, -1, sizeof(::sonet::user::GetActiveSessionsResponse)},
  { 306, -1, -1, sizeof(::sonet::user::TerminateSessionRequest)},
  { 313, -1, -1, sizeof(::sonet::user::TerminateSessionResponse)},
  { 320, -1, -1, sizeof(::sonet::user::GetUserProfileRequest)},
  { 327, -1, -1, sizeof(::sonet::user::GetUserProfileResponse)},
  { 335, 343, -1, sizeof(::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse)},
  { 345, -1, -1, sizeof(::sonet::user::UpdateUserProfileRequest)},
  { 358, -1, -1, sizeof(::sonet::user::UpdateUserProfileResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::user::_UserProfile_SettingsEntry_DoNotUse_default_instance_._instance,
  &::sonet::user::_UserProfile_PrivacySettingsEntry_DoNotUse_default_instance_._instance,
  &::sonet::user::_UserProfile_default_instance_._instance,
  &::sonet::user::_AuthCredentials_default_instance_._instance,
  &::sonet::user::_Session_default_instance_._instance,
  &::sonet::user::_TwoFactorAuth_default_instance_._instance,
  &::sonet::user::_RegisterUserRequest_default_instance_._instance,
  &::sonet::user::_RegisterUserResponse_default_instance_._instance,
  &::sonet::user::_LoginUserRequest_default_instance_._instance,
  &::sonet::user::_LoginUserResponse_default_instance_._instance,
  &::sonet::user::_VerifyTokenRequest_default_instance_._instance,
  &::sonet::user::_VerifyTokenResponse_default_instance_._instance,
  &::sonet::user::_RefreshTokenRequest_default_instance_._instance,
  &::sonet::user::_RefreshTokenResponse_default_instance_._instance,
  &::sonet::user::_LogoutRequest_default_instance_._instance,
  &::sonet::user::_LogoutResponse_default_instance_._instance,
  &::sonet::user::_ChangePasswordRequest_default_instance_._instance,
  &::sonet::user::_ChangePasswordResponse_default_instance_._instance,
  &::sonet::user::_ResetPasswordRequest_default_instance_._instance,
  &::sonet::user::_ResetPasswordResponse_default_instance_._instance,
  &::sonet::user::_ConfirmPasswordResetRequest_default_instance_._instance,
  &::sonet::user::_ConfirmPasswordResetResponse_default_instance_._instance,
  &::sonet::user::_VerifyEmailRequest_default_instance_._instance,
  &::sonet::user::_VerifyEmailResponse_default_instance_._instance,
  &::sonet::user::_ResendVerificationRequest_default_instance_._instance,
  &::sonet::user::_ResendVerificationResponse_default_instance_._instance,
  &::sonet::user::_SetupTwoFactorRequest_default_instance_._instance,
  &::sonet::user::_SetupTwoFactorResponse_default_instance_._instance,
  &::sonet::user::_VerifyTwoFactorRequest_default_instance_._instance,
  &::sonet::user::_VerifyTwoFactorResponse_default_instance_._instance,
  &::sonet::user::_DisableTwoFactorRequest_default_instance_._instance,
  &::sonet::user::_DisableTwoFactorResponse_default_instance_._instance,
  &::sonet::user::_GetActiveSessionsRequest_default_instance_._instance,
  &::sonet::user::_GetActiveSessionsResponse_default_instance_._instance,
  &::sonet::user::_TerminateSessionRequest_default_instance_._instance,
  &::sonet::user::_TerminateSessionResponse_default_instance_._instance,
  &::sonet::user::_GetUserProfileRequest_default_instance_._instance,
  &::sonet::user::_GetUserProfileResponse_default_instance_._instance,
  &::sonet::user::_UpdateUserProfileRequest_SettingsEntry_DoNotUse_default_instance_._instance,
  &::sonet::user::_UpdateUserProfileRequest_default_instance_._instance,
  &::sonet::user::_UpdateUserProfileResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023services/user.proto\022\nsonet.user\032\023commo"
  "n/common.proto\032\026common/timestamp.proto\"\240"
  "\005\n\013UserProfile\022\017\n\007user_id\030\001 \001(\t\022\020\n\010usern"
  "ame\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\024\n\014display_name"
  "\030\004 \001(\t\022\013\n\003bio\030\005 \001(\t\022\022\n\navatar_url\030\006 \001(\t\022"
  "\020\n\010location\030\007 \001(\t\022\017\n\007website\030\010 \001(\t\022&\n\006st"
  "atus\030\t \001(\0162\026.sonet.user.UserStatus\022\023\n\013is"
  "_verified\030\n \001(\010\022\022\n\nis_private\030\013 \001(\010\022+\n\nc"
  "reated_at\030\014 \001(\0132\027.sonet.common.Timestamp"
  "\022+\n\nupdated_at\030\r \001(\0132\027.sonet.common.Time"
  "stamp\022+\n\nlast_login\030\016 \001(\0132\027.sonet.common"
  ".Timestamp\022\026\n\016follower_count\030\017 \001(\004\022\027\n\017fo"
  "llowing_count\030\020 \001(\004\022\022\n\nnote_count\030\021 \001(\004\022"
  "7\n\010settings\030\022 \003(\0132%.sonet.user.UserProfi"
  "le.SettingsEntry\022F\n\020privacy_settings\030\023 \003"
  "(\0132,.sonet.user.UserProfile.PrivacySetti"
  "ngsEntry\032/\n\rSettingsEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\0326\n\024PrivacySettingsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"K\n\017Aut"
  "hCredentials\022\r\n\005email\030\001 \001(\t\022\020\n\010password\030"
  "\002 \001(\t\022\027\n\017two_factor_code\030\003 \001(\t\"\360\002\n\007Sessi"
  "on\022\022\n\nsession_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022"
  "\021\n\tdevice_id\030\003 \001(\t\022\023\n\013device_name\030\004 \001(\t\022"
  "\022\n\nip_address\030\005 \001(\t\022\022\n\nuser_agent\030\006 \001(\t\022"
  "%\n\004type\030\007 \001(\0162\027.sonet.user.SessionType\022+"
  "\n\ncreated_at\030\010 \001(\0132\027.sonet.common.Timest"
  "amp\022.\n\rlast_activity\030\t \001(\0132\027.sonet.commo"
  "n.Timestamp\022+\n\nexpires_at\030\n \001(\0132\027.sonet."
  "common.Timestamp\022\021\n\tis_active\030\013 \001(\010\022\025\n\ri"
  "s_suspicious\030\014 \001(\010\022\025\n\rlocation_info\030\r \001("
  "\t\"\212\001\n\rTwoFactorAuth\022\017\n\007user_id\030\001 \001(\t\022\022\n\n"
  "is_enabled\030\002 \001(\010\022\023\n\013qr_code_url\030\003 \001(\t\022\024\n"
  "\014backup_codes\030\004 \003(\t\022)\n\010setup_at\030\005 \001(\0132\027."
  "sonet.common.Timestamp\"\245\001\n\023RegisterUserR"
  "equest\022\020\n\010username\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\022"
  "\020\n\010password\030\003 \001(\t\022\024\n\014display_name\030\004 \001(\t\022"
  "\027\n\017invitation_code\030\005 \001(\t\022\024\n\014accept_terms"
  "\030\006 \001(\010\022\026\n\016accept_privacy\030\007 \001(\010\"\177\n\024Regist"
  "erUserResponse\022$\n\006status\030\001 \001(\0132\024.sonet.c"
  "ommon.Status\022%\n\004user\030\002 \001(\0132\027.sonet.user."
  "UserProfile\022\032\n\022verification_token\030\003 \001(\t\""
  "Y\n\020LoginUserRequest\0220\n\013credentials\030\001 \001(\013"
  "2\033.sonet.user.AuthCredentials\022\023\n\013device_"
  "name\030\002 \001(\t\"\266\001\n\021LoginUserResponse\022$\n\006stat"
  "us\030\001 \001(\0132\024.sonet.common.Status\022\024\n\014access"
  "_token\030\002 \001(\t\022\025\n\rrefresh_token\030\003 \001(\t\022\022\n\ne"
  "xpires_in\030\004 \001(\005\022$\n\007session\030\005 \001(\0132\023.sonet"
  ".user.Session\022\024\n\014requires_2fa\030\006 \001(\010\"#\n\022V"
  "erifyTokenRequest\022\r\n\005token\030\001 \001(\t\"\210\001\n\023Ver"
  "ifyTokenResponse\022$\n\006status\030\001 \001(\0132\024.sonet"
  ".common.Status\022%\n\004user\030\002 \001(\0132\027.sonet.use"
  "r.UserProfile\022$\n\007session\030\003 \001(\0132\023.sonet.u"
  "ser.Session\",\n\023RefreshTokenRequest\022\025\n\rre"
  "fresh_token\030\001 \001(\t\"f\n\024RefreshTokenRespons"
  "e\022$\n\006status\030\001 \001(\0132\024.sonet.common.Status\022"
  "\024\n\014access_token\030\002 \001(\t\022\022\n\nexpires_in\030\003 \001("
  "\005\"\?\n\rLogoutRequest\022\022\n\nsession_id\030\001 \001(\t\022\032"
  "\n\022logout_all_devices\030\002 \001(\010\"6\n\016LogoutResp"
  "onse\022$\n\006status\030\001 \001(\0132\024.sonet.common.Stat"
  "us\"C\n\025ChangePasswordRequest\022\024\n\014old_passw"
  "ord\030\001 \001(\t\022\024\n\014new_password\030\002 \001(\t\">\n\026Chang"
  "ePasswordResponse\022$\n\006status\030\001 \001(\0132\024.sone"
  "t.common.Status\"%\n\024ResetPasswordRequest\022"
  "\r\n\005email\030\001 \001(\t\"R\n\025ResetPasswordResponse\022"
  "$\n\006status\030\001 \001(\0132\024.sonet.common.Status\022\023\n"
  "\013reset_token\030\002 \001(\t\"H\n\033ConfirmPasswordRes"
  "etRequest\022\023\n\013reset_token\030\001 \001(\t\022\024\n\014new_pa"
  "ssword\030\002 \001(\t\"D\n\034ConfirmPasswordResetResp"
  "onse\022$\n\006status\030\001 \001(\0132\024.sonet.common.Stat"
  "us\"0\n\022VerifyEmailRequest\022\032\n\022verification"
  "_token\030\001 \001(\t\";\n\023VerifyEmailResponse\022$\n\006s"
  "tatus\030\001 \001(\0132\024.sonet.common.Status\"*\n\031Res"
  "endVerificationRequest\022\r\n\005email\030\001 \001(\t\"B\n"
  "\032ResendVerificationResponse\022$\n\006status\030\001 "
  "\001(\0132\024.sonet.common.Status\"(\n\025SetupTwoFac"
  "torRequest\022\017\n\007user_id\030\001 \001(\t\"m\n\026SetupTwoF"
  "actorResponse\022$\n\006status\030\001 \001(\0132\024.sonet.co"
  "mmon.Status\022-\n\ntfa_config\030\002 \001(\0132\031.sonet."
  "user.TwoFactorAuth\"7\n\026VerifyTwoFactorReq"
  "uest\022\017\n\007user_id\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"T\n\027V"
  "erifyTwoFactorResponse\022$\n\006status\030\001 \001(\0132\024"
  ".sonet.common.Status\022\023\n\013is_verified\030\002 \001("
  "\010\"+\n\027DisableTwoFactorRequest\022\020\n\010password"
  "\030\001 \001(\t\"@\n\030DisableTwoFactorResponse\022$\n\006st"
  "atus\030\001 \001(\0132\024.sonet.common.Status\"+\n\030GetA"
  "ctiveSessionsRequest\022\017\n\007user_id\030\001 \001(\t\"h\n"
  "\031GetActiveSessionsResponse\022$\n\006status\030\001 \001"
  "(\0132\024.sonet.common.Status\022%\n\010sessions\030\002 \003"
  "(\0132\023.sonet.user.Session\"-\n\027TerminateSess"
  "ionRequest\022\022\n\nsession_id\030\001 \001(\t\"@\n\030Termin"
  "ateSessionResponse\022$\n\006status\030\001 \001(\0132\024.son"
  "et.common.Status\"(\n\025GetUserProfileReques"
  "t\022\017\n\007user_id\030\001 \001(\t\"e\n\026GetUserProfileResp"
  "onse\022$\n\006status\030\001 \001(\0132\024.sonet.common.Stat"
  "us\022%\n\004user\030\002 \001(\0132\027.sonet.user.UserProfil"
  "e\"\374\001\n\030UpdateUserProfileRequest\022\017\n\007user_i"
  "d\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022\013\n\003bio\030\003 \001"
  "(\t\022\020\n\010location\030\004 \001(\t\022\017\n\007website\030\005 \001(\t\022\022\n"
  "\nis_private\030\006 \001(\010\022D\n\010settings\030\007 \003(\01322.so"
  "net.user.UpdateUserProfileRequest.Settin"
  "gsEntry\032/\n\rSettingsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"h\n\031UpdateUserProfileRes"
  "ponse\022$\n\006status\030\001 \001(\0132\024.sonet.common.Sta"
  "tus\022%\n\004user\030\002 \001(\0132\027.sonet.user.UserProfi"
  "le*\267\001\n\nUserStatus\022\033\n\027USER_STATUS_UNSPECI"
  "FIED\020\000\022\026\n\022USER_STATUS_ACTIVE\020\001\022\031\n\025USER_S"
  "TATUS_SUSPENDED\020\002\022$\n USER_STATUS_PENDING"
  "_VERIFICATION\020\003\022\033\n\027USER_STATUS_DEACTIVAT"
  "ED\020\004\022\026\n\022USER_STATUS_BANNED\020\005*\210\001\n\013Session"
  "Type\022\034\n\030SESSION_TYPE_UNSPECIFIED\020\000\022\024\n\020SE"
  "SSION_TYPE_WEB\020\001\022\027\n\023SESSION_TYPE_MOBILE\020"
  "\002\022\024\n\020SESSION_TYPE_API\020\003\022\026\n\022SESSION_TYPE_"
  "ADMIN\020\0042\361\013\n\013UserService\022Q\n\014RegisterUser\022"
  "\037.sonet.user.RegisterUserRequest\032 .sonet"
  ".user.RegisterUserResponse\022H\n\tLoginUser\022"
  "\034.sonet.user.LoginUserRequest\032\035.sonet.us"
  "er.LoginUserResponse\022C\n\nLogoutUser\022\031.son"
  "et.user.LogoutRequest\032\032.sonet.user.Logou"
  "tResponse\022N\n\013VerifyToken\022\036.sonet.user.Ve"
  "rifyTokenRequest\032\037.sonet.user.VerifyToke"
  "nResponse\022Q\n\014RefreshToken\022\037.sonet.user.R"
  "efreshTokenRequest\032 .sonet.user.RefreshT"
  "okenResponse\022W\n\016ChangePassword\022!.sonet.u"
  "ser.ChangePasswordRequest\032\".sonet.user.C"
  "hangePasswordResponse\022T\n\rResetPassword\022 "
  ".sonet.user.ResetPasswordRequest\032!.sonet"
  ".user.ResetPasswordResponse\022i\n\024ConfirmPa"
  "sswordReset\022\'.sonet.user.ConfirmPassword"
  "ResetRequest\032(.sonet.user.ConfirmPasswor"
  "dResetResponse\022N\n\013VerifyEmail\022\036.sonet.us"
  "er.VerifyEmailRequest\032\037.sonet.user.Verif"
  "yEmailResponse\022c\n\022ResendVerification\022%.s"
  "onet.user.ResendVerificationRequest\032&.so"
  "net.user.ResendVerificationResponse\022W\n\016S"
  "etupTwoFactor\022!.sonet.user.SetupTwoFacto"
  "rRequest\032\".sonet.user.SetupTwoFactorResp"
  "onse\022Z\n\017VerifyTwoFactor\022\".sonet.user.Ver"
  "ifyTwoFactorRequest\032#.sonet.user.VerifyT"
  "woFactorResponse\022]\n\020DisableTwoFactor\022#.s"
  "onet.user.DisableTwoFactorRequest\032$.sone"
  "t.user.DisableTwoFactorResponse\022`\n\021GetAc"
  "tiveSessions\022$.sonet.user.GetActiveSessi"
  "onsRequest\032%.sonet.user.GetActiveSession"
  "sResponse\022]\n\020TerminateSession\022#.sonet.us"
  "er.TerminateSessionRequest\032$.sonet.user."
  "TerminateSessionResponse\022W\n\016GetUserProfi"
  "le\022!.sonet.user.GetUserProfileRequest\032\"."
  "sonet.user.GetUserProfileResponse\022`\n\021Upd"
  "ateUserProfile\022$.sonet.user.UpdateUserPr"
  "ofileRequest\032%.sonet.user.UpdateUserProf"
  "ileResponseB\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2fuser_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_common_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2fuser_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fuser_2eproto = {
    false, false, 6024, descriptor_table_protodef_services_2fuser_2eproto,
    "services/user.proto",
    &descriptor_table_services_2fuser_2eproto_once, descriptor_table_services_2fuser_2eproto_deps, 2, 41,
    schemas, file_default_instances, TableStruct_services_2fuser_2eproto::offsets,
    file_level_metadata_services_2fuser_2eproto, file_level_enum_descriptors_services_2fuser_2eproto,
    file_level_service_descriptors_services_2fuser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fuser_2eproto_getter() {
  return &descriptor_table_services_2fuser_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fuser_2eproto(&descriptor_table_services_2fuser_2eproto);
namespace sonet {
namespace user {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fuser_2eproto);
  return file_level_enum_descriptors_services_2fuser_2eproto[0];
}
bool UserStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fuser_2eproto);
  return file_level_enum_descriptors_services_2fuser_2eproto[1];
}
bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

UserProfile_SettingsEntry_DoNotUse::UserProfile_SettingsEntry_DoNotUse() {}
UserProfile_SettingsEntry_DoNotUse::UserProfile_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserProfile_SettingsEntry_DoNotUse::MergeFrom(const UserProfile_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserProfile_SettingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[0]);
}

// ===================================================================

UserProfile_PrivacySettingsEntry_DoNotUse::UserProfile_PrivacySettingsEntry_DoNotUse() {}
UserProfile_PrivacySettingsEntry_DoNotUse::UserProfile_PrivacySettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserProfile_PrivacySettingsEntry_DoNotUse::MergeFrom(const UserProfile_PrivacySettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserProfile_PrivacySettingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[1]);
}

// ===================================================================

class UserProfile::_Internal {
 public:
  static const ::sonet::common::Timestamp& created_at(const UserProfile* msg);
  static const ::sonet::common::Timestamp& updated_at(const UserProfile* msg);
  static const ::sonet::common::Timestamp& last_login(const UserProfile* msg);
};

const ::sonet::common::Timestamp&
UserProfile::_Internal::created_at(const UserProfile* msg) {
  return *msg->_impl_.created_at_;
}
const ::sonet::common::Timestamp&
UserProfile::_Internal::updated_at(const UserProfile* msg) {
  return *msg->_impl_.updated_at_;
}
const ::sonet::common::Timestamp&
UserProfile::_Internal::last_login(const UserProfile* msg) {
  return *msg->_impl_.last_login_;
}
void UserProfile::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void UserProfile::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void UserProfile::clear_last_login() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_login_ != nullptr) {
    delete _impl_.last_login_;
  }
  _impl_.last_login_ = nullptr;
}
UserProfile::UserProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UserProfile::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.user.UserProfile)
}
UserProfile::UserProfile(const UserProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.settings_)*/{}
    , /*decltype(_impl_.privacy_settings_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.bio_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.website_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_login_){nullptr}
    , decltype(_impl_.status_){}
    , decltype(_impl_.is_verified_){}
    , decltype(_impl_.is_private_){}
    , decltype(_impl_.follower_count_){}
    , decltype(_impl_.following_count_){}
    , decltype(_impl_.note_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _this->_impl_.privacy_settings_.MergeFrom(from._impl_.privacy_settings_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bio().empty()) {
    _this->_impl_.bio_.Set(from._internal_bio(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar_url().empty()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.website_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_website().empty()) {
    _this->_impl_.website_.Set(from._internal_website(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::sonet::common::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_last_login()) {
    _this->_impl_.last_login_ = new ::sonet::common::Timestamp(*from._impl_.last_login_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.note_count_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.note_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.user.UserProfile)
}

inline void UserProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.settings_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.privacy_settings_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.bio_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.website_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_login_){nullptr}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.is_verified_){false}
    , decltype(_impl_.is_private_){false}
    , decltype(_impl_.follower_count_){uint64_t{0u}}
    , decltype(_impl_.following_count_){uint64_t{0u}}
    , decltype(_impl_.note_count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.website_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserProfile::~UserProfile() {
  // @@protoc_insertion_point(destructor:sonet.user.UserProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UserProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settings_.Destruct();
  _impl_.settings_.~MapField();
  _impl_.privacy_settings_.Destruct();
  _impl_.privacy_settings_.~MapField();
  _impl_.user_id_.Destroy();
  _impl_.username_.Destroy();
  _impl_.email_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.bio_.Destroy();
  _impl_.avatar_url_.Destroy();
  _impl_.location_.Destroy();
  _impl_.website_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.last_login_;
}

void UserProfile::ArenaDtor(void* object) {
  UserProfile* _this = reinterpret_cast< UserProfile* >(object);
  _this->_impl_.settings_.Destruct();
  _this->_impl_.privacy_settings_.Destruct();
}
void UserProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.UserProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.settings_.Clear();
  _impl_.privacy_settings_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.bio_.ClearToEmpty();
  _impl_.avatar_url_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.website_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_login_ != nullptr) {
    delete _impl_.last_login_;
  }
  _impl_.last_login_ = nullptr;
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.note_count_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.note_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.username"));
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.email"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string bio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.bio"));
        } else
          goto handle_unusual;
        continue;
      // string avatar_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      // string location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.location"));
        } else
          goto handle_unusual;
        continue;
      // string website = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_website();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UserProfile.website"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.UserStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::sonet::user::UserStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_verified = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_private = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp updated_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_login = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_login(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 follower_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.follower_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 following_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.following_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 note_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.note_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> settings = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> privacy_settings = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.privacy_settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.UserProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.display_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_name(), target);
  }

  // string bio = 5;
  if (!this->_internal_bio().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bio().data(), static_cast<int>(this->_internal_bio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.bio");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bio(), target);
  }

  // string avatar_url = 6;
  if (!this->_internal_avatar_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.avatar_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_avatar_url(), target);
  }

  // string location = 7;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.location");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_location(), target);
  }

  // string website = 8;
  if (!this->_internal_website().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_website().data(), static_cast<int>(this->_internal_website().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UserProfile.website");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_website(), target);
  }

  // .sonet.user.UserStatus status = 9;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // bool is_verified = 10;
  if (this->_internal_is_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_verified(), target);
  }

  // bool is_private = 11;
  if (this->_internal_is_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_private(), target);
  }

  // .sonet.common.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp updated_at = 13;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp last_login = 14;
  if (this->_internal_has_last_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::last_login(this),
        _Internal::last_login(this).GetCachedSize(), target, stream);
  }

  // uint64 follower_count = 15;
  if (this->_internal_follower_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_follower_count(), target);
  }

  // uint64 following_count = 16;
  if (this->_internal_following_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_following_count(), target);
  }

  // uint64 note_count = 17;
  if (this->_internal_note_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_note_count(), target);
  }

  // map<string, string> settings = 18;
  if (!this->_internal_settings().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = UserProfile_SettingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_settings();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.user.UserProfile.SettingsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.user.UserProfile.SettingsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> privacy_settings = 19;
  if (!this->_internal_privacy_settings().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = UserProfile_PrivacySettingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_privacy_settings();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.user.UserProfile.PrivacySettingsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.user.UserProfile.PrivacySettingsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(19, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(19, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.UserProfile)
  return target;
}

size_t UserProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.UserProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> settings = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_settings().begin();
      it != this->_internal_settings().end(); ++it) {
    total_size += UserProfile_SettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> privacy_settings = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_privacy_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_privacy_settings().begin();
      it != this->_internal_privacy_settings().end(); ++it) {
    total_size += UserProfile_PrivacySettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string bio = 5;
  if (!this->_internal_bio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bio());
  }

  // string avatar_url = 6;
  if (!this->_internal_avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // string location = 7;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string website = 8;
  if (!this->_internal_website().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_website());
  }

  // .sonet.common.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.common.Timestamp updated_at = 13;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .sonet.common.Timestamp last_login = 14;
  if (this->_internal_has_last_login()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_login_);
  }

  // .sonet.user.UserStatus status = 9;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool is_verified = 10;
  if (this->_internal_is_verified() != 0) {
    total_size += 1 + 1;
  }

  // bool is_private = 11;
  if (this->_internal_is_private() != 0) {
    total_size += 1 + 1;
  }

  // uint64 follower_count = 15;
  if (this->_internal_follower_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_follower_count());
  }

  // uint64 following_count = 16;
  if (this->_internal_following_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_following_count());
  }

  // uint64 note_count = 17;
  if (this->_internal_note_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_note_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserProfile::GetClassData() const { return &_class_data_; }


void UserProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserProfile*>(&to_msg);
  auto& from = static_cast<const UserProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.UserProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _this->_impl_.privacy_settings_.MergeFrom(from._impl_.privacy_settings_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_bio().empty()) {
    _this->_internal_set_bio(from._internal_bio());
  }
  if (!from._internal_avatar_url().empty()) {
    _this->_internal_set_avatar_url(from._internal_avatar_url());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_website().empty()) {
    _this->_internal_set_website(from._internal_website());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_last_login()) {
    _this->_internal_mutable_last_login()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_login());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_is_verified() != 0) {
    _this->_internal_set_is_verified(from._internal_is_verified());
  }
  if (from._internal_is_private() != 0) {
    _this->_internal_set_is_private(from._internal_is_private());
  }
  if (from._internal_follower_count() != 0) {
    _this->_internal_set_follower_count(from._internal_follower_count());
  }
  if (from._internal_following_count() != 0) {
    _this->_internal_set_following_count(from._internal_following_count());
  }
  if (from._internal_note_count() != 0) {
    _this->_internal_set_note_count(from._internal_note_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserProfile::CopyFrom(const UserProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.UserProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfile::IsInitialized() const {
  return true;
}

void UserProfile::InternalSwap(UserProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.settings_.InternalSwap(&other->_impl_.settings_);
  _impl_.privacy_settings_.InternalSwap(&other->_impl_.privacy_settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bio_, lhs_arena,
      &other->_impl_.bio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.website_, lhs_arena,
      &other->_impl_.website_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserProfile, _impl_.note_count_)
      + sizeof(UserProfile::_impl_.note_count_)
      - PROTOBUF_FIELD_OFFSET(UserProfile, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[2]);
}

// ===================================================================

class AuthCredentials::_Internal {
 public:
};

AuthCredentials::AuthCredentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.AuthCredentials)
}
AuthCredentials::AuthCredentials(const AuthCredentials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthCredentials* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.two_factor_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.two_factor_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.two_factor_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_two_factor_code().empty()) {
    _this->_impl_.two_factor_code_.Set(from._internal_two_factor_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.AuthCredentials)
}

inline void AuthCredentials::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.two_factor_code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.two_factor_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.two_factor_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthCredentials::~AuthCredentials() {
  // @@protoc_insertion_point(destructor:sonet.user.AuthCredentials)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthCredentials::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.two_factor_code_.Destroy();
}

void AuthCredentials::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.AuthCredentials)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.two_factor_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthCredentials::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.AuthCredentials.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.AuthCredentials.password"));
        } else
          goto handle_unusual;
        continue;
      // string two_factor_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_two_factor_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.AuthCredentials.two_factor_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthCredentials::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.AuthCredentials)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.AuthCredentials.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.AuthCredentials.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string two_factor_code = 3;
  if (!this->_internal_two_factor_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_two_factor_code().data(), static_cast<int>(this->_internal_two_factor_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.AuthCredentials.two_factor_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_two_factor_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.AuthCredentials)
  return target;
}

size_t AuthCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.AuthCredentials)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string two_factor_code = 3;
  if (!this->_internal_two_factor_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_two_factor_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthCredentials::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthCredentials::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthCredentials::GetClassData() const { return &_class_data_; }


void AuthCredentials::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthCredentials*>(&to_msg);
  auto& from = static_cast<const AuthCredentials&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.AuthCredentials)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_two_factor_code().empty()) {
    _this->_internal_set_two_factor_code(from._internal_two_factor_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthCredentials::CopyFrom(const AuthCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.AuthCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthCredentials::IsInitialized() const {
  return true;
}

void AuthCredentials::InternalSwap(AuthCredentials* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.two_factor_code_, lhs_arena,
      &other->_impl_.two_factor_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthCredentials::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[3]);
}

// ===================================================================

class Session::_Internal {
 public:
  static const ::sonet::common::Timestamp& created_at(const Session* msg);
  static const ::sonet::common::Timestamp& last_activity(const Session* msg);
  static const ::sonet::common::Timestamp& expires_at(const Session* msg);
};

const ::sonet::common::Timestamp&
Session::_Internal::created_at(const Session* msg) {
  return *msg->_impl_.created_at_;
}
const ::sonet::common::Timestamp&
Session::_Internal::last_activity(const Session* msg) {
  return *msg->_impl_.last_activity_;
}
const ::sonet::common::Timestamp&
Session::_Internal::expires_at(const Session* msg) {
  return *msg->_impl_.expires_at_;
}
void Session::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Session::clear_last_activity() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_activity_ != nullptr) {
    delete _impl_.last_activity_;
  }
  _impl_.last_activity_ = nullptr;
}
void Session::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
}
Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Session* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.user_agent_){}
    , decltype(_impl_.location_info_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_activity_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_active_){}
    , decltype(_impl_.is_suspicious_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_agent().empty()) {
    _this->_impl_.user_agent_.Set(from._internal_user_agent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_info().empty()) {
    _this->_impl_.location_info_.Set(from._internal_location_info(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_last_activity()) {
    _this->_impl_.last_activity_ = new ::sonet::common::Timestamp(*from._impl_.last_activity_);
  }
  if (from._internal_has_expires_at()) {
    _this->_impl_.expires_at_ = new ::sonet::common::Timestamp(*from._impl_.expires_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_suspicious_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_suspicious_));
  // @@protoc_insertion_point(copy_constructor:sonet.user.Session)
}

inline void Session::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.user_agent_){}
    , decltype(_impl_.location_info_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.last_activity_){nullptr}
    , decltype(_impl_.expires_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_active_){false}
    , decltype(_impl_.is_suspicious_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:sonet.user.Session)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.device_id_.Destroy();
  _impl_.device_name_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.user_agent_.Destroy();
  _impl_.location_info_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.last_activity_;
  if (this != internal_default_instance()) delete _impl_.expires_at_;
}

void Session::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.Session)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  _impl_.device_name_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  _impl_.user_agent_.ClearToEmpty();
  _impl_.location_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_activity_ != nullptr) {
    delete _impl_.last_activity_;
  }
  _impl_.last_activity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expires_at_ != nullptr) {
    delete _impl_.expires_at_;
  }
  _impl_.expires_at_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_suspicious_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_suspicious_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.device_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.device_name"));
        } else
          goto handle_unusual;
        continue;
      // string ip_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.ip_address"));
        } else
          goto handle_unusual;
        continue;
      // string user_agent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.user_agent"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.SessionType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::user::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_activity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp expires_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_active = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_suspicious = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_suspicious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_location_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.Session.location_info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Session::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.Session)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  // string device_name = 4;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.device_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_name(), target);
  }

  // string ip_address = 5;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.ip_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip_address(), target);
  }

  // string user_agent = 6;
  if (!this->_internal_user_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_agent().data(), static_cast<int>(this->_internal_user_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.user_agent");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_agent(), target);
  }

  // .sonet.user.SessionType type = 7;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // .sonet.common.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp last_activity = 9;
  if (this->_internal_has_last_activity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::last_activity(this),
        _Internal::last_activity(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp expires_at = 10;
  if (this->_internal_has_expires_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  // bool is_active = 11;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_active(), target);
  }

  // bool is_suspicious = 12;
  if (this->_internal_is_suspicious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_suspicious(), target);
  }

  // string location_info = 13;
  if (!this->_internal_location_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_info().data(), static_cast<int>(this->_internal_location_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.Session.location_info");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_location_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.Session)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string device_name = 4;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // string ip_address = 5;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string user_agent = 6;
  if (!this->_internal_user_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_agent());
  }

  // string location_info = 13;
  if (!this->_internal_location_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_info());
  }

  // .sonet.common.Timestamp created_at = 8;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.common.Timestamp last_activity = 9;
  if (this->_internal_has_last_activity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_activity_);
  }

  // .sonet.common.Timestamp expires_at = 10;
  if (this->_internal_has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expires_at_);
  }

  // .sonet.user.SessionType type = 7;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_active = 11;
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_suspicious = 12;
  if (this->_internal_is_suspicious() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Session::GetClassData() const { return &_class_data_; }


void Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Session*>(&to_msg);
  auto& from = static_cast<const Session&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.Session)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  if (!from._internal_location_info().empty()) {
    _this->_internal_set_location_info(from._internal_location_info());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_last_activity()) {
    _this->_internal_mutable_last_activity()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_activity());
  }
  if (from._internal_has_expires_at()) {
    _this->_internal_mutable_expires_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_expires_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_is_suspicious() != 0) {
    _this->_internal_set_is_suspicious(from._internal_is_suspicious());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_id_, lhs_arena,
      &other->_impl_.device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_agent_, lhs_arena,
      &other->_impl_.user_agent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_info_, lhs_arena,
      &other->_impl_.location_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, _impl_.is_suspicious_)
      + sizeof(Session::_impl_.is_suspicious_)
      - PROTOBUF_FIELD_OFFSET(Session, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[4]);
}

// ===================================================================

class TwoFactorAuth::_Internal {
 public:
  static const ::sonet::common::Timestamp& setup_at(const TwoFactorAuth* msg);
};

const ::sonet::common::Timestamp&
TwoFactorAuth::_Internal::setup_at(const TwoFactorAuth* msg) {
  return *msg->_impl_.setup_at_;
}
void TwoFactorAuth::clear_setup_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.setup_at_ != nullptr) {
    delete _impl_.setup_at_;
  }
  _impl_.setup_at_ = nullptr;
}
TwoFactorAuth::TwoFactorAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.TwoFactorAuth)
}
TwoFactorAuth::TwoFactorAuth(const TwoFactorAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TwoFactorAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.backup_codes_){from._impl_.backup_codes_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.qr_code_url_){}
    , decltype(_impl_.setup_at_){nullptr}
    , decltype(_impl_.is_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.qr_code_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qr_code_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_qr_code_url().empty()) {
    _this->_impl_.qr_code_url_.Set(from._internal_qr_code_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_setup_at()) {
    _this->_impl_.setup_at_ = new ::sonet::common::Timestamp(*from._impl_.setup_at_);
  }
  _this->_impl_.is_enabled_ = from._impl_.is_enabled_;
  // @@protoc_insertion_point(copy_constructor:sonet.user.TwoFactorAuth)
}

inline void TwoFactorAuth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.backup_codes_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.qr_code_url_){}
    , decltype(_impl_.setup_at_){nullptr}
    , decltype(_impl_.is_enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.qr_code_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qr_code_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TwoFactorAuth::~TwoFactorAuth() {
  // @@protoc_insertion_point(destructor:sonet.user.TwoFactorAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TwoFactorAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.backup_codes_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.qr_code_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.setup_at_;
}

void TwoFactorAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TwoFactorAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.TwoFactorAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.backup_codes_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.qr_code_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.setup_at_ != nullptr) {
    delete _impl_.setup_at_;
  }
  _impl_.setup_at_ = nullptr;
  _impl_.is_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwoFactorAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.TwoFactorAuth.user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string qr_code_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_qr_code_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.TwoFactorAuth.qr_code_url"));
        } else
          goto handle_unusual;
        continue;
      // repeated string backup_codes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_backup_codes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.user.TwoFactorAuth.backup_codes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp setup_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_setup_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwoFactorAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.TwoFactorAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.TwoFactorAuth.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // bool is_enabled = 2;
  if (this->_internal_is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_enabled(), target);
  }

  // string qr_code_url = 3;
  if (!this->_internal_qr_code_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_qr_code_url().data(), static_cast<int>(this->_internal_qr_code_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.TwoFactorAuth.qr_code_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_qr_code_url(), target);
  }

  // repeated string backup_codes = 4;
  for (int i = 0, n = this->_internal_backup_codes_size(); i < n; i++) {
    const auto& s = this->_internal_backup_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.TwoFactorAuth.backup_codes");
    target = stream->WriteString(4, s, target);
  }

  // .sonet.common.Timestamp setup_at = 5;
  if (this->_internal_has_setup_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::setup_at(this),
        _Internal::setup_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.TwoFactorAuth)
  return target;
}

size_t TwoFactorAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.TwoFactorAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string backup_codes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.backup_codes_.size());
  for (int i = 0, n = _impl_.backup_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.backup_codes_.Get(i));
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string qr_code_url = 3;
  if (!this->_internal_qr_code_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_qr_code_url());
  }

  // .sonet.common.Timestamp setup_at = 5;
  if (this->_internal_has_setup_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setup_at_);
  }

  // bool is_enabled = 2;
  if (this->_internal_is_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwoFactorAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TwoFactorAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwoFactorAuth::GetClassData() const { return &_class_data_; }


void TwoFactorAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TwoFactorAuth*>(&to_msg);
  auto& from = static_cast<const TwoFactorAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.TwoFactorAuth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.backup_codes_.MergeFrom(from._impl_.backup_codes_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_qr_code_url().empty()) {
    _this->_internal_set_qr_code_url(from._internal_qr_code_url());
  }
  if (from._internal_has_setup_at()) {
    _this->_internal_mutable_setup_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_setup_at());
  }
  if (from._internal_is_enabled() != 0) {
    _this->_internal_set_is_enabled(from._internal_is_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwoFactorAuth::CopyFrom(const TwoFactorAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.TwoFactorAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoFactorAuth::IsInitialized() const {
  return true;
}

void TwoFactorAuth::InternalSwap(TwoFactorAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.backup_codes_.InternalSwap(&other->_impl_.backup_codes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.qr_code_url_, lhs_arena,
      &other->_impl_.qr_code_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwoFactorAuth, _impl_.is_enabled_)
      + sizeof(TwoFactorAuth::_impl_.is_enabled_)
      - PROTOBUF_FIELD_OFFSET(TwoFactorAuth, _impl_.setup_at_)>(
          reinterpret_cast<char*>(&_impl_.setup_at_),
          reinterpret_cast<char*>(&other->_impl_.setup_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoFactorAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[5]);
}

// ===================================================================

class RegisterUserRequest::_Internal {
 public:
};

RegisterUserRequest::RegisterUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.RegisterUserRequest)
}
RegisterUserRequest::RegisterUserRequest(const RegisterUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.invitation_code_){}
    , decltype(_impl_.accept_terms_){}
    , decltype(_impl_.accept_privacy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invitation_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitation_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_invitation_code().empty()) {
    _this->_impl_.invitation_code_.Set(from._internal_invitation_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accept_terms_, &from._impl_.accept_terms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accept_privacy_) -
    reinterpret_cast<char*>(&_impl_.accept_terms_)) + sizeof(_impl_.accept_privacy_));
  // @@protoc_insertion_point(copy_constructor:sonet.user.RegisterUserRequest)
}

inline void RegisterUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.invitation_code_){}
    , decltype(_impl_.accept_terms_){false}
    , decltype(_impl_.accept_privacy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitation_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitation_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterUserRequest::~RegisterUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.RegisterUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.invitation_code_.Destroy();
}

void RegisterUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.RegisterUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.invitation_code_.ClearToEmpty();
  ::memset(&_impl_.accept_terms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.accept_privacy_) -
      reinterpret_cast<char*>(&_impl_.accept_terms_)) + sizeof(_impl_.accept_privacy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RegisterUserRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RegisterUserRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RegisterUserRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RegisterUserRequest.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string invitation_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RegisterUserRequest.invitation_code"));
        } else
          goto handle_unusual;
        continue;
      // bool accept_terms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.accept_terms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool accept_privacy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.accept_privacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.RegisterUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RegisterUserRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RegisterUserRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RegisterUserRequest.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RegisterUserRequest.display_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_name(), target);
  }

  // string invitation_code = 5;
  if (!this->_internal_invitation_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RegisterUserRequest.invitation_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invitation_code(), target);
  }

  // bool accept_terms = 6;
  if (this->_internal_accept_terms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_accept_terms(), target);
  }

  // bool accept_privacy = 7;
  if (this->_internal_accept_privacy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_accept_privacy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.RegisterUserRequest)
  return target;
}

size_t RegisterUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.RegisterUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string invitation_code = 5;
  if (!this->_internal_invitation_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  // bool accept_terms = 6;
  if (this->_internal_accept_terms() != 0) {
    total_size += 1 + 1;
  }

  // bool accept_privacy = 7;
  if (this->_internal_accept_privacy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUserRequest::GetClassData() const { return &_class_data_; }


void RegisterUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterUserRequest*>(&to_msg);
  auto& from = static_cast<const RegisterUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.RegisterUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_invitation_code().empty()) {
    _this->_internal_set_invitation_code(from._internal_invitation_code());
  }
  if (from._internal_accept_terms() != 0) {
    _this->_internal_set_accept_terms(from._internal_accept_terms());
  }
  if (from._internal_accept_privacy() != 0) {
    _this->_internal_set_accept_privacy(from._internal_accept_privacy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUserRequest::CopyFrom(const RegisterUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.RegisterUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUserRequest::IsInitialized() const {
  return true;
}

void RegisterUserRequest::InternalSwap(RegisterUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitation_code_, lhs_arena,
      &other->_impl_.invitation_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterUserRequest, _impl_.accept_privacy_)
      + sizeof(RegisterUserRequest::_impl_.accept_privacy_)
      - PROTOBUF_FIELD_OFFSET(RegisterUserRequest, _impl_.accept_terms_)>(
          reinterpret_cast<char*>(&_impl_.accept_terms_),
          reinterpret_cast<char*>(&other->_impl_.accept_terms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[6]);
}

// ===================================================================

class RegisterUserResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const RegisterUserResponse* msg);
  static const ::sonet::user::UserProfile& user(const RegisterUserResponse* msg);
};

const ::sonet::common::Status&
RegisterUserResponse::_Internal::status(const RegisterUserResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::user::UserProfile&
RegisterUserResponse::_Internal::user(const RegisterUserResponse* msg) {
  return *msg->_impl_.user_;
}
void RegisterUserResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
RegisterUserResponse::RegisterUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.RegisterUserResponse)
}
RegisterUserResponse::RegisterUserResponse(const RegisterUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.verification_token_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.verification_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verification_token().empty()) {
    _this->_impl_.verification_token_.Set(from._internal_verification_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::sonet::user::UserProfile(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.RegisterUserResponse)
}

inline void RegisterUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.verification_token_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.verification_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterUserResponse::~RegisterUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.RegisterUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.verification_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RegisterUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.RegisterUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.verification_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.UserProfile user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verification_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_verification_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RegisterUserResponse.verification_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.RegisterUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // string verification_token = 3;
  if (!this->_internal_verification_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verification_token().data(), static_cast<int>(this->_internal_verification_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RegisterUserResponse.verification_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_verification_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.RegisterUserResponse)
  return target;
}

size_t RegisterUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.RegisterUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string verification_token = 3;
  if (!this->_internal_verification_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verification_token());
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUserResponse::GetClassData() const { return &_class_data_; }


void RegisterUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterUserResponse*>(&to_msg);
  auto& from = static_cast<const RegisterUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.RegisterUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_verification_token().empty()) {
    _this->_internal_set_verification_token(from._internal_verification_token());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::sonet::user::UserProfile::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUserResponse::CopyFrom(const RegisterUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.RegisterUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUserResponse::IsInitialized() const {
  return true;
}

void RegisterUserResponse::InternalSwap(RegisterUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verification_token_, lhs_arena,
      &other->_impl_.verification_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterUserResponse, _impl_.user_)
      + sizeof(RegisterUserResponse::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(RegisterUserResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[7]);
}

// ===================================================================

class LoginUserRequest::_Internal {
 public:
  static const ::sonet::user::AuthCredentials& credentials(const LoginUserRequest* msg);
};

const ::sonet::user::AuthCredentials&
LoginUserRequest::_Internal::credentials(const LoginUserRequest* msg) {
  return *msg->_impl_.credentials_;
}
LoginUserRequest::LoginUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.LoginUserRequest)
}
LoginUserRequest::LoginUserRequest(const LoginUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_){}
    , decltype(_impl_.credentials_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_credentials()) {
    _this->_impl_.credentials_ = new ::sonet::user::AuthCredentials(*from._impl_.credentials_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.LoginUserRequest)
}

inline void LoginUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_){}
    , decltype(_impl_.credentials_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginUserRequest::~LoginUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.LoginUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.credentials_;
}

void LoginUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.LoginUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.credentials_ != nullptr) {
    delete _impl_.credentials_;
  }
  _impl_.credentials_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.user.AuthCredentials credentials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_credentials(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.LoginUserRequest.device_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.LoginUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.user.AuthCredentials credentials = 1;
  if (this->_internal_has_credentials()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::credentials(this),
        _Internal::credentials(this).GetCachedSize(), target, stream);
  }

  // string device_name = 2;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.LoginUserRequest.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.LoginUserRequest)
  return target;
}

size_t LoginUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.LoginUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_name = 2;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .sonet.user.AuthCredentials credentials = 1;
  if (this->_internal_has_credentials()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.credentials_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginUserRequest::GetClassData() const { return &_class_data_; }


void LoginUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginUserRequest*>(&to_msg);
  auto& from = static_cast<const LoginUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.LoginUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_has_credentials()) {
    _this->_internal_mutable_credentials()->::sonet::user::AuthCredentials::MergeFrom(
        from._internal_credentials());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginUserRequest::CopyFrom(const LoginUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.LoginUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginUserRequest::IsInitialized() const {
  return true;
}

void LoginUserRequest::InternalSwap(LoginUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  swap(_impl_.credentials_, other->_impl_.credentials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[8]);
}

// ===================================================================

class LoginUserResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const LoginUserResponse* msg);
  static const ::sonet::user::Session& session(const LoginUserResponse* msg);
};

const ::sonet::common::Status&
LoginUserResponse::_Internal::status(const LoginUserResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::user::Session&
LoginUserResponse::_Internal::session(const LoginUserResponse* msg) {
  return *msg->_impl_.session_;
}
void LoginUserResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
LoginUserResponse::LoginUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.LoginUserResponse)
}
LoginUserResponse::LoginUserResponse(const LoginUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.access_token_){}
    , decltype(_impl_.refresh_token_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.session_){nullptr}
    , decltype(_impl_.expires_in_){}
    , decltype(_impl_.requires_2fa_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_token().empty()) {
    _this->_impl_.access_token_.Set(from._internal_access_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.refresh_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refresh_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_refresh_token().empty()) {
    _this->_impl_.refresh_token_.Set(from._internal_refresh_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_session()) {
    _this->_impl_.session_ = new ::sonet::user::Session(*from._impl_.session_);
  }
  ::memcpy(&_impl_.expires_in_, &from._impl_.expires_in_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requires_2fa_) -
    reinterpret_cast<char*>(&_impl_.expires_in_)) + sizeof(_impl_.requires_2fa_));
  // @@protoc_insertion_point(copy_constructor:sonet.user.LoginUserResponse)
}

inline void LoginUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.access_token_){}
    , decltype(_impl_.refresh_token_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.session_){nullptr}
    , decltype(_impl_.expires_in_){0}
    , decltype(_impl_.requires_2fa_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.refresh_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refresh_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginUserResponse::~LoginUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.LoginUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.access_token_.Destroy();
  _impl_.refresh_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.session_;
}

void LoginUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.LoginUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_token_.ClearToEmpty();
  _impl_.refresh_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.session_ != nullptr) {
    delete _impl_.session_;
  }
  _impl_.session_ = nullptr;
  ::memset(&_impl_.expires_in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.requires_2fa_) -
      reinterpret_cast<char*>(&_impl_.expires_in_)) + sizeof(_impl_.requires_2fa_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_access_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.LoginUserResponse.access_token"));
        } else
          goto handle_unusual;
        continue;
      // string refresh_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_refresh_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.LoginUserResponse.refresh_token"));
        } else
          goto handle_unusual;
        continue;
      // int32 expires_in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.expires_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.Session session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool requires_2fa = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.requires_2fa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.LoginUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.LoginUserResponse.access_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access_token(), target);
  }

  // string refresh_token = 3;
  if (!this->_internal_refresh_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_token().data(), static_cast<int>(this->_internal_refresh_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.LoginUserResponse.refresh_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_refresh_token(), target);
  }

  // int32 expires_in = 4;
  if (this->_internal_expires_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_expires_in(), target);
  }

  // .sonet.user.Session session = 5;
  if (this->_internal_has_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::session(this),
        _Internal::session(this).GetCachedSize(), target, stream);
  }

  // bool requires_2fa = 6;
  if (this->_internal_requires_2fa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_requires_2fa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.LoginUserResponse)
  return target;
}

size_t LoginUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.LoginUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string refresh_token = 3;
  if (!this->_internal_refresh_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh_token());
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.user.Session session = 5;
  if (this->_internal_has_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.session_);
  }

  // int32 expires_in = 4;
  if (this->_internal_expires_in() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expires_in());
  }

  // bool requires_2fa = 6;
  if (this->_internal_requires_2fa() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginUserResponse::GetClassData() const { return &_class_data_; }


void LoginUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginUserResponse*>(&to_msg);
  auto& from = static_cast<const LoginUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.LoginUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_access_token().empty()) {
    _this->_internal_set_access_token(from._internal_access_token());
  }
  if (!from._internal_refresh_token().empty()) {
    _this->_internal_set_refresh_token(from._internal_refresh_token());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_session()) {
    _this->_internal_mutable_session()->::sonet::user::Session::MergeFrom(
        from._internal_session());
  }
  if (from._internal_expires_in() != 0) {
    _this->_internal_set_expires_in(from._internal_expires_in());
  }
  if (from._internal_requires_2fa() != 0) {
    _this->_internal_set_requires_2fa(from._internal_requires_2fa());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginUserResponse::CopyFrom(const LoginUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.LoginUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginUserResponse::IsInitialized() const {
  return true;
}

void LoginUserResponse::InternalSwap(LoginUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_token_, lhs_arena,
      &other->_impl_.access_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.refresh_token_, lhs_arena,
      &other->_impl_.refresh_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginUserResponse, _impl_.requires_2fa_)
      + sizeof(LoginUserResponse::_impl_.requires_2fa_)
      - PROTOBUF_FIELD_OFFSET(LoginUserResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[9]);
}

// ===================================================================

class VerifyTokenRequest::_Internal {
 public:
};

VerifyTokenRequest::VerifyTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.VerifyTokenRequest)
}
VerifyTokenRequest::VerifyTokenRequest(const VerifyTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.VerifyTokenRequest)
}

inline void VerifyTokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyTokenRequest::~VerifyTokenRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.VerifyTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void VerifyTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.VerifyTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.VerifyTokenRequest.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.VerifyTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.VerifyTokenRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.VerifyTokenRequest)
  return target;
}

size_t VerifyTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.VerifyTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyTokenRequest::GetClassData() const { return &_class_data_; }


void VerifyTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyTokenRequest*>(&to_msg);
  auto& from = static_cast<const VerifyTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.VerifyTokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyTokenRequest::CopyFrom(const VerifyTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.VerifyTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyTokenRequest::IsInitialized() const {
  return true;
}

void VerifyTokenRequest::InternalSwap(VerifyTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[10]);
}

// ===================================================================

class VerifyTokenResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const VerifyTokenResponse* msg);
  static const ::sonet::user::UserProfile& user(const VerifyTokenResponse* msg);
  static const ::sonet::user::Session& session(const VerifyTokenResponse* msg);
};

const ::sonet::common::Status&
VerifyTokenResponse::_Internal::status(const VerifyTokenResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::user::UserProfile&
VerifyTokenResponse::_Internal::user(const VerifyTokenResponse* msg) {
  return *msg->_impl_.user_;
}
const ::sonet::user::Session&
VerifyTokenResponse::_Internal::session(const VerifyTokenResponse* msg) {
  return *msg->_impl_.session_;
}
void VerifyTokenResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
VerifyTokenResponse::VerifyTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.VerifyTokenResponse)
}
VerifyTokenResponse::VerifyTokenResponse(const VerifyTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyTokenResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.session_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::sonet::user::UserProfile(*from._impl_.user_);
  }
  if (from._internal_has_session()) {
    _this->_impl_.session_ = new ::sonet::user::Session(*from._impl_.session_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.VerifyTokenResponse)
}

inline void VerifyTokenResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.session_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VerifyTokenResponse::~VerifyTokenResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.VerifyTokenResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.session_;
}

void VerifyTokenResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.VerifyTokenResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.session_ != nullptr) {
    delete _impl_.session_;
  }
  _impl_.session_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyTokenResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.UserProfile user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.Session session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyTokenResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.VerifyTokenResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .sonet.user.Session session = 3;
  if (this->_internal_has_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::session(this),
        _Internal::session(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.VerifyTokenResponse)
  return target;
}

size_t VerifyTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.VerifyTokenResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .sonet.user.Session session = 3;
  if (this->_internal_has_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.session_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyTokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyTokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyTokenResponse::GetClassData() const { return &_class_data_; }


void VerifyTokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyTokenResponse*>(&to_msg);
  auto& from = static_cast<const VerifyTokenResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.VerifyTokenResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::sonet::user::UserProfile::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_session()) {
    _this->_internal_mutable_session()->::sonet::user::Session::MergeFrom(
        from._internal_session());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyTokenResponse::CopyFrom(const VerifyTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.VerifyTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyTokenResponse::IsInitialized() const {
  return true;
}

void VerifyTokenResponse::InternalSwap(VerifyTokenResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyTokenResponse, _impl_.session_)
      + sizeof(VerifyTokenResponse::_impl_.session_)
      - PROTOBUF_FIELD_OFFSET(VerifyTokenResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyTokenResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[11]);
}

// ===================================================================

class RefreshTokenRequest::_Internal {
 public:
};

RefreshTokenRequest::RefreshTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.RefreshTokenRequest)
}
RefreshTokenRequest::RefreshTokenRequest(const RefreshTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RefreshTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refresh_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.refresh_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refresh_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_refresh_token().empty()) {
    _this->_impl_.refresh_token_.Set(from._internal_refresh_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.RefreshTokenRequest)
}

inline void RefreshTokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refresh_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.refresh_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refresh_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RefreshTokenRequest::~RefreshTokenRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.RefreshTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RefreshTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refresh_token_.Destroy();
}

void RefreshTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RefreshTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.RefreshTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refresh_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string refresh_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_refresh_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RefreshTokenRequest.refresh_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.RefreshTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string refresh_token = 1;
  if (!this->_internal_refresh_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_token().data(), static_cast<int>(this->_internal_refresh_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RefreshTokenRequest.refresh_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_refresh_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.RefreshTokenRequest)
  return target;
}

size_t RefreshTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.RefreshTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string refresh_token = 1;
  if (!this->_internal_refresh_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RefreshTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshTokenRequest::GetClassData() const { return &_class_data_; }


void RefreshTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RefreshTokenRequest*>(&to_msg);
  auto& from = static_cast<const RefreshTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.RefreshTokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_refresh_token().empty()) {
    _this->_internal_set_refresh_token(from._internal_refresh_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshTokenRequest::CopyFrom(const RefreshTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.RefreshTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTokenRequest::IsInitialized() const {
  return true;
}

void RefreshTokenRequest::InternalSwap(RefreshTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.refresh_token_, lhs_arena,
      &other->_impl_.refresh_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[12]);
}

// ===================================================================

class RefreshTokenResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const RefreshTokenResponse* msg);
};

const ::sonet::common::Status&
RefreshTokenResponse::_Internal::status(const RefreshTokenResponse* msg) {
  return *msg->_impl_.status_;
}
void RefreshTokenResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
RefreshTokenResponse::RefreshTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.RefreshTokenResponse)
}
RefreshTokenResponse::RefreshTokenResponse(const RefreshTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RefreshTokenResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.access_token_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.expires_in_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_token().empty()) {
    _this->_impl_.access_token_.Set(from._internal_access_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  _this->_impl_.expires_in_ = from._impl_.expires_in_;
  // @@protoc_insertion_point(copy_constructor:sonet.user.RefreshTokenResponse)
}

inline void RefreshTokenResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.access_token_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.expires_in_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RefreshTokenResponse::~RefreshTokenResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.RefreshTokenResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RefreshTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.access_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void RefreshTokenResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RefreshTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.RefreshTokenResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.expires_in_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshTokenResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_access_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.RefreshTokenResponse.access_token"));
        } else
          goto handle_unusual;
        continue;
      // int32 expires_in = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expires_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshTokenResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.RefreshTokenResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.RefreshTokenResponse.access_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access_token(), target);
  }

  // int32 expires_in = 3;
  if (this->_internal_expires_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_expires_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.RefreshTokenResponse)
  return target;
}

size_t RefreshTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.RefreshTokenResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 expires_in = 3;
  if (this->_internal_expires_in() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expires_in());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshTokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RefreshTokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshTokenResponse::GetClassData() const { return &_class_data_; }


void RefreshTokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RefreshTokenResponse*>(&to_msg);
  auto& from = static_cast<const RefreshTokenResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.RefreshTokenResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_access_token().empty()) {
    _this->_internal_set_access_token(from._internal_access_token());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_expires_in() != 0) {
    _this->_internal_set_expires_in(from._internal_expires_in());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshTokenResponse::CopyFrom(const RefreshTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.RefreshTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTokenResponse::IsInitialized() const {
  return true;
}

void RefreshTokenResponse::InternalSwap(RefreshTokenResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_token_, lhs_arena,
      &other->_impl_.access_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.expires_in_)
      + sizeof(RefreshTokenResponse::_impl_.expires_in_)
      - PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshTokenResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[13]);
}

// ===================================================================

class LogoutRequest::_Internal {
 public:
};

LogoutRequest::LogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.logout_all_devices_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.logout_all_devices_ = from._impl_.logout_all_devices_;
  // @@protoc_insertion_point(copy_constructor:sonet.user.LogoutRequest)
}

inline void LogoutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.logout_all_devices_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.LogoutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
}

void LogoutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.LogoutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.logout_all_devices_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.LogoutRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      // bool logout_all_devices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.logout_all_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.LogoutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.LogoutRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // bool logout_all_devices = 2;
  if (this->_internal_logout_all_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_logout_all_devices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.LogoutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bool logout_all_devices = 2;
  if (this->_internal_logout_all_devices() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutRequest::GetClassData() const { return &_class_data_; }


void LogoutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutRequest*>(&to_msg);
  auto& from = static_cast<const LogoutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_logout_all_devices() != 0) {
    _this->_internal_set_logout_all_devices(from._internal_logout_all_devices());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.logout_all_devices_, other->_impl_.logout_all_devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[14]);
}

// ===================================================================

class LogoutResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const LogoutResponse* msg);
};

const ::sonet::common::Status&
LogoutResponse::_Internal::status(const LogoutResponse* msg) {
  return *msg->_impl_.status_;
}
void LogoutResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
LogoutResponse::LogoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.LogoutResponse)
}
LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.LogoutResponse)
}

inline void LogoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.LogoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void LogoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.LogoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.LogoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.LogoutResponse)
  return target;
}

size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.LogoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutResponse::GetClassData() const { return &_class_data_; }


void LogoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutResponse*>(&to_msg);
  auto& from = static_cast<const LogoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  return true;
}

void LogoutResponse::InternalSwap(LogoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[15]);
}

// ===================================================================

class ChangePasswordRequest::_Internal {
 public:
};

ChangePasswordRequest::ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ChangePasswordRequest)
}
ChangePasswordRequest::ChangePasswordRequest(const ChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangePasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.old_password_){}
    , decltype(_impl_.new_password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.old_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_password().empty()) {
    _this->_impl_.old_password_.Set(from._internal_old_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_password().empty()) {
    _this->_impl_.new_password_.Set(from._internal_new_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ChangePasswordRequest)
}

inline void ChangePasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.old_password_){}
    , decltype(_impl_.new_password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.old_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangePasswordRequest::~ChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.ChangePasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_password_.Destroy();
  _impl_.new_password_.Destroy();
}

void ChangePasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_password_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string old_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_old_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ChangePasswordRequest.old_password"));
        } else
          goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ChangePasswordRequest.new_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangePasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_password = 1;
  if (!this->_internal_old_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_password().data(), static_cast<int>(this->_internal_old_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ChangePasswordRequest.old_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_old_password(), target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ChangePasswordRequest.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ChangePasswordRequest)
  return target;
}

size_t ChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ChangePasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_password = 1;
  if (!this->_internal_old_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_password());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangePasswordRequest::GetClassData() const { return &_class_data_; }


void ChangePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangePasswordRequest*>(&to_msg);
  auto& from = static_cast<const ChangePasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_old_password().empty()) {
    _this->_internal_set_old_password(from._internal_old_password());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePasswordRequest::CopyFrom(const ChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordRequest::IsInitialized() const {
  return true;
}

void ChangePasswordRequest::InternalSwap(ChangePasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_password_, lhs_arena,
      &other->_impl_.old_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_password_, lhs_arena,
      &other->_impl_.new_password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[16]);
}

// ===================================================================

class ChangePasswordResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const ChangePasswordResponse* msg);
};

const ::sonet::common::Status&
ChangePasswordResponse::_Internal::status(const ChangePasswordResponse* msg) {
  return *msg->_impl_.status_;
}
void ChangePasswordResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ChangePasswordResponse::ChangePasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ChangePasswordResponse)
}
ChangePasswordResponse::ChangePasswordResponse(const ChangePasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangePasswordResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ChangePasswordResponse)
}

inline void ChangePasswordResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChangePasswordResponse::~ChangePasswordResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.ChangePasswordResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangePasswordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ChangePasswordResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangePasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ChangePasswordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePasswordResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangePasswordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ChangePasswordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ChangePasswordResponse)
  return target;
}

size_t ChangePasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ChangePasswordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangePasswordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangePasswordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangePasswordResponse::GetClassData() const { return &_class_data_; }


void ChangePasswordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangePasswordResponse*>(&to_msg);
  auto& from = static_cast<const ChangePasswordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePasswordResponse::CopyFrom(const ChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordResponse::IsInitialized() const {
  return true;
}

void ChangePasswordResponse::InternalSwap(ChangePasswordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePasswordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[17]);
}

// ===================================================================

class ResetPasswordRequest::_Internal {
 public:
};

ResetPasswordRequest::ResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ResetPasswordRequest)
}
ResetPasswordRequest::ResetPasswordRequest(const ResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ResetPasswordRequest)
}

inline void ResetPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResetPasswordRequest::~ResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.ResetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void ResetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ResetPasswordRequest.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ResetPasswordRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ResetPasswordRequest)
  return target;
}

size_t ResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ResetPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetPasswordRequest::GetClassData() const { return &_class_data_; }


void ResetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const ResetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetPasswordRequest::CopyFrom(const ResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPasswordRequest::IsInitialized() const {
  return true;
}

void ResetPasswordRequest::InternalSwap(ResetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[18]);
}

// ===================================================================

class ResetPasswordResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const ResetPasswordResponse* msg);
};

const ::sonet::common::Status&
ResetPasswordResponse::_Internal::status(const ResetPasswordResponse* msg) {
  return *msg->_impl_.status_;
}
void ResetPasswordResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ResetPasswordResponse::ResetPasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ResetPasswordResponse)
}
ResetPasswordResponse::ResetPasswordResponse(const ResetPasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetPasswordResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_token_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reset_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reset_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reset_token().empty()) {
    _this->_impl_.reset_token_.Set(from._internal_reset_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ResetPasswordResponse)
}

inline void ResetPasswordResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_token_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reset_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reset_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResetPasswordResponse::~ResetPasswordResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.ResetPasswordResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetPasswordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reset_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ResetPasswordResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetPasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ResetPasswordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reset_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetPasswordResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reset_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reset_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ResetPasswordResponse.reset_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetPasswordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ResetPasswordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string reset_token = 2;
  if (!this->_internal_reset_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_token().data(), static_cast<int>(this->_internal_reset_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ResetPasswordResponse.reset_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reset_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ResetPasswordResponse)
  return target;
}

size_t ResetPasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ResetPasswordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reset_token = 2;
  if (!this->_internal_reset_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_token());
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetPasswordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetPasswordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetPasswordResponse::GetClassData() const { return &_class_data_; }


void ResetPasswordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetPasswordResponse*>(&to_msg);
  auto& from = static_cast<const ResetPasswordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ResetPasswordResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reset_token().empty()) {
    _this->_internal_set_reset_token(from._internal_reset_token());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetPasswordResponse::CopyFrom(const ResetPasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ResetPasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPasswordResponse::IsInitialized() const {
  return true;
}

void ResetPasswordResponse::InternalSwap(ResetPasswordResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reset_token_, lhs_arena,
      &other->_impl_.reset_token_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetPasswordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[19]);
}

// ===================================================================

class ConfirmPasswordResetRequest::_Internal {
 public:
};

ConfirmPasswordResetRequest::ConfirmPasswordResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ConfirmPasswordResetRequest)
}
ConfirmPasswordResetRequest::ConfirmPasswordResetRequest(const ConfirmPasswordResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmPasswordResetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_token_){}
    , decltype(_impl_.new_password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reset_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reset_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reset_token().empty()) {
    _this->_impl_.reset_token_.Set(from._internal_reset_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_password().empty()) {
    _this->_impl_.new_password_.Set(from._internal_new_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ConfirmPasswordResetRequest)
}

inline void ConfirmPasswordResetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_token_){}
    , decltype(_impl_.new_password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reset_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reset_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfirmPasswordResetRequest::~ConfirmPasswordResetRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.ConfirmPasswordResetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmPasswordResetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reset_token_.Destroy();
  _impl_.new_password_.Destroy();
}

void ConfirmPasswordResetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmPasswordResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ConfirmPasswordResetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reset_token_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmPasswordResetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reset_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reset_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ConfirmPasswordResetRequest.reset_token"));
        } else
          goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ConfirmPasswordResetRequest.new_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmPasswordResetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ConfirmPasswordResetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reset_token = 1;
  if (!this->_internal_reset_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_token().data(), static_cast<int>(this->_internal_reset_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ConfirmPasswordResetRequest.reset_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reset_token(), target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ConfirmPasswordResetRequest.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ConfirmPasswordResetRequest)
  return target;
}

size_t ConfirmPasswordResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ConfirmPasswordResetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reset_token = 1;
  if (!this->_internal_reset_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_token());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmPasswordResetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmPasswordResetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmPasswordResetRequest::GetClassData() const { return &_class_data_; }


void ConfirmPasswordResetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmPasswordResetRequest*>(&to_msg);
  auto& from = static_cast<const ConfirmPasswordResetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ConfirmPasswordResetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reset_token().empty()) {
    _this->_internal_set_reset_token(from._internal_reset_token());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmPasswordResetRequest::CopyFrom(const ConfirmPasswordResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ConfirmPasswordResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmPasswordResetRequest::IsInitialized() const {
  return true;
}

void ConfirmPasswordResetRequest::InternalSwap(ConfirmPasswordResetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reset_token_, lhs_arena,
      &other->_impl_.reset_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_password_, lhs_arena,
      &other->_impl_.new_password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmPasswordResetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[20]);
}

// ===================================================================

class ConfirmPasswordResetResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const ConfirmPasswordResetResponse* msg);
};

const ::sonet::common::Status&
ConfirmPasswordResetResponse::_Internal::status(const ConfirmPasswordResetResponse* msg) {
  return *msg->_impl_.status_;
}
void ConfirmPasswordResetResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ConfirmPasswordResetResponse::ConfirmPasswordResetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ConfirmPasswordResetResponse)
}
ConfirmPasswordResetResponse::ConfirmPasswordResetResponse(const ConfirmPasswordResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmPasswordResetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ConfirmPasswordResetResponse)
}

inline void ConfirmPasswordResetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfirmPasswordResetResponse::~ConfirmPasswordResetResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.ConfirmPasswordResetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmPasswordResetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ConfirmPasswordResetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmPasswordResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ConfirmPasswordResetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmPasswordResetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmPasswordResetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ConfirmPasswordResetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ConfirmPasswordResetResponse)
  return target;
}

size_t ConfirmPasswordResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ConfirmPasswordResetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmPasswordResetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmPasswordResetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmPasswordResetResponse::GetClassData() const { return &_class_data_; }


void ConfirmPasswordResetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmPasswordResetResponse*>(&to_msg);
  auto& from = static_cast<const ConfirmPasswordResetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ConfirmPasswordResetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmPasswordResetResponse::CopyFrom(const ConfirmPasswordResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ConfirmPasswordResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmPasswordResetResponse::IsInitialized() const {
  return true;
}

void ConfirmPasswordResetResponse::InternalSwap(ConfirmPasswordResetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmPasswordResetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[21]);
}

// ===================================================================

class VerifyEmailRequest::_Internal {
 public:
};

VerifyEmailRequest::VerifyEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.VerifyEmailRequest)
}
VerifyEmailRequest::VerifyEmailRequest(const VerifyEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.verification_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.verification_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verification_token().empty()) {
    _this->_impl_.verification_token_.Set(from._internal_verification_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.VerifyEmailRequest)
}

inline void VerifyEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.verification_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.verification_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verification_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyEmailRequest::~VerifyEmailRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.VerifyEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.verification_token_.Destroy();
}

void VerifyEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.VerifyEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.verification_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string verification_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_verification_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.VerifyEmailRequest.verification_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.VerifyEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string verification_token = 1;
  if (!this->_internal_verification_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verification_token().data(), static_cast<int>(this->_internal_verification_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.VerifyEmailRequest.verification_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_verification_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.VerifyEmailRequest)
  return target;
}

size_t VerifyEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.VerifyEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string verification_token = 1;
  if (!this->_internal_verification_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verification_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyEmailRequest::GetClassData() const { return &_class_data_; }


void VerifyEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyEmailRequest*>(&to_msg);
  auto& from = static_cast<const VerifyEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.VerifyEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_verification_token().empty()) {
    _this->_internal_set_verification_token(from._internal_verification_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyEmailRequest::CopyFrom(const VerifyEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.VerifyEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyEmailRequest::IsInitialized() const {
  return true;
}

void VerifyEmailRequest::InternalSwap(VerifyEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verification_token_, lhs_arena,
      &other->_impl_.verification_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[22]);
}

// ===================================================================

class VerifyEmailResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const VerifyEmailResponse* msg);
};

const ::sonet::common::Status&
VerifyEmailResponse::_Internal::status(const VerifyEmailResponse* msg) {
  return *msg->_impl_.status_;
}
void VerifyEmailResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
VerifyEmailResponse::VerifyEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.VerifyEmailResponse)
}
VerifyEmailResponse::VerifyEmailResponse(const VerifyEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyEmailResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.VerifyEmailResponse)
}

inline void VerifyEmailResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VerifyEmailResponse::~VerifyEmailResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.VerifyEmailResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyEmailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void VerifyEmailResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.VerifyEmailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyEmailResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyEmailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.VerifyEmailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.VerifyEmailResponse)
  return target;
}

size_t VerifyEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.VerifyEmailResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyEmailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyEmailResponse::GetClassData() const { return &_class_data_; }


void VerifyEmailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyEmailResponse*>(&to_msg);
  auto& from = static_cast<const VerifyEmailResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.VerifyEmailResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyEmailResponse::CopyFrom(const VerifyEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.VerifyEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyEmailResponse::IsInitialized() const {
  return true;
}

void VerifyEmailResponse::InternalSwap(VerifyEmailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyEmailResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[23]);
}

// ===================================================================

class ResendVerificationRequest::_Internal {
 public:
};

ResendVerificationRequest::ResendVerificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ResendVerificationRequest)
}
ResendVerificationRequest::ResendVerificationRequest(const ResendVerificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResendVerificationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ResendVerificationRequest)
}

inline void ResendVerificationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResendVerificationRequest::~ResendVerificationRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.ResendVerificationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResendVerificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void ResendVerificationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResendVerificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ResendVerificationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResendVerificationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.ResendVerificationRequest.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResendVerificationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ResendVerificationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.ResendVerificationRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ResendVerificationRequest)
  return target;
}

size_t ResendVerificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ResendVerificationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResendVerificationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResendVerificationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResendVerificationRequest::GetClassData() const { return &_class_data_; }


void ResendVerificationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResendVerificationRequest*>(&to_msg);
  auto& from = static_cast<const ResendVerificationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ResendVerificationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResendVerificationRequest::CopyFrom(const ResendVerificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ResendVerificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResendVerificationRequest::IsInitialized() const {
  return true;
}

void ResendVerificationRequest::InternalSwap(ResendVerificationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResendVerificationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[24]);
}

// ===================================================================

class ResendVerificationResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const ResendVerificationResponse* msg);
};

const ::sonet::common::Status&
ResendVerificationResponse::_Internal::status(const ResendVerificationResponse* msg) {
  return *msg->_impl_.status_;
}
void ResendVerificationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ResendVerificationResponse::ResendVerificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.ResendVerificationResponse)
}
ResendVerificationResponse::ResendVerificationResponse(const ResendVerificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResendVerificationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.ResendVerificationResponse)
}

inline void ResendVerificationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResendVerificationResponse::~ResendVerificationResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.ResendVerificationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResendVerificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ResendVerificationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResendVerificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.ResendVerificationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResendVerificationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResendVerificationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.ResendVerificationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.ResendVerificationResponse)
  return target;
}

size_t ResendVerificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.ResendVerificationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResendVerificationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResendVerificationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResendVerificationResponse::GetClassData() const { return &_class_data_; }


void ResendVerificationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResendVerificationResponse*>(&to_msg);
  auto& from = static_cast<const ResendVerificationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.ResendVerificationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResendVerificationResponse::CopyFrom(const ResendVerificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.ResendVerificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResendVerificationResponse::IsInitialized() const {
  return true;
}

void ResendVerificationResponse::InternalSwap(ResendVerificationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResendVerificationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[25]);
}

// ===================================================================

class SetupTwoFactorRequest::_Internal {
 public:
};

SetupTwoFactorRequest::SetupTwoFactorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.SetupTwoFactorRequest)
}
SetupTwoFactorRequest::SetupTwoFactorRequest(const SetupTwoFactorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupTwoFactorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.SetupTwoFactorRequest)
}

inline void SetupTwoFactorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetupTwoFactorRequest::~SetupTwoFactorRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.SetupTwoFactorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupTwoFactorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void SetupTwoFactorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupTwoFactorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.SetupTwoFactorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupTwoFactorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.SetupTwoFactorRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupTwoFactorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.SetupTwoFactorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.SetupTwoFactorRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.SetupTwoFactorRequest)
  return target;
}

size_t SetupTwoFactorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.SetupTwoFactorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupTwoFactorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupTwoFactorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupTwoFactorRequest::GetClassData() const { return &_class_data_; }


void SetupTwoFactorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupTwoFactorRequest*>(&to_msg);
  auto& from = static_cast<const SetupTwoFactorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.SetupTwoFactorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupTwoFactorRequest::CopyFrom(const SetupTwoFactorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.SetupTwoFactorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupTwoFactorRequest::IsInitialized() const {
  return true;
}

void SetupTwoFactorRequest::InternalSwap(SetupTwoFactorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupTwoFactorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[26]);
}

// ===================================================================

class SetupTwoFactorResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const SetupTwoFactorResponse* msg);
  static const ::sonet::user::TwoFactorAuth& tfa_config(const SetupTwoFactorResponse* msg);
};

const ::sonet::common::Status&
SetupTwoFactorResponse::_Internal::status(const SetupTwoFactorResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::user::TwoFactorAuth&
SetupTwoFactorResponse::_Internal::tfa_config(const SetupTwoFactorResponse* msg) {
  return *msg->_impl_.tfa_config_;
}
void SetupTwoFactorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SetupTwoFactorResponse::SetupTwoFactorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.SetupTwoFactorResponse)
}
SetupTwoFactorResponse::SetupTwoFactorResponse(const SetupTwoFactorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupTwoFactorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.tfa_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_tfa_config()) {
    _this->_impl_.tfa_config_ = new ::sonet::user::TwoFactorAuth(*from._impl_.tfa_config_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.SetupTwoFactorResponse)
}

inline void SetupTwoFactorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.tfa_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupTwoFactorResponse::~SetupTwoFactorResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.SetupTwoFactorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupTwoFactorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.tfa_config_;
}

void SetupTwoFactorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupTwoFactorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.SetupTwoFactorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tfa_config_ != nullptr) {
    delete _impl_.tfa_config_;
  }
  _impl_.tfa_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupTwoFactorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.TwoFactorAuth tfa_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tfa_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupTwoFactorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.SetupTwoFactorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.user.TwoFactorAuth tfa_config = 2;
  if (this->_internal_has_tfa_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tfa_config(this),
        _Internal::tfa_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.SetupTwoFactorResponse)
  return target;
}

size_t SetupTwoFactorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.SetupTwoFactorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.user.TwoFactorAuth tfa_config = 2;
  if (this->_internal_has_tfa_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tfa_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupTwoFactorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupTwoFactorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupTwoFactorResponse::GetClassData() const { return &_class_data_; }


void SetupTwoFactorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupTwoFactorResponse*>(&to_msg);
  auto& from = static_cast<const SetupTwoFactorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.SetupTwoFactorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_tfa_config()) {
    _this->_internal_mutable_tfa_config()->::sonet::user::TwoFactorAuth::MergeFrom(
        from._internal_tfa_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupTwoFactorResponse::CopyFrom(const SetupTwoFactorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.SetupTwoFactorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupTwoFactorResponse::IsInitialized() const {
  return true;
}

void SetupTwoFactorResponse::InternalSwap(SetupTwoFactorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupTwoFactorResponse, _impl_.tfa_config_)
      + sizeof(SetupTwoFactorResponse::_impl_.tfa_config_)
      - PROTOBUF_FIELD_OFFSET(SetupTwoFactorResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupTwoFactorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[27]);
}

// ===================================================================

class VerifyTwoFactorRequest::_Internal {
 public:
};

VerifyTwoFactorRequest::VerifyTwoFactorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.VerifyTwoFactorRequest)
}
VerifyTwoFactorRequest::VerifyTwoFactorRequest(const VerifyTwoFactorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyTwoFactorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.VerifyTwoFactorRequest)
}

inline void VerifyTwoFactorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyTwoFactorRequest::~VerifyTwoFactorRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.VerifyTwoFactorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyTwoFactorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.code_.Destroy();
}

void VerifyTwoFactorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyTwoFactorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.VerifyTwoFactorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyTwoFactorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.VerifyTwoFactorRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.VerifyTwoFactorRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyTwoFactorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.VerifyTwoFactorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.VerifyTwoFactorRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.VerifyTwoFactorRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.VerifyTwoFactorRequest)
  return target;
}

size_t VerifyTwoFactorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.VerifyTwoFactorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyTwoFactorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyTwoFactorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyTwoFactorRequest::GetClassData() const { return &_class_data_; }


void VerifyTwoFactorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyTwoFactorRequest*>(&to_msg);
  auto& from = static_cast<const VerifyTwoFactorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.VerifyTwoFactorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyTwoFactorRequest::CopyFrom(const VerifyTwoFactorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.VerifyTwoFactorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyTwoFactorRequest::IsInitialized() const {
  return true;
}

void VerifyTwoFactorRequest::InternalSwap(VerifyTwoFactorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyTwoFactorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[28]);
}

// ===================================================================

class VerifyTwoFactorResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const VerifyTwoFactorResponse* msg);
};

const ::sonet::common::Status&
VerifyTwoFactorResponse::_Internal::status(const VerifyTwoFactorResponse* msg) {
  return *msg->_impl_.status_;
}
void VerifyTwoFactorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
VerifyTwoFactorResponse::VerifyTwoFactorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.VerifyTwoFactorResponse)
}
VerifyTwoFactorResponse::VerifyTwoFactorResponse(const VerifyTwoFactorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyTwoFactorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.is_verified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  _this->_impl_.is_verified_ = from._impl_.is_verified_;
  // @@protoc_insertion_point(copy_constructor:sonet.user.VerifyTwoFactorResponse)
}

inline void VerifyTwoFactorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.is_verified_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VerifyTwoFactorResponse::~VerifyTwoFactorResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.VerifyTwoFactorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyTwoFactorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void VerifyTwoFactorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyTwoFactorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.VerifyTwoFactorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.is_verified_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyTwoFactorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_verified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyTwoFactorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.VerifyTwoFactorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bool is_verified = 2;
  if (this->_internal_is_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.VerifyTwoFactorResponse)
  return target;
}

size_t VerifyTwoFactorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.VerifyTwoFactorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // bool is_verified = 2;
  if (this->_internal_is_verified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyTwoFactorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyTwoFactorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyTwoFactorResponse::GetClassData() const { return &_class_data_; }


void VerifyTwoFactorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyTwoFactorResponse*>(&to_msg);
  auto& from = static_cast<const VerifyTwoFactorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.VerifyTwoFactorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_is_verified() != 0) {
    _this->_internal_set_is_verified(from._internal_is_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyTwoFactorResponse::CopyFrom(const VerifyTwoFactorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.VerifyTwoFactorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyTwoFactorResponse::IsInitialized() const {
  return true;
}

void VerifyTwoFactorResponse::InternalSwap(VerifyTwoFactorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyTwoFactorResponse, _impl_.is_verified_)
      + sizeof(VerifyTwoFactorResponse::_impl_.is_verified_)
      - PROTOBUF_FIELD_OFFSET(VerifyTwoFactorResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyTwoFactorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[29]);
}

// ===================================================================

class DisableTwoFactorRequest::_Internal {
 public:
};

DisableTwoFactorRequest::DisableTwoFactorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.DisableTwoFactorRequest)
}
DisableTwoFactorRequest::DisableTwoFactorRequest(const DisableTwoFactorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisableTwoFactorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.DisableTwoFactorRequest)
}

inline void DisableTwoFactorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisableTwoFactorRequest::~DisableTwoFactorRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.DisableTwoFactorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableTwoFactorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void DisableTwoFactorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableTwoFactorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.DisableTwoFactorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisableTwoFactorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.DisableTwoFactorRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisableTwoFactorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.DisableTwoFactorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.DisableTwoFactorRequest.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.DisableTwoFactorRequest)
  return target;
}

size_t DisableTwoFactorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.DisableTwoFactorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 1;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisableTwoFactorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisableTwoFactorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisableTwoFactorRequest::GetClassData() const { return &_class_data_; }


void DisableTwoFactorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisableTwoFactorRequest*>(&to_msg);
  auto& from = static_cast<const DisableTwoFactorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.DisableTwoFactorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisableTwoFactorRequest::CopyFrom(const DisableTwoFactorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.DisableTwoFactorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTwoFactorRequest::IsInitialized() const {
  return true;
}

void DisableTwoFactorRequest::InternalSwap(DisableTwoFactorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableTwoFactorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[30]);
}

// ===================================================================

class DisableTwoFactorResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const DisableTwoFactorResponse* msg);
};

const ::sonet::common::Status&
DisableTwoFactorResponse::_Internal::status(const DisableTwoFactorResponse* msg) {
  return *msg->_impl_.status_;
}
void DisableTwoFactorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
DisableTwoFactorResponse::DisableTwoFactorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.DisableTwoFactorResponse)
}
DisableTwoFactorResponse::DisableTwoFactorResponse(const DisableTwoFactorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisableTwoFactorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.DisableTwoFactorResponse)
}

inline void DisableTwoFactorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DisableTwoFactorResponse::~DisableTwoFactorResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.DisableTwoFactorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableTwoFactorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void DisableTwoFactorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableTwoFactorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.DisableTwoFactorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisableTwoFactorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisableTwoFactorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.DisableTwoFactorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.DisableTwoFactorResponse)
  return target;
}

size_t DisableTwoFactorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.DisableTwoFactorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisableTwoFactorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisableTwoFactorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisableTwoFactorResponse::GetClassData() const { return &_class_data_; }


void DisableTwoFactorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisableTwoFactorResponse*>(&to_msg);
  auto& from = static_cast<const DisableTwoFactorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.DisableTwoFactorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisableTwoFactorResponse::CopyFrom(const DisableTwoFactorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.DisableTwoFactorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTwoFactorResponse::IsInitialized() const {
  return true;
}

void DisableTwoFactorResponse::InternalSwap(DisableTwoFactorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableTwoFactorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[31]);
}

// ===================================================================

class GetActiveSessionsRequest::_Internal {
 public:
};

GetActiveSessionsRequest::GetActiveSessionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.GetActiveSessionsRequest)
}
GetActiveSessionsRequest::GetActiveSessionsRequest(const GetActiveSessionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActiveSessionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.GetActiveSessionsRequest)
}

inline void GetActiveSessionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetActiveSessionsRequest::~GetActiveSessionsRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.GetActiveSessionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActiveSessionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void GetActiveSessionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActiveSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.GetActiveSessionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActiveSessionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.GetActiveSessionsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetActiveSessionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.GetActiveSessionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.GetActiveSessionsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.GetActiveSessionsRequest)
  return target;
}

size_t GetActiveSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.GetActiveSessionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActiveSessionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActiveSessionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActiveSessionsRequest::GetClassData() const { return &_class_data_; }


void GetActiveSessionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActiveSessionsRequest*>(&to_msg);
  auto& from = static_cast<const GetActiveSessionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.GetActiveSessionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActiveSessionsRequest::CopyFrom(const GetActiveSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.GetActiveSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveSessionsRequest::IsInitialized() const {
  return true;
}

void GetActiveSessionsRequest::InternalSwap(GetActiveSessionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActiveSessionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[32]);
}

// ===================================================================

class GetActiveSessionsResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const GetActiveSessionsResponse* msg);
};

const ::sonet::common::Status&
GetActiveSessionsResponse::_Internal::status(const GetActiveSessionsResponse* msg) {
  return *msg->_impl_.status_;
}
void GetActiveSessionsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetActiveSessionsResponse::GetActiveSessionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.GetActiveSessionsResponse)
}
GetActiveSessionsResponse::GetActiveSessionsResponse(const GetActiveSessionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActiveSessionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessions_){from._impl_.sessions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.GetActiveSessionsResponse)
}

inline void GetActiveSessionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetActiveSessionsResponse::~GetActiveSessionsResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.GetActiveSessionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActiveSessionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetActiveSessionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActiveSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.GetActiveSessionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActiveSessionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.user.Session sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetActiveSessionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.GetActiveSessionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .sonet.user.Session sessions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sessions_size()); i < n; i++) {
    const auto& repfield = this->_internal_sessions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.GetActiveSessionsResponse)
  return target;
}

size_t GetActiveSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.GetActiveSessionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.user.Session sessions = 2;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->_impl_.sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActiveSessionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActiveSessionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActiveSessionsResponse::GetClassData() const { return &_class_data_; }


void GetActiveSessionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActiveSessionsResponse*>(&to_msg);
  auto& from = static_cast<const GetActiveSessionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.GetActiveSessionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sessions_.MergeFrom(from._impl_.sessions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActiveSessionsResponse::CopyFrom(const GetActiveSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.GetActiveSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveSessionsResponse::IsInitialized() const {
  return true;
}

void GetActiveSessionsResponse::InternalSwap(GetActiveSessionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sessions_.InternalSwap(&other->_impl_.sessions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActiveSessionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[33]);
}

// ===================================================================

class TerminateSessionRequest::_Internal {
 public:
};

TerminateSessionRequest::TerminateSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.TerminateSessionRequest)
}
TerminateSessionRequest::TerminateSessionRequest(const TerminateSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminateSessionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.TerminateSessionRequest)
}

inline void TerminateSessionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TerminateSessionRequest::~TerminateSessionRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.TerminateSessionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminateSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
}

void TerminateSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.TerminateSessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateSessionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.TerminateSessionRequest.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateSessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.TerminateSessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.TerminateSessionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.TerminateSessionRequest)
  return target;
}

size_t TerminateSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.TerminateSessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateSessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminateSessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateSessionRequest::GetClassData() const { return &_class_data_; }


void TerminateSessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminateSessionRequest*>(&to_msg);
  auto& from = static_cast<const TerminateSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.TerminateSessionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateSessionRequest::CopyFrom(const TerminateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.TerminateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateSessionRequest::IsInitialized() const {
  return true;
}

void TerminateSessionRequest::InternalSwap(TerminateSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[34]);
}

// ===================================================================

class TerminateSessionResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const TerminateSessionResponse* msg);
};

const ::sonet::common::Status&
TerminateSessionResponse::_Internal::status(const TerminateSessionResponse* msg) {
  return *msg->_impl_.status_;
}
void TerminateSessionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
TerminateSessionResponse::TerminateSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.TerminateSessionResponse)
}
TerminateSessionResponse::TerminateSessionResponse(const TerminateSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminateSessionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.TerminateSessionResponse)
}

inline void TerminateSessionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TerminateSessionResponse::~TerminateSessionResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.TerminateSessionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminateSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void TerminateSessionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminateSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.TerminateSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateSessionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.TerminateSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.TerminateSessionResponse)
  return target;
}

size_t TerminateSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.TerminateSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminateSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateSessionResponse::GetClassData() const { return &_class_data_; }


void TerminateSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminateSessionResponse*>(&to_msg);
  auto& from = static_cast<const TerminateSessionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.TerminateSessionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateSessionResponse::CopyFrom(const TerminateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.TerminateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateSessionResponse::IsInitialized() const {
  return true;
}

void TerminateSessionResponse::InternalSwap(TerminateSessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateSessionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[35]);
}

// ===================================================================

class GetUserProfileRequest::_Internal {
 public:
};

GetUserProfileRequest::GetUserProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.GetUserProfileRequest)
}
GetUserProfileRequest::GetUserProfileRequest(const GetUserProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserProfileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.GetUserProfileRequest)
}

inline void GetUserProfileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserProfileRequest::~GetUserProfileRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.GetUserProfileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
}

void GetUserProfileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.GetUserProfileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserProfileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.GetUserProfileRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserProfileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.GetUserProfileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.GetUserProfileRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.GetUserProfileRequest)
  return target;
}

size_t GetUserProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.GetUserProfileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserProfileRequest::GetClassData() const { return &_class_data_; }


void GetUserProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserProfileRequest*>(&to_msg);
  auto& from = static_cast<const GetUserProfileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.GetUserProfileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserProfileRequest::CopyFrom(const GetUserProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.GetUserProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileRequest::IsInitialized() const {
  return true;
}

void GetUserProfileRequest::InternalSwap(GetUserProfileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserProfileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[36]);
}

// ===================================================================

class GetUserProfileResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const GetUserProfileResponse* msg);
  static const ::sonet::user::UserProfile& user(const GetUserProfileResponse* msg);
};

const ::sonet::common::Status&
GetUserProfileResponse::_Internal::status(const GetUserProfileResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::user::UserProfile&
GetUserProfileResponse::_Internal::user(const GetUserProfileResponse* msg) {
  return *msg->_impl_.user_;
}
void GetUserProfileResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
GetUserProfileResponse::GetUserProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.GetUserProfileResponse)
}
GetUserProfileResponse::GetUserProfileResponse(const GetUserProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserProfileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::sonet::user::UserProfile(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.GetUserProfileResponse)
}

inline void GetUserProfileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetUserProfileResponse::~GetUserProfileResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.GetUserProfileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.user_;
}

void GetUserProfileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.GetUserProfileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserProfileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.UserProfile user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserProfileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.GetUserProfileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.GetUserProfileResponse)
  return target;
}

size_t GetUserProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.GetUserProfileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserProfileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserProfileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserProfileResponse::GetClassData() const { return &_class_data_; }


void GetUserProfileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserProfileResponse*>(&to_msg);
  auto& from = static_cast<const GetUserProfileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.GetUserProfileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::sonet::user::UserProfile::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserProfileResponse::CopyFrom(const GetUserProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.GetUserProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileResponse::IsInitialized() const {
  return true;
}

void GetUserProfileResponse::InternalSwap(GetUserProfileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserProfileResponse, _impl_.user_)
      + sizeof(GetUserProfileResponse::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(GetUserProfileResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserProfileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[37]);
}

// ===================================================================

UpdateUserProfileRequest_SettingsEntry_DoNotUse::UpdateUserProfileRequest_SettingsEntry_DoNotUse() {}
UpdateUserProfileRequest_SettingsEntry_DoNotUse::UpdateUserProfileRequest_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdateUserProfileRequest_SettingsEntry_DoNotUse::MergeFrom(const UpdateUserProfileRequest_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserProfileRequest_SettingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[38]);
}

// ===================================================================

class UpdateUserProfileRequest::_Internal {
 public:
};

UpdateUserProfileRequest::UpdateUserProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UpdateUserProfileRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.user.UpdateUserProfileRequest)
}
UpdateUserProfileRequest::UpdateUserProfileRequest(const UpdateUserProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateUserProfileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.settings_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.bio_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.website_){}
    , decltype(_impl_.is_private_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bio().empty()) {
    _this->_impl_.bio_.Set(from._internal_bio(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.website_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_website().empty()) {
    _this->_impl_.website_.Set(from._internal_website(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_private_ = from._impl_.is_private_;
  // @@protoc_insertion_point(copy_constructor:sonet.user.UpdateUserProfileRequest)
}

inline void UpdateUserProfileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.settings_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.bio_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.website_){}
    , decltype(_impl_.is_private_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.website_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateUserProfileRequest::~UpdateUserProfileRequest() {
  // @@protoc_insertion_point(destructor:sonet.user.UpdateUserProfileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UpdateUserProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settings_.Destruct();
  _impl_.settings_.~MapField();
  _impl_.user_id_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.bio_.Destroy();
  _impl_.location_.Destroy();
  _impl_.website_.Destroy();
}

void UpdateUserProfileRequest::ArenaDtor(void* object) {
  UpdateUserProfileRequest* _this = reinterpret_cast< UpdateUserProfileRequest* >(object);
  _this->_impl_.settings_.Destruct();
}
void UpdateUserProfileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateUserProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.UpdateUserProfileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.settings_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.bio_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.website_.ClearToEmpty();
  _impl_.is_private_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserProfileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UpdateUserProfileRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UpdateUserProfileRequest.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string bio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UpdateUserProfileRequest.bio"));
        } else
          goto handle_unusual;
        continue;
      // string location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UpdateUserProfileRequest.location"));
        } else
          goto handle_unusual;
        continue;
      // string website = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_website();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.user.UpdateUserProfileRequest.website"));
        } else
          goto handle_unusual;
        continue;
      // bool is_private = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUserProfileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.UpdateUserProfileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UpdateUserProfileRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UpdateUserProfileRequest.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // string bio = 3;
  if (!this->_internal_bio().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bio().data(), static_cast<int>(this->_internal_bio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UpdateUserProfileRequest.bio");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bio(), target);
  }

  // string location = 4;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UpdateUserProfileRequest.location");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location(), target);
  }

  // string website = 5;
  if (!this->_internal_website().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_website().data(), static_cast<int>(this->_internal_website().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.user.UpdateUserProfileRequest.website");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_website(), target);
  }

  // bool is_private = 6;
  if (this->_internal_is_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_private(), target);
  }

  // map<string, string> settings = 7;
  if (!this->_internal_settings().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = UpdateUserProfileRequest_SettingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_settings();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.user.UpdateUserProfileRequest.SettingsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.user.UpdateUserProfileRequest.SettingsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.UpdateUserProfileRequest)
  return target;
}

size_t UpdateUserProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.UpdateUserProfileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> settings = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_settings().begin();
      it != this->_internal_settings().end(); ++it) {
    total_size += UpdateUserProfileRequest_SettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string bio = 3;
  if (!this->_internal_bio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bio());
  }

  // string location = 4;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string website = 5;
  if (!this->_internal_website().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_website());
  }

  // bool is_private = 6;
  if (this->_internal_is_private() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateUserProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserProfileRequest::GetClassData() const { return &_class_data_; }


void UpdateUserProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateUserProfileRequest*>(&to_msg);
  auto& from = static_cast<const UpdateUserProfileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.UpdateUserProfileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_bio().empty()) {
    _this->_internal_set_bio(from._internal_bio());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_website().empty()) {
    _this->_internal_set_website(from._internal_website());
  }
  if (from._internal_is_private() != 0) {
    _this->_internal_set_is_private(from._internal_is_private());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserProfileRequest::CopyFrom(const UpdateUserProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.UpdateUserProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserProfileRequest::IsInitialized() const {
  return true;
}

void UpdateUserProfileRequest::InternalSwap(UpdateUserProfileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.settings_.InternalSwap(&other->_impl_.settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bio_, lhs_arena,
      &other->_impl_.bio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.website_, lhs_arena,
      &other->_impl_.website_, rhs_arena
  );
  swap(_impl_.is_private_, other->_impl_.is_private_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserProfileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[39]);
}

// ===================================================================

class UpdateUserProfileResponse::_Internal {
 public:
  static const ::sonet::common::Status& status(const UpdateUserProfileResponse* msg);
  static const ::sonet::user::UserProfile& user(const UpdateUserProfileResponse* msg);
};

const ::sonet::common::Status&
UpdateUserProfileResponse::_Internal::status(const UpdateUserProfileResponse* msg) {
  return *msg->_impl_.status_;
}
const ::sonet::user::UserProfile&
UpdateUserProfileResponse::_Internal::user(const UpdateUserProfileResponse* msg) {
  return *msg->_impl_.user_;
}
void UpdateUserProfileResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
UpdateUserProfileResponse::UpdateUserProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.user.UpdateUserProfileResponse)
}
UpdateUserProfileResponse::UpdateUserProfileResponse(const UpdateUserProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateUserProfileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::sonet::common::Status(*from._impl_.status_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::sonet::user::UserProfile(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.user.UpdateUserProfileResponse)
}

inline void UpdateUserProfileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateUserProfileResponse::~UpdateUserProfileResponse() {
  // @@protoc_insertion_point(destructor:sonet.user.UpdateUserProfileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateUserProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UpdateUserProfileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateUserProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.user.UpdateUserProfileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserProfileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.user.UserProfile user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUserProfileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.user.UpdateUserProfileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.user.UpdateUserProfileResponse)
  return target;
}

size_t UpdateUserProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.user.UpdateUserProfileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.common.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .sonet.user.UserProfile user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserProfileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateUserProfileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserProfileResponse::GetClassData() const { return &_class_data_; }


void UpdateUserProfileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateUserProfileResponse*>(&to_msg);
  auto& from = static_cast<const UpdateUserProfileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.user.UpdateUserProfileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::sonet::common::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::sonet::user::UserProfile::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserProfileResponse::CopyFrom(const UpdateUserProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.user.UpdateUserProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserProfileResponse::IsInitialized() const {
  return true;
}

void UpdateUserProfileResponse::InternalSwap(UpdateUserProfileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateUserProfileResponse, _impl_.user_)
      + sizeof(UpdateUserProfileResponse::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(UpdateUserProfileResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserProfileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fuser_2eproto_getter, &descriptor_table_services_2fuser_2eproto_once,
      file_level_metadata_services_2fuser_2eproto[40]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace user
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::user::UserProfile_SettingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::user::UserProfile_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::UserProfile_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::UserProfile_PrivacySettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::UserProfile*
Arena::CreateMaybeMessage< ::sonet::user::UserProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::UserProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::AuthCredentials*
Arena::CreateMaybeMessage< ::sonet::user::AuthCredentials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::AuthCredentials >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::Session*
Arena::CreateMaybeMessage< ::sonet::user::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::TwoFactorAuth*
Arena::CreateMaybeMessage< ::sonet::user::TwoFactorAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::TwoFactorAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::RegisterUserRequest*
Arena::CreateMaybeMessage< ::sonet::user::RegisterUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::RegisterUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::RegisterUserResponse*
Arena::CreateMaybeMessage< ::sonet::user::RegisterUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::RegisterUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::LoginUserRequest*
Arena::CreateMaybeMessage< ::sonet::user::LoginUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::LoginUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::LoginUserResponse*
Arena::CreateMaybeMessage< ::sonet::user::LoginUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::LoginUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::VerifyTokenRequest*
Arena::CreateMaybeMessage< ::sonet::user::VerifyTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::VerifyTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::VerifyTokenResponse*
Arena::CreateMaybeMessage< ::sonet::user::VerifyTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::VerifyTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::RefreshTokenRequest*
Arena::CreateMaybeMessage< ::sonet::user::RefreshTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::RefreshTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::RefreshTokenResponse*
Arena::CreateMaybeMessage< ::sonet::user::RefreshTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::RefreshTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::LogoutRequest*
Arena::CreateMaybeMessage< ::sonet::user::LogoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::LogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::LogoutResponse*
Arena::CreateMaybeMessage< ::sonet::user::LogoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::LogoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ChangePasswordRequest*
Arena::CreateMaybeMessage< ::sonet::user::ChangePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ChangePasswordResponse*
Arena::CreateMaybeMessage< ::sonet::user::ChangePasswordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ChangePasswordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ResetPasswordRequest*
Arena::CreateMaybeMessage< ::sonet::user::ResetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ResetPasswordResponse*
Arena::CreateMaybeMessage< ::sonet::user::ResetPasswordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ResetPasswordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ConfirmPasswordResetRequest*
Arena::CreateMaybeMessage< ::sonet::user::ConfirmPasswordResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ConfirmPasswordResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ConfirmPasswordResetResponse*
Arena::CreateMaybeMessage< ::sonet::user::ConfirmPasswordResetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ConfirmPasswordResetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::VerifyEmailRequest*
Arena::CreateMaybeMessage< ::sonet::user::VerifyEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::VerifyEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::VerifyEmailResponse*
Arena::CreateMaybeMessage< ::sonet::user::VerifyEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::VerifyEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ResendVerificationRequest*
Arena::CreateMaybeMessage< ::sonet::user::ResendVerificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ResendVerificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::ResendVerificationResponse*
Arena::CreateMaybeMessage< ::sonet::user::ResendVerificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::ResendVerificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::SetupTwoFactorRequest*
Arena::CreateMaybeMessage< ::sonet::user::SetupTwoFactorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::SetupTwoFactorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::SetupTwoFactorResponse*
Arena::CreateMaybeMessage< ::sonet::user::SetupTwoFactorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::SetupTwoFactorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::VerifyTwoFactorRequest*
Arena::CreateMaybeMessage< ::sonet::user::VerifyTwoFactorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::VerifyTwoFactorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::VerifyTwoFactorResponse*
Arena::CreateMaybeMessage< ::sonet::user::VerifyTwoFactorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::VerifyTwoFactorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::DisableTwoFactorRequest*
Arena::CreateMaybeMessage< ::sonet::user::DisableTwoFactorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::DisableTwoFactorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::DisableTwoFactorResponse*
Arena::CreateMaybeMessage< ::sonet::user::DisableTwoFactorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::DisableTwoFactorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::GetActiveSessionsRequest*
Arena::CreateMaybeMessage< ::sonet::user::GetActiveSessionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::GetActiveSessionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::GetActiveSessionsResponse*
Arena::CreateMaybeMessage< ::sonet::user::GetActiveSessionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::GetActiveSessionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::TerminateSessionRequest*
Arena::CreateMaybeMessage< ::sonet::user::TerminateSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::TerminateSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::TerminateSessionResponse*
Arena::CreateMaybeMessage< ::sonet::user::TerminateSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::TerminateSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::GetUserProfileRequest*
Arena::CreateMaybeMessage< ::sonet::user::GetUserProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::GetUserProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::GetUserProfileResponse*
Arena::CreateMaybeMessage< ::sonet::user::GetUserProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::GetUserProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::UpdateUserProfileRequest_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::UpdateUserProfileRequest*
Arena::CreateMaybeMessage< ::sonet::user::UpdateUserProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::UpdateUserProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::user::UpdateUserProfileResponse*
Arena::CreateMaybeMessage< ::sonet::user::UpdateUserProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::user::UpdateUserProfileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
