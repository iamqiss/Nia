// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/list_service.proto

#include "services/list_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace list {
namespace v1 {
PROTOBUF_CONSTEXPR List::List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.is_public_)*/false
  , /*decltype(_impl_.list_type_)*/0
  , /*decltype(_impl_.member_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDefaultTypeInternal() {}
  union {
    List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDefaultTypeInternal _List_default_instance_;
PROTOBUF_CONSTEXPR ListMember::ListMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.added_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.added_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListMemberDefaultTypeInternal() {}
  union {
    ListMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListMemberDefaultTypeInternal _ListMember_default_instance_;
PROTOBUF_CONSTEXPR CreateListRequest::CreateListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_public_)*/false
  , /*decltype(_impl_.list_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateListRequestDefaultTypeInternal() {}
  union {
    CreateListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateListRequestDefaultTypeInternal _CreateListRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateListResponse::CreateListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.list_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateListResponseDefaultTypeInternal() {}
  union {
    CreateListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateListResponseDefaultTypeInternal _CreateListResponse_default_instance_;
PROTOBUF_CONSTEXPR GetListRequest::GetListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requester_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListRequestDefaultTypeInternal() {}
  union {
    GetListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListRequestDefaultTypeInternal _GetListRequest_default_instance_;
PROTOBUF_CONSTEXPR GetListResponse::GetListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.list_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListResponseDefaultTypeInternal() {}
  union {
    GetListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListResponseDefaultTypeInternal _GetListResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserListsRequest::GetUserListsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requester_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserListsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserListsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserListsRequestDefaultTypeInternal() {}
  union {
    GetUserListsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserListsRequestDefaultTypeInternal _GetUserListsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserListsResponse::GetUserListsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lists_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserListsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserListsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserListsResponseDefaultTypeInternal() {}
  union {
    GetUserListsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserListsResponseDefaultTypeInternal _GetUserListsResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateListRequest::UpdateListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requester_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_public_)*/false
  , /*decltype(_impl_.list_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateListRequestDefaultTypeInternal() {}
  union {
    UpdateListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateListRequestDefaultTypeInternal _UpdateListRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateListResponse::UpdateListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.list_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateListResponseDefaultTypeInternal() {}
  union {
    UpdateListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateListResponseDefaultTypeInternal _UpdateListResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteListRequest::DeleteListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requester_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteListRequestDefaultTypeInternal() {}
  union {
    DeleteListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteListRequestDefaultTypeInternal _DeleteListRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteListResponse::DeleteListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteListResponseDefaultTypeInternal() {}
  union {
    DeleteListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteListResponseDefaultTypeInternal _DeleteListResponse_default_instance_;
PROTOBUF_CONSTEXPR AddListMemberRequest::AddListMemberRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.added_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddListMemberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddListMemberRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddListMemberRequestDefaultTypeInternal() {}
  union {
    AddListMemberRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddListMemberRequestDefaultTypeInternal _AddListMemberRequest_default_instance_;
PROTOBUF_CONSTEXPR AddListMemberResponse::AddListMemberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.member_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddListMemberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddListMemberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddListMemberResponseDefaultTypeInternal() {}
  union {
    AddListMemberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddListMemberResponseDefaultTypeInternal _AddListMemberResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveListMemberRequest::RemoveListMemberRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.removed_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveListMemberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveListMemberRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveListMemberRequestDefaultTypeInternal() {}
  union {
    RemoveListMemberRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveListMemberRequestDefaultTypeInternal _RemoveListMemberRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveListMemberResponse::RemoveListMemberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveListMemberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveListMemberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveListMemberResponseDefaultTypeInternal() {}
  union {
    RemoveListMemberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveListMemberResponseDefaultTypeInternal _RemoveListMemberResponse_default_instance_;
PROTOBUF_CONSTEXPR GetListMembersRequest::GetListMembersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requester_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListMembersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListMembersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListMembersRequestDefaultTypeInternal() {}
  union {
    GetListMembersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListMembersRequestDefaultTypeInternal _GetListMembersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetListMembersResponse::GetListMembersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListMembersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListMembersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListMembersResponseDefaultTypeInternal() {}
  union {
    GetListMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListMembersResponseDefaultTypeInternal _GetListMembersResponse_default_instance_;
PROTOBUF_CONSTEXPR IsUserInListRequest::IsUserInListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requester_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsUserInListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsUserInListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsUserInListRequestDefaultTypeInternal() {}
  union {
    IsUserInListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsUserInListRequestDefaultTypeInternal _IsUserInListRequest_default_instance_;
PROTOBUF_CONSTEXPR IsUserInListResponse::IsUserInListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.is_member_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsUserInListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsUserInListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsUserInListResponseDefaultTypeInternal() {}
  union {
    IsUserInListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsUserInListResponseDefaultTypeInternal _IsUserInListResponse_default_instance_;
}  // namespace v1
}  // namespace list
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2flist_5fservice_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2flist_5fservice_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2flist_5fservice_2eproto = nullptr;

const uint32_t TableStruct_services_2flist_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.is_public_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.list_type_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::List, _impl_.member_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::ListMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::ListMember, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::ListMember, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::ListMember, _impl_.added_by_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::ListMember, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::ListMember, _impl_.added_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListRequest, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListRequest, _impl_.is_public_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListRequest, _impl_.list_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListResponse, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::CreateListResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListRequest, _impl_.requester_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListResponse, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsRequest, _impl_.requester_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsRequest, _impl_.cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsResponse, _impl_.lists_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsResponse, _impl_.next_cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetUserListsResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _impl_.requester_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _impl_.is_public_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListRequest, _impl_.list_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListResponse, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::UpdateListResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::DeleteListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::DeleteListRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::DeleteListRequest, _impl_.requester_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::DeleteListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::DeleteListResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::DeleteListResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberRequest, _impl_.added_by_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberRequest, _impl_.notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberResponse, _impl_.member_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::AddListMemberResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberRequest, _impl_.removed_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::RemoveListMemberResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersRequest, _impl_.requester_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersRequest, _impl_.cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersResponse, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersResponse, _impl_.next_cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::GetListMembersResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListRequest, _impl_.list_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListRequest, _impl_.requester_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListResponse, _impl_.is_member_),
  PROTOBUF_FIELD_OFFSET(::sonet::list::v1::IsUserInListResponse, _impl_.error_message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::list::v1::List)},
  { 15, -1, -1, sizeof(::sonet::list::v1::ListMember)},
  { 26, -1, -1, sizeof(::sonet::list::v1::CreateListRequest)},
  { 37, -1, -1, sizeof(::sonet::list::v1::CreateListResponse)},
  { 46, -1, -1, sizeof(::sonet::list::v1::GetListRequest)},
  { 54, -1, -1, sizeof(::sonet::list::v1::GetListResponse)},
  { 63, -1, -1, sizeof(::sonet::list::v1::GetUserListsRequest)},
  { 73, -1, -1, sizeof(::sonet::list::v1::GetUserListsResponse)},
  { 83, -1, -1, sizeof(::sonet::list::v1::UpdateListRequest)},
  { 95, -1, -1, sizeof(::sonet::list::v1::UpdateListResponse)},
  { 104, -1, -1, sizeof(::sonet::list::v1::DeleteListRequest)},
  { 112, -1, -1, sizeof(::sonet::list::v1::DeleteListResponse)},
  { 120, -1, -1, sizeof(::sonet::list::v1::AddListMemberRequest)},
  { 130, -1, -1, sizeof(::sonet::list::v1::AddListMemberResponse)},
  { 139, -1, -1, sizeof(::sonet::list::v1::RemoveListMemberRequest)},
  { 148, -1, -1, sizeof(::sonet::list::v1::RemoveListMemberResponse)},
  { 156, -1, -1, sizeof(::sonet::list::v1::GetListMembersRequest)},
  { 166, -1, -1, sizeof(::sonet::list::v1::GetListMembersResponse)},
  { 176, -1, -1, sizeof(::sonet::list::v1::IsUserInListRequest)},
  { 185, -1, -1, sizeof(::sonet::list::v1::IsUserInListResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::list::v1::_List_default_instance_._instance,
  &::sonet::list::v1::_ListMember_default_instance_._instance,
  &::sonet::list::v1::_CreateListRequest_default_instance_._instance,
  &::sonet::list::v1::_CreateListResponse_default_instance_._instance,
  &::sonet::list::v1::_GetListRequest_default_instance_._instance,
  &::sonet::list::v1::_GetListResponse_default_instance_._instance,
  &::sonet::list::v1::_GetUserListsRequest_default_instance_._instance,
  &::sonet::list::v1::_GetUserListsResponse_default_instance_._instance,
  &::sonet::list::v1::_UpdateListRequest_default_instance_._instance,
  &::sonet::list::v1::_UpdateListResponse_default_instance_._instance,
  &::sonet::list::v1::_DeleteListRequest_default_instance_._instance,
  &::sonet::list::v1::_DeleteListResponse_default_instance_._instance,
  &::sonet::list::v1::_AddListMemberRequest_default_instance_._instance,
  &::sonet::list::v1::_AddListMemberResponse_default_instance_._instance,
  &::sonet::list::v1::_RemoveListMemberRequest_default_instance_._instance,
  &::sonet::list::v1::_RemoveListMemberResponse_default_instance_._instance,
  &::sonet::list::v1::_GetListMembersRequest_default_instance_._instance,
  &::sonet::list::v1::_GetListMembersResponse_default_instance_._instance,
  &::sonet::list::v1::_IsUserInListRequest_default_instance_._instance,
  &::sonet::list::v1::_IsUserInListResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2flist_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033services/list_service.proto\022\rsonet.lis"
  "t.v1\032\037google/protobuf/timestamp.proto\"\201\002"
  "\n\004List\022\017\n\007list_id\030\001 \001(\t\022\020\n\010owner_id\030\002 \001("
  "\t\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\021\n\t"
  "is_public\030\005 \001(\010\022*\n\tlist_type\030\006 \001(\0162\027.son"
  "et.list.v1.ListType\022.\n\ncreated_at\030\007 \001(\0132"
  "\032.google.protobuf.Timestamp\022.\n\nupdated_a"
  "t\030\010 \001(\0132\032.google.protobuf.Timestamp\022\024\n\014m"
  "ember_count\030\t \001(\005\"}\n\nListMember\022\017\n\007list_"
  "id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\020\n\010added_by\030\003 "
  "\001(\t\022\r\n\005notes\030\004 \001(\t\022,\n\010added_at\030\005 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"\207\001\n\021CreateListR"
  "equest\022\020\n\010owner_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\023"
  "\n\013description\030\003 \001(\t\022\021\n\tis_public\030\004 \001(\010\022*"
  "\n\tlist_type\030\005 \001(\0162\027.sonet.list.v1.ListTy"
  "pe\"_\n\022CreateListResponse\022\017\n\007success\030\001 \001("
  "\010\022!\n\004list\030\002 \001(\0132\023.sonet.list.v1.List\022\025\n\r"
  "error_message\030\003 \001(\t\"7\n\016GetListRequest\022\017\n"
  "\007list_id\030\001 \001(\t\022\024\n\014requester_id\030\002 \001(\t\"\\\n\017"
  "GetListResponse\022\017\n\007success\030\001 \001(\010\022!\n\004list"
  "\030\002 \001(\0132\023.sonet.list.v1.List\022\025\n\rerror_mes"
  "sage\030\003 \001(\t\"[\n\023GetUserListsRequest\022\017\n\007use"
  "r_id\030\001 \001(\t\022\024\n\014requester_id\030\002 \001(\t\022\r\n\005limi"
  "t\030\003 \001(\005\022\016\n\006cursor\030\004 \001(\t\"w\n\024GetUserListsR"
  "esponse\022\017\n\007success\030\001 \001(\010\022\"\n\005lists\030\002 \003(\0132"
  "\023.sonet.list.v1.List\022\023\n\013next_cursor\030\003 \001("
  "\t\022\025\n\rerror_message\030\004 \001(\t\"\234\001\n\021UpdateListR"
  "equest\022\017\n\007list_id\030\001 \001(\t\022\024\n\014requester_id\030"
  "\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t"
  "\022\021\n\tis_public\030\005 \001(\010\022*\n\tlist_type\030\006 \001(\0162\027"
  ".sonet.list.v1.ListType\"_\n\022UpdateListRes"
  "ponse\022\017\n\007success\030\001 \001(\010\022!\n\004list\030\002 \001(\0132\023.s"
  "onet.list.v1.List\022\025\n\rerror_message\030\003 \001(\t"
  "\":\n\021DeleteListRequest\022\017\n\007list_id\030\001 \001(\t\022\024"
  "\n\014requester_id\030\002 \001(\t\"<\n\022DeleteListRespon"
  "se\022\017\n\007success\030\001 \001(\010\022\025\n\rerror_message\030\002 \001"
  "(\t\"Y\n\024AddListMemberRequest\022\017\n\007list_id\030\001 "
  "\001(\t\022\017\n\007user_id\030\002 \001(\t\022\020\n\010added_by\030\003 \001(\t\022\r"
  "\n\005notes\030\004 \001(\t\"j\n\025AddListMemberResponse\022\017"
  "\n\007success\030\001 \001(\010\022)\n\006member\030\002 \001(\0132\031.sonet."
  "list.v1.ListMember\022\025\n\rerror_message\030\003 \001("
  "\t\"O\n\027RemoveListMemberRequest\022\017\n\007list_id\030"
  "\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\022\n\nremoved_by\030\003 \001"
  "(\t\"B\n\030RemoveListMemberResponse\022\017\n\007succes"
  "s\030\001 \001(\010\022\025\n\rerror_message\030\002 \001(\t\"]\n\025GetLis"
  "tMembersRequest\022\017\n\007list_id\030\001 \001(\t\022\024\n\014requ"
  "ester_id\030\002 \001(\t\022\r\n\005limit\030\003 \001(\005\022\016\n\006cursor\030"
  "\004 \001(\t\"\201\001\n\026GetListMembersResponse\022\017\n\007succ"
  "ess\030\001 \001(\010\022*\n\007members\030\002 \003(\0132\031.sonet.list."
  "v1.ListMember\022\023\n\013next_cursor\030\003 \001(\t\022\025\n\rer"
  "ror_message\030\004 \001(\t\"M\n\023IsUserInListRequest"
  "\022\017\n\007list_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\024\n\014re"
  "quester_id\030\003 \001(\t\"Q\n\024IsUserInListResponse"
  "\022\017\n\007success\030\001 \001(\010\022\021\n\tis_member\030\002 \001(\010\022\025\n\r"
  "error_message\030\003 \001(\t*\230\001\n\010ListType\022\031\n\025LIST"
  "_TYPE_UNSPECIFIED\020\000\022\024\n\020LIST_TYPE_CUSTOM\020"
  "\001\022\033\n\027LIST_TYPE_CLOSE_FRIENDS\020\002\022\024\n\020LIST_T"
  "YPE_FAMILY\020\003\022\022\n\016LIST_TYPE_WORK\020\004\022\024\n\020LIST"
  "_TYPE_SCHOOL\020\0052\242\006\n\013ListService\022Q\n\nCreate"
  "List\022 .sonet.list.v1.CreateListRequest\032!"
  ".sonet.list.v1.CreateListResponse\022H\n\007Get"
  "List\022\035.sonet.list.v1.GetListRequest\032\036.so"
  "net.list.v1.GetListResponse\022W\n\014GetUserLi"
  "sts\022\".sonet.list.v1.GetUserListsRequest\032"
  "#.sonet.list.v1.GetUserListsResponse\022Q\n\n"
  "UpdateList\022 .sonet.list.v1.UpdateListReq"
  "uest\032!.sonet.list.v1.UpdateListResponse\022"
  "Q\n\nDeleteList\022 .sonet.list.v1.DeleteList"
  "Request\032!.sonet.list.v1.DeleteListRespon"
  "se\022Z\n\rAddListMember\022#.sonet.list.v1.AddL"
  "istMemberRequest\032$.sonet.list.v1.AddList"
  "MemberResponse\022c\n\020RemoveListMember\022&.son"
  "et.list.v1.RemoveListMemberRequest\032\'.son"
  "et.list.v1.RemoveListMemberResponse\022]\n\016G"
  "etListMembers\022$.sonet.list.v1.GetListMem"
  "bersRequest\032%.sonet.list.v1.GetListMembe"
  "rsResponse\022W\n\014IsUserInList\022\".sonet.list."
  "v1.IsUserInListRequest\032#.sonet.list.v1.I"
  "sUserInListResponseB\'Z%sonet/src/service"
  "s/list_service/protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2flist_5fservice_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2flist_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2flist_5fservice_2eproto = {
    false, false, 3188, descriptor_table_protodef_services_2flist_5fservice_2eproto,
    "services/list_service.proto",
    &descriptor_table_services_2flist_5fservice_2eproto_once, descriptor_table_services_2flist_5fservice_2eproto_deps, 1, 20,
    schemas, file_default_instances, TableStruct_services_2flist_5fservice_2eproto::offsets,
    file_level_metadata_services_2flist_5fservice_2eproto, file_level_enum_descriptors_services_2flist_5fservice_2eproto,
    file_level_service_descriptors_services_2flist_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2flist_5fservice_2eproto_getter() {
  return &descriptor_table_services_2flist_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2flist_5fservice_2eproto(&descriptor_table_services_2flist_5fservice_2eproto);
namespace sonet {
namespace list {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2flist_5fservice_2eproto);
  return file_level_enum_descriptors_services_2flist_5fservice_2eproto[0];
}
bool ListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class List::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const List* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const List* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
List::_Internal::created_at(const List* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
List::_Internal::updated_at(const List* msg) {
  return *msg->_impl_.updated_at_;
}
void List::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void List::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
List::List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.List)
}
List::List(const List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.is_public_){}
    , decltype(_impl_.list_type_){}
    , decltype(_impl_.member_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.is_public_, &from._impl_.is_public_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.member_count_) -
    reinterpret_cast<char*>(&_impl_.is_public_)) + sizeof(_impl_.member_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.List)
}

inline void List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.is_public_){false}
    , decltype(_impl_.list_type_){0}
    , decltype(_impl_.member_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

List::~List() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.owner_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void List::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.owner_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.is_public_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.member_count_) -
      reinterpret_cast<char*>(&_impl_.is_public_)) + sizeof(_impl_.member_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.List.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.List.owner_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.List.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.List.description"));
        } else
          goto handle_unusual;
        continue;
      // bool is_public = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.ListType list_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_list_type(static_cast<::sonet::list::v1::ListType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 member_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.List.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.List.owner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.List.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.List.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // bool is_public = 5;
  if (this->_internal_is_public() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_public(), target);
  }

  // .sonet.list.v1.ListType list_type = 6;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_list_type(), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // int32 member_count = 9;
  if (this->_internal_member_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_member_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.List)
  return target;
}

size_t List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // bool is_public = 5;
  if (this->_internal_is_public() != 0) {
    total_size += 1 + 1;
  }

  // .sonet.list.v1.ListType list_type = 6;
  if (this->_internal_list_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  // int32 member_count = 9;
  if (this->_internal_member_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_member_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*List::GetClassData() const { return &_class_data_; }


void List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<List*>(&to_msg);
  auto& from = static_cast<const List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_is_public() != 0) {
    _this->_internal_set_is_public(from._internal_is_public());
  }
  if (from._internal_list_type() != 0) {
    _this->_internal_set_list_type(from._internal_list_type());
  }
  if (from._internal_member_count() != 0) {
    _this->_internal_set_member_count(from._internal_member_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void List::CopyFrom(const List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {
  return true;
}

void List::InternalSwap(List* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_id_, lhs_arena,
      &other->_impl_.owner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(List, _impl_.member_count_)
      + sizeof(List::_impl_.member_count_)
      - PROTOBUF_FIELD_OFFSET(List, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[0]);
}

// ===================================================================

class ListMember::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& added_at(const ListMember* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListMember::_Internal::added_at(const ListMember* msg) {
  return *msg->_impl_.added_at_;
}
void ListMember::clear_added_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.added_at_ != nullptr) {
    delete _impl_.added_at_;
  }
  _impl_.added_at_ = nullptr;
}
ListMember::ListMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.ListMember)
}
ListMember::ListMember(const ListMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.added_by_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.added_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.added_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.added_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_added_by().empty()) {
    _this->_impl_.added_by_.Set(from._internal_added_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_added_at()) {
    _this->_impl_.added_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.added_at_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.ListMember)
}

inline void ListMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.added_by_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.added_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.added_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.added_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListMember::~ListMember() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.ListMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.added_by_.Destroy();
  _impl_.notes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.added_at_;
}

void ListMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListMember::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.ListMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.added_by_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.added_at_ != nullptr) {
    delete _impl_.added_at_;
  }
  _impl_.added_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.ListMember.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.ListMember.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string added_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_added_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.ListMember.added_by"));
        } else
          goto handle_unusual;
        continue;
      // string notes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.ListMember.notes"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp added_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_added_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.ListMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.ListMember.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.ListMember.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string added_by = 3;
  if (!this->_internal_added_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_added_by().data(), static_cast<int>(this->_internal_added_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.ListMember.added_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_added_by(), target);
  }

  // string notes = 4;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.ListMember.notes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notes(), target);
  }

  // .google.protobuf.Timestamp added_at = 5;
  if (this->_internal_has_added_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::added_at(this),
        _Internal::added_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.ListMember)
  return target;
}

size_t ListMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.ListMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string added_by = 3;
  if (!this->_internal_added_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_added_by());
  }

  // string notes = 4;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp added_at = 5;
  if (this->_internal_has_added_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.added_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListMember::GetClassData() const { return &_class_data_; }


void ListMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListMember*>(&to_msg);
  auto& from = static_cast<const ListMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.ListMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_added_by().empty()) {
    _this->_internal_set_added_by(from._internal_added_by());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_added_at()) {
    _this->_internal_mutable_added_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_added_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListMember::CopyFrom(const ListMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.ListMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMember::IsInitialized() const {
  return true;
}

void ListMember::InternalSwap(ListMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.added_by_, lhs_arena,
      &other->_impl_.added_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  swap(_impl_.added_at_, other->_impl_.added_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[1]);
}

// ===================================================================

class CreateListRequest::_Internal {
 public:
};

CreateListRequest::CreateListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.CreateListRequest)
}
CreateListRequest::CreateListRequest(const CreateListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.is_public_){}
    , decltype(_impl_.list_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_public_, &from._impl_.is_public_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.list_type_) -
    reinterpret_cast<char*>(&_impl_.is_public_)) + sizeof(_impl_.list_type_));
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.CreateListRequest)
}

inline void CreateListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.is_public_){false}
    , decltype(_impl_.list_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateListRequest::~CreateListRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.CreateListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void CreateListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.CreateListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.is_public_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.list_type_) -
      reinterpret_cast<char*>(&_impl_.is_public_)) + sizeof(_impl_.list_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.CreateListRequest.owner_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.CreateListRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.CreateListRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // bool is_public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.ListType list_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_list_type(static_cast<::sonet::list::v1::ListType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.CreateListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_id = 1;
  if (!this->_internal_owner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.CreateListRequest.owner_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.CreateListRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.CreateListRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool is_public = 4;
  if (this->_internal_is_public() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_public(), target);
  }

  // .sonet.list.v1.ListType list_type = 5;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_list_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.CreateListRequest)
  return target;
}

size_t CreateListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.CreateListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_id = 1;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool is_public = 4;
  if (this->_internal_is_public() != 0) {
    total_size += 1 + 1;
  }

  // .sonet.list.v1.ListType list_type = 5;
  if (this->_internal_list_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateListRequest::GetClassData() const { return &_class_data_; }


void CreateListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateListRequest*>(&to_msg);
  auto& from = static_cast<const CreateListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.CreateListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_is_public() != 0) {
    _this->_internal_set_is_public(from._internal_is_public());
  }
  if (from._internal_list_type() != 0) {
    _this->_internal_set_list_type(from._internal_list_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateListRequest::CopyFrom(const CreateListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.CreateListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateListRequest::IsInitialized() const {
  return true;
}

void CreateListRequest::InternalSwap(CreateListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_id_, lhs_arena,
      &other->_impl_.owner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateListRequest, _impl_.list_type_)
      + sizeof(CreateListRequest::_impl_.list_type_)
      - PROTOBUF_FIELD_OFFSET(CreateListRequest, _impl_.is_public_)>(
          reinterpret_cast<char*>(&_impl_.is_public_),
          reinterpret_cast<char*>(&other->_impl_.is_public_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[2]);
}

// ===================================================================

class CreateListResponse::_Internal {
 public:
  static const ::sonet::list::v1::List& list(const CreateListResponse* msg);
};

const ::sonet::list::v1::List&
CreateListResponse::_Internal::list(const CreateListResponse* msg) {
  return *msg->_impl_.list_;
}
CreateListResponse::CreateListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.CreateListResponse)
}
CreateListResponse::CreateListResponse(const CreateListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.list_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_list()) {
    _this->_impl_.list_ = new ::sonet::list::v1::List(*from._impl_.list_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.CreateListResponse)
}

inline void CreateListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.list_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateListResponse::~CreateListResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.CreateListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.list_;
}

void CreateListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.CreateListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.list_ != nullptr) {
    delete _impl_.list_;
  }
  _impl_.list_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.List list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.CreateListResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.CreateListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .sonet.list.v1.List list = 2;
  if (this->_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.CreateListResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.CreateListResponse)
  return target;
}

size_t CreateListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.CreateListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.list.v1.List list = 2;
  if (this->_internal_has_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateListResponse::GetClassData() const { return &_class_data_; }


void CreateListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateListResponse*>(&to_msg);
  auto& from = static_cast<const CreateListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.CreateListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_list()) {
    _this->_internal_mutable_list()->::sonet::list::v1::List::MergeFrom(
        from._internal_list());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateListResponse::CopyFrom(const CreateListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.CreateListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateListResponse::IsInitialized() const {
  return true;
}

void CreateListResponse::InternalSwap(CreateListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateListResponse, _impl_.success_)
      + sizeof(CreateListResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(CreateListResponse, _impl_.list_)>(
          reinterpret_cast<char*>(&_impl_.list_),
          reinterpret_cast<char*>(&other->_impl_.list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[3]);
}

// ===================================================================

class GetListRequest::_Internal {
 public:
};

GetListRequest::GetListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.GetListRequest)
}
GetListRequest::GetListRequest(const GetListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requester_id().empty()) {
    _this->_impl_.requester_id_.Set(from._internal_requester_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.GetListRequest)
}

inline void GetListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetListRequest::~GetListRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.GetListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.requester_id_.Destroy();
}

void GetListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.GetListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.requester_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string requester_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requester_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListRequest.requester_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.GetListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester_id().data(), static_cast<int>(this->_internal_requester_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListRequest.requester_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requester_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.GetListRequest)
  return target;
}

size_t GetListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.GetListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListRequest::GetClassData() const { return &_class_data_; }


void GetListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListRequest*>(&to_msg);
  auto& from = static_cast<const GetListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.GetListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListRequest::CopyFrom(const GetListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.GetListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListRequest::IsInitialized() const {
  return true;
}

void GetListRequest::InternalSwap(GetListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requester_id_, lhs_arena,
      &other->_impl_.requester_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[4]);
}

// ===================================================================

class GetListResponse::_Internal {
 public:
  static const ::sonet::list::v1::List& list(const GetListResponse* msg);
};

const ::sonet::list::v1::List&
GetListResponse::_Internal::list(const GetListResponse* msg) {
  return *msg->_impl_.list_;
}
GetListResponse::GetListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.GetListResponse)
}
GetListResponse::GetListResponse(const GetListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.list_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_list()) {
    _this->_impl_.list_ = new ::sonet::list::v1::List(*from._impl_.list_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.GetListResponse)
}

inline void GetListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.list_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetListResponse::~GetListResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.GetListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.list_;
}

void GetListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.GetListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.list_ != nullptr) {
    delete _impl_.list_;
  }
  _impl_.list_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.List list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.GetListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .sonet.list.v1.List list = 2;
  if (this->_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.GetListResponse)
  return target;
}

size_t GetListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.GetListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.list.v1.List list = 2;
  if (this->_internal_has_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListResponse::GetClassData() const { return &_class_data_; }


void GetListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListResponse*>(&to_msg);
  auto& from = static_cast<const GetListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.GetListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_list()) {
    _this->_internal_mutable_list()->::sonet::list::v1::List::MergeFrom(
        from._internal_list());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListResponse::CopyFrom(const GetListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.GetListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListResponse::IsInitialized() const {
  return true;
}

void GetListResponse::InternalSwap(GetListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetListResponse, _impl_.success_)
      + sizeof(GetListResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetListResponse, _impl_.list_)>(
          reinterpret_cast<char*>(&_impl_.list_),
          reinterpret_cast<char*>(&other->_impl_.list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[5]);
}

// ===================================================================

class GetUserListsRequest::_Internal {
 public:
};

GetUserListsRequest::GetUserListsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.GetUserListsRequest)
}
GetUserListsRequest::GetUserListsRequest(const GetUserListsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserListsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requester_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requester_id().empty()) {
    _this->_impl_.requester_id_.Set(from._internal_requester_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.GetUserListsRequest)
}

inline void GetUserListsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requester_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserListsRequest::~GetUserListsRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.GetUserListsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserListsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requester_id_.Destroy();
  _impl_.cursor_.Destroy();
}

void GetUserListsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserListsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.GetUserListsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requester_id_.ClearToEmpty();
  _impl_.cursor_.ClearToEmpty();
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserListsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetUserListsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requester_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requester_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetUserListsRequest.requester_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetUserListsRequest.cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserListsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.GetUserListsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetUserListsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester_id().data(), static_cast<int>(this->_internal_requester_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetUserListsRequest.requester_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requester_id(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetUserListsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.GetUserListsRequest)
  return target;
}

size_t GetUserListsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.GetUserListsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester_id());
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserListsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserListsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserListsRequest::GetClassData() const { return &_class_data_; }


void GetUserListsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserListsRequest*>(&to_msg);
  auto& from = static_cast<const GetUserListsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.GetUserListsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserListsRequest::CopyFrom(const GetUserListsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.GetUserListsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserListsRequest::IsInitialized() const {
  return true;
}

void GetUserListsRequest::InternalSwap(GetUserListsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requester_id_, lhs_arena,
      &other->_impl_.requester_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserListsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[6]);
}

// ===================================================================

class GetUserListsResponse::_Internal {
 public:
};

GetUserListsResponse::GetUserListsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.GetUserListsResponse)
}
GetUserListsResponse::GetUserListsResponse(const GetUserListsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserListsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_){from._impl_.lists_}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.GetUserListsResponse)
}

inline void GetUserListsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_){arena}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserListsResponse::~GetUserListsResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.GetUserListsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserListsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lists_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
  _impl_.error_message_.Destroy();
}

void GetUserListsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserListsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.GetUserListsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lists_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserListsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.list.v1.List lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetUserListsResponse.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetUserListsResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserListsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.GetUserListsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .sonet.list.v1.List lists = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_cursor = 3;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetUserListsResponse.next_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_cursor(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetUserListsResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.GetUserListsResponse)
  return target;
}

size_t GetUserListsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.GetUserListsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.list.v1.List lists = 2;
  total_size += 1UL * this->_internal_lists_size();
  for (const auto& msg : this->_impl_.lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 3;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserListsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserListsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserListsResponse::GetClassData() const { return &_class_data_; }


void GetUserListsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserListsResponse*>(&to_msg);
  auto& from = static_cast<const GetUserListsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.GetUserListsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lists_.MergeFrom(from._impl_.lists_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserListsResponse::CopyFrom(const GetUserListsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.GetUserListsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserListsResponse::IsInitialized() const {
  return true;
}

void GetUserListsResponse::InternalSwap(GetUserListsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lists_.InternalSwap(&other->_impl_.lists_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserListsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[7]);
}

// ===================================================================

class UpdateListRequest::_Internal {
 public:
};

UpdateListRequest::UpdateListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.UpdateListRequest)
}
UpdateListRequest::UpdateListRequest(const UpdateListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.is_public_){}
    , decltype(_impl_.list_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requester_id().empty()) {
    _this->_impl_.requester_id_.Set(from._internal_requester_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_public_, &from._impl_.is_public_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.list_type_) -
    reinterpret_cast<char*>(&_impl_.is_public_)) + sizeof(_impl_.list_type_));
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.UpdateListRequest)
}

inline void UpdateListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.is_public_){false}
    , decltype(_impl_.list_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateListRequest::~UpdateListRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.UpdateListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.requester_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void UpdateListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.UpdateListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.requester_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.is_public_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.list_type_) -
      reinterpret_cast<char*>(&_impl_.is_public_)) + sizeof(_impl_.list_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.UpdateListRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string requester_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requester_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.UpdateListRequest.requester_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.UpdateListRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.UpdateListRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // bool is_public = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.ListType list_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_list_type(static_cast<::sonet::list::v1::ListType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.UpdateListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.UpdateListRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester_id().data(), static_cast<int>(this->_internal_requester_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.UpdateListRequest.requester_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requester_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.UpdateListRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.UpdateListRequest.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // bool is_public = 5;
  if (this->_internal_is_public() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_public(), target);
  }

  // .sonet.list.v1.ListType list_type = 6;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_list_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.UpdateListRequest)
  return target;
}

size_t UpdateListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.UpdateListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester_id());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool is_public = 5;
  if (this->_internal_is_public() != 0) {
    total_size += 1 + 1;
  }

  // .sonet.list.v1.ListType list_type = 6;
  if (this->_internal_list_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateListRequest::GetClassData() const { return &_class_data_; }


void UpdateListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateListRequest*>(&to_msg);
  auto& from = static_cast<const UpdateListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.UpdateListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_is_public() != 0) {
    _this->_internal_set_is_public(from._internal_is_public());
  }
  if (from._internal_list_type() != 0) {
    _this->_internal_set_list_type(from._internal_list_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateListRequest::CopyFrom(const UpdateListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.UpdateListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateListRequest::IsInitialized() const {
  return true;
}

void UpdateListRequest::InternalSwap(UpdateListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requester_id_, lhs_arena,
      &other->_impl_.requester_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateListRequest, _impl_.list_type_)
      + sizeof(UpdateListRequest::_impl_.list_type_)
      - PROTOBUF_FIELD_OFFSET(UpdateListRequest, _impl_.is_public_)>(
          reinterpret_cast<char*>(&_impl_.is_public_),
          reinterpret_cast<char*>(&other->_impl_.is_public_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[8]);
}

// ===================================================================

class UpdateListResponse::_Internal {
 public:
  static const ::sonet::list::v1::List& list(const UpdateListResponse* msg);
};

const ::sonet::list::v1::List&
UpdateListResponse::_Internal::list(const UpdateListResponse* msg) {
  return *msg->_impl_.list_;
}
UpdateListResponse::UpdateListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.UpdateListResponse)
}
UpdateListResponse::UpdateListResponse(const UpdateListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.list_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_list()) {
    _this->_impl_.list_ = new ::sonet::list::v1::List(*from._impl_.list_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.UpdateListResponse)
}

inline void UpdateListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.list_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateListResponse::~UpdateListResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.UpdateListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.list_;
}

void UpdateListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.UpdateListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.list_ != nullptr) {
    delete _impl_.list_;
  }
  _impl_.list_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.List list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.UpdateListResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.UpdateListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .sonet.list.v1.List list = 2;
  if (this->_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.UpdateListResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.UpdateListResponse)
  return target;
}

size_t UpdateListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.UpdateListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.list.v1.List list = 2;
  if (this->_internal_has_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateListResponse::GetClassData() const { return &_class_data_; }


void UpdateListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateListResponse*>(&to_msg);
  auto& from = static_cast<const UpdateListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.UpdateListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_list()) {
    _this->_internal_mutable_list()->::sonet::list::v1::List::MergeFrom(
        from._internal_list());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateListResponse::CopyFrom(const UpdateListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.UpdateListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateListResponse::IsInitialized() const {
  return true;
}

void UpdateListResponse::InternalSwap(UpdateListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateListResponse, _impl_.success_)
      + sizeof(UpdateListResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(UpdateListResponse, _impl_.list_)>(
          reinterpret_cast<char*>(&_impl_.list_),
          reinterpret_cast<char*>(&other->_impl_.list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[9]);
}

// ===================================================================

class DeleteListRequest::_Internal {
 public:
};

DeleteListRequest::DeleteListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.DeleteListRequest)
}
DeleteListRequest::DeleteListRequest(const DeleteListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requester_id().empty()) {
    _this->_impl_.requester_id_.Set(from._internal_requester_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.DeleteListRequest)
}

inline void DeleteListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteListRequest::~DeleteListRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.DeleteListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.requester_id_.Destroy();
}

void DeleteListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.DeleteListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.requester_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.DeleteListRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string requester_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requester_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.DeleteListRequest.requester_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.DeleteListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.DeleteListRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester_id().data(), static_cast<int>(this->_internal_requester_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.DeleteListRequest.requester_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requester_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.DeleteListRequest)
  return target;
}

size_t DeleteListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.DeleteListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteListRequest::GetClassData() const { return &_class_data_; }


void DeleteListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteListRequest*>(&to_msg);
  auto& from = static_cast<const DeleteListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.DeleteListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteListRequest::CopyFrom(const DeleteListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.DeleteListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteListRequest::IsInitialized() const {
  return true;
}

void DeleteListRequest::InternalSwap(DeleteListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requester_id_, lhs_arena,
      &other->_impl_.requester_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[10]);
}

// ===================================================================

class DeleteListResponse::_Internal {
 public:
};

DeleteListResponse::DeleteListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.DeleteListResponse)
}
DeleteListResponse::DeleteListResponse(const DeleteListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.DeleteListResponse)
}

inline void DeleteListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteListResponse::~DeleteListResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.DeleteListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void DeleteListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.DeleteListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.DeleteListResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.DeleteListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.DeleteListResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.DeleteListResponse)
  return target;
}

size_t DeleteListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.DeleteListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteListResponse::GetClassData() const { return &_class_data_; }


void DeleteListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteListResponse*>(&to_msg);
  auto& from = static_cast<const DeleteListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.DeleteListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteListResponse::CopyFrom(const DeleteListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.DeleteListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteListResponse::IsInitialized() const {
  return true;
}

void DeleteListResponse::InternalSwap(DeleteListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[11]);
}

// ===================================================================

class AddListMemberRequest::_Internal {
 public:
};

AddListMemberRequest::AddListMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.AddListMemberRequest)
}
AddListMemberRequest::AddListMemberRequest(const AddListMemberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddListMemberRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.added_by_){}
    , decltype(_impl_.notes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.added_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.added_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_added_by().empty()) {
    _this->_impl_.added_by_.Set(from._internal_added_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.AddListMemberRequest)
}

inline void AddListMemberRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.added_by_){}
    , decltype(_impl_.notes_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.added_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.added_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddListMemberRequest::~AddListMemberRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.AddListMemberRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddListMemberRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.added_by_.Destroy();
  _impl_.notes_.Destroy();
}

void AddListMemberRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddListMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.AddListMemberRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.added_by_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddListMemberRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.AddListMemberRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.AddListMemberRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string added_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_added_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.AddListMemberRequest.added_by"));
        } else
          goto handle_unusual;
        continue;
      // string notes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.AddListMemberRequest.notes"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddListMemberRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.AddListMemberRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.AddListMemberRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.AddListMemberRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string added_by = 3;
  if (!this->_internal_added_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_added_by().data(), static_cast<int>(this->_internal_added_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.AddListMemberRequest.added_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_added_by(), target);
  }

  // string notes = 4;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.AddListMemberRequest.notes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.AddListMemberRequest)
  return target;
}

size_t AddListMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.AddListMemberRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string added_by = 3;
  if (!this->_internal_added_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_added_by());
  }

  // string notes = 4;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddListMemberRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddListMemberRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddListMemberRequest::GetClassData() const { return &_class_data_; }


void AddListMemberRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddListMemberRequest*>(&to_msg);
  auto& from = static_cast<const AddListMemberRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.AddListMemberRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_added_by().empty()) {
    _this->_internal_set_added_by(from._internal_added_by());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddListMemberRequest::CopyFrom(const AddListMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.AddListMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddListMemberRequest::IsInitialized() const {
  return true;
}

void AddListMemberRequest::InternalSwap(AddListMemberRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.added_by_, lhs_arena,
      &other->_impl_.added_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddListMemberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[12]);
}

// ===================================================================

class AddListMemberResponse::_Internal {
 public:
  static const ::sonet::list::v1::ListMember& member(const AddListMemberResponse* msg);
};

const ::sonet::list::v1::ListMember&
AddListMemberResponse::_Internal::member(const AddListMemberResponse* msg) {
  return *msg->_impl_.member_;
}
AddListMemberResponse::AddListMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.AddListMemberResponse)
}
AddListMemberResponse::AddListMemberResponse(const AddListMemberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddListMemberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.member_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_member()) {
    _this->_impl_.member_ = new ::sonet::list::v1::ListMember(*from._impl_.member_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.AddListMemberResponse)
}

inline void AddListMemberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.member_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddListMemberResponse::~AddListMemberResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.AddListMemberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddListMemberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.member_;
}

void AddListMemberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddListMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.AddListMemberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.member_ != nullptr) {
    delete _impl_.member_;
  }
  _impl_.member_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddListMemberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.list.v1.ListMember member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.AddListMemberResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddListMemberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.AddListMemberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .sonet.list.v1.ListMember member = 2;
  if (this->_internal_has_member()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::member(this),
        _Internal::member(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.AddListMemberResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.AddListMemberResponse)
  return target;
}

size_t AddListMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.AddListMemberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.list.v1.ListMember member = 2;
  if (this->_internal_has_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.member_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddListMemberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddListMemberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddListMemberResponse::GetClassData() const { return &_class_data_; }


void AddListMemberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddListMemberResponse*>(&to_msg);
  auto& from = static_cast<const AddListMemberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.AddListMemberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_member()) {
    _this->_internal_mutable_member()->::sonet::list::v1::ListMember::MergeFrom(
        from._internal_member());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddListMemberResponse::CopyFrom(const AddListMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.AddListMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddListMemberResponse::IsInitialized() const {
  return true;
}

void AddListMemberResponse::InternalSwap(AddListMemberResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddListMemberResponse, _impl_.success_)
      + sizeof(AddListMemberResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AddListMemberResponse, _impl_.member_)>(
          reinterpret_cast<char*>(&_impl_.member_),
          reinterpret_cast<char*>(&other->_impl_.member_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddListMemberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[13]);
}

// ===================================================================

class RemoveListMemberRequest::_Internal {
 public:
};

RemoveListMemberRequest::RemoveListMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.RemoveListMemberRequest)
}
RemoveListMemberRequest::RemoveListMemberRequest(const RemoveListMemberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveListMemberRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.removed_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.removed_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.removed_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_removed_by().empty()) {
    _this->_impl_.removed_by_.Set(from._internal_removed_by(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.RemoveListMemberRequest)
}

inline void RemoveListMemberRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.removed_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.removed_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.removed_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveListMemberRequest::~RemoveListMemberRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.RemoveListMemberRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveListMemberRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.removed_by_.Destroy();
}

void RemoveListMemberRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveListMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.RemoveListMemberRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.removed_by_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveListMemberRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.RemoveListMemberRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.RemoveListMemberRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string removed_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_removed_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.RemoveListMemberRequest.removed_by"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveListMemberRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.RemoveListMemberRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.RemoveListMemberRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.RemoveListMemberRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string removed_by = 3;
  if (!this->_internal_removed_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_removed_by().data(), static_cast<int>(this->_internal_removed_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.RemoveListMemberRequest.removed_by");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_removed_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.RemoveListMemberRequest)
  return target;
}

size_t RemoveListMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.RemoveListMemberRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string removed_by = 3;
  if (!this->_internal_removed_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_removed_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveListMemberRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveListMemberRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveListMemberRequest::GetClassData() const { return &_class_data_; }


void RemoveListMemberRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveListMemberRequest*>(&to_msg);
  auto& from = static_cast<const RemoveListMemberRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.RemoveListMemberRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_removed_by().empty()) {
    _this->_internal_set_removed_by(from._internal_removed_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveListMemberRequest::CopyFrom(const RemoveListMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.RemoveListMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveListMemberRequest::IsInitialized() const {
  return true;
}

void RemoveListMemberRequest::InternalSwap(RemoveListMemberRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.removed_by_, lhs_arena,
      &other->_impl_.removed_by_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveListMemberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[14]);
}

// ===================================================================

class RemoveListMemberResponse::_Internal {
 public:
};

RemoveListMemberResponse::RemoveListMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.RemoveListMemberResponse)
}
RemoveListMemberResponse::RemoveListMemberResponse(const RemoveListMemberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveListMemberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.RemoveListMemberResponse)
}

inline void RemoveListMemberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveListMemberResponse::~RemoveListMemberResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.RemoveListMemberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveListMemberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void RemoveListMemberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveListMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.RemoveListMemberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveListMemberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.RemoveListMemberResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveListMemberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.RemoveListMemberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.RemoveListMemberResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.RemoveListMemberResponse)
  return target;
}

size_t RemoveListMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.RemoveListMemberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveListMemberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveListMemberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveListMemberResponse::GetClassData() const { return &_class_data_; }


void RemoveListMemberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveListMemberResponse*>(&to_msg);
  auto& from = static_cast<const RemoveListMemberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.RemoveListMemberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveListMemberResponse::CopyFrom(const RemoveListMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.RemoveListMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveListMemberResponse::IsInitialized() const {
  return true;
}

void RemoveListMemberResponse::InternalSwap(RemoveListMemberResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveListMemberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[15]);
}

// ===================================================================

class GetListMembersRequest::_Internal {
 public:
};

GetListMembersRequest::GetListMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.GetListMembersRequest)
}
GetListMembersRequest::GetListMembersRequest(const GetListMembersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListMembersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requester_id().empty()) {
    _this->_impl_.requester_id_.Set(from._internal_requester_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.GetListMembersRequest)
}

inline void GetListMembersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.requester_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetListMembersRequest::~GetListMembersRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.GetListMembersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListMembersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.requester_id_.Destroy();
  _impl_.cursor_.Destroy();
}

void GetListMembersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.GetListMembersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.requester_id_.ClearToEmpty();
  _impl_.cursor_.ClearToEmpty();
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListMembersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListMembersRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string requester_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requester_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListMembersRequest.requester_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListMembersRequest.cursor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetListMembersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.GetListMembersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListMembersRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester_id().data(), static_cast<int>(this->_internal_requester_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListMembersRequest.requester_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requester_id(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListMembersRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.GetListMembersRequest)
  return target;
}

size_t GetListMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.GetListMembersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string requester_id = 2;
  if (!this->_internal_requester_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester_id());
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListMembersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListMembersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListMembersRequest::GetClassData() const { return &_class_data_; }


void GetListMembersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListMembersRequest*>(&to_msg);
  auto& from = static_cast<const GetListMembersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.GetListMembersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListMembersRequest::CopyFrom(const GetListMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.GetListMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListMembersRequest::IsInitialized() const {
  return true;
}

void GetListMembersRequest::InternalSwap(GetListMembersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requester_id_, lhs_arena,
      &other->_impl_.requester_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListMembersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[16]);
}

// ===================================================================

class GetListMembersResponse::_Internal {
 public:
};

GetListMembersResponse::GetListMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.GetListMembersResponse)
}
GetListMembersResponse::GetListMembersResponse(const GetListMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListMembersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.GetListMembersResponse)
}

inline void GetListMembersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , decltype(_impl_.next_cursor_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetListMembersResponse::~GetListMembersResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.GetListMembersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.next_cursor_.Destroy();
  _impl_.error_message_.Destroy();
}

void GetListMembersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.GetListMembersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.next_cursor_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListMembersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.list.v1.ListMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListMembersResponse.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.GetListMembersResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetListMembersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.GetListMembersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .sonet.list.v1.ListMember members = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_cursor = 3;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListMembersResponse.next_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_cursor(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.GetListMembersResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.GetListMembersResponse)
  return target;
}

size_t GetListMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.GetListMembersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.list.v1.ListMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_cursor = 3;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListMembersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListMembersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListMembersResponse::GetClassData() const { return &_class_data_; }


void GetListMembersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListMembersResponse*>(&to_msg);
  auto& from = static_cast<const GetListMembersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.GetListMembersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListMembersResponse::CopyFrom(const GetListMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.GetListMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListMembersResponse::IsInitialized() const {
  return true;
}

void GetListMembersResponse::InternalSwap(GetListMembersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListMembersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[17]);
}

// ===================================================================

class IsUserInListRequest::_Internal {
 public:
};

IsUserInListRequest::IsUserInListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.IsUserInListRequest)
}
IsUserInListRequest::IsUserInListRequest(const IsUserInListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsUserInListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.requester_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list_id().empty()) {
    _this->_impl_.list_id_.Set(from._internal_list_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requester_id().empty()) {
    _this->_impl_.requester_id_.Set(from._internal_requester_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.IsUserInListRequest)
}

inline void IsUserInListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.requester_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.list_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requester_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requester_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IsUserInListRequest::~IsUserInListRequest() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.IsUserInListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsUserInListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.requester_id_.Destroy();
}

void IsUserInListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsUserInListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.IsUserInListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.requester_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsUserInListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string list_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.IsUserInListRequest.list_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.IsUserInListRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requester_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_requester_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.IsUserInListRequest.requester_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsUserInListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.IsUserInListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_list_id().data(), static_cast<int>(this->_internal_list_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.IsUserInListRequest.list_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.IsUserInListRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string requester_id = 3;
  if (!this->_internal_requester_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester_id().data(), static_cast<int>(this->_internal_requester_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.IsUserInListRequest.requester_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requester_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.IsUserInListRequest)
  return target;
}

size_t IsUserInListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.IsUserInListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list_id = 1;
  if (!this->_internal_list_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_list_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requester_id = 3;
  if (!this->_internal_requester_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsUserInListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsUserInListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsUserInListRequest::GetClassData() const { return &_class_data_; }


void IsUserInListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsUserInListRequest*>(&to_msg);
  auto& from = static_cast<const IsUserInListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.IsUserInListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list_id().empty()) {
    _this->_internal_set_list_id(from._internal_list_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsUserInListRequest::CopyFrom(const IsUserInListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.IsUserInListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsUserInListRequest::IsInitialized() const {
  return true;
}

void IsUserInListRequest::InternalSwap(IsUserInListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_id_, lhs_arena,
      &other->_impl_.list_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requester_id_, lhs_arena,
      &other->_impl_.requester_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IsUserInListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[18]);
}

// ===================================================================

class IsUserInListResponse::_Internal {
 public:
};

IsUserInListResponse::IsUserInListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.list.v1.IsUserInListResponse)
}
IsUserInListResponse::IsUserInListResponse(const IsUserInListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsUserInListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.is_member_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_member_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.is_member_));
  // @@protoc_insertion_point(copy_constructor:sonet.list.v1.IsUserInListResponse)
}

inline void IsUserInListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.is_member_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IsUserInListResponse::~IsUserInListResponse() {
  // @@protoc_insertion_point(destructor:sonet.list.v1.IsUserInListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsUserInListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void IsUserInListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsUserInListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.list.v1.IsUserInListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_member_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.is_member_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsUserInListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.list.v1.IsUserInListResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsUserInListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.list.v1.IsUserInListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bool is_member = 2;
  if (this->_internal_is_member() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_member(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.list.v1.IsUserInListResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.list.v1.IsUserInListResponse)
  return target;
}

size_t IsUserInListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.list.v1.IsUserInListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool is_member = 2;
  if (this->_internal_is_member() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsUserInListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsUserInListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsUserInListResponse::GetClassData() const { return &_class_data_; }


void IsUserInListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsUserInListResponse*>(&to_msg);
  auto& from = static_cast<const IsUserInListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.list.v1.IsUserInListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_is_member() != 0) {
    _this->_internal_set_is_member(from._internal_is_member());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsUserInListResponse::CopyFrom(const IsUserInListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.list.v1.IsUserInListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsUserInListResponse::IsInitialized() const {
  return true;
}

void IsUserInListResponse::InternalSwap(IsUserInListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsUserInListResponse, _impl_.is_member_)
      + sizeof(IsUserInListResponse::_impl_.is_member_)
      - PROTOBUF_FIELD_OFFSET(IsUserInListResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IsUserInListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2flist_5fservice_2eproto_getter, &descriptor_table_services_2flist_5fservice_2eproto_once,
      file_level_metadata_services_2flist_5fservice_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace list
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::list::v1::List*
Arena::CreateMaybeMessage< ::sonet::list::v1::List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::List >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::ListMember*
Arena::CreateMaybeMessage< ::sonet::list::v1::ListMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::ListMember >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::CreateListRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::CreateListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::CreateListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::CreateListResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::CreateListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::CreateListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::GetListRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::GetListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::GetListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::GetListResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::GetListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::GetListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::GetUserListsRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::GetUserListsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::GetUserListsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::GetUserListsResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::GetUserListsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::GetUserListsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::UpdateListRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::UpdateListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::UpdateListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::UpdateListResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::UpdateListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::UpdateListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::DeleteListRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::DeleteListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::DeleteListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::DeleteListResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::DeleteListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::DeleteListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::AddListMemberRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::AddListMemberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::AddListMemberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::AddListMemberResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::AddListMemberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::AddListMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::RemoveListMemberRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::RemoveListMemberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::RemoveListMemberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::RemoveListMemberResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::RemoveListMemberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::RemoveListMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::GetListMembersRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::GetListMembersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::GetListMembersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::GetListMembersResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::GetListMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::GetListMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::IsUserInListRequest*
Arena::CreateMaybeMessage< ::sonet::list::v1::IsUserInListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::IsUserInListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::list::v1::IsUserInListResponse*
Arena::CreateMaybeMessage< ::sonet::list::v1::IsUserInListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::list::v1::IsUserInListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
