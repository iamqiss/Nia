// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/note.proto
// Original file comments:
//
// Copyright (c) 2025 Neo Qiss
// All rights reserved.
//
// This software is proprietary and confidential.
// Unauthorized copying, distribution, or use is strictly prohibited.
//
//
#ifndef GRPC_services_2fnote_2eproto__INCLUDED
#define GRPC_services_2fnote_2eproto__INCLUDED

#include "services/note.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sonet {
namespace note {

// ============= NOTE SERVICE =============
class NoteService final {
 public:
  static constexpr char const* service_full_name() {
    return "sonet.note.NoteService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Core operations
    virtual ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::sonet::note::CreateNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::CreateNoteResponse>> AsyncCreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::CreateNoteResponse>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::CreateNoteResponse>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::CreateNoteResponse>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::sonet::note::GetNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteResponse>> AsyncGetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteResponse>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteResponse>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteResponse>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::sonet::note::DeleteNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::DeleteNoteResponse>> AsyncDeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::DeleteNoteResponse>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::DeleteNoteResponse>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::DeleteNoteResponse>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    // Interactions
    virtual ::grpc::Status LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::sonet::note::LikeNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::LikeNoteResponse>> AsyncLikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::LikeNoteResponse>>(AsyncLikeNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::LikeNoteResponse>> PrepareAsyncLikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::LikeNoteResponse>>(PrepareAsyncLikeNoteRaw(context, request, cq));
    }
    virtual ::grpc::Status RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::sonet::note::RenoteNoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::RenoteNoteResponse>> AsyncRenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::RenoteNoteResponse>>(AsyncRenoteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::RenoteNoteResponse>> PrepareAsyncRenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::RenoteNoteResponse>>(PrepareAsyncRenoteNoteRaw(context, request, cq));
    }
    // Queries
    virtual ::grpc::Status GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::sonet::note::GetUserNotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetUserNotesResponse>> AsyncGetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetUserNotesResponse>>(AsyncGetUserNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetUserNotesResponse>> PrepareAsyncGetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetUserNotesResponse>>(PrepareAsyncGetUserNotesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::sonet::note::GetNoteThreadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteThreadResponse>> AsyncGetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteThreadResponse>>(AsyncGetNoteThreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteThreadResponse>> PrepareAsyncGetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteThreadResponse>>(PrepareAsyncGetNoteThreadRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::sonet::note::SearchNotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::SearchNotesResponse>> AsyncSearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::SearchNotesResponse>>(AsyncSearchNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::SearchNotesResponse>> PrepareAsyncSearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::SearchNotesResponse>>(PrepareAsyncSearchNotesRaw(context, request, cq));
    }
    // Health
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::sonet::note::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Core operations
      virtual void CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Interactions
      virtual void LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Queries
      virtual void GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Health
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::CreateNoteResponse>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::CreateNoteResponse>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteResponse>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteResponse>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::DeleteNoteResponse>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::DeleteNoteResponse>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::LikeNoteResponse>* AsyncLikeNoteRaw(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::LikeNoteResponse>* PrepareAsyncLikeNoteRaw(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::RenoteNoteResponse>* AsyncRenoteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::RenoteNoteResponse>* PrepareAsyncRenoteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetUserNotesResponse>* AsyncGetUserNotesRaw(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetUserNotesResponse>* PrepareAsyncGetUserNotesRaw(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteThreadResponse>* AsyncGetNoteThreadRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::GetNoteThreadResponse>* PrepareAsyncGetNoteThreadRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::SearchNotesResponse>* AsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::SearchNotesResponse>* PrepareAsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::note::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::sonet::note::CreateNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>> AsyncCreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    ::grpc::Status GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::sonet::note::GetNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>> AsyncGetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::sonet::note::DeleteNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>> AsyncDeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    ::grpc::Status LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::sonet::note::LikeNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>> AsyncLikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>>(AsyncLikeNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>> PrepareAsyncLikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>>(PrepareAsyncLikeNoteRaw(context, request, cq));
    }
    ::grpc::Status RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::sonet::note::RenoteNoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>> AsyncRenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>>(AsyncRenoteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>> PrepareAsyncRenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>>(PrepareAsyncRenoteNoteRaw(context, request, cq));
    }
    ::grpc::Status GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::sonet::note::GetUserNotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>> AsyncGetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>>(AsyncGetUserNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>> PrepareAsyncGetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>>(PrepareAsyncGetUserNotesRaw(context, request, cq));
    }
    ::grpc::Status GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::sonet::note::GetNoteThreadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>> AsyncGetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>>(AsyncGetNoteThreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>> PrepareAsyncGetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>>(PrepareAsyncGetNoteThreadRaw(context, request, cq));
    }
    ::grpc::Status SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::sonet::note::SearchNotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>> AsyncSearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>>(AsyncSearchNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>> PrepareAsyncSearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>>(PrepareAsyncSearchNotesRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::sonet::note::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response, std::function<void(::grpc::Status)>) override;
      void RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>* AsyncLikeNoteRaw(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>* PrepareAsyncLikeNoteRaw(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>* AsyncRenoteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>* PrepareAsyncRenoteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>* AsyncGetUserNotesRaw(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>* PrepareAsyncGetUserNotesRaw(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>* AsyncGetNoteThreadRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>* PrepareAsyncGetNoteThreadRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>* AsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>* PrepareAsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNote_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNote_;
    const ::grpc::internal::RpcMethod rpcmethod_LikeNote_;
    const ::grpc::internal::RpcMethod rpcmethod_RenoteNote_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserNotes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNoteThread_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchNotes_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Core operations
    virtual ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response);
    virtual ::grpc::Status GetNote(::grpc::ServerContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response);
    virtual ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response);
    // Interactions
    virtual ::grpc::Status LikeNote(::grpc::ServerContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response);
    virtual ::grpc::Status RenoteNote(::grpc::ServerContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response);
    // Queries
    virtual ::grpc::Status GetUserNotes(::grpc::ServerContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response);
    virtual ::grpc::Status GetNoteThread(::grpc::ServerContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response);
    virtual ::grpc::Status SearchNotes(::grpc::ServerContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response);
    // Health
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::sonet::note::CreateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::CreateNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNote() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::sonet::note::GetNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::GetNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::sonet::note::DeleteNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::DeleteNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LikeNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LikeNote() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LikeNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LikeNote(::grpc::ServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLikeNote(::grpc::ServerContext* context, ::sonet::note::LikeNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::LikeNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenoteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenoteNote() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RenoteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenoteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenoteNote(::grpc::ServerContext* context, ::sonet::note::RenoteNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::RenoteNoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserNotes() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetUserNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserNotes(::grpc::ServerContext* context, ::sonet::note::GetUserNotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::GetUserNotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNoteThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNoteThread() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetNoteThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoteThread(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoteThread(::grpc::ServerContext* context, ::sonet::note::GetNoteThreadRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::GetNoteThreadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchNotes() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SearchNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNotes(::grpc::ServerContext* context, ::sonet::note::SearchNotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::SearchNotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::sonet::note::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::note::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateNote<WithAsyncMethod_GetNote<WithAsyncMethod_DeleteNote<WithAsyncMethod_LikeNote<WithAsyncMethod_RenoteNote<WithAsyncMethod_GetUserNotes<WithAsyncMethod_GetNoteThread<WithAsyncMethod_SearchNotes<WithAsyncMethod_HealthCheck<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNote() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response) { return this->CreateNote(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNote(
        ::grpc::MessageAllocator< ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNote(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNote() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response) { return this->GetNote(context, request, response); }));}
    void SetMessageAllocatorFor_GetNote(
        ::grpc::MessageAllocator< ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNote(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNote() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response) { return this->DeleteNote(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNote(
        ::grpc::MessageAllocator< ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNote(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LikeNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LikeNote() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response) { return this->LikeNote(context, request, response); }));}
    void SetMessageAllocatorFor_LikeNote(
        ::grpc::MessageAllocator< ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LikeNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LikeNote(::grpc::ServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LikeNote(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RenoteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RenoteNote() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response) { return this->RenoteNote(context, request, response); }));}
    void SetMessageAllocatorFor_RenoteNote(
        ::grpc::MessageAllocator< ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RenoteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenoteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenoteNote(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserNotes() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response) { return this->GetUserNotes(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserNotes(
        ::grpc::MessageAllocator< ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserNotes(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNoteThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNoteThread() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response) { return this->GetNoteThread(context, request, response); }));}
    void SetMessageAllocatorFor_GetNoteThread(
        ::grpc::MessageAllocator< ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNoteThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoteThread(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNoteThread(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchNotes() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response) { return this->SearchNotes(context, request, response); }));}
    void SetMessageAllocatorFor_SearchNotes(
        ::grpc::MessageAllocator< ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchNotes(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateNote<WithCallbackMethod_GetNote<WithCallbackMethod_DeleteNote<WithCallbackMethod_LikeNote<WithCallbackMethod_RenoteNote<WithCallbackMethod_GetUserNotes<WithCallbackMethod_GetNoteThread<WithCallbackMethod_SearchNotes<WithCallbackMethod_HealthCheck<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNote() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LikeNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LikeNote() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LikeNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LikeNote(::grpc::ServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenoteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenoteNote() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RenoteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenoteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserNotes() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetUserNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNoteThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNoteThread() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetNoteThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoteThread(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchNotes() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SearchNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNote() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LikeNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LikeNote() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LikeNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LikeNote(::grpc::ServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLikeNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenoteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenoteNote() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RenoteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenoteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenoteNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserNotes() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetUserNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserNotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNoteThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNoteThread() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetNoteThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoteThread(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoteThread(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchNotes() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SearchNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNote() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNote() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNote() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LikeNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LikeNote() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LikeNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_LikeNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LikeNote(::grpc::ServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LikeNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RenoteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RenoteNote() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenoteNote(context, request, response); }));
    }
    ~WithRawCallbackMethod_RenoteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenoteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenoteNote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserNotes() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserNotes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserNotes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNoteThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNoteThread() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNoteThread(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNoteThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoteThread(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNoteThread(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchNotes() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchNotes(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchNotes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse>* streamer) {
                       return this->StreamedCreateNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* /*context*/, const ::sonet::note::CreateNoteRequest* /*request*/, ::sonet::note::CreateNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::CreateNoteRequest,::sonet::note::CreateNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNote() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse>* streamer) {
                       return this->StreamedGetNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteRequest* /*request*/, ::sonet::note::GetNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::GetNoteRequest,::sonet::note::GetNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse>* streamer) {
                       return this->StreamedDeleteNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::DeleteNoteRequest* /*request*/, ::sonet::note::DeleteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::DeleteNoteRequest,::sonet::note::DeleteNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LikeNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LikeNote() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse>* streamer) {
                       return this->StreamedLikeNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LikeNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LikeNote(::grpc::ServerContext* /*context*/, const ::sonet::note::LikeNoteRequest* /*request*/, ::sonet::note::LikeNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLikeNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::LikeNoteRequest,::sonet::note::LikeNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenoteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenoteNote() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse>* streamer) {
                       return this->StreamedRenoteNote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenoteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenoteNote(::grpc::ServerContext* /*context*/, const ::sonet::note::RenoteNoteRequest* /*request*/, ::sonet::note::RenoteNoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenoteNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::RenoteNoteRequest,::sonet::note::RenoteNoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserNotes() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse>* streamer) {
                       return this->StreamedGetUserNotes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::GetUserNotesRequest* /*request*/, ::sonet::note::GetUserNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserNotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::GetUserNotesRequest,::sonet::note::GetUserNotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNoteThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNoteThread() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse>* streamer) {
                       return this->StreamedGetNoteThread(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNoteThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNoteThread(::grpc::ServerContext* /*context*/, const ::sonet::note::GetNoteThreadRequest* /*request*/, ::sonet::note::GetNoteThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNoteThread(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::GetNoteThreadRequest,::sonet::note::GetNoteThreadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchNotes() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse>* streamer) {
                       return this->StreamedSearchNotes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchNotes(::grpc::ServerContext* /*context*/, const ::sonet::note::SearchNotesRequest* /*request*/, ::sonet::note::SearchNotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchNotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::SearchNotesRequest,::sonet::note::SearchNotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::note::HealthCheckRequest* /*request*/, ::sonet::note::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::note::HealthCheckRequest,::sonet::note::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_LikeNote<WithStreamedUnaryMethod_RenoteNote<WithStreamedUnaryMethod_GetUserNotes<WithStreamedUnaryMethod_GetNoteThread<WithStreamedUnaryMethod_SearchNotes<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_LikeNote<WithStreamedUnaryMethod_RenoteNote<WithStreamedUnaryMethod_GetUserNotes<WithStreamedUnaryMethod_GetNoteThread<WithStreamedUnaryMethod_SearchNotes<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > > StreamedService;
};

}  // namespace note
}  // namespace sonet


#endif  // GRPC_services_2fnote_2eproto__INCLUDED
