// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/note.proto

#include "services/note.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace note {
PROTOBUF_CONSTEXPR NoteMention::NoteMention(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_offset_)*/0
  , /*decltype(_impl_.end_offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoteMentionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteMentionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteMentionDefaultTypeInternal() {}
  union {
    NoteMention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteMentionDefaultTypeInternal _NoteMention_default_instance_;
PROTOBUF_CONSTEXPR NoteHashtag::NoteHashtag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_offset_)*/0
  , /*decltype(_impl_.end_offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoteHashtagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteHashtagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteHashtagDefaultTypeInternal() {}
  union {
    NoteHashtag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteHashtagDefaultTypeInternal _NoteHashtag_default_instance_;
PROTOBUF_CONSTEXPR NoteLink::NoteLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_offset_)*/0
  , /*decltype(_impl_.end_offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoteLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteLinkDefaultTypeInternal() {}
  union {
    NoteLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteLinkDefaultTypeInternal _NoteLink_default_instance_;
PROTOBUF_CONSTEXPR NoteEntities::NoteEntities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mentions_)*/{}
  , /*decltype(_impl_.hashtags_)*/{}
  , /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoteEntitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteEntitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteEntitiesDefaultTypeInternal() {}
  union {
    NoteEntities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteEntitiesDefaultTypeInternal _NoteEntities_default_instance_;
PROTOBUF_CONSTEXPR GeoLocation::GeoLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.place_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeoLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoLocationDefaultTypeInternal() {}
  union {
    GeoLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoLocationDefaultTypeInternal _GeoLocation_default_instance_;
PROTOBUF_CONSTEXPR NoteMetrics::NoteMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.like_count_)*/int64_t{0}
  , /*decltype(_impl_.renote_count_)*/int64_t{0}
  , /*decltype(_impl_.reply_count_)*/int64_t{0}
  , /*decltype(_impl_.quote_count_)*/int64_t{0}
  , /*decltype(_impl_.bookmark_count_)*/int64_t{0}
  , /*decltype(_impl_.view_count_)*/int64_t{0}
  , /*decltype(_impl_.engagement_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoteMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteMetricsDefaultTypeInternal() {}
  union {
    NoteMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteMetricsDefaultTypeInternal _NoteMetrics_default_instance_;
PROTOBUF_CONSTEXPR Note::Note(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_ids_)*/{}
  , /*decltype(_impl_.flags_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_to_note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_to_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thread_root_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.renoted_note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.renoted_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entities_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.metrics_)*/nullptr
  , /*decltype(_impl_.visibility_)*/0
  , /*decltype(_impl_.content_warning_)*/0
  , /*decltype(_impl_.is_quote_renote_)*/false
  , /*decltype(_impl_.is_verified_content_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteDefaultTypeInternal() {}
  union {
    Note _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteDefaultTypeInternal _Note_default_instance_;
PROTOBUF_CONSTEXPR UserNoteInteraction::UserNoteInteraction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_viewed_at_)*/nullptr
  , /*decltype(_impl_.interacted_at_)*/nullptr
  , /*decltype(_impl_.has_liked_)*/false
  , /*decltype(_impl_.has_renoted_)*/false
  , /*decltype(_impl_.has_bookmarked_)*/false
  , /*decltype(_impl_.has_reported_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserNoteInteractionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserNoteInteractionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserNoteInteractionDefaultTypeInternal() {}
  union {
    UserNoteInteraction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserNoteInteractionDefaultTypeInternal _UserNoteInteraction_default_instance_;
PROTOBUF_CONSTEXPR CreateNoteRequest::CreateNoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_ids_)*/{}
  , /*decltype(_impl_.author_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_to_note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.renoted_note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idempotency_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.visibility_)*/0
  , /*decltype(_impl_.content_warning_)*/0
  , /*decltype(_impl_.is_quote_renote_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateNoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateNoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateNoteRequestDefaultTypeInternal() {}
  union {
    CreateNoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateNoteRequestDefaultTypeInternal _CreateNoteRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateNoteResponse::CreateNoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateNoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateNoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateNoteResponseDefaultTypeInternal() {}
  union {
    CreateNoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateNoteResponseDefaultTypeInternal _CreateNoteResponse_default_instance_;
PROTOBUF_CONSTEXPR GetNoteRequest::GetNoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_thread_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNoteRequestDefaultTypeInternal() {}
  union {
    GetNoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNoteRequestDefaultTypeInternal _GetNoteRequest_default_instance_;
PROTOBUF_CONSTEXPR GetNoteResponse::GetNoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.thread_notes_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_.user_interaction_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNoteResponseDefaultTypeInternal() {}
  union {
    GetNoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNoteResponseDefaultTypeInternal _GetNoteResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteNoteRequest::DeleteNoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteNoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteNoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteNoteRequestDefaultTypeInternal() {}
  union {
    DeleteNoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteNoteRequestDefaultTypeInternal _DeleteNoteRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteNoteResponse::DeleteNoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteNoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteNoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteNoteResponseDefaultTypeInternal() {}
  union {
    DeleteNoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteNoteResponseDefaultTypeInternal _DeleteNoteResponse_default_instance_;
PROTOBUF_CONSTEXPR LikeNoteRequest::LikeNoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.like_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LikeNoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LikeNoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LikeNoteRequestDefaultTypeInternal() {}
  union {
    LikeNoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LikeNoteRequestDefaultTypeInternal _LikeNoteRequest_default_instance_;
PROTOBUF_CONSTEXPR LikeNoteResponse::LikeNoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_like_count_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LikeNoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LikeNoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LikeNoteResponseDefaultTypeInternal() {}
  union {
    LikeNoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LikeNoteResponseDefaultTypeInternal _LikeNoteResponse_default_instance_;
PROTOBUF_CONSTEXPR RenoteNoteRequest::RenoteNoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quote_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_quote_renote_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenoteNoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenoteNoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenoteNoteRequestDefaultTypeInternal() {}
  union {
    RenoteNoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenoteNoteRequestDefaultTypeInternal _RenoteNoteRequest_default_instance_;
PROTOBUF_CONSTEXPR RenoteNoteResponse::RenoteNoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.renote_note_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenoteNoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenoteNoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenoteNoteResponseDefaultTypeInternal() {}
  union {
    RenoteNoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenoteNoteResponseDefaultTypeInternal _RenoteNoteResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserNotesRequest::GetUserNotesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.include_replies_)*/false
  , /*decltype(_impl_.include_renotes_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserNotesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserNotesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserNotesRequestDefaultTypeInternal() {}
  union {
    GetUserNotesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserNotesRequestDefaultTypeInternal _GetUserNotesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserNotesResponse::GetUserNotesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notes_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserNotesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserNotesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserNotesResponseDefaultTypeInternal() {}
  union {
    GetUserNotesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserNotesResponseDefaultTypeInternal _GetUserNotesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetNoteThreadRequest::GetNoteThreadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.note_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNoteThreadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNoteThreadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNoteThreadRequestDefaultTypeInternal() {}
  union {
    GetNoteThreadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNoteThreadRequestDefaultTypeInternal _GetNoteThreadRequest_default_instance_;
PROTOBUF_CONSTEXPR GetNoteThreadResponse::GetNoteThreadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replies_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_note_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNoteThreadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNoteThreadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNoteThreadResponseDefaultTypeInternal() {}
  union {
    GetNoteThreadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNoteThreadResponseDefaultTypeInternal _GetNoteThreadResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchNotesRequest::SearchNotesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashtags_)*/{}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_.until_)*/nullptr
  , /*decltype(_impl_.verified_only_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchNotesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchNotesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchNotesRequestDefaultTypeInternal() {}
  union {
    SearchNotesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchNotesRequestDefaultTypeInternal _SearchNotesRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchNotesResponse::SearchNotesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notes_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchNotesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchNotesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchNotesResponseDefaultTypeInternal() {}
  union {
    SearchNotesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchNotesResponseDefaultTypeInternal _SearchNotesResponse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HealthCheckResponse_DetailsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponse_DetailsEntry_DoNotUseDefaultTypeInternal _HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
}  // namespace note
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_services_2fnote_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_services_2fnote_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fnote_2eproto = nullptr;

const uint32_t TableStruct_services_2fnote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMention, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMention, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMention, _impl_.start_offset_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMention, _impl_.end_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteHashtag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteHashtag, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteHashtag, _impl_.start_offset_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteHashtag, _impl_.end_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _impl_.image_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _impl_.start_offset_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteLink, _impl_.end_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteEntities, _impl_.mentions_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteEntities, _impl_.hashtags_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteEntities, _impl_.links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GeoLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GeoLocation, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GeoLocation, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GeoLocation, _impl_.place_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GeoLocation, _impl_.country_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.like_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.renote_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.reply_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.quote_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.bookmark_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.view_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::NoteMetrics, _impl_.engagement_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.content_warning_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.media_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.entities_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.reply_to_note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.reply_to_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.thread_root_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.renoted_note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.renoted_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.is_quote_renote_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.deleted_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.language_code_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.is_verified_content_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::Note, _impl_.client_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.has_liked_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.has_renoted_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.has_bookmarked_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.has_reported_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.last_viewed_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::UserNoteInteraction, _impl_.interacted_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.content_warning_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.media_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.reply_to_note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.renoted_note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.is_quote_renote_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.client_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteRequest, _impl_.idempotency_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteResponse, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::CreateNoteResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteRequest, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteRequest, _impl_.include_thread_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteResponse, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteResponse, _impl_.user_interaction_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteResponse, _impl_.thread_notes_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::DeleteNoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::DeleteNoteRequest, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::DeleteNoteRequest, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::DeleteNoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::DeleteNoteResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::DeleteNoteResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteRequest, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteRequest, _impl_.like_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteResponse, _impl_.new_like_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::LikeNoteResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteRequest, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteRequest, _impl_.is_quote_renote_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteRequest, _impl_.quote_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteResponse, _impl_.renote_note_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::RenoteNoteResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesRequest, _impl_.include_replies_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesRequest, _impl_.include_renotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesResponse, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetUserNotesResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadRequest, _impl_.note_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadResponse, _impl_.root_note_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadResponse, _impl_.replies_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::GetNoteThreadResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.hashtags_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.since_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.until_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesRequest, _impl_.verified_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesResponse, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::SearchNotesResponse, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::note::HealthCheckResponse, _impl_.details_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::note::NoteMention)},
  { 10, -1, -1, sizeof(::sonet::note::NoteHashtag)},
  { 19, -1, -1, sizeof(::sonet::note::NoteLink)},
  { 31, -1, -1, sizeof(::sonet::note::NoteEntities)},
  { 40, -1, -1, sizeof(::sonet::note::GeoLocation)},
  { 50, -1, -1, sizeof(::sonet::note::NoteMetrics)},
  { 63, -1, -1, sizeof(::sonet::note::Note)},
  { 91, -1, -1, sizeof(::sonet::note::UserNoteInteraction)},
  { 105, -1, -1, sizeof(::sonet::note::CreateNoteRequest)},
  { 122, -1, -1, sizeof(::sonet::note::CreateNoteResponse)},
  { 131, -1, -1, sizeof(::sonet::note::GetNoteRequest)},
  { 140, -1, -1, sizeof(::sonet::note::GetNoteResponse)},
  { 151, -1, -1, sizeof(::sonet::note::DeleteNoteRequest)},
  { 159, -1, -1, sizeof(::sonet::note::DeleteNoteResponse)},
  { 167, -1, -1, sizeof(::sonet::note::LikeNoteRequest)},
  { 176, -1, -1, sizeof(::sonet::note::LikeNoteResponse)},
  { 185, -1, -1, sizeof(::sonet::note::RenoteNoteRequest)},
  { 195, -1, -1, sizeof(::sonet::note::RenoteNoteResponse)},
  { 204, -1, -1, sizeof(::sonet::note::GetUserNotesRequest)},
  { 215, -1, -1, sizeof(::sonet::note::GetUserNotesResponse)},
  { 225, -1, -1, sizeof(::sonet::note::GetNoteThreadRequest)},
  { 234, -1, -1, sizeof(::sonet::note::GetNoteThreadResponse)},
  { 245, -1, -1, sizeof(::sonet::note::SearchNotesRequest)},
  { 260, -1, -1, sizeof(::sonet::note::SearchNotesResponse)},
  { 270, -1, -1, sizeof(::sonet::note::HealthCheckRequest)},
  { 276, 284, -1, sizeof(::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse)},
  { 286, -1, -1, sizeof(::sonet::note::HealthCheckResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::note::_NoteMention_default_instance_._instance,
  &::sonet::note::_NoteHashtag_default_instance_._instance,
  &::sonet::note::_NoteLink_default_instance_._instance,
  &::sonet::note::_NoteEntities_default_instance_._instance,
  &::sonet::note::_GeoLocation_default_instance_._instance,
  &::sonet::note::_NoteMetrics_default_instance_._instance,
  &::sonet::note::_Note_default_instance_._instance,
  &::sonet::note::_UserNoteInteraction_default_instance_._instance,
  &::sonet::note::_CreateNoteRequest_default_instance_._instance,
  &::sonet::note::_CreateNoteResponse_default_instance_._instance,
  &::sonet::note::_GetNoteRequest_default_instance_._instance,
  &::sonet::note::_GetNoteResponse_default_instance_._instance,
  &::sonet::note::_DeleteNoteRequest_default_instance_._instance,
  &::sonet::note::_DeleteNoteResponse_default_instance_._instance,
  &::sonet::note::_LikeNoteRequest_default_instance_._instance,
  &::sonet::note::_LikeNoteResponse_default_instance_._instance,
  &::sonet::note::_RenoteNoteRequest_default_instance_._instance,
  &::sonet::note::_RenoteNoteResponse_default_instance_._instance,
  &::sonet::note::_GetUserNotesRequest_default_instance_._instance,
  &::sonet::note::_GetUserNotesResponse_default_instance_._instance,
  &::sonet::note::_GetNoteThreadRequest_default_instance_._instance,
  &::sonet::note::_GetNoteThreadResponse_default_instance_._instance,
  &::sonet::note::_SearchNotesRequest_default_instance_._instance,
  &::sonet::note::_SearchNotesResponse_default_instance_._instance,
  &::sonet::note::_HealthCheckRequest_default_instance_._instance,
  &::sonet::note::_HealthCheckResponse_DetailsEntry_DoNotUse_default_instance_._instance,
  &::sonet::note::_HealthCheckResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fnote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023services/note.proto\022\nsonet.note\032\026commo"
  "n/timestamp.proto\032\027common/pagination.pro"
  "to\"Z\n\013NoteMention\022\017\n\007user_id\030\001 \001(\t\022\020\n\010us"
  "ername\030\002 \001(\t\022\024\n\014start_offset\030\003 \001(\005\022\022\n\nen"
  "d_offset\030\004 \001(\005\"D\n\013NoteHashtag\022\013\n\003tag\030\001 \001"
  "(\t\022\024\n\014start_offset\030\002 \001(\005\022\022\n\nend_offset\030\003"
  " \001(\005\"x\n\010NoteLink\022\013\n\003url\030\001 \001(\t\022\r\n\005title\030\002"
  " \001(\t\022\023\n\013description\030\003 \001(\t\022\021\n\timage_url\030\004"
  " \001(\t\022\024\n\014start_offset\030\005 \001(\005\022\022\n\nend_offset"
  "\030\006 \001(\005\"\211\001\n\014NoteEntities\022)\n\010mentions\030\001 \003("
  "\0132\027.sonet.note.NoteMention\022)\n\010hashtags\030\002"
  " \003(\0132\027.sonet.note.NoteHashtag\022#\n\005links\030\003"
  " \003(\0132\024.sonet.note.NoteLink\"\\\n\013GeoLocatio"
  "n\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\022"
  "\n\nplace_name\030\003 \001(\t\022\024\n\014country_code\030\004 \001(\t"
  "\"\246\001\n\013NoteMetrics\022\022\n\nlike_count\030\001 \001(\003\022\024\n\014"
  "renote_count\030\002 \001(\003\022\023\n\013reply_count\030\003 \001(\003\022"
  "\023\n\013quote_count\030\004 \001(\003\022\026\n\016bookmark_count\030\005"
  " \001(\003\022\022\n\nview_count\030\006 \001(\003\022\027\n\017engagement_r"
  "ate\030\007 \001(\001\"\242\005\n\004Note\022\n\n\002id\030\001 \001(\t\022\021\n\tauthor"
  "_id\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\022.\n\nvisibility\030\004 "
  "\001(\0162\032.sonet.note.NoteVisibility\0223\n\017conte"
  "nt_warning\030\005 \001(\0162\032.sonet.note.ContentWar"
  "ning\022\021\n\tmedia_ids\030\006 \003(\t\022*\n\010entities\030\007 \001("
  "\0132\030.sonet.note.NoteEntities\022)\n\010location\030"
  "\010 \001(\0132\027.sonet.note.GeoLocation\022\030\n\020reply_"
  "to_note_id\030\t \001(\t\022\030\n\020reply_to_user_id\030\n \001"
  "(\t\022\026\n\016thread_root_id\030\013 \001(\t\022\027\n\017renoted_no"
  "te_id\030\014 \001(\t\022\027\n\017renoted_user_id\030\r \001(\t\022\027\n\017"
  "is_quote_renote\030\016 \001(\010\022+\n\ncreated_at\030\017 \001("
  "\0132\027.sonet.common.Timestamp\022+\n\nupdated_at"
  "\030\020 \001(\0132\027.sonet.common.Timestamp\022+\n\ndelet"
  "ed_at\030\021 \001(\0132\027.sonet.common.Timestamp\022(\n\007"
  "metrics\030\022 \001(\0132\027.sonet.note.NoteMetrics\022\025"
  "\n\rlanguage_code\030\023 \001(\t\022\r\n\005flags\030\024 \003(\t\022\033\n\023"
  "is_verified_content\030\025 \001(\010\022\023\n\013client_name"
  "\030\026 \001(\t\"\356\001\n\023UserNoteInteraction\022\017\n\007user_i"
  "d\030\001 \001(\t\022\017\n\007note_id\030\002 \001(\t\022\021\n\thas_liked\030\003 "
  "\001(\010\022\023\n\013has_renoted\030\004 \001(\010\022\026\n\016has_bookmark"
  "ed\030\005 \001(\010\022\024\n\014has_reported\030\006 \001(\010\022/\n\016last_v"
  "iewed_at\030\007 \001(\0132\027.sonet.common.Timestamp\022"
  ".\n\rinteracted_at\030\010 \001(\0132\027.sonet.common.Ti"
  "mestamp\"\321\002\n\021CreateNoteRequest\022\021\n\tauthor_"
  "id\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022.\n\nvisibility\030\003 \001"
  "(\0162\032.sonet.note.NoteVisibility\0223\n\017conten"
  "t_warning\030\004 \001(\0162\032.sonet.note.ContentWarn"
  "ing\022\021\n\tmedia_ids\030\005 \003(\t\022)\n\010location\030\006 \001(\013"
  "2\027.sonet.note.GeoLocation\022\030\n\020reply_to_no"
  "te_id\030\007 \001(\t\022\027\n\017renoted_note_id\030\010 \001(\t\022\027\n\017"
  "is_quote_renote\030\t \001(\010\022\023\n\013client_name\030\n \001"
  "(\t\022\027\n\017idempotency_key\030\013 \001(\t\"\\\n\022CreateNot"
  "eResponse\022\036\n\004note\030\001 \001(\0132\020.sonet.note.Not"
  "e\022\017\n\007success\030\002 \001(\010\022\025\n\rerror_message\030\003 \001("
  "\t\"U\n\016GetNoteRequest\022\017\n\007note_id\030\001 \001(\t\022\032\n\022"
  "requesting_user_id\030\002 \001(\t\022\026\n\016include_thre"
  "ad\030\003 \001(\010\"\274\001\n\017GetNoteResponse\022\036\n\004note\030\001 \001"
  "(\0132\020.sonet.note.Note\0229\n\020user_interaction"
  "\030\002 \001(\0132\037.sonet.note.UserNoteInteraction\022"
  "&\n\014thread_notes\030\003 \003(\0132\020.sonet.note.Note\022"
  "\017\n\007success\030\004 \001(\010\022\025\n\rerror_message\030\005 \001(\t\""
  "5\n\021DeleteNoteRequest\022\017\n\007note_id\030\001 \001(\t\022\017\n"
  "\007user_id\030\002 \001(\t\"<\n\022DeleteNoteResponse\022\017\n\007"
  "success\030\001 \001(\010\022\025\n\rerror_message\030\002 \001(\t\"A\n\017"
  "LikeNoteRequest\022\017\n\007note_id\030\001 \001(\t\022\017\n\007user"
  "_id\030\002 \001(\t\022\014\n\004like\030\003 \001(\010\"R\n\020LikeNoteRespo"
  "nse\022\017\n\007success\030\001 \001(\010\022\026\n\016new_like_count\030\002"
  " \001(\003\022\025\n\rerror_message\030\003 \001(\t\"b\n\021RenoteNot"
  "eRequest\022\017\n\007note_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001"
  "(\t\022\027\n\017is_quote_renote\030\003 \001(\010\022\022\n\nquote_tex"
  "t\030\004 \001(\t\"c\n\022RenoteNoteResponse\022%\n\013renote_"
  "note\030\001 \001(\0132\020.sonet.note.Note\022\017\n\007success\030"
  "\002 \001(\010\022\025\n\rerror_message\030\003 \001(\t\"\251\001\n\023GetUser"
  "NotesRequest\022\017\n\007user_id\030\001 \001(\t\022\032\n\022request"
  "ing_user_id\030\002 \001(\t\0223\n\npagination\030\003 \001(\0132\037."
  "sonet.common.PaginationRequest\022\027\n\017includ"
  "e_replies\030\004 \001(\010\022\027\n\017include_renotes\030\005 \001(\010"
  "\"\225\001\n\024GetUserNotesResponse\022\037\n\005notes\030\001 \003(\013"
  "2\020.sonet.note.Note\0224\n\npagination\030\002 \001(\0132 "
  ".sonet.common.PaginationResponse\022\017\n\007succ"
  "ess\030\003 \001(\010\022\025\n\rerror_message\030\004 \001(\t\"x\n\024GetN"
  "oteThreadRequest\022\017\n\007note_id\030\001 \001(\t\022\032\n\022req"
  "uesting_user_id\030\002 \001(\t\0223\n\npagination\030\003 \001("
  "\0132\037.sonet.common.PaginationRequest\"\275\001\n\025G"
  "etNoteThreadResponse\022#\n\troot_note\030\001 \001(\0132"
  "\020.sonet.note.Note\022!\n\007replies\030\002 \003(\0132\020.son"
  "et.note.Note\0224\n\npagination\030\003 \001(\0132 .sonet"
  ".common.PaginationResponse\022\017\n\007success\030\004 "
  "\001(\010\022\025\n\rerror_message\030\005 \001(\t\"\222\002\n\022SearchNot"
  "esRequest\022\r\n\005query\030\001 \001(\t\022\032\n\022requesting_u"
  "ser_id\030\002 \001(\t\0223\n\npagination\030\003 \001(\0132\037.sonet"
  ".common.PaginationRequest\022\020\n\010language\030\004 "
  "\001(\t\022\021\n\tauthor_id\030\005 \001(\t\022\020\n\010hashtags\030\006 \003(\t"
  "\022&\n\005since\030\007 \001(\0132\027.sonet.common.Timestamp"
  "\022&\n\005until\030\010 \001(\0132\027.sonet.common.Timestamp"
  "\022\025\n\rverified_only\030\t \001(\010\"\224\001\n\023SearchNotesR"
  "esponse\022\037\n\005notes\030\001 \003(\0132\020.sonet.note.Note"
  "\0224\n\npagination\030\002 \001(\0132 .sonet.common.Pagi"
  "nationResponse\022\017\n\007success\030\003 \001(\010\022\025\n\rerror"
  "_message\030\004 \001(\t\"\024\n\022HealthCheckRequest\"\224\001\n"
  "\023HealthCheckResponse\022\016\n\006status\030\001 \001(\t\022=\n\007"
  "details\030\002 \003(\0132,.sonet.note.HealthCheckRe"
  "sponse.DetailsEntry\032.\n\014DetailsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\301\001\n\016NoteVisi"
  "bility\022\033\n\027NOTE_VISIBILITY_UNKNOWN\020\000\022\032\n\026N"
  "OTE_VISIBILITY_PUBLIC\020\001\022\035\n\031NOTE_VISIBILI"
  "TY_FOLLOWERS\020\002\022\033\n\027NOTE_VISIBILITY_FRIEND"
  "S\020\003\022\033\n\027NOTE_VISIBILITY_PRIVATE\020\004\022\035\n\031NOTE"
  "_VISIBILITY_MENTIONED\020\005*\241\001\n\016ContentWarni"
  "ng\022\030\n\024CONTENT_WARNING_NONE\020\000\022\035\n\031CONTENT_"
  "WARNING_SENSITIVE\020\001\022\031\n\025CONTENT_WARNING_A"
  "DULT\020\002\022\034\n\030CONTENT_WARNING_VIOLENCE\020\003\022\035\n\031"
  "CONTENT_WARNING_POLITICAL\020\0042\310\005\n\013NoteServ"
  "ice\022K\n\nCreateNote\022\035.sonet.note.CreateNot"
  "eRequest\032\036.sonet.note.CreateNoteResponse"
  "\022B\n\007GetNote\022\032.sonet.note.GetNoteRequest\032"
  "\033.sonet.note.GetNoteResponse\022K\n\nDeleteNo"
  "te\022\035.sonet.note.DeleteNoteRequest\032\036.sone"
  "t.note.DeleteNoteResponse\022E\n\010LikeNote\022\033."
  "sonet.note.LikeNoteRequest\032\034.sonet.note."
  "LikeNoteResponse\022K\n\nRenoteNote\022\035.sonet.n"
  "ote.RenoteNoteRequest\032\036.sonet.note.Renot"
  "eNoteResponse\022Q\n\014GetUserNotes\022\037.sonet.no"
  "te.GetUserNotesRequest\032 .sonet.note.GetU"
  "serNotesResponse\022T\n\rGetNoteThread\022 .sone"
  "t.note.GetNoteThreadRequest\032!.sonet.note"
  ".GetNoteThreadResponse\022N\n\013SearchNotes\022\036."
  "sonet.note.SearchNotesRequest\032\037.sonet.no"
  "te.SearchNotesResponse\022N\n\013HealthCheck\022\036."
  "sonet.note.HealthCheckRequest\032\037.sonet.no"
  "te.HealthCheckResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2fnote_2eproto_deps[2] = {
  &::descriptor_table_common_2fpagination_2eproto,
  &::descriptor_table_common_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2fnote_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fnote_2eproto = {
    false, false, 5190, descriptor_table_protodef_services_2fnote_2eproto,
    "services/note.proto",
    &descriptor_table_services_2fnote_2eproto_once, descriptor_table_services_2fnote_2eproto_deps, 2, 27,
    schemas, file_default_instances, TableStruct_services_2fnote_2eproto::offsets,
    file_level_metadata_services_2fnote_2eproto, file_level_enum_descriptors_services_2fnote_2eproto,
    file_level_service_descriptors_services_2fnote_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fnote_2eproto_getter() {
  return &descriptor_table_services_2fnote_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fnote_2eproto(&descriptor_table_services_2fnote_2eproto);
namespace sonet {
namespace note {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NoteVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fnote_2eproto);
  return file_level_enum_descriptors_services_2fnote_2eproto[0];
}
bool NoteVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentWarning_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2fnote_2eproto);
  return file_level_enum_descriptors_services_2fnote_2eproto[1];
}
bool ContentWarning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NoteMention::_Internal {
 public:
};

NoteMention::NoteMention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.NoteMention)
}
NoteMention::NoteMention(const NoteMention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteMention* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.start_offset_){}
    , decltype(_impl_.end_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_offset_, &from._impl_.start_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_offset_) -
    reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.NoteMention)
}

inline void NoteMention::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.start_offset_){0}
    , decltype(_impl_.end_offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NoteMention::~NoteMention() {
  // @@protoc_insertion_point(destructor:sonet.note.NoteMention)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteMention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.username_.Destroy();
}

void NoteMention::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteMention::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.NoteMention)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.start_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_offset_) -
      reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteMention::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteMention.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteMention.username"));
        } else
          goto handle_unusual;
        continue;
      // int32 start_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteMention::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.NoteMention)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteMention.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteMention.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 start_offset = 3;
  if (this->_internal_start_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_offset(), target);
  }

  // int32 end_offset = 4;
  if (this->_internal_end_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.NoteMention)
  return target;
}

size_t NoteMention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.NoteMention)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // int32 start_offset = 3;
  if (this->_internal_start_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_offset());
  }

  // int32 end_offset = 4;
  if (this->_internal_end_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteMention::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteMention::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteMention::GetClassData() const { return &_class_data_; }


void NoteMention::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteMention*>(&to_msg);
  auto& from = static_cast<const NoteMention&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.NoteMention)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_start_offset() != 0) {
    _this->_internal_set_start_offset(from._internal_start_offset());
  }
  if (from._internal_end_offset() != 0) {
    _this->_internal_set_end_offset(from._internal_end_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteMention::CopyFrom(const NoteMention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.NoteMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteMention::IsInitialized() const {
  return true;
}

void NoteMention::InternalSwap(NoteMention* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoteMention, _impl_.end_offset_)
      + sizeof(NoteMention::_impl_.end_offset_)
      - PROTOBUF_FIELD_OFFSET(NoteMention, _impl_.start_offset_)>(
          reinterpret_cast<char*>(&_impl_.start_offset_),
          reinterpret_cast<char*>(&other->_impl_.start_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteMention::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[0]);
}

// ===================================================================

class NoteHashtag::_Internal {
 public:
};

NoteHashtag::NoteHashtag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.NoteHashtag)
}
NoteHashtag::NoteHashtag(const NoteHashtag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteHashtag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.start_offset_){}
    , decltype(_impl_.end_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_offset_, &from._impl_.start_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_offset_) -
    reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.NoteHashtag)
}

inline void NoteHashtag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.start_offset_){0}
    , decltype(_impl_.end_offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NoteHashtag::~NoteHashtag() {
  // @@protoc_insertion_point(destructor:sonet.note.NoteHashtag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteHashtag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void NoteHashtag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteHashtag::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.NoteHashtag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  ::memset(&_impl_.start_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_offset_) -
      reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteHashtag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteHashtag.tag"));
        } else
          goto handle_unusual;
        continue;
      // int32 start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteHashtag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.NoteHashtag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteHashtag.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // int32 start_offset = 2;
  if (this->_internal_start_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_start_offset(), target);
  }

  // int32 end_offset = 3;
  if (this->_internal_end_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_end_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.NoteHashtag)
  return target;
}

size_t NoteHashtag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.NoteHashtag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // int32 start_offset = 2;
  if (this->_internal_start_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_offset());
  }

  // int32 end_offset = 3;
  if (this->_internal_end_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteHashtag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteHashtag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteHashtag::GetClassData() const { return &_class_data_; }


void NoteHashtag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteHashtag*>(&to_msg);
  auto& from = static_cast<const NoteHashtag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.NoteHashtag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_start_offset() != 0) {
    _this->_internal_set_start_offset(from._internal_start_offset());
  }
  if (from._internal_end_offset() != 0) {
    _this->_internal_set_end_offset(from._internal_end_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteHashtag::CopyFrom(const NoteHashtag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.NoteHashtag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteHashtag::IsInitialized() const {
  return true;
}

void NoteHashtag::InternalSwap(NoteHashtag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoteHashtag, _impl_.end_offset_)
      + sizeof(NoteHashtag::_impl_.end_offset_)
      - PROTOBUF_FIELD_OFFSET(NoteHashtag, _impl_.start_offset_)>(
          reinterpret_cast<char*>(&_impl_.start_offset_),
          reinterpret_cast<char*>(&other->_impl_.start_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteHashtag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[1]);
}

// ===================================================================

class NoteLink::_Internal {
 public:
};

NoteLink::NoteLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.NoteLink)
}
NoteLink::NoteLink(const NoteLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.image_url_){}
    , decltype(_impl_.start_offset_){}
    , decltype(_impl_.end_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_url().empty()) {
    _this->_impl_.image_url_.Set(from._internal_image_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_offset_, &from._impl_.start_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_offset_) -
    reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.NoteLink)
}

inline void NoteLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.image_url_){}
    , decltype(_impl_.start_offset_){0}
    , decltype(_impl_.end_offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NoteLink::~NoteLink() {
  // @@protoc_insertion_point(destructor:sonet.note.NoteLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.image_url_.Destroy();
}

void NoteLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteLink::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.NoteLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.image_url_.ClearToEmpty();
  ::memset(&_impl_.start_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_offset_) -
      reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteLink.url"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteLink.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteLink.description"));
        } else
          goto handle_unusual;
        continue;
      // string image_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_image_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.NoteLink.image_url"));
        } else
          goto handle_unusual;
        continue;
      // int32 start_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.NoteLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteLink.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteLink.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteLink.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string image_url = 4;
  if (!this->_internal_image_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_url().data(), static_cast<int>(this->_internal_image_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.NoteLink.image_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image_url(), target);
  }

  // int32 start_offset = 5;
  if (this->_internal_start_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_start_offset(), target);
  }

  // int32 end_offset = 6;
  if (this->_internal_end_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_end_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.NoteLink)
  return target;
}

size_t NoteLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.NoteLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string image_url = 4;
  if (!this->_internal_image_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_url());
  }

  // int32 start_offset = 5;
  if (this->_internal_start_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_offset());
  }

  // int32 end_offset = 6;
  if (this->_internal_end_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteLink::GetClassData() const { return &_class_data_; }


void NoteLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteLink*>(&to_msg);
  auto& from = static_cast<const NoteLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.NoteLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_image_url().empty()) {
    _this->_internal_set_image_url(from._internal_image_url());
  }
  if (from._internal_start_offset() != 0) {
    _this->_internal_set_start_offset(from._internal_start_offset());
  }
  if (from._internal_end_offset() != 0) {
    _this->_internal_set_end_offset(from._internal_end_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteLink::CopyFrom(const NoteLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.NoteLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteLink::IsInitialized() const {
  return true;
}

void NoteLink::InternalSwap(NoteLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_url_, lhs_arena,
      &other->_impl_.image_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoteLink, _impl_.end_offset_)
      + sizeof(NoteLink::_impl_.end_offset_)
      - PROTOBUF_FIELD_OFFSET(NoteLink, _impl_.start_offset_)>(
          reinterpret_cast<char*>(&_impl_.start_offset_),
          reinterpret_cast<char*>(&other->_impl_.start_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[2]);
}

// ===================================================================

class NoteEntities::_Internal {
 public:
};

NoteEntities::NoteEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.NoteEntities)
}
NoteEntities::NoteEntities(const NoteEntities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteEntities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mentions_){from._impl_.mentions_}
    , decltype(_impl_.hashtags_){from._impl_.hashtags_}
    , decltype(_impl_.links_){from._impl_.links_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sonet.note.NoteEntities)
}

inline void NoteEntities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mentions_){arena}
    , decltype(_impl_.hashtags_){arena}
    , decltype(_impl_.links_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NoteEntities::~NoteEntities() {
  // @@protoc_insertion_point(destructor:sonet.note.NoteEntities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteEntities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mentions_.~RepeatedPtrField();
  _impl_.hashtags_.~RepeatedPtrField();
  _impl_.links_.~RepeatedPtrField();
}

void NoteEntities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.NoteEntities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mentions_.Clear();
  _impl_.hashtags_.Clear();
  _impl_.links_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteEntities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.note.NoteMention mentions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mentions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.note.NoteHashtag hashtags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashtags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.note.NoteLink links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteEntities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.NoteEntities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.note.NoteMention mentions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mentions_size()); i < n; i++) {
    const auto& repfield = this->_internal_mentions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sonet.note.NoteHashtag hashtags = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashtags_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashtags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sonet.note.NoteLink links = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.NoteEntities)
  return target;
}

size_t NoteEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.NoteEntities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.note.NoteMention mentions = 1;
  total_size += 1UL * this->_internal_mentions_size();
  for (const auto& msg : this->_impl_.mentions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sonet.note.NoteHashtag hashtags = 2;
  total_size += 1UL * this->_internal_hashtags_size();
  for (const auto& msg : this->_impl_.hashtags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sonet.note.NoteLink links = 3;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_impl_.links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteEntities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteEntities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteEntities::GetClassData() const { return &_class_data_; }


void NoteEntities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteEntities*>(&to_msg);
  auto& from = static_cast<const NoteEntities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.NoteEntities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mentions_.MergeFrom(from._impl_.mentions_);
  _this->_impl_.hashtags_.MergeFrom(from._impl_.hashtags_);
  _this->_impl_.links_.MergeFrom(from._impl_.links_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteEntities::CopyFrom(const NoteEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.NoteEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteEntities::IsInitialized() const {
  return true;
}

void NoteEntities::InternalSwap(NoteEntities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mentions_.InternalSwap(&other->_impl_.mentions_);
  _impl_.hashtags_.InternalSwap(&other->_impl_.hashtags_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteEntities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[3]);
}

// ===================================================================

class GeoLocation::_Internal {
 public:
};

GeoLocation::GeoLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GeoLocation)
}
GeoLocation::GeoLocation(const GeoLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GeoLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.place_name_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.place_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.place_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_place_name().empty()) {
    _this->_impl_.place_name_.Set(from._internal_place_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_code().empty()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.GeoLocation)
}

inline void GeoLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.place_name_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.place_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.place_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeoLocation::~GeoLocation() {
  // @@protoc_insertion_point(destructor:sonet.note.GeoLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.place_name_.Destroy();
  _impl_.country_code_.Destroy();
}

void GeoLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GeoLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GeoLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.place_name_.ClearToEmpty();
  _impl_.country_code_.ClearToEmpty();
  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string place_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_place_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GeoLocation.place_name"));
        } else
          goto handle_unusual;
        continue;
      // string country_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GeoLocation.country_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GeoLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // string place_name = 3;
  if (!this->_internal_place_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_place_name().data(), static_cast<int>(this->_internal_place_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GeoLocation.place_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_place_name(), target);
  }

  // string country_code = 4;
  if (!this->_internal_country_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GeoLocation.country_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GeoLocation)
  return target;
}

size_t GeoLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GeoLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string place_name = 3;
  if (!this->_internal_place_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_place_name());
  }

  // string country_code = 4;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GeoLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoLocation::GetClassData() const { return &_class_data_; }


void GeoLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GeoLocation*>(&to_msg);
  auto& from = static_cast<const GeoLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GeoLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_place_name().empty()) {
    _this->_internal_set_place_name(from._internal_place_name());
  }
  if (!from._internal_country_code().empty()) {
    _this->_internal_set_country_code(from._internal_country_code());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoLocation::CopyFrom(const GeoLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GeoLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLocation::IsInitialized() const {
  return true;
}

void GeoLocation::InternalSwap(GeoLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.place_name_, lhs_arena,
      &other->_impl_.place_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoLocation, _impl_.longitude_)
      + sizeof(GeoLocation::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(GeoLocation, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[4]);
}

// ===================================================================

class NoteMetrics::_Internal {
 public:
};

NoteMetrics::NoteMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.NoteMetrics)
}
NoteMetrics::NoteMetrics(const NoteMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.like_count_){}
    , decltype(_impl_.renote_count_){}
    , decltype(_impl_.reply_count_){}
    , decltype(_impl_.quote_count_){}
    , decltype(_impl_.bookmark_count_){}
    , decltype(_impl_.view_count_){}
    , decltype(_impl_.engagement_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.like_count_, &from._impl_.like_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.engagement_rate_) -
    reinterpret_cast<char*>(&_impl_.like_count_)) + sizeof(_impl_.engagement_rate_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.NoteMetrics)
}

inline void NoteMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.like_count_){int64_t{0}}
    , decltype(_impl_.renote_count_){int64_t{0}}
    , decltype(_impl_.reply_count_){int64_t{0}}
    , decltype(_impl_.quote_count_){int64_t{0}}
    , decltype(_impl_.bookmark_count_){int64_t{0}}
    , decltype(_impl_.view_count_){int64_t{0}}
    , decltype(_impl_.engagement_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NoteMetrics::~NoteMetrics() {
  // @@protoc_insertion_point(destructor:sonet.note.NoteMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NoteMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.NoteMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.like_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.engagement_rate_) -
      reinterpret_cast<char*>(&_impl_.like_count_)) + sizeof(_impl_.engagement_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 like_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.like_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 renote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.renote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 reply_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reply_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quote_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.quote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bookmark_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bookmark_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 view_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double engagement_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.NoteMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 like_count = 1;
  if (this->_internal_like_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_like_count(), target);
  }

  // int64 renote_count = 2;
  if (this->_internal_renote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_renote_count(), target);
  }

  // int64 reply_count = 3;
  if (this->_internal_reply_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_reply_count(), target);
  }

  // int64 quote_count = 4;
  if (this->_internal_quote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_quote_count(), target);
  }

  // int64 bookmark_count = 5;
  if (this->_internal_bookmark_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_bookmark_count(), target);
  }

  // int64 view_count = 6;
  if (this->_internal_view_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_view_count(), target);
  }

  // double engagement_rate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_engagement_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.NoteMetrics)
  return target;
}

size_t NoteMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.NoteMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 like_count = 1;
  if (this->_internal_like_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_like_count());
  }

  // int64 renote_count = 2;
  if (this->_internal_renote_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_renote_count());
  }

  // int64 reply_count = 3;
  if (this->_internal_reply_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reply_count());
  }

  // int64 quote_count = 4;
  if (this->_internal_quote_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quote_count());
  }

  // int64 bookmark_count = 5;
  if (this->_internal_bookmark_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bookmark_count());
  }

  // int64 view_count = 6;
  if (this->_internal_view_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_view_count());
  }

  // double engagement_rate = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteMetrics::GetClassData() const { return &_class_data_; }


void NoteMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteMetrics*>(&to_msg);
  auto& from = static_cast<const NoteMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.NoteMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_like_count() != 0) {
    _this->_internal_set_like_count(from._internal_like_count());
  }
  if (from._internal_renote_count() != 0) {
    _this->_internal_set_renote_count(from._internal_renote_count());
  }
  if (from._internal_reply_count() != 0) {
    _this->_internal_set_reply_count(from._internal_reply_count());
  }
  if (from._internal_quote_count() != 0) {
    _this->_internal_set_quote_count(from._internal_quote_count());
  }
  if (from._internal_bookmark_count() != 0) {
    _this->_internal_set_bookmark_count(from._internal_bookmark_count());
  }
  if (from._internal_view_count() != 0) {
    _this->_internal_set_view_count(from._internal_view_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = from._internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    _this->_internal_set_engagement_rate(from._internal_engagement_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteMetrics::CopyFrom(const NoteMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.NoteMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteMetrics::IsInitialized() const {
  return true;
}

void NoteMetrics::InternalSwap(NoteMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoteMetrics, _impl_.engagement_rate_)
      + sizeof(NoteMetrics::_impl_.engagement_rate_)
      - PROTOBUF_FIELD_OFFSET(NoteMetrics, _impl_.like_count_)>(
          reinterpret_cast<char*>(&_impl_.like_count_),
          reinterpret_cast<char*>(&other->_impl_.like_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[5]);
}

// ===================================================================

class Note::_Internal {
 public:
  static const ::sonet::note::NoteEntities& entities(const Note* msg);
  static const ::sonet::note::GeoLocation& location(const Note* msg);
  static const ::sonet::common::Timestamp& created_at(const Note* msg);
  static const ::sonet::common::Timestamp& updated_at(const Note* msg);
  static const ::sonet::common::Timestamp& deleted_at(const Note* msg);
  static const ::sonet::note::NoteMetrics& metrics(const Note* msg);
};

const ::sonet::note::NoteEntities&
Note::_Internal::entities(const Note* msg) {
  return *msg->_impl_.entities_;
}
const ::sonet::note::GeoLocation&
Note::_Internal::location(const Note* msg) {
  return *msg->_impl_.location_;
}
const ::sonet::common::Timestamp&
Note::_Internal::created_at(const Note* msg) {
  return *msg->_impl_.created_at_;
}
const ::sonet::common::Timestamp&
Note::_Internal::updated_at(const Note* msg) {
  return *msg->_impl_.updated_at_;
}
const ::sonet::common::Timestamp&
Note::_Internal::deleted_at(const Note* msg) {
  return *msg->_impl_.deleted_at_;
}
const ::sonet::note::NoteMetrics&
Note::_Internal::metrics(const Note* msg) {
  return *msg->_impl_.metrics_;
}
void Note::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Note::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void Note::clear_deleted_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
}
Note::Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.Note)
}
Note::Note(const Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Note* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_ids_){from._impl_.media_ids_}
    , decltype(_impl_.flags_){from._impl_.flags_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.reply_to_note_id_){}
    , decltype(_impl_.reply_to_user_id_){}
    , decltype(_impl_.thread_root_id_){}
    , decltype(_impl_.renoted_note_id_){}
    , decltype(_impl_.renoted_user_id_){}
    , decltype(_impl_.language_code_){}
    , decltype(_impl_.client_name_){}
    , decltype(_impl_.entities_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.visibility_){}
    , decltype(_impl_.content_warning_){}
    , decltype(_impl_.is_quote_renote_){}
    , decltype(_impl_.is_verified_content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author_id().empty()) {
    _this->_impl_.author_id_.Set(from._internal_author_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_to_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_to_note_id().empty()) {
    _this->_impl_.reply_to_note_id_.Set(from._internal_reply_to_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_to_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_to_user_id().empty()) {
    _this->_impl_.reply_to_user_id_.Set(from._internal_reply_to_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thread_root_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thread_root_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thread_root_id().empty()) {
    _this->_impl_.thread_root_id_.Set(from._internal_thread_root_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.renoted_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.renoted_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_renoted_note_id().empty()) {
    _this->_impl_.renoted_note_id_.Set(from._internal_renoted_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.renoted_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.renoted_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_renoted_user_id().empty()) {
    _this->_impl_.renoted_user_id_.Set(from._internal_renoted_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_code().empty()) {
    _this->_impl_.language_code_.Set(from._internal_language_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_name().empty()) {
    _this->_impl_.client_name_.Set(from._internal_client_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_entities()) {
    _this->_impl_.entities_ = new ::sonet::note::NoteEntities(*from._impl_.entities_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::sonet::note::GeoLocation(*from._impl_.location_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::sonet::common::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::sonet::common::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::sonet::common::Timestamp(*from._impl_.deleted_at_);
  }
  if (from._internal_has_metrics()) {
    _this->_impl_.metrics_ = new ::sonet::note::NoteMetrics(*from._impl_.metrics_);
  }
  ::memcpy(&_impl_.visibility_, &from._impl_.visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_verified_content_) -
    reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.is_verified_content_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.Note)
}

inline void Note::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_ids_){arena}
    , decltype(_impl_.flags_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.reply_to_note_id_){}
    , decltype(_impl_.reply_to_user_id_){}
    , decltype(_impl_.thread_root_id_){}
    , decltype(_impl_.renoted_note_id_){}
    , decltype(_impl_.renoted_user_id_){}
    , decltype(_impl_.language_code_){}
    , decltype(_impl_.client_name_){}
    , decltype(_impl_.entities_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.metrics_){nullptr}
    , decltype(_impl_.visibility_){0}
    , decltype(_impl_.content_warning_){0}
    , decltype(_impl_.is_quote_renote_){false}
    , decltype(_impl_.is_verified_content_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_to_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_to_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thread_root_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thread_root_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.renoted_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.renoted_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.renoted_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.renoted_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:sonet.note.Note)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Note::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_ids_.~RepeatedPtrField();
  _impl_.flags_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.author_id_.Destroy();
  _impl_.text_.Destroy();
  _impl_.reply_to_note_id_.Destroy();
  _impl_.reply_to_user_id_.Destroy();
  _impl_.thread_root_id_.Destroy();
  _impl_.renoted_note_id_.Destroy();
  _impl_.renoted_user_id_.Destroy();
  _impl_.language_code_.Destroy();
  _impl_.client_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.entities_;
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
  if (this != internal_default_instance()) delete _impl_.metrics_;
}

void Note::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.Note)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_ids_.Clear();
  _impl_.flags_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.author_id_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.reply_to_note_id_.ClearToEmpty();
  _impl_.reply_to_user_id_.ClearToEmpty();
  _impl_.thread_root_id_.ClearToEmpty();
  _impl_.renoted_note_id_.ClearToEmpty();
  _impl_.renoted_user_id_.ClearToEmpty();
  _impl_.language_code_.ClearToEmpty();
  _impl_.client_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.entities_ != nullptr) {
    delete _impl_.entities_;
  }
  _impl_.entities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_at_ != nullptr) {
    delete _impl_.deleted_at_;
  }
  _impl_.deleted_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metrics_ != nullptr) {
    delete _impl_.metrics_;
  }
  _impl_.metrics_ = nullptr;
  ::memset(&_impl_.visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_verified_content_) -
      reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.is_verified_content_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Note::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.id"));
        } else
          goto handle_unusual;
        continue;
      // string author_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_author_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.author_id"));
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.text"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.NoteVisibility visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::sonet::note::NoteVisibility>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.ContentWarning content_warning = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_warning(static_cast<::sonet::note::ContentWarning>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string media_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_media_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.media_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.NoteEntities entities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_entities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.GeoLocation location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reply_to_note_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_reply_to_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.reply_to_note_id"));
        } else
          goto handle_unusual;
        continue;
      // string reply_to_user_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_reply_to_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.reply_to_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string thread_root_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_thread_root_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.thread_root_id"));
        } else
          goto handle_unusual;
        continue;
      // string renoted_note_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_renoted_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.renoted_note_id"));
        } else
          goto handle_unusual;
        continue;
      // string renoted_user_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_renoted_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.renoted_user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_quote_renote = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_quote_renote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp created_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp updated_at = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp deleted_at = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.NoteMetrics metrics = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language_code = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_language_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.language_code"));
        } else
          goto handle_unusual;
        continue;
      // repeated string flags = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_flags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.flags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_verified_content = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.is_verified_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_client_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.Note.client_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Note::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.Note)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string author_id = 2;
  if (!this->_internal_author_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_id().data(), static_cast<int>(this->_internal_author_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.author_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_author_id(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // .sonet.note.NoteVisibility visibility = 4;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_visibility(), target);
  }

  // .sonet.note.ContentWarning content_warning = 5;
  if (this->_internal_content_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_content_warning(), target);
  }

  // repeated string media_ids = 6;
  for (int i = 0, n = this->_internal_media_ids_size(); i < n; i++) {
    const auto& s = this->_internal_media_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.media_ids");
    target = stream->WriteString(6, s, target);
  }

  // .sonet.note.NoteEntities entities = 7;
  if (this->_internal_has_entities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::entities(this),
        _Internal::entities(this).GetCachedSize(), target, stream);
  }

  // .sonet.note.GeoLocation location = 8;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string reply_to_note_id = 9;
  if (!this->_internal_reply_to_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_note_id().data(), static_cast<int>(this->_internal_reply_to_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.reply_to_note_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_reply_to_note_id(), target);
  }

  // string reply_to_user_id = 10;
  if (!this->_internal_reply_to_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_user_id().data(), static_cast<int>(this->_internal_reply_to_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.reply_to_user_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_reply_to_user_id(), target);
  }

  // string thread_root_id = 11;
  if (!this->_internal_thread_root_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thread_root_id().data(), static_cast<int>(this->_internal_thread_root_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.thread_root_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_thread_root_id(), target);
  }

  // string renoted_note_id = 12;
  if (!this->_internal_renoted_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_renoted_note_id().data(), static_cast<int>(this->_internal_renoted_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.renoted_note_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_renoted_note_id(), target);
  }

  // string renoted_user_id = 13;
  if (!this->_internal_renoted_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_renoted_user_id().data(), static_cast<int>(this->_internal_renoted_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.renoted_user_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_renoted_user_id(), target);
  }

  // bool is_quote_renote = 14;
  if (this->_internal_is_quote_renote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_quote_renote(), target);
  }

  // .sonet.common.Timestamp created_at = 15;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp updated_at = 16;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp deleted_at = 17;
  if (this->_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.note.NoteMetrics metrics = 18;
  if (this->_internal_has_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::metrics(this),
        _Internal::metrics(this).GetCachedSize(), target, stream);
  }

  // string language_code = 19;
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.language_code");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_language_code(), target);
  }

  // repeated string flags = 20;
  for (int i = 0, n = this->_internal_flags_size(); i < n; i++) {
    const auto& s = this->_internal_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.flags");
    target = stream->WriteString(20, s, target);
  }

  // bool is_verified_content = 21;
  if (this->_internal_is_verified_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_verified_content(), target);
  }

  // string client_name = 22;
  if (!this->_internal_client_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.Note.client_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_client_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.Note)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string media_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.media_ids_.size());
  for (int i = 0, n = _impl_.media_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.media_ids_.Get(i));
  }

  // repeated string flags = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.flags_.size());
  for (int i = 0, n = _impl_.flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.flags_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string author_id = 2;
  if (!this->_internal_author_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_id());
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string reply_to_note_id = 9;
  if (!this->_internal_reply_to_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_note_id());
  }

  // string reply_to_user_id = 10;
  if (!this->_internal_reply_to_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_user_id());
  }

  // string thread_root_id = 11;
  if (!this->_internal_thread_root_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thread_root_id());
  }

  // string renoted_note_id = 12;
  if (!this->_internal_renoted_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_renoted_note_id());
  }

  // string renoted_user_id = 13;
  if (!this->_internal_renoted_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_renoted_user_id());
  }

  // string language_code = 19;
  if (!this->_internal_language_code().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string client_name = 22;
  if (!this->_internal_client_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // .sonet.note.NoteEntities entities = 7;
  if (this->_internal_has_entities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entities_);
  }

  // .sonet.note.GeoLocation location = 8;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .sonet.common.Timestamp created_at = 15;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .sonet.common.Timestamp updated_at = 16;
  if (this->_internal_has_updated_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .sonet.common.Timestamp deleted_at = 17;
  if (this->_internal_has_deleted_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_at_);
  }

  // .sonet.note.NoteMetrics metrics = 18;
  if (this->_internal_has_metrics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metrics_);
  }

  // .sonet.note.NoteVisibility visibility = 4;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // .sonet.note.ContentWarning content_warning = 5;
  if (this->_internal_content_warning() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_content_warning());
  }

  // bool is_quote_renote = 14;
  if (this->_internal_is_quote_renote() != 0) {
    total_size += 1 + 1;
  }

  // bool is_verified_content = 21;
  if (this->_internal_is_verified_content() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Note::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Note::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Note::GetClassData() const { return &_class_data_; }


void Note::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Note*>(&to_msg);
  auto& from = static_cast<const Note&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.Note)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_ids_.MergeFrom(from._impl_.media_ids_);
  _this->_impl_.flags_.MergeFrom(from._impl_.flags_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_author_id().empty()) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_reply_to_note_id().empty()) {
    _this->_internal_set_reply_to_note_id(from._internal_reply_to_note_id());
  }
  if (!from._internal_reply_to_user_id().empty()) {
    _this->_internal_set_reply_to_user_id(from._internal_reply_to_user_id());
  }
  if (!from._internal_thread_root_id().empty()) {
    _this->_internal_set_thread_root_id(from._internal_thread_root_id());
  }
  if (!from._internal_renoted_note_id().empty()) {
    _this->_internal_set_renoted_note_id(from._internal_renoted_note_id());
  }
  if (!from._internal_renoted_user_id().empty()) {
    _this->_internal_set_renoted_user_id(from._internal_renoted_user_id());
  }
  if (!from._internal_language_code().empty()) {
    _this->_internal_set_language_code(from._internal_language_code());
  }
  if (!from._internal_client_name().empty()) {
    _this->_internal_set_client_name(from._internal_client_name());
  }
  if (from._internal_has_entities()) {
    _this->_internal_mutable_entities()->::sonet::note::NoteEntities::MergeFrom(
        from._internal_entities());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::sonet::note::GeoLocation::MergeFrom(
        from._internal_location());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_deleted_at()) {
    _this->_internal_mutable_deleted_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_deleted_at());
  }
  if (from._internal_has_metrics()) {
    _this->_internal_mutable_metrics()->::sonet::note::NoteMetrics::MergeFrom(
        from._internal_metrics());
  }
  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  if (from._internal_content_warning() != 0) {
    _this->_internal_set_content_warning(from._internal_content_warning());
  }
  if (from._internal_is_quote_renote() != 0) {
    _this->_internal_set_is_quote_renote(from._internal_is_quote_renote());
  }
  if (from._internal_is_verified_content() != 0) {
    _this->_internal_set_is_verified_content(from._internal_is_verified_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  return true;
}

void Note::InternalSwap(Note* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.media_ids_.InternalSwap(&other->_impl_.media_ids_);
  _impl_.flags_.InternalSwap(&other->_impl_.flags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_id_, lhs_arena,
      &other->_impl_.author_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_note_id_, lhs_arena,
      &other->_impl_.reply_to_note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_user_id_, lhs_arena,
      &other->_impl_.reply_to_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thread_root_id_, lhs_arena,
      &other->_impl_.thread_root_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.renoted_note_id_, lhs_arena,
      &other->_impl_.renoted_note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.renoted_user_id_, lhs_arena,
      &other->_impl_.renoted_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_code_, lhs_arena,
      &other->_impl_.language_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_name_, lhs_arena,
      &other->_impl_.client_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Note, _impl_.is_verified_content_)
      + sizeof(Note::_impl_.is_verified_content_)
      - PROTOBUF_FIELD_OFFSET(Note, _impl_.entities_)>(
          reinterpret_cast<char*>(&_impl_.entities_),
          reinterpret_cast<char*>(&other->_impl_.entities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Note::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[6]);
}

// ===================================================================

class UserNoteInteraction::_Internal {
 public:
  static const ::sonet::common::Timestamp& last_viewed_at(const UserNoteInteraction* msg);
  static const ::sonet::common::Timestamp& interacted_at(const UserNoteInteraction* msg);
};

const ::sonet::common::Timestamp&
UserNoteInteraction::_Internal::last_viewed_at(const UserNoteInteraction* msg) {
  return *msg->_impl_.last_viewed_at_;
}
const ::sonet::common::Timestamp&
UserNoteInteraction::_Internal::interacted_at(const UserNoteInteraction* msg) {
  return *msg->_impl_.interacted_at_;
}
void UserNoteInteraction::clear_last_viewed_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_viewed_at_ != nullptr) {
    delete _impl_.last_viewed_at_;
  }
  _impl_.last_viewed_at_ = nullptr;
}
void UserNoteInteraction::clear_interacted_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.interacted_at_ != nullptr) {
    delete _impl_.interacted_at_;
  }
  _impl_.interacted_at_ = nullptr;
}
UserNoteInteraction::UserNoteInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.UserNoteInteraction)
}
UserNoteInteraction::UserNoteInteraction(const UserNoteInteraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserNoteInteraction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.last_viewed_at_){nullptr}
    , decltype(_impl_.interacted_at_){nullptr}
    , decltype(_impl_.has_liked_){}
    , decltype(_impl_.has_renoted_){}
    , decltype(_impl_.has_bookmarked_){}
    , decltype(_impl_.has_reported_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_viewed_at()) {
    _this->_impl_.last_viewed_at_ = new ::sonet::common::Timestamp(*from._impl_.last_viewed_at_);
  }
  if (from._internal_has_interacted_at()) {
    _this->_impl_.interacted_at_ = new ::sonet::common::Timestamp(*from._impl_.interacted_at_);
  }
  ::memcpy(&_impl_.has_liked_, &from._impl_.has_liked_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_reported_) -
    reinterpret_cast<char*>(&_impl_.has_liked_)) + sizeof(_impl_.has_reported_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.UserNoteInteraction)
}

inline void UserNoteInteraction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.note_id_){}
    , decltype(_impl_.last_viewed_at_){nullptr}
    , decltype(_impl_.interacted_at_){nullptr}
    , decltype(_impl_.has_liked_){false}
    , decltype(_impl_.has_renoted_){false}
    , decltype(_impl_.has_bookmarked_){false}
    , decltype(_impl_.has_reported_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserNoteInteraction::~UserNoteInteraction() {
  // @@protoc_insertion_point(destructor:sonet.note.UserNoteInteraction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserNoteInteraction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.note_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_viewed_at_;
  if (this != internal_default_instance()) delete _impl_.interacted_at_;
}

void UserNoteInteraction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserNoteInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.UserNoteInteraction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.note_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_viewed_at_ != nullptr) {
    delete _impl_.last_viewed_at_;
  }
  _impl_.last_viewed_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.interacted_at_ != nullptr) {
    delete _impl_.interacted_at_;
  }
  _impl_.interacted_at_ = nullptr;
  ::memset(&_impl_.has_liked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_reported_) -
      reinterpret_cast<char*>(&_impl_.has_liked_)) + sizeof(_impl_.has_reported_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserNoteInteraction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.UserNoteInteraction.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string note_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.UserNoteInteraction.note_id"));
        } else
          goto handle_unusual;
        continue;
      // bool has_liked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_liked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_renoted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.has_renoted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_bookmarked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.has_bookmarked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_reported = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.has_reported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp last_viewed_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_viewed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp interacted_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_interacted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserNoteInteraction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.UserNoteInteraction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.UserNoteInteraction.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.UserNoteInteraction.note_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_note_id(), target);
  }

  // bool has_liked = 3;
  if (this->_internal_has_liked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_liked(), target);
  }

  // bool has_renoted = 4;
  if (this->_internal_has_renoted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_renoted(), target);
  }

  // bool has_bookmarked = 5;
  if (this->_internal_has_bookmarked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_bookmarked(), target);
  }

  // bool has_reported = 6;
  if (this->_internal_has_reported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_reported(), target);
  }

  // .sonet.common.Timestamp last_viewed_at = 7;
  if (this->_internal_has_last_viewed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_viewed_at(this),
        _Internal::last_viewed_at(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp interacted_at = 8;
  if (this->_internal_has_interacted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::interacted_at(this),
        _Internal::interacted_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.UserNoteInteraction)
  return target;
}

size_t UserNoteInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.UserNoteInteraction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string note_id = 2;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // .sonet.common.Timestamp last_viewed_at = 7;
  if (this->_internal_has_last_viewed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_viewed_at_);
  }

  // .sonet.common.Timestamp interacted_at = 8;
  if (this->_internal_has_interacted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interacted_at_);
  }

  // bool has_liked = 3;
  if (this->_internal_has_liked() != 0) {
    total_size += 1 + 1;
  }

  // bool has_renoted = 4;
  if (this->_internal_has_renoted() != 0) {
    total_size += 1 + 1;
  }

  // bool has_bookmarked = 5;
  if (this->_internal_has_bookmarked() != 0) {
    total_size += 1 + 1;
  }

  // bool has_reported = 6;
  if (this->_internal_has_reported() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserNoteInteraction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserNoteInteraction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserNoteInteraction::GetClassData() const { return &_class_data_; }


void UserNoteInteraction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserNoteInteraction*>(&to_msg);
  auto& from = static_cast<const UserNoteInteraction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.UserNoteInteraction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (from._internal_has_last_viewed_at()) {
    _this->_internal_mutable_last_viewed_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_last_viewed_at());
  }
  if (from._internal_has_interacted_at()) {
    _this->_internal_mutable_interacted_at()->::sonet::common::Timestamp::MergeFrom(
        from._internal_interacted_at());
  }
  if (from._internal_has_liked() != 0) {
    _this->_internal_set_has_liked(from._internal_has_liked());
  }
  if (from._internal_has_renoted() != 0) {
    _this->_internal_set_has_renoted(from._internal_has_renoted());
  }
  if (from._internal_has_bookmarked() != 0) {
    _this->_internal_set_has_bookmarked(from._internal_has_bookmarked());
  }
  if (from._internal_has_reported() != 0) {
    _this->_internal_set_has_reported(from._internal_has_reported());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserNoteInteraction::CopyFrom(const UserNoteInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.UserNoteInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNoteInteraction::IsInitialized() const {
  return true;
}

void UserNoteInteraction::InternalSwap(UserNoteInteraction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserNoteInteraction, _impl_.has_reported_)
      + sizeof(UserNoteInteraction::_impl_.has_reported_)
      - PROTOBUF_FIELD_OFFSET(UserNoteInteraction, _impl_.last_viewed_at_)>(
          reinterpret_cast<char*>(&_impl_.last_viewed_at_),
          reinterpret_cast<char*>(&other->_impl_.last_viewed_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserNoteInteraction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[7]);
}

// ===================================================================

class CreateNoteRequest::_Internal {
 public:
  static const ::sonet::note::GeoLocation& location(const CreateNoteRequest* msg);
};

const ::sonet::note::GeoLocation&
CreateNoteRequest::_Internal::location(const CreateNoteRequest* msg) {
  return *msg->_impl_.location_;
}
CreateNoteRequest::CreateNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.CreateNoteRequest)
}
CreateNoteRequest::CreateNoteRequest(const CreateNoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateNoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_ids_){from._impl_.media_ids_}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.reply_to_note_id_){}
    , decltype(_impl_.renoted_note_id_){}
    , decltype(_impl_.client_name_){}
    , decltype(_impl_.idempotency_key_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.visibility_){}
    , decltype(_impl_.content_warning_){}
    , decltype(_impl_.is_quote_renote_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author_id().empty()) {
    _this->_impl_.author_id_.Set(from._internal_author_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_to_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_to_note_id().empty()) {
    _this->_impl_.reply_to_note_id_.Set(from._internal_reply_to_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.renoted_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.renoted_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_renoted_note_id().empty()) {
    _this->_impl_.renoted_note_id_.Set(from._internal_renoted_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_name().empty()) {
    _this->_impl_.client_name_.Set(from._internal_client_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idempotency_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idempotency_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idempotency_key().empty()) {
    _this->_impl_.idempotency_key_.Set(from._internal_idempotency_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::sonet::note::GeoLocation(*from._impl_.location_);
  }
  ::memcpy(&_impl_.visibility_, &from._impl_.visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_quote_renote_) -
    reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.is_quote_renote_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.CreateNoteRequest)
}

inline void CreateNoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_ids_){arena}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.reply_to_note_id_){}
    , decltype(_impl_.renoted_note_id_){}
    , decltype(_impl_.client_name_){}
    , decltype(_impl_.idempotency_key_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.visibility_){0}
    , decltype(_impl_.content_warning_){0}
    , decltype(_impl_.is_quote_renote_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_to_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_to_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.renoted_note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.renoted_note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idempotency_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idempotency_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateNoteRequest::~CreateNoteRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.CreateNoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateNoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_ids_.~RepeatedPtrField();
  _impl_.author_id_.Destroy();
  _impl_.text_.Destroy();
  _impl_.reply_to_note_id_.Destroy();
  _impl_.renoted_note_id_.Destroy();
  _impl_.client_name_.Destroy();
  _impl_.idempotency_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CreateNoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateNoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.CreateNoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_ids_.Clear();
  _impl_.author_id_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.reply_to_note_id_.ClearToEmpty();
  _impl_.renoted_note_id_.ClearToEmpty();
  _impl_.client_name_.ClearToEmpty();
  _impl_.idempotency_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_quote_renote_) -
      reinterpret_cast<char*>(&_impl_.visibility_)) + sizeof(_impl_.is_quote_renote_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string author_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.author_id"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.text"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.NoteVisibility visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::sonet::note::NoteVisibility>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.ContentWarning content_warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_warning(static_cast<::sonet::note::ContentWarning>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string media_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_media_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.media_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.GeoLocation location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reply_to_note_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_reply_to_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.reply_to_note_id"));
        } else
          goto handle_unusual;
        continue;
      // string renoted_note_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_renoted_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.renoted_note_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_quote_renote = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_quote_renote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_client_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.client_name"));
        } else
          goto handle_unusual;
        continue;
      // string idempotency_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_idempotency_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteRequest.idempotency_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.CreateNoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string author_id = 1;
  if (!this->_internal_author_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_id().data(), static_cast<int>(this->_internal_author_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.author_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author_id(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // .sonet.note.NoteVisibility visibility = 3;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_visibility(), target);
  }

  // .sonet.note.ContentWarning content_warning = 4;
  if (this->_internal_content_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_content_warning(), target);
  }

  // repeated string media_ids = 5;
  for (int i = 0, n = this->_internal_media_ids_size(); i < n; i++) {
    const auto& s = this->_internal_media_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.media_ids");
    target = stream->WriteString(5, s, target);
  }

  // .sonet.note.GeoLocation location = 6;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string reply_to_note_id = 7;
  if (!this->_internal_reply_to_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_note_id().data(), static_cast<int>(this->_internal_reply_to_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.reply_to_note_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_reply_to_note_id(), target);
  }

  // string renoted_note_id = 8;
  if (!this->_internal_renoted_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_renoted_note_id().data(), static_cast<int>(this->_internal_renoted_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.renoted_note_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_renoted_note_id(), target);
  }

  // bool is_quote_renote = 9;
  if (this->_internal_is_quote_renote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_quote_renote(), target);
  }

  // string client_name = 10;
  if (!this->_internal_client_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.client_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_client_name(), target);
  }

  // string idempotency_key = 11;
  if (!this->_internal_idempotency_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idempotency_key().data(), static_cast<int>(this->_internal_idempotency_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteRequest.idempotency_key");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_idempotency_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.CreateNoteRequest)
  return target;
}

size_t CreateNoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.CreateNoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string media_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.media_ids_.size());
  for (int i = 0, n = _impl_.media_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.media_ids_.Get(i));
  }

  // string author_id = 1;
  if (!this->_internal_author_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_id());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string reply_to_note_id = 7;
  if (!this->_internal_reply_to_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_note_id());
  }

  // string renoted_note_id = 8;
  if (!this->_internal_renoted_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_renoted_note_id());
  }

  // string client_name = 10;
  if (!this->_internal_client_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // string idempotency_key = 11;
  if (!this->_internal_idempotency_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idempotency_key());
  }

  // .sonet.note.GeoLocation location = 6;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .sonet.note.NoteVisibility visibility = 3;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  // .sonet.note.ContentWarning content_warning = 4;
  if (this->_internal_content_warning() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_content_warning());
  }

  // bool is_quote_renote = 9;
  if (this->_internal_is_quote_renote() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateNoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNoteRequest::GetClassData() const { return &_class_data_; }


void CreateNoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateNoteRequest*>(&to_msg);
  auto& from = static_cast<const CreateNoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.CreateNoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_ids_.MergeFrom(from._impl_.media_ids_);
  if (!from._internal_author_id().empty()) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_reply_to_note_id().empty()) {
    _this->_internal_set_reply_to_note_id(from._internal_reply_to_note_id());
  }
  if (!from._internal_renoted_note_id().empty()) {
    _this->_internal_set_renoted_note_id(from._internal_renoted_note_id());
  }
  if (!from._internal_client_name().empty()) {
    _this->_internal_set_client_name(from._internal_client_name());
  }
  if (!from._internal_idempotency_key().empty()) {
    _this->_internal_set_idempotency_key(from._internal_idempotency_key());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::sonet::note::GeoLocation::MergeFrom(
        from._internal_location());
  }
  if (from._internal_visibility() != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  if (from._internal_content_warning() != 0) {
    _this->_internal_set_content_warning(from._internal_content_warning());
  }
  if (from._internal_is_quote_renote() != 0) {
    _this->_internal_set_is_quote_renote(from._internal_is_quote_renote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNoteRequest::CopyFrom(const CreateNoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.CreateNoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNoteRequest::IsInitialized() const {
  return true;
}

void CreateNoteRequest::InternalSwap(CreateNoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.media_ids_.InternalSwap(&other->_impl_.media_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_id_, lhs_arena,
      &other->_impl_.author_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_to_note_id_, lhs_arena,
      &other->_impl_.reply_to_note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.renoted_note_id_, lhs_arena,
      &other->_impl_.renoted_note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_name_, lhs_arena,
      &other->_impl_.client_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idempotency_key_, lhs_arena,
      &other->_impl_.idempotency_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNoteRequest, _impl_.is_quote_renote_)
      + sizeof(CreateNoteRequest::_impl_.is_quote_renote_)
      - PROTOBUF_FIELD_OFFSET(CreateNoteRequest, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[8]);
}

// ===================================================================

class CreateNoteResponse::_Internal {
 public:
  static const ::sonet::note::Note& note(const CreateNoteResponse* msg);
};

const ::sonet::note::Note&
CreateNoteResponse::_Internal::note(const CreateNoteResponse* msg) {
  return *msg->_impl_.note_;
}
CreateNoteResponse::CreateNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.CreateNoteResponse)
}
CreateNoteResponse::CreateNoteResponse(const CreateNoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateNoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::sonet::note::Note(*from._impl_.note_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.CreateNoteResponse)
}

inline void CreateNoteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateNoteResponse::~CreateNoteResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.CreateNoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateNoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.note_;
}

void CreateNoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateNoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.CreateNoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.note.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.CreateNoteResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.CreateNoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.CreateNoteResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.CreateNoteResponse)
  return target;
}

size_t CreateNoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.CreateNoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.note_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateNoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNoteResponse::GetClassData() const { return &_class_data_; }


void CreateNoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateNoteResponse*>(&to_msg);
  auto& from = static_cast<const CreateNoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.CreateNoteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_note()) {
    _this->_internal_mutable_note()->::sonet::note::Note::MergeFrom(
        from._internal_note());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNoteResponse::CopyFrom(const CreateNoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.CreateNoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNoteResponse::IsInitialized() const {
  return true;
}

void CreateNoteResponse::InternalSwap(CreateNoteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNoteResponse, _impl_.success_)
      + sizeof(CreateNoteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(CreateNoteResponse, _impl_.note_)>(
          reinterpret_cast<char*>(&_impl_.note_),
          reinterpret_cast<char*>(&other->_impl_.note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[9]);
}

// ===================================================================

class GetNoteRequest::_Internal {
 public:
};

GetNoteRequest::GetNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GetNoteRequest)
}
GetNoteRequest::GetNoteRequest(const GetNoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.include_thread_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_thread_ = from._impl_.include_thread_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.GetNoteRequest)
}

inline void GetNoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.include_thread_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNoteRequest::~GetNoteRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.GetNoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
}

void GetNoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GetNoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.note_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.include_thread_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string note_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetNoteRequest.note_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetNoteRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool include_thread = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.include_thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GetNoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetNoteRequest.note_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetNoteRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // bool include_thread = 3;
  if (this->_internal_include_thread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_thread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GetNoteRequest)
  return target;
}

size_t GetNoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GetNoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // bool include_thread = 3;
  if (this->_internal_include_thread() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNoteRequest::GetClassData() const { return &_class_data_; }


void GetNoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNoteRequest*>(&to_msg);
  auto& from = static_cast<const GetNoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GetNoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (from._internal_include_thread() != 0) {
    _this->_internal_set_include_thread(from._internal_include_thread());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNoteRequest::CopyFrom(const GetNoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GetNoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNoteRequest::IsInitialized() const {
  return true;
}

void GetNoteRequest::InternalSwap(GetNoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  swap(_impl_.include_thread_, other->_impl_.include_thread_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[10]);
}

// ===================================================================

class GetNoteResponse::_Internal {
 public:
  static const ::sonet::note::Note& note(const GetNoteResponse* msg);
  static const ::sonet::note::UserNoteInteraction& user_interaction(const GetNoteResponse* msg);
};

const ::sonet::note::Note&
GetNoteResponse::_Internal::note(const GetNoteResponse* msg) {
  return *msg->_impl_.note_;
}
const ::sonet::note::UserNoteInteraction&
GetNoteResponse::_Internal::user_interaction(const GetNoteResponse* msg) {
  return *msg->_impl_.user_interaction_;
}
GetNoteResponse::GetNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GetNoteResponse)
}
GetNoteResponse::GetNoteResponse(const GetNoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.thread_notes_){from._impl_.thread_notes_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.user_interaction_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::sonet::note::Note(*from._impl_.note_);
  }
  if (from._internal_has_user_interaction()) {
    _this->_impl_.user_interaction_ = new ::sonet::note::UserNoteInteraction(*from._impl_.user_interaction_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.GetNoteResponse)
}

inline void GetNoteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.thread_notes_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.user_interaction_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNoteResponse::~GetNoteResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.GetNoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.thread_notes_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.note_;
  if (this != internal_default_instance()) delete _impl_.user_interaction_;
}

void GetNoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GetNoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.thread_notes_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.note_ != nullptr) {
    delete _impl_.note_;
  }
  _impl_.note_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_interaction_ != nullptr) {
    delete _impl_.user_interaction_;
  }
  _impl_.user_interaction_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.note.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.note.UserNoteInteraction user_interaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_interaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.note.Note thread_notes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thread_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetNoteResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GetNoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  // .sonet.note.UserNoteInteraction user_interaction = 2;
  if (this->_internal_has_user_interaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_interaction(this),
        _Internal::user_interaction(this).GetCachedSize(), target, stream);
  }

  // repeated .sonet.note.Note thread_notes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thread_notes_size()); i < n; i++) {
    const auto& repfield = this->_internal_thread_notes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetNoteResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GetNoteResponse)
  return target;
}

size_t GetNoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GetNoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.note.Note thread_notes = 3;
  total_size += 1UL * this->_internal_thread_notes_size();
  for (const auto& msg : this->_impl_.thread_notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.note.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.note_);
  }

  // .sonet.note.UserNoteInteraction user_interaction = 2;
  if (this->_internal_has_user_interaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_interaction_);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNoteResponse::GetClassData() const { return &_class_data_; }


void GetNoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNoteResponse*>(&to_msg);
  auto& from = static_cast<const GetNoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GetNoteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.thread_notes_.MergeFrom(from._impl_.thread_notes_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_note()) {
    _this->_internal_mutable_note()->::sonet::note::Note::MergeFrom(
        from._internal_note());
  }
  if (from._internal_has_user_interaction()) {
    _this->_internal_mutable_user_interaction()->::sonet::note::UserNoteInteraction::MergeFrom(
        from._internal_user_interaction());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNoteResponse::CopyFrom(const GetNoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GetNoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNoteResponse::IsInitialized() const {
  return true;
}

void GetNoteResponse::InternalSwap(GetNoteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.thread_notes_.InternalSwap(&other->_impl_.thread_notes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNoteResponse, _impl_.success_)
      + sizeof(GetNoteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetNoteResponse, _impl_.note_)>(
          reinterpret_cast<char*>(&_impl_.note_),
          reinterpret_cast<char*>(&other->_impl_.note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[11]);
}

// ===================================================================

class DeleteNoteRequest::_Internal {
 public:
};

DeleteNoteRequest::DeleteNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.DeleteNoteRequest)
}
DeleteNoteRequest::DeleteNoteRequest(const DeleteNoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteNoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.note.DeleteNoteRequest)
}

inline void DeleteNoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteNoteRequest::~DeleteNoteRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.DeleteNoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteNoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_id_.Destroy();
  _impl_.user_id_.Destroy();
}

void DeleteNoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteNoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.DeleteNoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.note_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteNoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string note_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.DeleteNoteRequest.note_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.DeleteNoteRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteNoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.DeleteNoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.DeleteNoteRequest.note_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.DeleteNoteRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.DeleteNoteRequest)
  return target;
}

size_t DeleteNoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.DeleteNoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteNoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteNoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteNoteRequest::GetClassData() const { return &_class_data_; }


void DeleteNoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteNoteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteNoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.DeleteNoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteNoteRequest::CopyFrom(const DeleteNoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.DeleteNoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNoteRequest::IsInitialized() const {
  return true;
}

void DeleteNoteRequest::InternalSwap(DeleteNoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteNoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[12]);
}

// ===================================================================

class DeleteNoteResponse::_Internal {
 public:
};

DeleteNoteResponse::DeleteNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.DeleteNoteResponse)
}
DeleteNoteResponse::DeleteNoteResponse(const DeleteNoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteNoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.DeleteNoteResponse)
}

inline void DeleteNoteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteNoteResponse::~DeleteNoteResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.DeleteNoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteNoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void DeleteNoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteNoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.DeleteNoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteNoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.DeleteNoteResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteNoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.DeleteNoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.DeleteNoteResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.DeleteNoteResponse)
  return target;
}

size_t DeleteNoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.DeleteNoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteNoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteNoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteNoteResponse::GetClassData() const { return &_class_data_; }


void DeleteNoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteNoteResponse*>(&to_msg);
  auto& from = static_cast<const DeleteNoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.DeleteNoteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteNoteResponse::CopyFrom(const DeleteNoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.DeleteNoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNoteResponse::IsInitialized() const {
  return true;
}

void DeleteNoteResponse::InternalSwap(DeleteNoteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteNoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[13]);
}

// ===================================================================

class LikeNoteRequest::_Internal {
 public:
};

LikeNoteRequest::LikeNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.LikeNoteRequest)
}
LikeNoteRequest::LikeNoteRequest(const LikeNoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LikeNoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.like_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.like_ = from._impl_.like_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.LikeNoteRequest)
}

inline void LikeNoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.like_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LikeNoteRequest::~LikeNoteRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.LikeNoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LikeNoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_id_.Destroy();
  _impl_.user_id_.Destroy();
}

void LikeNoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LikeNoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.LikeNoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.note_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.like_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LikeNoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string note_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.LikeNoteRequest.note_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.LikeNoteRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool like = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.like_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LikeNoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.LikeNoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.LikeNoteRequest.note_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.LikeNoteRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // bool like = 3;
  if (this->_internal_like() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_like(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.LikeNoteRequest)
  return target;
}

size_t LikeNoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.LikeNoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bool like = 3;
  if (this->_internal_like() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LikeNoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LikeNoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LikeNoteRequest::GetClassData() const { return &_class_data_; }


void LikeNoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LikeNoteRequest*>(&to_msg);
  auto& from = static_cast<const LikeNoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.LikeNoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_like() != 0) {
    _this->_internal_set_like(from._internal_like());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LikeNoteRequest::CopyFrom(const LikeNoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.LikeNoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeNoteRequest::IsInitialized() const {
  return true;
}

void LikeNoteRequest::InternalSwap(LikeNoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  swap(_impl_.like_, other->_impl_.like_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LikeNoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[14]);
}

// ===================================================================

class LikeNoteResponse::_Internal {
 public:
};

LikeNoteResponse::LikeNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.LikeNoteResponse)
}
LikeNoteResponse::LikeNoteResponse(const LikeNoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LikeNoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.new_like_count_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.new_like_count_, &from._impl_.new_like_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.new_like_count_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.LikeNoteResponse)
}

inline void LikeNoteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.new_like_count_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LikeNoteResponse::~LikeNoteResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.LikeNoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LikeNoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void LikeNoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LikeNoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.LikeNoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.new_like_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.new_like_count_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LikeNoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 new_like_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.new_like_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.LikeNoteResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LikeNoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.LikeNoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int64 new_like_count = 2;
  if (this->_internal_new_like_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_new_like_count(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.LikeNoteResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.LikeNoteResponse)
  return target;
}

size_t LikeNoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.LikeNoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 new_like_count = 2;
  if (this->_internal_new_like_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_new_like_count());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LikeNoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LikeNoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LikeNoteResponse::GetClassData() const { return &_class_data_; }


void LikeNoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LikeNoteResponse*>(&to_msg);
  auto& from = static_cast<const LikeNoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.LikeNoteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_new_like_count() != 0) {
    _this->_internal_set_new_like_count(from._internal_new_like_count());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LikeNoteResponse::CopyFrom(const LikeNoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.LikeNoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LikeNoteResponse::IsInitialized() const {
  return true;
}

void LikeNoteResponse::InternalSwap(LikeNoteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LikeNoteResponse, _impl_.success_)
      + sizeof(LikeNoteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(LikeNoteResponse, _impl_.new_like_count_)>(
          reinterpret_cast<char*>(&_impl_.new_like_count_),
          reinterpret_cast<char*>(&other->_impl_.new_like_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LikeNoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[15]);
}

// ===================================================================

class RenoteNoteRequest::_Internal {
 public:
};

RenoteNoteRequest::RenoteNoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.RenoteNoteRequest)
}
RenoteNoteRequest::RenoteNoteRequest(const RenoteNoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenoteNoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.quote_text_){}
    , decltype(_impl_.is_quote_renote_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quote_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_text().empty()) {
    _this->_impl_.quote_text_.Set(from._internal_quote_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_quote_renote_ = from._impl_.is_quote_renote_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.RenoteNoteRequest)
}

inline void RenoteNoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.quote_text_){}
    , decltype(_impl_.is_quote_renote_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenoteNoteRequest::~RenoteNoteRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.RenoteNoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenoteNoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.quote_text_.Destroy();
}

void RenoteNoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenoteNoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.RenoteNoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.note_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.quote_text_.ClearToEmpty();
  _impl_.is_quote_renote_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenoteNoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string note_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.RenoteNoteRequest.note_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.RenoteNoteRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_quote_renote = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_quote_renote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quote_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.RenoteNoteRequest.quote_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenoteNoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.RenoteNoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.RenoteNoteRequest.note_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note_id(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.RenoteNoteRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // bool is_quote_renote = 3;
  if (this->_internal_is_quote_renote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_quote_renote(), target);
  }

  // string quote_text = 4;
  if (!this->_internal_quote_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_text().data(), static_cast<int>(this->_internal_quote_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.RenoteNoteRequest.quote_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quote_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.RenoteNoteRequest)
  return target;
}

size_t RenoteNoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.RenoteNoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string quote_text = 4;
  if (!this->_internal_quote_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_text());
  }

  // bool is_quote_renote = 3;
  if (this->_internal_is_quote_renote() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenoteNoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenoteNoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenoteNoteRequest::GetClassData() const { return &_class_data_; }


void RenoteNoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenoteNoteRequest*>(&to_msg);
  auto& from = static_cast<const RenoteNoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.RenoteNoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_quote_text().empty()) {
    _this->_internal_set_quote_text(from._internal_quote_text());
  }
  if (from._internal_is_quote_renote() != 0) {
    _this->_internal_set_is_quote_renote(from._internal_is_quote_renote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenoteNoteRequest::CopyFrom(const RenoteNoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.RenoteNoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenoteNoteRequest::IsInitialized() const {
  return true;
}

void RenoteNoteRequest::InternalSwap(RenoteNoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quote_text_, lhs_arena,
      &other->_impl_.quote_text_, rhs_arena
  );
  swap(_impl_.is_quote_renote_, other->_impl_.is_quote_renote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenoteNoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[16]);
}

// ===================================================================

class RenoteNoteResponse::_Internal {
 public:
  static const ::sonet::note::Note& renote_note(const RenoteNoteResponse* msg);
};

const ::sonet::note::Note&
RenoteNoteResponse::_Internal::renote_note(const RenoteNoteResponse* msg) {
  return *msg->_impl_.renote_note_;
}
RenoteNoteResponse::RenoteNoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.RenoteNoteResponse)
}
RenoteNoteResponse::RenoteNoteResponse(const RenoteNoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenoteNoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.renote_note_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_renote_note()) {
    _this->_impl_.renote_note_ = new ::sonet::note::Note(*from._impl_.renote_note_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.RenoteNoteResponse)
}

inline void RenoteNoteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.renote_note_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenoteNoteResponse::~RenoteNoteResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.RenoteNoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenoteNoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.renote_note_;
}

void RenoteNoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenoteNoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.RenoteNoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.renote_note_ != nullptr) {
    delete _impl_.renote_note_;
  }
  _impl_.renote_note_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenoteNoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.note.Note renote_note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_renote_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.RenoteNoteResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenoteNoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.RenoteNoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.note.Note renote_note = 1;
  if (this->_internal_has_renote_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::renote_note(this),
        _Internal::renote_note(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.RenoteNoteResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.RenoteNoteResponse)
  return target;
}

size_t RenoteNoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.RenoteNoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.note.Note renote_note = 1;
  if (this->_internal_has_renote_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.renote_note_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenoteNoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenoteNoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenoteNoteResponse::GetClassData() const { return &_class_data_; }


void RenoteNoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenoteNoteResponse*>(&to_msg);
  auto& from = static_cast<const RenoteNoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.RenoteNoteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_renote_note()) {
    _this->_internal_mutable_renote_note()->::sonet::note::Note::MergeFrom(
        from._internal_renote_note());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenoteNoteResponse::CopyFrom(const RenoteNoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.RenoteNoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenoteNoteResponse::IsInitialized() const {
  return true;
}

void RenoteNoteResponse::InternalSwap(RenoteNoteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenoteNoteResponse, _impl_.success_)
      + sizeof(RenoteNoteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(RenoteNoteResponse, _impl_.renote_note_)>(
          reinterpret_cast<char*>(&_impl_.renote_note_),
          reinterpret_cast<char*>(&other->_impl_.renote_note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenoteNoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[17]);
}

// ===================================================================

class GetUserNotesRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const GetUserNotesRequest* msg);
};

const ::sonet::common::PaginationRequest&
GetUserNotesRequest::_Internal::pagination(const GetUserNotesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetUserNotesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetUserNotesRequest::GetUserNotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GetUserNotesRequest)
}
GetUserNotesRequest::GetUserNotesRequest(const GetUserNotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserNotesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.include_replies_){}
    , decltype(_impl_.include_renotes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  ::memcpy(&_impl_.include_replies_, &from._impl_.include_replies_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_renotes_) -
    reinterpret_cast<char*>(&_impl_.include_replies_)) + sizeof(_impl_.include_renotes_));
  // @@protoc_insertion_point(copy_constructor:sonet.note.GetUserNotesRequest)
}

inline void GetUserNotesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.include_replies_){false}
    , decltype(_impl_.include_renotes_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserNotesRequest::~GetUserNotesRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.GetUserNotesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserNotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetUserNotesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserNotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GetUserNotesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  ::memset(&_impl_.include_replies_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_renotes_) -
      reinterpret_cast<char*>(&_impl_.include_replies_)) + sizeof(_impl_.include_renotes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserNotesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetUserNotesRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetUserNotesRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_replies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_replies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_renotes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_renotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserNotesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GetUserNotesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetUserNotesRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetUserNotesRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool include_replies = 4;
  if (this->_internal_include_replies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_replies(), target);
  }

  // bool include_renotes = 5;
  if (this->_internal_include_renotes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_renotes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GetUserNotesRequest)
  return target;
}

size_t GetUserNotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GetUserNotesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool include_replies = 4;
  if (this->_internal_include_replies() != 0) {
    total_size += 1 + 1;
  }

  // bool include_renotes = 5;
  if (this->_internal_include_renotes() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserNotesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserNotesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserNotesRequest::GetClassData() const { return &_class_data_; }


void GetUserNotesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserNotesRequest*>(&to_msg);
  auto& from = static_cast<const GetUserNotesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GetUserNotesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_include_replies() != 0) {
    _this->_internal_set_include_replies(from._internal_include_replies());
  }
  if (from._internal_include_renotes() != 0) {
    _this->_internal_set_include_renotes(from._internal_include_renotes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserNotesRequest::CopyFrom(const GetUserNotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GetUserNotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserNotesRequest::IsInitialized() const {
  return true;
}

void GetUserNotesRequest::InternalSwap(GetUserNotesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserNotesRequest, _impl_.include_renotes_)
      + sizeof(GetUserNotesRequest::_impl_.include_renotes_)
      - PROTOBUF_FIELD_OFFSET(GetUserNotesRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserNotesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[18]);
}

// ===================================================================

class GetUserNotesResponse::_Internal {
 public:
  static const ::sonet::common::PaginationResponse& pagination(const GetUserNotesResponse* msg);
};

const ::sonet::common::PaginationResponse&
GetUserNotesResponse::_Internal::pagination(const GetUserNotesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetUserNotesResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetUserNotesResponse::GetUserNotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GetUserNotesResponse)
}
GetUserNotesResponse::GetUserNotesResponse(const GetUserNotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserNotesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.notes_){from._impl_.notes_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.GetUserNotesResponse)
}

inline void GetUserNotesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.notes_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserNotesResponse::~GetUserNotesResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.GetUserNotesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserNotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notes_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetUserNotesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserNotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GetUserNotesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notes_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserNotesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.note.Note notes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetUserNotesResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserNotesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GetUserNotesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.note.Note notes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notes_size()); i < n; i++) {
    const auto& repfield = this->_internal_notes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetUserNotesResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GetUserNotesResponse)
  return target;
}

size_t GetUserNotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GetUserNotesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.note.Note notes = 1;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->_impl_.notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserNotesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserNotesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserNotesResponse::GetClassData() const { return &_class_data_; }


void GetUserNotesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserNotesResponse*>(&to_msg);
  auto& from = static_cast<const GetUserNotesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GetUserNotesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notes_.MergeFrom(from._impl_.notes_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserNotesResponse::CopyFrom(const GetUserNotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GetUserNotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserNotesResponse::IsInitialized() const {
  return true;
}

void GetUserNotesResponse::InternalSwap(GetUserNotesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.notes_.InternalSwap(&other->_impl_.notes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserNotesResponse, _impl_.success_)
      + sizeof(GetUserNotesResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetUserNotesResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserNotesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[19]);
}

// ===================================================================

class GetNoteThreadRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const GetNoteThreadRequest* msg);
};

const ::sonet::common::PaginationRequest&
GetNoteThreadRequest::_Internal::pagination(const GetNoteThreadRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetNoteThreadRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetNoteThreadRequest::GetNoteThreadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GetNoteThreadRequest)
}
GetNoteThreadRequest::GetNoteThreadRequest(const GetNoteThreadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNoteThreadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note_id().empty()) {
    _this->_impl_.note_id_.Set(from._internal_note_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.note.GetNoteThreadRequest)
}

inline void GetNoteThreadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.note_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.note_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNoteThreadRequest::~GetNoteThreadRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.GetNoteThreadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNoteThreadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetNoteThreadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNoteThreadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GetNoteThreadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.note_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNoteThreadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string note_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetNoteThreadRequest.note_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetNoteThreadRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNoteThreadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GetNoteThreadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note_id().data(), static_cast<int>(this->_internal_note_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetNoteThreadRequest.note_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetNoteThreadRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GetNoteThreadRequest)
  return target;
}

size_t GetNoteThreadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GetNoteThreadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string note_id = 1;
  if (!this->_internal_note_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNoteThreadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNoteThreadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNoteThreadRequest::GetClassData() const { return &_class_data_; }


void GetNoteThreadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNoteThreadRequest*>(&to_msg);
  auto& from = static_cast<const GetNoteThreadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GetNoteThreadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_note_id().empty()) {
    _this->_internal_set_note_id(from._internal_note_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNoteThreadRequest::CopyFrom(const GetNoteThreadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GetNoteThreadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNoteThreadRequest::IsInitialized() const {
  return true;
}

void GetNoteThreadRequest::InternalSwap(GetNoteThreadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_id_, lhs_arena,
      &other->_impl_.note_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNoteThreadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[20]);
}

// ===================================================================

class GetNoteThreadResponse::_Internal {
 public:
  static const ::sonet::note::Note& root_note(const GetNoteThreadResponse* msg);
  static const ::sonet::common::PaginationResponse& pagination(const GetNoteThreadResponse* msg);
};

const ::sonet::note::Note&
GetNoteThreadResponse::_Internal::root_note(const GetNoteThreadResponse* msg) {
  return *msg->_impl_.root_note_;
}
const ::sonet::common::PaginationResponse&
GetNoteThreadResponse::_Internal::pagination(const GetNoteThreadResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetNoteThreadResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetNoteThreadResponse::GetNoteThreadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.GetNoteThreadResponse)
}
GetNoteThreadResponse::GetNoteThreadResponse(const GetNoteThreadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNoteThreadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replies_){from._impl_.replies_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.root_note_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_root_note()) {
    _this->_impl_.root_note_ = new ::sonet::note::Note(*from._impl_.root_note_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.GetNoteThreadResponse)
}

inline void GetNoteThreadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replies_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.root_note_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNoteThreadResponse::~GetNoteThreadResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.GetNoteThreadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNoteThreadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replies_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.root_note_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetNoteThreadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNoteThreadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.GetNoteThreadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replies_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.root_note_ != nullptr) {
    delete _impl_.root_note_;
  }
  _impl_.root_note_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNoteThreadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.note.Note root_note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sonet.note.Note replies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.GetNoteThreadResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNoteThreadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.GetNoteThreadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.note.Note root_note = 1;
  if (this->_internal_has_root_note()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::root_note(this),
        _Internal::root_note(this).GetCachedSize(), target, stream);
  }

  // repeated .sonet.note.Note replies = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replies_size()); i < n; i++) {
    const auto& repfield = this->_internal_replies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.GetNoteThreadResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.GetNoteThreadResponse)
  return target;
}

size_t GetNoteThreadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.GetNoteThreadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.note.Note replies = 2;
  total_size += 1UL * this->_internal_replies_size();
  for (const auto& msg : this->_impl_.replies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.note.Note root_note = 1;
  if (this->_internal_has_root_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_note_);
  }

  // .sonet.common.PaginationResponse pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNoteThreadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNoteThreadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNoteThreadResponse::GetClassData() const { return &_class_data_; }


void GetNoteThreadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNoteThreadResponse*>(&to_msg);
  auto& from = static_cast<const GetNoteThreadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.GetNoteThreadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replies_.MergeFrom(from._impl_.replies_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_root_note()) {
    _this->_internal_mutable_root_note()->::sonet::note::Note::MergeFrom(
        from._internal_root_note());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNoteThreadResponse::CopyFrom(const GetNoteThreadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.GetNoteThreadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNoteThreadResponse::IsInitialized() const {
  return true;
}

void GetNoteThreadResponse::InternalSwap(GetNoteThreadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replies_.InternalSwap(&other->_impl_.replies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNoteThreadResponse, _impl_.success_)
      + sizeof(GetNoteThreadResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetNoteThreadResponse, _impl_.root_note_)>(
          reinterpret_cast<char*>(&_impl_.root_note_),
          reinterpret_cast<char*>(&other->_impl_.root_note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNoteThreadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[21]);
}

// ===================================================================

class SearchNotesRequest::_Internal {
 public:
  static const ::sonet::common::PaginationRequest& pagination(const SearchNotesRequest* msg);
  static const ::sonet::common::Timestamp& since(const SearchNotesRequest* msg);
  static const ::sonet::common::Timestamp& until(const SearchNotesRequest* msg);
};

const ::sonet::common::PaginationRequest&
SearchNotesRequest::_Internal::pagination(const SearchNotesRequest* msg) {
  return *msg->_impl_.pagination_;
}
const ::sonet::common::Timestamp&
SearchNotesRequest::_Internal::since(const SearchNotesRequest* msg) {
  return *msg->_impl_.since_;
}
const ::sonet::common::Timestamp&
SearchNotesRequest::_Internal::until(const SearchNotesRequest* msg) {
  return *msg->_impl_.until_;
}
void SearchNotesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
void SearchNotesRequest::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
void SearchNotesRequest::clear_until() {
  if (GetArenaForAllocation() == nullptr && _impl_.until_ != nullptr) {
    delete _impl_.until_;
  }
  _impl_.until_ = nullptr;
}
SearchNotesRequest::SearchNotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.SearchNotesRequest)
}
SearchNotesRequest::SearchNotesRequest(const SearchNotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchNotesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashtags_){from._impl_.hashtags_}
    , decltype(_impl_.query_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.until_){nullptr}
    , decltype(_impl_.verified_only_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author_id().empty()) {
    _this->_impl_.author_id_.Set(from._internal_author_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationRequest(*from._impl_.pagination_);
  }
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::sonet::common::Timestamp(*from._impl_.since_);
  }
  if (from._internal_has_until()) {
    _this->_impl_.until_ = new ::sonet::common::Timestamp(*from._impl_.until_);
  }
  _this->_impl_.verified_only_ = from._impl_.verified_only_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.SearchNotesRequest)
}

inline void SearchNotesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashtags_){arena}
    , decltype(_impl_.query_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.since_){nullptr}
    , decltype(_impl_.until_){nullptr}
    , decltype(_impl_.verified_only_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchNotesRequest::~SearchNotesRequest() {
  // @@protoc_insertion_point(destructor:sonet.note.SearchNotesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchNotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashtags_.~RepeatedPtrField();
  _impl_.query_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  _impl_.language_.Destroy();
  _impl_.author_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (this != internal_default_instance()) delete _impl_.since_;
  if (this != internal_default_instance()) delete _impl_.until_;
}

void SearchNotesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchNotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.SearchNotesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashtags_.Clear();
  _impl_.query_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.author_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.until_ != nullptr) {
    delete _impl_.until_;
  }
  _impl_.until_ = nullptr;
  _impl_.verified_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchNotesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.SearchNotesRequest.query"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.SearchNotesRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationRequest pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.SearchNotesRequest.language"));
        } else
          goto handle_unusual;
        continue;
      // string author_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_author_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.SearchNotesRequest.author_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string hashtags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashtags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.note.SearchNotesRequest.hashtags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp since = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.Timestamp until = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_until(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool verified_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.verified_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchNotesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.SearchNotesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.SearchNotesRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.SearchNotesRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.SearchNotesRequest.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // string author_id = 5;
  if (!this->_internal_author_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_id().data(), static_cast<int>(this->_internal_author_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.SearchNotesRequest.author_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_author_id(), target);
  }

  // repeated string hashtags = 6;
  for (int i = 0, n = this->_internal_hashtags_size(); i < n; i++) {
    const auto& s = this->_internal_hashtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.SearchNotesRequest.hashtags");
    target = stream->WriteString(6, s, target);
  }

  // .sonet.common.Timestamp since = 7;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  // .sonet.common.Timestamp until = 8;
  if (this->_internal_has_until()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::until(this),
        _Internal::until(this).GetCachedSize(), target, stream);
  }

  // bool verified_only = 9;
  if (this->_internal_verified_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_verified_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.SearchNotesRequest)
  return target;
}

size_t SearchNotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.SearchNotesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hashtags = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hashtags_.size());
  for (int i = 0, n = _impl_.hashtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.hashtags_.Get(i));
  }

  // string query = 1;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string author_id = 5;
  if (!this->_internal_author_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_id());
  }

  // .sonet.common.PaginationRequest pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .sonet.common.Timestamp since = 7;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  // .sonet.common.Timestamp until = 8;
  if (this->_internal_has_until()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.until_);
  }

  // bool verified_only = 9;
  if (this->_internal_verified_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchNotesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchNotesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchNotesRequest::GetClassData() const { return &_class_data_; }


void SearchNotesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchNotesRequest*>(&to_msg);
  auto& from = static_cast<const SearchNotesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.SearchNotesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashtags_.MergeFrom(from._impl_.hashtags_);
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_author_id().empty()) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::sonet::common::Timestamp::MergeFrom(
        from._internal_since());
  }
  if (from._internal_has_until()) {
    _this->_internal_mutable_until()->::sonet::common::Timestamp::MergeFrom(
        from._internal_until());
  }
  if (from._internal_verified_only() != 0) {
    _this->_internal_set_verified_only(from._internal_verified_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchNotesRequest::CopyFrom(const SearchNotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.SearchNotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchNotesRequest::IsInitialized() const {
  return true;
}

void SearchNotesRequest::InternalSwap(SearchNotesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashtags_.InternalSwap(&other->_impl_.hashtags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_id_, lhs_arena,
      &other->_impl_.author_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchNotesRequest, _impl_.verified_only_)
      + sizeof(SearchNotesRequest::_impl_.verified_only_)
      - PROTOBUF_FIELD_OFFSET(SearchNotesRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchNotesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[22]);
}

// ===================================================================

class SearchNotesResponse::_Internal {
 public:
  static const ::sonet::common::PaginationResponse& pagination(const SearchNotesResponse* msg);
};

const ::sonet::common::PaginationResponse&
SearchNotesResponse::_Internal::pagination(const SearchNotesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void SearchNotesResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
SearchNotesResponse::SearchNotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.note.SearchNotesResponse)
}
SearchNotesResponse::SearchNotesResponse(const SearchNotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchNotesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.notes_){from._impl_.notes_}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::common::PaginationResponse(*from._impl_.pagination_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sonet.note.SearchNotesResponse)
}

inline void SearchNotesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.notes_){arena}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchNotesResponse::~SearchNotesResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.SearchNotesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchNotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notes_.~RepeatedPtrField();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void SearchNotesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchNotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.SearchNotesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notes_.Clear();
  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchNotesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.note.Note notes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.common.PaginationResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.SearchNotesResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchNotesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.SearchNotesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.note.Note notes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notes_size()); i < n; i++) {
    const auto& repfield = this->_internal_notes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.SearchNotesResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.SearchNotesResponse)
  return target;
}

size_t SearchNotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.SearchNotesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.note.Note notes = 1;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->_impl_.notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .sonet.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchNotesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchNotesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchNotesResponse::GetClassData() const { return &_class_data_; }


void SearchNotesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchNotesResponse*>(&to_msg);
  auto& from = static_cast<const SearchNotesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.SearchNotesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notes_.MergeFrom(from._impl_.notes_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::common::PaginationResponse::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchNotesResponse::CopyFrom(const SearchNotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.SearchNotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchNotesResponse::IsInitialized() const {
  return true;
}

void SearchNotesResponse::InternalSwap(SearchNotesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.notes_.InternalSwap(&other->_impl_.notes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchNotesResponse, _impl_.success_)
      + sizeof(SearchNotesResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(SearchNotesResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchNotesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[23]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sonet.note.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HealthCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sonet.note.HealthCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[24]);
}

// ===================================================================

HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse() {}
HealthCheckResponse_DetailsEntry_DoNotUse::HealthCheckResponse_DetailsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HealthCheckResponse_DetailsEntry_DoNotUse::MergeFrom(const HealthCheckResponse_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse_DetailsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[25]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HealthCheckResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.note.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.note.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.details_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:sonet.note.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destruct();
  _impl_.details_.~MapField();
  _impl_.status_.Destroy();
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  _this->_impl_.details_.Destruct();
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.note.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.note.HealthCheckResponse.status"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.details_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.note.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.note.HealthCheckResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // map<string, string> details = 2;
  if (!this->_internal_details().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HealthCheckResponse_DetailsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_details();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.note.HealthCheckResponse.DetailsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.note.HealthCheckResponse.DetailsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.note.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.note.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> details = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_details_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_details().begin();
      it != this->_internal_details().end(); ++it) {
    total_size += HealthCheckResponse_DetailsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.note.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.note.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fnote_2eproto_getter, &descriptor_table_services_2fnote_2eproto_once,
      file_level_metadata_services_2fnote_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace note
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::note::NoteMention*
Arena::CreateMaybeMessage< ::sonet::note::NoteMention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::NoteMention >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::NoteHashtag*
Arena::CreateMaybeMessage< ::sonet::note::NoteHashtag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::NoteHashtag >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::NoteLink*
Arena::CreateMaybeMessage< ::sonet::note::NoteLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::NoteLink >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::NoteEntities*
Arena::CreateMaybeMessage< ::sonet::note::NoteEntities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::NoteEntities >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GeoLocation*
Arena::CreateMaybeMessage< ::sonet::note::GeoLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GeoLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::NoteMetrics*
Arena::CreateMaybeMessage< ::sonet::note::NoteMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::NoteMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::Note*
Arena::CreateMaybeMessage< ::sonet::note::Note >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::Note >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::UserNoteInteraction*
Arena::CreateMaybeMessage< ::sonet::note::UserNoteInteraction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::UserNoteInteraction >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::CreateNoteRequest*
Arena::CreateMaybeMessage< ::sonet::note::CreateNoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::CreateNoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::CreateNoteResponse*
Arena::CreateMaybeMessage< ::sonet::note::CreateNoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::CreateNoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GetNoteRequest*
Arena::CreateMaybeMessage< ::sonet::note::GetNoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GetNoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GetNoteResponse*
Arena::CreateMaybeMessage< ::sonet::note::GetNoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GetNoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::DeleteNoteRequest*
Arena::CreateMaybeMessage< ::sonet::note::DeleteNoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::DeleteNoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::DeleteNoteResponse*
Arena::CreateMaybeMessage< ::sonet::note::DeleteNoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::DeleteNoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::LikeNoteRequest*
Arena::CreateMaybeMessage< ::sonet::note::LikeNoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::LikeNoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::LikeNoteResponse*
Arena::CreateMaybeMessage< ::sonet::note::LikeNoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::LikeNoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::RenoteNoteRequest*
Arena::CreateMaybeMessage< ::sonet::note::RenoteNoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::RenoteNoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::RenoteNoteResponse*
Arena::CreateMaybeMessage< ::sonet::note::RenoteNoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::RenoteNoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GetUserNotesRequest*
Arena::CreateMaybeMessage< ::sonet::note::GetUserNotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GetUserNotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GetUserNotesResponse*
Arena::CreateMaybeMessage< ::sonet::note::GetUserNotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GetUserNotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GetNoteThreadRequest*
Arena::CreateMaybeMessage< ::sonet::note::GetNoteThreadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GetNoteThreadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::GetNoteThreadResponse*
Arena::CreateMaybeMessage< ::sonet::note::GetNoteThreadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::GetNoteThreadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::SearchNotesRequest*
Arena::CreateMaybeMessage< ::sonet::note::SearchNotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::SearchNotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::SearchNotesResponse*
Arena::CreateMaybeMessage< ::sonet::note::SearchNotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::SearchNotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::HealthCheckRequest*
Arena::CreateMaybeMessage< ::sonet::note::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::HealthCheckResponse_DetailsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::note::HealthCheckResponse*
Arena::CreateMaybeMessage< ::sonet::note::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::note::HealthCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
