// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/timeline.proto

#include "services/timeline.pb.h"
#include "services/timeline.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace timeline {

static const char* TimelineService_method_names[] = {
  "/sonet.timeline.TimelineService/GetTimeline",
  "/sonet.timeline.TimelineService/GetUserTimeline",
  "/sonet.timeline.TimelineService/RefreshTimeline",
  "/sonet.timeline.TimelineService/MarkTimelineRead",
  "/sonet.timeline.TimelineService/UpdateTimelinePreferences",
  "/sonet.timeline.TimelineService/GetTimelinePreferences",
  "/sonet.timeline.TimelineService/SubscribeTimelineUpdates",
  "/sonet.timeline.TimelineService/HealthCheck",
};

std::unique_ptr< TimelineService::Stub> TimelineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TimelineService::Stub> stub(new TimelineService::Stub(channel, options));
  return stub;
}

TimelineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTimeline_(TimelineService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserTimeline_(TimelineService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefreshTimeline_(TimelineService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkTimelineRead_(TimelineService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTimelinePreferences_(TimelineService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTimelinePreferences_(TimelineService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeTimelineUpdates_(TimelineService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_HealthCheck_(TimelineService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TimelineService::Stub::GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::sonet::timeline::GetTimelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTimeline_, context, request, response);
}

void TimelineService::Stub::async::GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTimeline_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::GetTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTimeline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>* TimelineService::Stub::PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::GetTimelineResponse, ::sonet::timeline::GetTimelineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTimeline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelineResponse>* TimelineService::Stub::AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTimelineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimelineService::Stub::GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::sonet::timeline::GetUserTimelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserTimeline_, context, request, response);
}

void TimelineService::Stub::async::GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserTimeline_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::GetUserTimeline(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserTimeline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>* TimelineService::Stub::PrepareAsyncGetUserTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::GetUserTimelineResponse, ::sonet::timeline::GetUserTimelineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserTimeline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetUserTimelineResponse>* TimelineService::Stub::AsyncGetUserTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetUserTimelineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserTimelineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimelineService::Stub::RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::sonet::timeline::RefreshTimelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RefreshTimeline_, context, request, response);
}

void TimelineService::Stub::async::RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshTimeline_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::RefreshTimeline(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshTimeline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>* TimelineService::Stub::PrepareAsyncRefreshTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::RefreshTimelineResponse, ::sonet::timeline::RefreshTimelineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RefreshTimeline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::RefreshTimelineResponse>* TimelineService::Stub::AsyncRefreshTimelineRaw(::grpc::ClientContext* context, const ::sonet::timeline::RefreshTimelineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshTimelineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimelineService::Stub::MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::sonet::timeline::MarkTimelineReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarkTimelineRead_, context, request, response);
}

void TimelineService::Stub::async::MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkTimelineRead_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::MarkTimelineRead(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkTimelineRead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>* TimelineService::Stub::PrepareAsyncMarkTimelineReadRaw(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::MarkTimelineReadResponse, ::sonet::timeline::MarkTimelineReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarkTimelineRead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::MarkTimelineReadResponse>* TimelineService::Stub::AsyncMarkTimelineReadRaw(::grpc::ClientContext* context, const ::sonet::timeline::MarkTimelineReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarkTimelineReadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimelineService::Stub::UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTimelinePreferences_, context, request, response);
}

void TimelineService::Stub::async::UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTimelinePreferences_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::UpdateTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTimelinePreferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>* TimelineService::Stub::PrepareAsyncUpdateTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::UpdateTimelinePreferencesResponse, ::sonet::timeline::UpdateTimelinePreferencesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTimelinePreferences_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::UpdateTimelinePreferencesResponse>* TimelineService::Stub::AsyncUpdateTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTimelinePreferencesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimelineService::Stub::GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::sonet::timeline::GetTimelinePreferencesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTimelinePreferences_, context, request, response);
}

void TimelineService::Stub::async::GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTimelinePreferences_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::GetTimelinePreferences(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTimelinePreferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>* TimelineService::Stub::PrepareAsyncGetTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::GetTimelinePreferencesResponse, ::sonet::timeline::GetTimelinePreferencesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTimelinePreferences_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::GetTimelinePreferencesResponse>* TimelineService::Stub::AsyncGetTimelinePreferencesRaw(::grpc::ClientContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTimelinePreferencesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sonet::timeline::TimelineUpdate>* TimelineService::Stub::SubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sonet::timeline::TimelineUpdate>::Create(channel_.get(), rpcmethod_SubscribeTimelineUpdates_, context, request);
}

void TimelineService::Stub::async::SubscribeTimelineUpdates(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* request, ::grpc::ClientReadReactor< ::sonet::timeline::TimelineUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sonet::timeline::TimelineUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeTimelineUpdates_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>* TimelineService::Stub::AsyncSubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sonet::timeline::TimelineUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeTimelineUpdates_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sonet::timeline::TimelineUpdate>* TimelineService::Stub::PrepareAsyncSubscribeTimelineUpdatesRaw(::grpc::ClientContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sonet::timeline::TimelineUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeTimelineUpdates_, context, request, false, nullptr);
}

::grpc::Status TimelineService::Stub::HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::sonet::timeline::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void TimelineService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void TimelineService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>* TimelineService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::timeline::HealthCheckResponse, ::sonet::timeline::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::timeline::HealthCheckResponse>* TimelineService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::timeline::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

TimelineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::GetTimelineRequest, ::sonet::timeline::GetTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::GetTimelineRequest* req,
             ::sonet::timeline::GetTimelineResponse* resp) {
               return service->GetTimeline(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::GetUserTimelineRequest, ::sonet::timeline::GetUserTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::GetUserTimelineRequest* req,
             ::sonet::timeline::GetUserTimelineResponse* resp) {
               return service->GetUserTimeline(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::RefreshTimelineRequest, ::sonet::timeline::RefreshTimelineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::RefreshTimelineRequest* req,
             ::sonet::timeline::RefreshTimelineResponse* resp) {
               return service->RefreshTimeline(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::MarkTimelineReadRequest, ::sonet::timeline::MarkTimelineReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::MarkTimelineReadRequest* req,
             ::sonet::timeline::MarkTimelineReadResponse* resp) {
               return service->MarkTimelineRead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::UpdateTimelinePreferencesRequest, ::sonet::timeline::UpdateTimelinePreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::UpdateTimelinePreferencesRequest* req,
             ::sonet::timeline::UpdateTimelinePreferencesResponse* resp) {
               return service->UpdateTimelinePreferences(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::GetTimelinePreferencesRequest, ::sonet::timeline::GetTimelinePreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::GetTimelinePreferencesRequest* req,
             ::sonet::timeline::GetTimelinePreferencesResponse* resp) {
               return service->GetTimelinePreferences(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TimelineService::Service, ::sonet::timeline::SubscribeTimelineUpdatesRequest, ::sonet::timeline::TimelineUpdate>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::SubscribeTimelineUpdatesRequest* req,
             ::grpc::ServerWriter<::sonet::timeline::TimelineUpdate>* writer) {
               return service->SubscribeTimelineUpdates(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimelineService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimelineService::Service, ::sonet::timeline::HealthCheckRequest, ::sonet::timeline::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::timeline::HealthCheckRequest* req,
             ::sonet::timeline::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

TimelineService::Service::~Service() {
}

::grpc::Status TimelineService::Service::GetTimeline(::grpc::ServerContext* context, const ::sonet::timeline::GetTimelineRequest* request, ::sonet::timeline::GetTimelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::GetUserTimeline(::grpc::ServerContext* context, const ::sonet::timeline::GetUserTimelineRequest* request, ::sonet::timeline::GetUserTimelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::RefreshTimeline(::grpc::ServerContext* context, const ::sonet::timeline::RefreshTimelineRequest* request, ::sonet::timeline::RefreshTimelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::MarkTimelineRead(::grpc::ServerContext* context, const ::sonet::timeline::MarkTimelineReadRequest* request, ::sonet::timeline::MarkTimelineReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::UpdateTimelinePreferences(::grpc::ServerContext* context, const ::sonet::timeline::UpdateTimelinePreferencesRequest* request, ::sonet::timeline::UpdateTimelinePreferencesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::GetTimelinePreferences(::grpc::ServerContext* context, const ::sonet::timeline::GetTimelinePreferencesRequest* request, ::sonet::timeline::GetTimelinePreferencesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::SubscribeTimelineUpdates(::grpc::ServerContext* context, const ::sonet::timeline::SubscribeTimelineUpdatesRequest* request, ::grpc::ServerWriter< ::sonet::timeline::TimelineUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimelineService::Service::HealthCheck(::grpc::ServerContext* context, const ::sonet::timeline::HealthCheckRequest* request, ::sonet::timeline::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace timeline

