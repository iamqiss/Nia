// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pagination.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fpagination_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fpagination_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fpagination_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fpagination_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fpagination_2eproto;
namespace sonet {
namespace common {
class Pagination;
struct PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class PaginationRequest;
struct PaginationRequestDefaultTypeInternal;
extern PaginationRequestDefaultTypeInternal _PaginationRequest_default_instance_;
class PaginationResponse;
struct PaginationResponseDefaultTypeInternal;
extern PaginationResponseDefaultTypeInternal _PaginationResponse_default_instance_;
}  // namespace common
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::common::Pagination* Arena::CreateMaybeMessage<::sonet::common::Pagination>(Arena*);
template<> ::sonet::common::PaginationRequest* Arena::CreateMaybeMessage<::sonet::common::PaginationRequest>(Arena*);
template<> ::sonet::common::PaginationResponse* Arena::CreateMaybeMessage<::sonet::common::PaginationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace common {

// ===================================================================

class PaginationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.PaginationRequest) */ {
 public:
  inline PaginationRequest() : PaginationRequest(nullptr) {}
  ~PaginationRequest() override;
  explicit PROTOBUF_CONSTEXPR PaginationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaginationRequest(const PaginationRequest& from);
  PaginationRequest(PaginationRequest&& from) noexcept
    : PaginationRequest() {
    *this = ::std::move(from);
  }

  inline PaginationRequest& operator=(const PaginationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaginationRequest& operator=(PaginationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaginationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaginationRequest* internal_default_instance() {
    return reinterpret_cast<const PaginationRequest*>(
               &_PaginationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PaginationRequest& a, PaginationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaginationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaginationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaginationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaginationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaginationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PaginationRequest& from) {
    PaginationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaginationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.PaginationRequest";
  }
  protected:
  explicit PaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 3,
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string cursor = 3;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.PaginationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t offset_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpagination_2eproto;
};
// -------------------------------------------------------------------

class PaginationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.PaginationResponse) */ {
 public:
  inline PaginationResponse() : PaginationResponse(nullptr) {}
  ~PaginationResponse() override;
  explicit PROTOBUF_CONSTEXPR PaginationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaginationResponse(const PaginationResponse& from);
  PaginationResponse(PaginationResponse&& from) noexcept
    : PaginationResponse() {
    *this = ::std::move(from);
  }

  inline PaginationResponse& operator=(const PaginationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaginationResponse& operator=(PaginationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaginationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaginationResponse* internal_default_instance() {
    return reinterpret_cast<const PaginationResponse*>(
               &_PaginationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PaginationResponse& a, PaginationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaginationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaginationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaginationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaginationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaginationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PaginationResponse& from) {
    PaginationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaginationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.PaginationResponse";
  }
  protected:
  explicit PaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextCursorFieldNumber = 6,
    kPrevCursorFieldNumber = 7,
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
    kTotalCountFieldNumber = 3,
    kHasNextFieldNumber = 4,
    kHasPreviousFieldNumber = 5,
  };
  // string next_cursor = 6;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string prev_cursor = 7;
  void clear_prev_cursor();
  const std::string& prev_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_cursor();
  PROTOBUF_NODISCARD std::string* release_prev_cursor();
  void set_allocated_prev_cursor(std::string* prev_cursor);
  private:
  const std::string& _internal_prev_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_cursor(const std::string& value);
  std::string* _internal_mutable_prev_cursor();
  public:

  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 total_count = 3;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // bool has_next = 4;
  void clear_has_next();
  bool has_next() const;
  void set_has_next(bool value);
  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);
  public:

  // bool has_previous = 5;
  void clear_has_previous();
  bool has_previous() const;
  void set_has_previous(bool value);
  private:
  bool _internal_has_previous() const;
  void _internal_set_has_previous(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.PaginationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_cursor_;
    int32_t offset_;
    int32_t limit_;
    int32_t total_count_;
    bool has_next_;
    bool has_previous_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpagination_2eproto;
};
// -------------------------------------------------------------------

class Pagination final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.common.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  ~Pagination() override;
  explicit PROTOBUF_CONSTEXPR Pagination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pagination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pagination& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pagination& from) {
    Pagination::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.common.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
    kTotalCountFieldNumber = 3,
    kHasNextFieldNumber = 4,
    kHasPreviousFieldNumber = 5,
  };
  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 total_count = 3;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // bool has_next = 4;
  void clear_has_next();
  bool has_next() const;
  void set_has_next(bool value);
  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);
  public:

  // bool has_previous = 5;
  void clear_has_previous();
  bool has_previous() const;
  void set_has_previous(bool value);
  private:
  bool _internal_has_previous() const;
  void _internal_set_has_previous(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.common.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t offset_;
    int32_t limit_;
    int32_t total_count_;
    bool has_next_;
    bool has_previous_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpagination_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PaginationRequest

// int32 offset = 1;
inline void PaginationRequest::clear_offset() {
  _impl_.offset_ = 0;
}
inline int32_t PaginationRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t PaginationRequest::offset() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationRequest.offset)
  return _internal_offset();
}
inline void PaginationRequest::_internal_set_offset(int32_t value) {
  
  _impl_.offset_ = value;
}
inline void PaginationRequest::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationRequest.offset)
}

// int32 limit = 2;
inline void PaginationRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t PaginationRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t PaginationRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationRequest.limit)
  return _internal_limit();
}
inline void PaginationRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void PaginationRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationRequest.limit)
}

// string cursor = 3;
inline void PaginationRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& PaginationRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaginationRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.PaginationRequest.cursor)
}
inline std::string* PaginationRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.PaginationRequest.cursor)
  return _s;
}
inline const std::string& PaginationRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void PaginationRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* PaginationRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* PaginationRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.PaginationRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void PaginationRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.PaginationRequest.cursor)
}

// -------------------------------------------------------------------

// PaginationResponse

// int32 offset = 1;
inline void PaginationResponse::clear_offset() {
  _impl_.offset_ = 0;
}
inline int32_t PaginationResponse::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t PaginationResponse::offset() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.offset)
  return _internal_offset();
}
inline void PaginationResponse::_internal_set_offset(int32_t value) {
  
  _impl_.offset_ = value;
}
inline void PaginationResponse::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.offset)
}

// int32 limit = 2;
inline void PaginationResponse::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t PaginationResponse::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t PaginationResponse::limit() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.limit)
  return _internal_limit();
}
inline void PaginationResponse::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void PaginationResponse::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.limit)
}

// int32 total_count = 3;
inline void PaginationResponse::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t PaginationResponse::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t PaginationResponse::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.total_count)
  return _internal_total_count();
}
inline void PaginationResponse::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void PaginationResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.total_count)
}

// bool has_next = 4;
inline void PaginationResponse::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool PaginationResponse::_internal_has_next() const {
  return _impl_.has_next_;
}
inline bool PaginationResponse::has_next() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.has_next)
  return _internal_has_next();
}
inline void PaginationResponse::_internal_set_has_next(bool value) {
  
  _impl_.has_next_ = value;
}
inline void PaginationResponse::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.has_next)
}

// bool has_previous = 5;
inline void PaginationResponse::clear_has_previous() {
  _impl_.has_previous_ = false;
}
inline bool PaginationResponse::_internal_has_previous() const {
  return _impl_.has_previous_;
}
inline bool PaginationResponse::has_previous() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.has_previous)
  return _internal_has_previous();
}
inline void PaginationResponse::_internal_set_has_previous(bool value) {
  
  _impl_.has_previous_ = value;
}
inline void PaginationResponse::set_has_previous(bool value) {
  _internal_set_has_previous(value);
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.has_previous)
}

// string next_cursor = 6;
inline void PaginationResponse::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& PaginationResponse::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaginationResponse::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.next_cursor)
}
inline std::string* PaginationResponse::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.PaginationResponse.next_cursor)
  return _s;
}
inline const std::string& PaginationResponse::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void PaginationResponse::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* PaginationResponse::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* PaginationResponse::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.PaginationResponse.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void PaginationResponse::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.PaginationResponse.next_cursor)
}

// string prev_cursor = 7;
inline void PaginationResponse::clear_prev_cursor() {
  _impl_.prev_cursor_.ClearToEmpty();
}
inline const std::string& PaginationResponse::prev_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.common.PaginationResponse.prev_cursor)
  return _internal_prev_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaginationResponse::set_prev_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.common.PaginationResponse.prev_cursor)
}
inline std::string* PaginationResponse::mutable_prev_cursor() {
  std::string* _s = _internal_mutable_prev_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.common.PaginationResponse.prev_cursor)
  return _s;
}
inline const std::string& PaginationResponse::_internal_prev_cursor() const {
  return _impl_.prev_cursor_.Get();
}
inline void PaginationResponse::_internal_set_prev_cursor(const std::string& value) {
  
  _impl_.prev_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* PaginationResponse::_internal_mutable_prev_cursor() {
  
  return _impl_.prev_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* PaginationResponse::release_prev_cursor() {
  // @@protoc_insertion_point(field_release:sonet.common.PaginationResponse.prev_cursor)
  return _impl_.prev_cursor_.Release();
}
inline void PaginationResponse::set_allocated_prev_cursor(std::string* prev_cursor) {
  if (prev_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.prev_cursor_.SetAllocated(prev_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_cursor_.IsDefault()) {
    _impl_.prev_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.common.PaginationResponse.prev_cursor)
}

// -------------------------------------------------------------------

// Pagination

// int32 offset = 1;
inline void Pagination::clear_offset() {
  _impl_.offset_ = 0;
}
inline int32_t Pagination::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t Pagination::offset() const {
  // @@protoc_insertion_point(field_get:sonet.common.Pagination.offset)
  return _internal_offset();
}
inline void Pagination::_internal_set_offset(int32_t value) {
  
  _impl_.offset_ = value;
}
inline void Pagination::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:sonet.common.Pagination.offset)
}

// int32 limit = 2;
inline void Pagination::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t Pagination::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t Pagination::limit() const {
  // @@protoc_insertion_point(field_get:sonet.common.Pagination.limit)
  return _internal_limit();
}
inline void Pagination::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void Pagination::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.common.Pagination.limit)
}

// int32 total_count = 3;
inline void Pagination::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t Pagination::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t Pagination::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.common.Pagination.total_count)
  return _internal_total_count();
}
inline void Pagination::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void Pagination::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.common.Pagination.total_count)
}

// bool has_next = 4;
inline void Pagination::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool Pagination::_internal_has_next() const {
  return _impl_.has_next_;
}
inline bool Pagination::has_next() const {
  // @@protoc_insertion_point(field_get:sonet.common.Pagination.has_next)
  return _internal_has_next();
}
inline void Pagination::_internal_set_has_next(bool value) {
  
  _impl_.has_next_ = value;
}
inline void Pagination::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:sonet.common.Pagination.has_next)
}

// bool has_previous = 5;
inline void Pagination::clear_has_previous() {
  _impl_.has_previous_ = false;
}
inline bool Pagination::_internal_has_previous() const {
  return _impl_.has_previous_;
}
inline bool Pagination::has_previous() const {
  // @@protoc_insertion_point(field_get:sonet.common.Pagination.has_previous)
  return _internal_has_previous();
}
inline void Pagination::_internal_set_has_previous(bool value) {
  
  _impl_.has_previous_ = value;
}
inline void Pagination::set_has_previous(bool value) {
  _internal_set_has_previous(value);
  // @@protoc_insertion_point(field_set:sonet.common.Pagination.has_previous)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace sonet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fpagination_2eproto
