import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { View } from 'react-native';
import { atoms as a } from '#/alf';
import { Button, ButtonText } from '#/components/Button';
import { DateField, LabelText } from '#/components/forms/DateField';
import * as TextField from '#/components/forms/TextField';
import * as Toggle from '#/components/forms/Toggle';
import * as ToggleButton from '#/components/forms/ToggleButton';
import { Globe_Stroke2_Corner0_Rounded as Globe } from '#/components/icons/Globe';
import { H1, H3 } from '#/components/Typography';
export function Forms() {
    const [toggleGroupAValues, setToggleGroupAValues] = React.useState(['a']);
    const [toggleGroupBValues, setToggleGroupBValues] = React.useState(['a', 'b']);
    const [toggleGroupCValues, setToggleGroupCValues] = React.useState(['a', 'b']);
    const [toggleGroupDValues, setToggleGroupDValues] = React.useState(['warn']);
    const [value, setValue] = React.useState('');
    const [date, setDate] = React.useState('2001-01-01');
    const inputRef = React.useRef(null);
    return (_jsxs(View, { style: [a.gap_4xl, a.align_start], children: [_jsx(H1, { children: "Forms" }), _jsxs(View, { style: [a.gap_md, a.align_start, a.w_full], children: [_jsx(H3, { children: "InputText" }), _jsx(TextField.Input, { value: value, onChangeText: setValue, label: "Text field" }), _jsxs(View, { style: [a.flex_row, a.align_start, a.gap_sm], children: [_jsx(View, { style: [a.flex_1], children: _jsxs(TextField.Root, { children: [_jsx(TextField.Icon, { icon: Globe }), _jsx(TextField.Input, { inputRef: inputRef, value: value, onChangeText: setValue, label: "Text field" })] }) }), _jsx(Button, { label: "Submit", size: "large", variant: "solid", color: "primary", onPress: () => inputRef.current?.clear(), children: _jsx(ButtonText, { children: "Submit" }) })] }), _jsxs(TextField.Root, { children: [_jsx(TextField.Icon, { icon: Globe }), _jsx(TextField.Input, { value: value, onChangeText: setValue, label: "Text field" })] }), _jsxs(TextField.Root, { children: [_jsx(TextField.Icon, { icon: Globe }), _jsx(TextField.Input, { value: value, onChangeText: setValue, label: "Text field", isInvalid: true })] }), _jsxs(View, { style: [a.w_full], children: [_jsx(TextField.LabelText, { children: "Text field" }), _jsxs(TextField.Root, { children: [_jsx(TextField.Icon, { icon: Globe }), _jsx(TextField.Input, { value: value, onChangeText: setValue, label: "Text field" }), _jsx(TextField.SuffixText, { label: "@gmail.com", children: "@gmail.com" })] })] }), _jsxs(View, { style: [a.w_full], children: [_jsx(TextField.LabelText, { children: "Textarea" }), _jsx(TextField.Input, { multiline: true, numberOfLines: 4, value: value, onChangeText: setValue, label: "Text field" })] }), _jsx(H3, { children: "DateField" }), _jsxs(View, { style: [a.w_full], children: [_jsx(LabelText, { children: "Date" }), _jsx(DateField, { testID: "date", value: date, onChangeDate: date => {
                                    console.log(date);
                                    setDate(date);
                                }, label: "Input" })] })] }), _jsxs(View, { style: [a.gap_md, a.align_start, a.w_full], children: [_jsx(H3, { children: "Toggles" }), _jsxs(Toggle.Item, { name: "a", label: "Click me", children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { children: "Uncontrolled toggle" })] }), _jsx(Toggle.Group, { label: "Toggle", type: "checkbox", maxSelections: 2, values: toggleGroupAValues, onChange: setToggleGroupAValues, children: _jsxs(View, { style: [a.gap_md], children: [_jsxs(Toggle.Item, { name: "a", label: "Click me", children: [_jsx(Toggle.Switch, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "b", label: "Click me", children: [_jsx(Toggle.Switch, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "c", label: "Click me", children: [_jsx(Toggle.Switch, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "d", disabled: true, label: "Click me", children: [_jsx(Toggle.Switch, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "e", isInvalid: true, label: "Click me", children: [_jsx(Toggle.Switch, {}), _jsx(Toggle.LabelText, { children: "Click me" })] })] }) }), _jsx(Toggle.Group, { label: "Toggle", type: "checkbox", maxSelections: 2, values: toggleGroupBValues, onChange: setToggleGroupBValues, children: _jsxs(View, { style: [a.gap_md], children: [_jsxs(Toggle.Item, { name: "a", label: "Click me", children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "b", label: "Click me", children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "c", label: "Click me", children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "d", disabled: true, label: "Click me", children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "e", isInvalid: true, label: "Click me", children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { children: "Click me" })] })] }) }), _jsx(Toggle.Group, { label: "Toggle", type: "radio", values: toggleGroupCValues, onChange: setToggleGroupCValues, children: _jsxs(View, { style: [a.gap_md], children: [_jsxs(Toggle.Item, { name: "a", label: "Click me", children: [_jsx(Toggle.Radio, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "b", label: "Click me", children: [_jsx(Toggle.Radio, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "c", label: "Click me", children: [_jsx(Toggle.Radio, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "d", disabled: true, label: "Click me", children: [_jsx(Toggle.Radio, {}), _jsx(Toggle.LabelText, { children: "Click me" })] }), _jsxs(Toggle.Item, { name: "e", isInvalid: true, label: "Click me", children: [_jsx(Toggle.Radio, {}), _jsx(Toggle.LabelText, { children: "Click me" })] })] }) })] }), _jsx(Button, { variant: "solid", color: "primary", size: "small", label: "Reset all toggles", onPress: () => {
                    setToggleGroupAValues(['a']);
                    setToggleGroupBValues(['a', 'b']);
                    setToggleGroupCValues(['a']);
                }, children: _jsx(ButtonText, { children: "Reset all toggles" }) }), _jsxs(View, { style: [a.gap_md, a.align_start, a.w_full], children: [_jsx(H3, { children: "ToggleButton" }), _jsxs(ToggleButton.Group, { label: "Preferences", values: toggleGroupDValues, onChange: setToggleGroupDValues, children: [_jsx(ToggleButton.Button, { name: "hide", label: "Hide", children: _jsx(ToggleButton.ButtonText, { children: "Hide" }) }), _jsx(ToggleButton.Button, { name: "warn", label: "Warn", children: _jsx(ToggleButton.ButtonText, { children: "Warn" }) }), _jsx(ToggleButton.Button, { name: "show", label: "Show", children: _jsx(ToggleButton.ButtonText, { children: "Show" }) })] }), _jsx(View, { children: _jsxs(ToggleButton.Group, { label: "Preferences", values: toggleGroupDValues, onChange: setToggleGroupDValues, children: [_jsx(ToggleButton.Button, { name: "hide", label: "Hide", children: _jsx(ToggleButton.ButtonText, { children: "Hide" }) }), _jsx(ToggleButton.Button, { name: "warn", label: "Warn", children: _jsx(ToggleButton.ButtonText, { children: "Warn" }) }), _jsx(ToggleButton.Button, { name: "show", label: "Show", children: _jsx(ToggleButton.ButtonText, { children: "Show" }) })] }) })] })] }));
}
//# sourceMappingURL=Forms.js.map