import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useMemo, useState } from 'react';
import { useWindowDimensions, View } from 'react-native';
import Animated, { FadeIn, FadeOut, LayoutAnimationConfig, LinearTransition, SlideInRight, SlideOutLeft, } from 'react-native-reanimated';
import {} from '@atproto/api';
import { msg, Trans } from '@lingui/macro';
import { useLingui } from '@lingui/react';
import { useMutation } from '@tanstack/react-query';
import { isWeb } from '#/platform/detection';
import { useAppPasswordCreateMutation } from '#/state/queries/app-passwords';
import { atoms as a, native, useTheme } from '#/alf';
import { Admonition } from '#/components/Admonition';
import { Button, ButtonIcon, ButtonText } from '#/components/Button';
import * as Dialog from '#/components/Dialog';
import * as TextInput from '#/components/forms/TextField';
import * as Toggle from '#/components/forms/Toggle';
import { ChevronRight_Stroke2_Corner0_Rounded as ChevronRight } from '#/components/icons/Chevron';
import { SquareBehindSquare4_Stroke2_Corner0_Rounded as CopyIcon } from '#/components/icons/SquareBehindSquare4';
import { Text } from '#/components/Typography';
import { CopyButton } from './CopyButton';
export function AddAppPasswordDialog({ control, passwords, }) {
    const { height } = useWindowDimensions();
    return (_jsxs(Dialog.Outer, { control: control, nativeOptions: { minHeight: height }, children: [_jsx(Dialog.Handle, {}), _jsx(CreateDialogInner, { passwords: passwords })] }));
}
function CreateDialogInner({ passwords }) {
    const control = Dialog.useDialogContext();
    const t = useTheme();
    const { _ } = useLingui();
    const autogeneratedName = useRandomName();
    const [name, setName] = useState('');
    const [privileged, setPrivileged] = useState(false);
    const { mutateAsync: actuallyCreateAppPassword, error: apiError, data, } = useAppPasswordCreateMutation();
    const regexFailError = useMemo(() => new DisplayableError(_(msg `App password names can only contain letters, numbers, spaces, dashes, and underscores`)), [_]);
    const { mutate: createAppPassword, error: validationError, isPending, } = useMutation({
        mutationFn: async () => {
            const chosenName = name.trim() || autogeneratedName;
            if (chosenName.length < 4) {
                throw new DisplayableError(_(msg `App password names must be at least 4 characters long`));
            }
            if (passwords.find(p => p === chosenName)) {
                throw new DisplayableError(_(msg `App password name must be unique`));
            }
            return await actuallyCreateAppPassword({ name: chosenName, privileged });
        },
    });
    const [hasBeenCopied, setHasBeenCopied] = useState(false);
    useEffect(() => {
        if (hasBeenCopied) {
            const timeout = setTimeout(() => setHasBeenCopied(false), 100);
            return () => clearTimeout(timeout);
        }
    }, [hasBeenCopied]);
    const error = validationError || (!name.match(/^[a-zA-Z0-9-_ ]*$/) && regexFailError);
    return (_jsxs(Dialog.ScrollableInner, { label: _(msg `Add app password`), children: [_jsx(View, { style: [native(a.pt_md)], children: _jsx(LayoutAnimationConfig, { skipEntering: true, skipExiting: true, children: !data ? (_jsxs(Animated.View, { style: [a.gap_lg], exiting: native(SlideOutLeft), children: [_jsx(Text, { style: [a.text_2xl, a.font_bold], children: _jsx(Trans, { children: "Add App Password" }) }), _jsx(Text, { style: [a.text_md, a.leading_snug], children: _jsx(Trans, { children: "Please enter a unique name for this app password or use our randomly generated one." }) }), _jsx(View, { children: _jsx(TextInput.Root, { isInvalid: !!error, children: _jsx(Dialog.Input, { label: _(msg `App Password`), placeholder: autogeneratedName, onChangeText: setName, returnKeyType: "done", onSubmitEditing: () => createAppPassword(), blurOnSubmit: true, autoCorrect: false, autoComplete: "off", autoCapitalize: "none", autoFocus: true }) }) }), error instanceof DisplayableError && (_jsx(Animated.View, { entering: FadeIn, exiting: FadeOut, children: _jsx(Admonition, { type: "error", children: error.message }) })), _jsxs(Animated.View, { style: [a.gap_lg], layout: native(LinearTransition), children: [_jsxs(Toggle.Item, { name: "privileged", type: "checkbox", label: _(msg `Allow access to your direct messages`), value: privileged, onChange: setPrivileged, style: [a.flex_1], children: [_jsx(Toggle.Checkbox, {}), _jsx(Toggle.LabelText, { style: [a.font_normal, a.text_md, a.leading_snug], children: _jsx(Trans, { children: "Allow access to your direct messages" }) })] }), _jsxs(Button, { label: _(msg `Next`), size: "large", variant: "solid", color: "primary", style: [a.flex_1], onPress: () => createAppPassword(), disabled: isPending, children: [_jsx(ButtonText, { children: _jsx(Trans, { children: "Next" }) }), _jsx(ButtonIcon, { icon: ChevronRight })] }), !!apiError ||
                                        (error && !(error instanceof DisplayableError) && (_jsx(Animated.View, { entering: FadeIn, exiting: FadeOut, children: _jsx(Admonition, { type: "error", children: _jsx(Trans, { children: "Failed to create app password. Please try again." }) }) })))] })] }, 0)) : (_jsxs(Animated.View, { style: [a.gap_lg], entering: isWeb ? FadeIn.delay(200) : SlideInRight, children: [_jsx(Text, { style: [a.text_2xl, a.font_bold], children: _jsx(Trans, { children: "Here is your app password!" }) }), _jsx(Text, { style: [a.text_md, a.leading_snug], children: _jsx(Trans, { children: "Use this to sign in to the other app along with your handle." }) }), _jsxs(CopyButton, { value: data.password, label: _(msg `Copy App Password`), size: "large", variant: "solid", color: "secondary", children: [_jsx(ButtonText, { children: data.password }), _jsx(ButtonIcon, { icon: CopyIcon })] }), _jsx(Text, { style: [
                                    a.text_md,
                                    a.leading_snug,
                                    t.atoms.text_contrast_medium,
                                ], children: _jsx(Trans, { children: "For security reasons, you won't be able to view this again. If you lose this app password, you'll need to generate a new one." }) }), _jsx(Button, { label: _(msg `Done`), size: "large", variant: "outline", color: "primary", style: [a.flex_1], onPress: () => control.close(), children: _jsx(ButtonText, { children: _jsx(Trans, { children: "Done" }) }) })] }, 1)) }) }), _jsx(Dialog.Close, {})] }));
}
class DisplayableError extends Error {
    constructor(message) {
        super(message);
        this.name = 'DisplayableError';
    }
}
function useRandomName() {
    return useState(() => shadesOfBlue[Math.floor(Math.random() * shadesOfBlue.length)])[0];
}
const shadesOfBlue = [
    'AliceBlue',
    'Aqua',
    'Aquamarine',
    'Azure',
    'BabyBlue',
    'Blue',
    'BlueViolet',
    'CadetBlue',
    'CornflowerBlue',
    'Cyan',
    'DarkBlue',
    'DarkCyan',
    'DarkSlateBlue',
    'DeepSkyBlue',
    'DodgerBlue',
    'ElectricBlue',
    'LightBlue',
    'LightCyan',
    'LightSkyBlue',
    'LightSteelBlue',
    'MediumAquaMarine',
    'MediumBlue',
    'MediumSlateBlue',
    'MidnightBlue',
    'Navy',
    'PowderBlue',
    'RoyalBlue',
    'SkyBlue',
    'SlateBlue',
    'SteelBlue',
    'Teal',
    'Turquoise',
];
//# sourceMappingURL=AddAppPasswordDialog.js.map