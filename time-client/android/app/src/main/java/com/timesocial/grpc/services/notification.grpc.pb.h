// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/notification.proto
// Original file comments:
//
// Copyright (c) 2025 Neo Qiss
// All rights reserved.
//
// Proprietary and confidential.
//
//
#ifndef GRPC_services_2fnotification_2eproto__INCLUDED
#define GRPC_services_2fnotification_2eproto__INCLUDED

#include "services/notification.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sonet {
namespace notification {

class NotificationService final {
 public:
  static constexpr char const* service_full_name() {
    return "sonet.notification.NotificationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::sonet::notification::ListNotificationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::ListNotificationsResponse>> AsyncListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::ListNotificationsResponse>>(AsyncListNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::ListNotificationsResponse>> PrepareAsyncListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::ListNotificationsResponse>>(PrepareAsyncListNotificationsRaw(context, request, cq));
    }
    virtual ::grpc::Status MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::sonet::notification::MarkNotificationReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::MarkNotificationReadResponse>> AsyncMarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::MarkNotificationReadResponse>>(AsyncMarkNotificationReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::MarkNotificationReadResponse>> PrepareAsyncMarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::MarkNotificationReadResponse>>(PrepareAsyncMarkNotificationReadRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::ListNotificationsResponse>* AsyncListNotificationsRaw(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::ListNotificationsResponse>* PrepareAsyncListNotificationsRaw(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::MarkNotificationReadResponse>* AsyncMarkNotificationReadRaw(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::notification::MarkNotificationReadResponse>* PrepareAsyncMarkNotificationReadRaw(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::sonet::notification::ListNotificationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>> AsyncListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>>(AsyncListNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>> PrepareAsyncListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>>(PrepareAsyncListNotificationsRaw(context, request, cq));
    }
    ::grpc::Status MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::sonet::notification::MarkNotificationReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>> AsyncMarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>>(AsyncMarkNotificationReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>> PrepareAsyncMarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>>(PrepareAsyncMarkNotificationReadRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>* AsyncListNotificationsRaw(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>* PrepareAsyncListNotificationsRaw(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>* AsyncMarkNotificationReadRaw(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>* PrepareAsyncMarkNotificationReadRaw(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListNotifications_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkNotificationRead_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListNotifications(::grpc::ServerContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response);
    virtual ::grpc::Status MarkNotificationRead(::grpc::ServerContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNotifications() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotifications(::grpc::ServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotifications(::grpc::ServerContext* context, ::sonet::notification::ListNotificationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::notification::ListNotificationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkNotificationRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarkNotificationRead() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MarkNotificationRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkNotificationRead(::grpc::ServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkNotificationRead(::grpc::ServerContext* context, ::sonet::notification::MarkNotificationReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::notification::MarkNotificationReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListNotifications<WithAsyncMethod_MarkNotificationRead<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNotifications() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response) { return this->ListNotifications(context, request, response); }));}
    void SetMessageAllocatorFor_ListNotifications(
        ::grpc::MessageAllocator< ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotifications(::grpc::ServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarkNotificationRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarkNotificationRead() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response) { return this->MarkNotificationRead(context, request, response); }));}
    void SetMessageAllocatorFor_MarkNotificationRead(
        ::grpc::MessageAllocator< ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarkNotificationRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkNotificationRead(::grpc::ServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkNotificationRead(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListNotifications<WithCallbackMethod_MarkNotificationRead<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNotifications() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotifications(::grpc::ServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkNotificationRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarkNotificationRead() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MarkNotificationRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkNotificationRead(::grpc::ServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNotifications() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotifications(::grpc::ServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotifications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkNotificationRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarkNotificationRead() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MarkNotificationRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkNotificationRead(::grpc::ServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkNotificationRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNotifications() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNotifications(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotifications(::grpc::ServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarkNotificationRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarkNotificationRead() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarkNotificationRead(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarkNotificationRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkNotificationRead(::grpc::ServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkNotificationRead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNotifications() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse>* streamer) {
                       return this->StreamedListNotifications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNotifications(::grpc::ServerContext* /*context*/, const ::sonet::notification::ListNotificationsRequest* /*request*/, ::sonet::notification::ListNotificationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNotifications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::notification::ListNotificationsRequest,::sonet::notification::ListNotificationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkNotificationRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarkNotificationRead() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse>* streamer) {
                       return this->StreamedMarkNotificationRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarkNotificationRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkNotificationRead(::grpc::ServerContext* /*context*/, const ::sonet::notification::MarkNotificationReadRequest* /*request*/, ::sonet::notification::MarkNotificationReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkNotificationRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::notification::MarkNotificationReadRequest,::sonet::notification::MarkNotificationReadResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListNotifications<WithStreamedUnaryMethod_MarkNotificationRead<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListNotifications<WithStreamedUnaryMethod_MarkNotificationRead<Service > > StreamedService;
};

}  // namespace notification
}  // namespace sonet


#endif  // GRPC_services_2fnotification_2eproto__INCLUDED
