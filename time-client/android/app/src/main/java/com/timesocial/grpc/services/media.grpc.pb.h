// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/media.proto
// Original file comments:
//
// Copyright (c) 2025 Neo Qiss
// All rights reserved.
//
// This software is proprietary and confidential.
// Unauthorized copying, distribution, or use is strictly prohibited.
//
//
#ifndef GRPC_services_2fmedia_2eproto__INCLUDED
#define GRPC_services_2fmedia_2eproto__INCLUDED

#include "services/media.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sonet {
namespace media {

class MediaService final {
 public:
  static constexpr char const* service_full_name() {
    return "sonet.media.MediaService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Client streaming upload
    std::unique_ptr< ::grpc::ClientWriterInterface< ::sonet::media::UploadRequest>> Upload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::sonet::media::UploadRequest>>(UploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sonet::media::UploadRequest>> AsyncUpload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sonet::media::UploadRequest>>(AsyncUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sonet::media::UploadRequest>> PrepareAsyncUpload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sonet::media::UploadRequest>>(PrepareAsyncUploadRaw(context, response, cq));
    }
    virtual ::grpc::Status GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::sonet::media::GetMediaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::GetMediaResponse>> AsyncGetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::GetMediaResponse>>(AsyncGetMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::GetMediaResponse>> PrepareAsyncGetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::GetMediaResponse>>(PrepareAsyncGetMediaRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::sonet::media::DeleteMediaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::DeleteMediaResponse>> AsyncDeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::DeleteMediaResponse>>(AsyncDeleteMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::DeleteMediaResponse>> PrepareAsyncDeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::DeleteMediaResponse>>(PrepareAsyncDeleteMediaRaw(context, request, cq));
    }
    virtual ::grpc::Status ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::sonet::media::ListUserMediaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ListUserMediaResponse>> AsyncListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ListUserMediaResponse>>(AsyncListUserMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ListUserMediaResponse>> PrepareAsyncListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ListUserMediaResponse>>(PrepareAsyncListUserMediaRaw(context, request, cq));
    }
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::sonet::media::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    virtual ::grpc::Status ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::sonet::media::ToggleMediaLikeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ToggleMediaLikeResponse>> AsyncToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ToggleMediaLikeResponse>>(AsyncToggleMediaLikeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ToggleMediaLikeResponse>> PrepareAsyncToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ToggleMediaLikeResponse>>(PrepareAsyncToggleMediaLikeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Client streaming upload
      virtual void Upload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::ClientWriteReactor< ::sonet::media::UploadRequest>* reactor) = 0;
      virtual void GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::sonet::media::UploadRequest>* UploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::sonet::media::UploadRequest>* AsyncUploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::sonet::media::UploadRequest>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::GetMediaResponse>* AsyncGetMediaRaw(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::GetMediaResponse>* PrepareAsyncGetMediaRaw(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::DeleteMediaResponse>* AsyncDeleteMediaRaw(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::DeleteMediaResponse>* PrepareAsyncDeleteMediaRaw(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ListUserMediaResponse>* AsyncListUserMediaRaw(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ListUserMediaResponse>* PrepareAsyncListUserMediaRaw(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ToggleMediaLikeResponse>* AsyncToggleMediaLikeRaw(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sonet::media::ToggleMediaLikeResponse>* PrepareAsyncToggleMediaLikeRaw(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::sonet::media::UploadRequest>> Upload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::sonet::media::UploadRequest>>(UploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>> AsyncUpload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>>(AsyncUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>> PrepareAsyncUpload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>>(PrepareAsyncUploadRaw(context, response, cq));
    }
    ::grpc::Status GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::sonet::media::GetMediaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>> AsyncGetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>>(AsyncGetMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>> PrepareAsyncGetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>>(PrepareAsyncGetMediaRaw(context, request, cq));
    }
    ::grpc::Status DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::sonet::media::DeleteMediaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>> AsyncDeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>>(AsyncDeleteMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>> PrepareAsyncDeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>>(PrepareAsyncDeleteMediaRaw(context, request, cq));
    }
    ::grpc::Status ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::sonet::media::ListUserMediaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>> AsyncListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>>(AsyncListUserMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>> PrepareAsyncListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>>(PrepareAsyncListUserMediaRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::sonet::media::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    ::grpc::Status ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::sonet::media::ToggleMediaLikeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>> AsyncToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>>(AsyncToggleMediaLikeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>> PrepareAsyncToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>>(PrepareAsyncToggleMediaLikeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Upload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::ClientWriteReactor< ::sonet::media::UploadRequest>* reactor) override;
      void GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response, std::function<void(::grpc::Status)>) override;
      void ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response, std::function<void(::grpc::Status)>) override;
      void ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::sonet::media::UploadRequest>* UploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response) override;
    ::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>* AsyncUploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>* AsyncGetMediaRaw(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>* PrepareAsyncGetMediaRaw(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>* AsyncDeleteMediaRaw(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>* PrepareAsyncDeleteMediaRaw(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>* AsyncListUserMediaRaw(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>* PrepareAsyncListUserMediaRaw(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>* AsyncToggleMediaLikeRaw(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>* PrepareAsyncToggleMediaLikeRaw(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Upload_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMedia_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMedia_;
    const ::grpc::internal::RpcMethod rpcmethod_ListUserMedia_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_ToggleMediaLike_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Client streaming upload
    virtual ::grpc::Status Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::sonet::media::UploadRequest>* reader, ::sonet::media::UploadResponse* response);
    virtual ::grpc::Status GetMedia(::grpc::ServerContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response);
    virtual ::grpc::Status DeleteMedia(::grpc::ServerContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response);
    virtual ::grpc::Status ListUserMedia(::grpc::ServerContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response);
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response);
    virtual ::grpc::Status ToggleMediaLike(::grpc::ServerContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Upload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sonet::media::UploadRequest>* /*reader*/, ::sonet::media::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::sonet::media::UploadResponse, ::sonet::media::UploadRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMedia() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMedia(::grpc::ServerContext* context, ::sonet::media::GetMediaRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::media::GetMediaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMedia() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMedia(::grpc::ServerContext* context, ::sonet::media::DeleteMediaRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::media::DeleteMediaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUserMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListUserMedia() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListUserMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUserMedia(::grpc::ServerContext* context, ::sonet::media::ListUserMediaRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::media::ListUserMediaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::sonet::media::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::media::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ToggleMediaLike : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ToggleMediaLike() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ToggleMediaLike() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleMediaLike(::grpc::ServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToggleMediaLike(::grpc::ServerContext* context, ::sonet::media::ToggleMediaLikeRequest* request, ::grpc::ServerAsyncResponseWriter< ::sonet::media::ToggleMediaLikeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Upload<WithAsyncMethod_GetMedia<WithAsyncMethod_DeleteMedia<WithAsyncMethod_ListUserMedia<WithAsyncMethod_HealthCheck<WithAsyncMethod_ToggleMediaLike<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Upload() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::sonet::media::UploadRequest, ::sonet::media::UploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::sonet::media::UploadResponse* response) { return this->Upload(context, response); }));
    }
    ~WithCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sonet::media::UploadRequest>* /*reader*/, ::sonet::media::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::sonet::media::UploadRequest>* Upload(
      ::grpc::CallbackServerContext* /*context*/, ::sonet::media::UploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMedia() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response) { return this->GetMedia(context, request, response); }));}
    void SetMessageAllocatorFor_GetMedia(
        ::grpc::MessageAllocator< ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMedia() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response) { return this->DeleteMedia(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMedia(
        ::grpc::MessageAllocator< ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListUserMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListUserMedia() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response) { return this->ListUserMedia(context, request, response); }));}
    void SetMessageAllocatorFor_ListUserMedia(
        ::grpc::MessageAllocator< ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListUserMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListUserMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ToggleMediaLike : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ToggleMediaLike() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response) { return this->ToggleMediaLike(context, request, response); }));}
    void SetMessageAllocatorFor_ToggleMediaLike(
        ::grpc::MessageAllocator< ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ToggleMediaLike() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleMediaLike(::grpc::ServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ToggleMediaLike(
      ::grpc::CallbackServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Upload<WithCallbackMethod_GetMedia<WithCallbackMethod_DeleteMedia<WithCallbackMethod_ListUserMedia<WithCallbackMethod_HealthCheck<WithCallbackMethod_ToggleMediaLike<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Upload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sonet::media::UploadRequest>* /*reader*/, ::sonet::media::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMedia() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMedia() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListUserMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListUserMedia() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListUserMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ToggleMediaLike : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ToggleMediaLike() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ToggleMediaLike() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleMediaLike(::grpc::ServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Upload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sonet::media::UploadRequest>* /*reader*/, ::sonet::media::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMedia() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMedia(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMedia() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMedia(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListUserMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListUserMedia() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListUserMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUserMedia(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ToggleMediaLike : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ToggleMediaLike() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ToggleMediaLike() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleMediaLike(::grpc::ServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToggleMediaLike(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Upload() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->Upload(context, response); }));
    }
    ~WithRawCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sonet::media::UploadRequest>* /*reader*/, ::sonet::media::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Upload(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMedia() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMedia(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMedia() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMedia(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListUserMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListUserMedia() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListUserMedia(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListUserMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListUserMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ToggleMediaLike : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ToggleMediaLike() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ToggleMediaLike(context, request, response); }));
    }
    ~WithRawCallbackMethod_ToggleMediaLike() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToggleMediaLike(::grpc::ServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ToggleMediaLike(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMedia() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse>* streamer) {
                       return this->StreamedGetMedia(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::GetMediaRequest* /*request*/, ::sonet::media::GetMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMedia(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::media::GetMediaRequest,::sonet::media::GetMediaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMedia() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse>* streamer) {
                       return this->StreamedDeleteMedia(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::DeleteMediaRequest* /*request*/, ::sonet::media::DeleteMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMedia(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::media::DeleteMediaRequest,::sonet::media::DeleteMediaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListUserMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListUserMedia() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse>* streamer) {
                       return this->StreamedListUserMedia(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListUserMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUserMedia(::grpc::ServerContext* /*context*/, const ::sonet::media::ListUserMediaRequest* /*request*/, ::sonet::media::ListUserMediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListUserMedia(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::media::ListUserMediaRequest,::sonet::media::ListUserMediaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::sonet::media::HealthCheckRequest* /*request*/, ::sonet::media::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::media::HealthCheckRequest,::sonet::media::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ToggleMediaLike : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ToggleMediaLike() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse>* streamer) {
                       return this->StreamedToggleMediaLike(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ToggleMediaLike() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ToggleMediaLike(::grpc::ServerContext* /*context*/, const ::sonet::media::ToggleMediaLikeRequest* /*request*/, ::sonet::media::ToggleMediaLikeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedToggleMediaLike(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sonet::media::ToggleMediaLikeRequest,::sonet::media::ToggleMediaLikeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMedia<WithStreamedUnaryMethod_DeleteMedia<WithStreamedUnaryMethod_ListUserMedia<WithStreamedUnaryMethod_HealthCheck<WithStreamedUnaryMethod_ToggleMediaLike<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMedia<WithStreamedUnaryMethod_DeleteMedia<WithStreamedUnaryMethod_ListUserMedia<WithStreamedUnaryMethod_HealthCheck<WithStreamedUnaryMethod_ToggleMediaLike<Service > > > > > StreamedService;
};

}  // namespace media
}  // namespace sonet


#endif  // GRPC_services_2fmedia_2eproto__INCLUDED
