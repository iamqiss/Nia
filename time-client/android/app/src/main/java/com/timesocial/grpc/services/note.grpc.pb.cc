// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/note.proto

#include "services/note.pb.h"
#include "services/note.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace note {

static const char* NoteService_method_names[] = {
  "/sonet.note.NoteService/CreateNote",
  "/sonet.note.NoteService/GetNote",
  "/sonet.note.NoteService/DeleteNote",
  "/sonet.note.NoteService/LikeNote",
  "/sonet.note.NoteService/RenoteNote",
  "/sonet.note.NoteService/GetUserNotes",
  "/sonet.note.NoteService/GetNoteThread",
  "/sonet.note.NoteService/SearchNotes",
  "/sonet.note.NoteService/HealthCheck",
};

std::unique_ptr< NoteService::Stub> NoteService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NoteService::Stub> stub(new NoteService::Stub(channel, options));
  return stub;
}

NoteService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateNote_(NoteService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNote_(NoteService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNote_(NoteService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LikeNote_(NoteService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenoteNote_(NoteService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserNotes_(NoteService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNoteThread_(NoteService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchNotes_(NoteService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(NoteService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NoteService::Stub::CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::sonet::note::CreateNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNote_, context, request, response);
}

void NoteService::Stub::async::CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNote_, context, request, response, std::move(f));
}

void NoteService::Stub::async::CreateNote(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>* NoteService::Stub::PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::CreateNoteResponse, ::sonet::note::CreateNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::CreateNoteResponse>* NoteService::Stub::AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::sonet::note::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::sonet::note::GetNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNote_, context, request, response);
}

void NoteService::Stub::async::GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNote_, context, request, response, std::move(f));
}

void NoteService::Stub::async::GetNote(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>* NoteService::Stub::PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::GetNoteResponse, ::sonet::note::GetNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteResponse>* NoteService::Stub::AsyncGetNoteRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::sonet::note::DeleteNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNote_, context, request, response);
}

void NoteService::Stub::async::DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNote_, context, request, response, std::move(f));
}

void NoteService::Stub::async::DeleteNote(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>* NoteService::Stub::PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::DeleteNoteResponse, ::sonet::note::DeleteNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::DeleteNoteResponse>* NoteService::Stub::AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::sonet::note::LikeNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LikeNote_, context, request, response);
}

void NoteService::Stub::async::LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LikeNote_, context, request, response, std::move(f));
}

void NoteService::Stub::async::LikeNote(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LikeNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>* NoteService::Stub::PrepareAsyncLikeNoteRaw(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::LikeNoteResponse, ::sonet::note::LikeNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LikeNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::LikeNoteResponse>* NoteService::Stub::AsyncLikeNoteRaw(::grpc::ClientContext* context, const ::sonet::note::LikeNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLikeNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::sonet::note::RenoteNoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenoteNote_, context, request, response);
}

void NoteService::Stub::async::RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenoteNote_, context, request, response, std::move(f));
}

void NoteService::Stub::async::RenoteNote(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenoteNote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>* NoteService::Stub::PrepareAsyncRenoteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::RenoteNoteResponse, ::sonet::note::RenoteNoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenoteNote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::RenoteNoteResponse>* NoteService::Stub::AsyncRenoteNoteRaw(::grpc::ClientContext* context, const ::sonet::note::RenoteNoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenoteNoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::sonet::note::GetUserNotesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserNotes_, context, request, response);
}

void NoteService::Stub::async::GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserNotes_, context, request, response, std::move(f));
}

void NoteService::Stub::async::GetUserNotes(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserNotes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>* NoteService::Stub::PrepareAsyncGetUserNotesRaw(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::GetUserNotesResponse, ::sonet::note::GetUserNotesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserNotes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::GetUserNotesResponse>* NoteService::Stub::AsyncGetUserNotesRaw(::grpc::ClientContext* context, const ::sonet::note::GetUserNotesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserNotesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::sonet::note::GetNoteThreadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNoteThread_, context, request, response);
}

void NoteService::Stub::async::GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNoteThread_, context, request, response, std::move(f));
}

void NoteService::Stub::async::GetNoteThread(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNoteThread_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>* NoteService::Stub::PrepareAsyncGetNoteThreadRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::GetNoteThreadResponse, ::sonet::note::GetNoteThreadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNoteThread_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::GetNoteThreadResponse>* NoteService::Stub::AsyncGetNoteThreadRaw(::grpc::ClientContext* context, const ::sonet::note::GetNoteThreadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNoteThreadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::sonet::note::SearchNotesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchNotes_, context, request, response);
}

void NoteService::Stub::async::SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchNotes_, context, request, response, std::move(f));
}

void NoteService::Stub::async::SearchNotes(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchNotes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>* NoteService::Stub::PrepareAsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::SearchNotesResponse, ::sonet::note::SearchNotesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchNotes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::SearchNotesResponse>* NoteService::Stub::AsyncSearchNotesRaw(::grpc::ClientContext* context, const ::sonet::note::SearchNotesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchNotesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NoteService::Stub::HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::sonet::note::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void NoteService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void NoteService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>* NoteService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::note::HealthCheckResponse, ::sonet::note::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::note::HealthCheckResponse>* NoteService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::note::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

NoteService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::CreateNoteRequest, ::sonet::note::CreateNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::CreateNoteRequest* req,
             ::sonet::note::CreateNoteResponse* resp) {
               return service->CreateNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::GetNoteRequest, ::sonet::note::GetNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::GetNoteRequest* req,
             ::sonet::note::GetNoteResponse* resp) {
               return service->GetNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::DeleteNoteRequest, ::sonet::note::DeleteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::DeleteNoteRequest* req,
             ::sonet::note::DeleteNoteResponse* resp) {
               return service->DeleteNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::LikeNoteRequest, ::sonet::note::LikeNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::LikeNoteRequest* req,
             ::sonet::note::LikeNoteResponse* resp) {
               return service->LikeNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::RenoteNoteRequest, ::sonet::note::RenoteNoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::RenoteNoteRequest* req,
             ::sonet::note::RenoteNoteResponse* resp) {
               return service->RenoteNote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::GetUserNotesRequest, ::sonet::note::GetUserNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::GetUserNotesRequest* req,
             ::sonet::note::GetUserNotesResponse* resp) {
               return service->GetUserNotes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::GetNoteThreadRequest, ::sonet::note::GetNoteThreadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::GetNoteThreadRequest* req,
             ::sonet::note::GetNoteThreadResponse* resp) {
               return service->GetNoteThread(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::SearchNotesRequest, ::sonet::note::SearchNotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::SearchNotesRequest* req,
             ::sonet::note::SearchNotesResponse* resp) {
               return service->SearchNotes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NoteService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NoteService::Service, ::sonet::note::HealthCheckRequest, ::sonet::note::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NoteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::note::HealthCheckRequest* req,
             ::sonet::note::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

NoteService::Service::~Service() {
}

::grpc::Status NoteService::Service::CreateNote(::grpc::ServerContext* context, const ::sonet::note::CreateNoteRequest* request, ::sonet::note::CreateNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::GetNote(::grpc::ServerContext* context, const ::sonet::note::GetNoteRequest* request, ::sonet::note::GetNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::DeleteNote(::grpc::ServerContext* context, const ::sonet::note::DeleteNoteRequest* request, ::sonet::note::DeleteNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::LikeNote(::grpc::ServerContext* context, const ::sonet::note::LikeNoteRequest* request, ::sonet::note::LikeNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::RenoteNote(::grpc::ServerContext* context, const ::sonet::note::RenoteNoteRequest* request, ::sonet::note::RenoteNoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::GetUserNotes(::grpc::ServerContext* context, const ::sonet::note::GetUserNotesRequest* request, ::sonet::note::GetUserNotesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::GetNoteThread(::grpc::ServerContext* context, const ::sonet::note::GetNoteThreadRequest* request, ::sonet::note::GetNoteThreadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::SearchNotes(::grpc::ServerContext* context, const ::sonet::note::SearchNotesRequest* request, ::sonet::note::SearchNotesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NoteService::Service::HealthCheck(::grpc::ServerContext* context, const ::sonet::note::HealthCheckRequest* request, ::sonet::note::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace note

