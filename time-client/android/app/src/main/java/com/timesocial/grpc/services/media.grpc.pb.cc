// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/media.proto

#include "services/media.pb.h"
#include "services/media.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace media {

static const char* MediaService_method_names[] = {
  "/sonet.media.MediaService/Upload",
  "/sonet.media.MediaService/GetMedia",
  "/sonet.media.MediaService/DeleteMedia",
  "/sonet.media.MediaService/ListUserMedia",
  "/sonet.media.MediaService/HealthCheck",
  "/sonet.media.MediaService/ToggleMediaLike",
};

std::unique_ptr< MediaService::Stub> MediaService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MediaService::Stub> stub(new MediaService::Stub(channel, options));
  return stub;
}

MediaService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(MediaService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetMedia_(MediaService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMedia_(MediaService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUserMedia_(MediaService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(MediaService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ToggleMediaLike_(MediaService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::sonet::media::UploadRequest>* MediaService::Stub::UploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::sonet::media::UploadRequest>::Create(channel_.get(), rpcmethod_Upload_, context, response);
}

void MediaService::Stub::async::Upload(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::ClientWriteReactor< ::sonet::media::UploadRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::sonet::media::UploadRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>* MediaService::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sonet::media::UploadRequest>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::sonet::media::UploadRequest>* MediaService::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::sonet::media::UploadResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sonet::media::UploadRequest>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, false, nullptr);
}

::grpc::Status MediaService::Stub::GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::sonet::media::GetMediaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMedia_, context, request, response);
}

void MediaService::Stub::async::GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMedia_, context, request, response, std::move(f));
}

void MediaService::Stub::async::GetMedia(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMedia_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>* MediaService::Stub::PrepareAsyncGetMediaRaw(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::media::GetMediaResponse, ::sonet::media::GetMediaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMedia_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::GetMediaResponse>* MediaService::Stub::AsyncGetMediaRaw(::grpc::ClientContext* context, const ::sonet::media::GetMediaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMediaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MediaService::Stub::DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::sonet::media::DeleteMediaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMedia_, context, request, response);
}

void MediaService::Stub::async::DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMedia_, context, request, response, std::move(f));
}

void MediaService::Stub::async::DeleteMedia(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMedia_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>* MediaService::Stub::PrepareAsyncDeleteMediaRaw(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::media::DeleteMediaResponse, ::sonet::media::DeleteMediaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMedia_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::DeleteMediaResponse>* MediaService::Stub::AsyncDeleteMediaRaw(::grpc::ClientContext* context, const ::sonet::media::DeleteMediaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMediaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MediaService::Stub::ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::sonet::media::ListUserMediaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListUserMedia_, context, request, response);
}

void MediaService::Stub::async::ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUserMedia_, context, request, response, std::move(f));
}

void MediaService::Stub::async::ListUserMedia(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUserMedia_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>* MediaService::Stub::PrepareAsyncListUserMediaRaw(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::media::ListUserMediaResponse, ::sonet::media::ListUserMediaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListUserMedia_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::ListUserMediaResponse>* MediaService::Stub::AsyncListUserMediaRaw(::grpc::ClientContext* context, const ::sonet::media::ListUserMediaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListUserMediaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MediaService::Stub::HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::sonet::media::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void MediaService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void MediaService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>* MediaService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::media::HealthCheckResponse, ::sonet::media::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::HealthCheckResponse>* MediaService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::sonet::media::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MediaService::Stub::ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::sonet::media::ToggleMediaLikeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ToggleMediaLike_, context, request, response);
}

void MediaService::Stub::async::ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ToggleMediaLike_, context, request, response, std::move(f));
}

void MediaService::Stub::async::ToggleMediaLike(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ToggleMediaLike_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>* MediaService::Stub::PrepareAsyncToggleMediaLikeRaw(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::media::ToggleMediaLikeResponse, ::sonet::media::ToggleMediaLikeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ToggleMediaLike_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::media::ToggleMediaLikeResponse>* MediaService::Stub::AsyncToggleMediaLikeRaw(::grpc::ClientContext* context, const ::sonet::media::ToggleMediaLikeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncToggleMediaLikeRaw(context, request, cq);
  result->StartCall();
  return result;
}

MediaService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< MediaService::Service, ::sonet::media::UploadRequest, ::sonet::media::UploadResponse>(
          [](MediaService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::sonet::media::UploadRequest>* reader,
             ::sonet::media::UploadResponse* resp) {
               return service->Upload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaService::Service, ::sonet::media::GetMediaRequest, ::sonet::media::GetMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MediaService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::media::GetMediaRequest* req,
             ::sonet::media::GetMediaResponse* resp) {
               return service->GetMedia(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaService::Service, ::sonet::media::DeleteMediaRequest, ::sonet::media::DeleteMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MediaService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::media::DeleteMediaRequest* req,
             ::sonet::media::DeleteMediaResponse* resp) {
               return service->DeleteMedia(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaService::Service, ::sonet::media::ListUserMediaRequest, ::sonet::media::ListUserMediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MediaService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::media::ListUserMediaRequest* req,
             ::sonet::media::ListUserMediaResponse* resp) {
               return service->ListUserMedia(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaService::Service, ::sonet::media::HealthCheckRequest, ::sonet::media::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MediaService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::media::HealthCheckRequest* req,
             ::sonet::media::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaService::Service, ::sonet::media::ToggleMediaLikeRequest, ::sonet::media::ToggleMediaLikeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MediaService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::media::ToggleMediaLikeRequest* req,
             ::sonet::media::ToggleMediaLikeResponse* resp) {
               return service->ToggleMediaLike(ctx, req, resp);
             }, this)));
}

MediaService::Service::~Service() {
}

::grpc::Status MediaService::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::sonet::media::UploadRequest>* reader, ::sonet::media::UploadResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaService::Service::GetMedia(::grpc::ServerContext* context, const ::sonet::media::GetMediaRequest* request, ::sonet::media::GetMediaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaService::Service::DeleteMedia(::grpc::ServerContext* context, const ::sonet::media::DeleteMediaRequest* request, ::sonet::media::DeleteMediaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaService::Service::ListUserMedia(::grpc::ServerContext* context, const ::sonet::media::ListUserMediaRequest* request, ::sonet::media::ListUserMediaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaService::Service::HealthCheck(::grpc::ServerContext* context, const ::sonet::media::HealthCheckRequest* request, ::sonet::media::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaService::Service::ToggleMediaLike(::grpc::ServerContext* context, const ::sonet::media::ToggleMediaLikeRequest* request, ::sonet::media::ToggleMediaLikeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace media

