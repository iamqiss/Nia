// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/notification.proto

#include "services/notification.pb.h"
#include "services/notification.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace notification {

static const char* NotificationService_method_names[] = {
  "/sonet.notification.NotificationService/ListNotifications",
  "/sonet.notification.NotificationService/MarkNotificationRead",
};

std::unique_ptr< NotificationService::Stub> NotificationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NotificationService::Stub> stub(new NotificationService::Stub(channel, options));
  return stub;
}

NotificationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListNotifications_(NotificationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkNotificationRead_(NotificationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NotificationService::Stub::ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::sonet::notification::ListNotificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNotifications_, context, request, response);
}

void NotificationService::Stub::async::ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNotifications_, context, request, response, std::move(f));
}

void NotificationService::Stub::async::ListNotifications(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>* NotificationService::Stub::PrepareAsyncListNotificationsRaw(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::notification::ListNotificationsResponse, ::sonet::notification::ListNotificationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::notification::ListNotificationsResponse>* NotificationService::Stub::AsyncListNotificationsRaw(::grpc::ClientContext* context, const ::sonet::notification::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationService::Stub::MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::sonet::notification::MarkNotificationReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarkNotificationRead_, context, request, response);
}

void NotificationService::Stub::async::MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkNotificationRead_, context, request, response, std::move(f));
}

void NotificationService::Stub::async::MarkNotificationRead(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkNotificationRead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>* NotificationService::Stub::PrepareAsyncMarkNotificationReadRaw(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::notification::MarkNotificationReadResponse, ::sonet::notification::MarkNotificationReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarkNotificationRead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::notification::MarkNotificationReadResponse>* NotificationService::Stub::AsyncMarkNotificationReadRaw(::grpc::ClientContext* context, const ::sonet::notification::MarkNotificationReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarkNotificationReadRaw(context, request, cq);
  result->StartCall();
  return result;
}

NotificationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationService::Service, ::sonet::notification::ListNotificationsRequest, ::sonet::notification::ListNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NotificationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::notification::ListNotificationsRequest* req,
             ::sonet::notification::ListNotificationsResponse* resp) {
               return service->ListNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationService::Service, ::sonet::notification::MarkNotificationReadRequest, ::sonet::notification::MarkNotificationReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NotificationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::notification::MarkNotificationReadRequest* req,
             ::sonet::notification::MarkNotificationReadResponse* resp) {
               return service->MarkNotificationRead(ctx, req, resp);
             }, this)));
}

NotificationService::Service::~Service() {
}

::grpc::Status NotificationService::Service::ListNotifications(::grpc::ServerContext* context, const ::sonet::notification::ListNotificationsRequest* request, ::sonet::notification::ListNotificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationService::Service::MarkNotificationRead(::grpc::ServerContext* context, const ::sonet::notification::MarkNotificationReadRequest* request, ::sonet::notification::MarkNotificationReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace notification

