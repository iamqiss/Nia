// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/user.proto

#include "services/user.pb.h"
#include "services/user.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace user {

static const char* UserService_method_names[] = {
  "/sonet.user.UserService/RegisterUser",
  "/sonet.user.UserService/LoginUser",
  "/sonet.user.UserService/LogoutUser",
  "/sonet.user.UserService/VerifyToken",
  "/sonet.user.UserService/RefreshToken",
  "/sonet.user.UserService/ChangePassword",
  "/sonet.user.UserService/ResetPassword",
  "/sonet.user.UserService/ConfirmPasswordReset",
  "/sonet.user.UserService/VerifyEmail",
  "/sonet.user.UserService/ResendVerification",
  "/sonet.user.UserService/SetupTwoFactor",
  "/sonet.user.UserService/VerifyTwoFactor",
  "/sonet.user.UserService/DisableTwoFactor",
  "/sonet.user.UserService/GetActiveSessions",
  "/sonet.user.UserService/TerminateSession",
  "/sonet.user.UserService/GetUserProfile",
  "/sonet.user.UserService/UpdateUserProfile",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterUser_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginUser_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LogoutUser_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyToken_(UserService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefreshToken_(UserService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(UserService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(UserService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmPasswordReset_(UserService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyEmail_(UserService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResendVerification_(UserService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetupTwoFactor_(UserService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyTwoFactor_(UserService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableTwoFactor_(UserService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActiveSessions_(UserService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TerminateSession_(UserService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserProfile_(UserService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUserProfile_(UserService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::RegisterUser(::grpc::ClientContext* context, const ::sonet::user::RegisterUserRequest& request, ::sonet::user::RegisterUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::RegisterUserRequest, ::sonet::user::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void UserService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::sonet::user::RegisterUserRequest* request, ::sonet::user::RegisterUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::RegisterUserRequest, ::sonet::user::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::sonet::user::RegisterUserRequest* request, ::sonet::user::RegisterUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::RegisterUserResponse>* UserService::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::sonet::user::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::RegisterUserResponse, ::sonet::user::RegisterUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::RegisterUserResponse>* UserService::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::sonet::user::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::LoginUser(::grpc::ClientContext* context, const ::sonet::user::LoginUserRequest& request, ::sonet::user::LoginUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::LoginUserRequest, ::sonet::user::LoginUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoginUser_, context, request, response);
}

void UserService::Stub::async::LoginUser(::grpc::ClientContext* context, const ::sonet::user::LoginUserRequest* request, ::sonet::user::LoginUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::LoginUserRequest, ::sonet::user::LoginUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::LoginUser(::grpc::ClientContext* context, const ::sonet::user::LoginUserRequest* request, ::sonet::user::LoginUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::LoginUserResponse>* UserService::Stub::PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::sonet::user::LoginUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::LoginUserResponse, ::sonet::user::LoginUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoginUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::LoginUserResponse>* UserService::Stub::AsyncLoginUserRaw(::grpc::ClientContext* context, const ::sonet::user::LoginUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::LogoutUser(::grpc::ClientContext* context, const ::sonet::user::LogoutRequest& request, ::sonet::user::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::LogoutRequest, ::sonet::user::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LogoutUser_, context, request, response);
}

void UserService::Stub::async::LogoutUser(::grpc::ClientContext* context, const ::sonet::user::LogoutRequest* request, ::sonet::user::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::LogoutRequest, ::sonet::user::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogoutUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::LogoutUser(::grpc::ClientContext* context, const ::sonet::user::LogoutRequest* request, ::sonet::user::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogoutUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::LogoutResponse>* UserService::Stub::PrepareAsyncLogoutUserRaw(::grpc::ClientContext* context, const ::sonet::user::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::LogoutResponse, ::sonet::user::LogoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LogoutUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::LogoutResponse>* UserService::Stub::AsyncLogoutUserRaw(::grpc::ClientContext* context, const ::sonet::user::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::VerifyToken(::grpc::ClientContext* context, const ::sonet::user::VerifyTokenRequest& request, ::sonet::user::VerifyTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::VerifyTokenRequest, ::sonet::user::VerifyTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VerifyToken_, context, request, response);
}

void UserService::Stub::async::VerifyToken(::grpc::ClientContext* context, const ::sonet::user::VerifyTokenRequest* request, ::sonet::user::VerifyTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::VerifyTokenRequest, ::sonet::user::VerifyTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyToken_, context, request, response, std::move(f));
}

void UserService::Stub::async::VerifyToken(::grpc::ClientContext* context, const ::sonet::user::VerifyTokenRequest* request, ::sonet::user::VerifyTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::VerifyTokenResponse>* UserService::Stub::PrepareAsyncVerifyTokenRaw(::grpc::ClientContext* context, const ::sonet::user::VerifyTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::VerifyTokenResponse, ::sonet::user::VerifyTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VerifyToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::VerifyTokenResponse>* UserService::Stub::AsyncVerifyTokenRaw(::grpc::ClientContext* context, const ::sonet::user::VerifyTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::RefreshToken(::grpc::ClientContext* context, const ::sonet::user::RefreshTokenRequest& request, ::sonet::user::RefreshTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::RefreshTokenRequest, ::sonet::user::RefreshTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RefreshToken_, context, request, response);
}

void UserService::Stub::async::RefreshToken(::grpc::ClientContext* context, const ::sonet::user::RefreshTokenRequest* request, ::sonet::user::RefreshTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::RefreshTokenRequest, ::sonet::user::RefreshTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, std::move(f));
}

void UserService::Stub::async::RefreshToken(::grpc::ClientContext* context, const ::sonet::user::RefreshTokenRequest* request, ::sonet::user::RefreshTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::RefreshTokenResponse>* UserService::Stub::PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::sonet::user::RefreshTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::RefreshTokenResponse, ::sonet::user::RefreshTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RefreshToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::RefreshTokenResponse>* UserService::Stub::AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::sonet::user::RefreshTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ChangePassword(::grpc::ClientContext* context, const ::sonet::user::ChangePasswordRequest& request, ::sonet::user::ChangePasswordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::ChangePasswordRequest, ::sonet::user::ChangePasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void UserService::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::sonet::user::ChangePasswordRequest* request, ::sonet::user::ChangePasswordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::ChangePasswordRequest, ::sonet::user::ChangePasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void UserService::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::sonet::user::ChangePasswordRequest* request, ::sonet::user::ChangePasswordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ChangePasswordResponse>* UserService::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::sonet::user::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::ChangePasswordResponse, ::sonet::user::ChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ChangePasswordResponse>* UserService::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::sonet::user::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ResetPassword(::grpc::ClientContext* context, const ::sonet::user::ResetPasswordRequest& request, ::sonet::user::ResetPasswordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::ResetPasswordRequest, ::sonet::user::ResetPasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void UserService::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::sonet::user::ResetPasswordRequest* request, ::sonet::user::ResetPasswordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::ResetPasswordRequest, ::sonet::user::ResetPasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void UserService::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::sonet::user::ResetPasswordRequest* request, ::sonet::user::ResetPasswordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ResetPasswordResponse>* UserService::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::sonet::user::ResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::ResetPasswordResponse, ::sonet::user::ResetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ResetPasswordResponse>* UserService::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::sonet::user::ResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ConfirmPasswordReset(::grpc::ClientContext* context, const ::sonet::user::ConfirmPasswordResetRequest& request, ::sonet::user::ConfirmPasswordResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::ConfirmPasswordResetRequest, ::sonet::user::ConfirmPasswordResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmPasswordReset_, context, request, response);
}

void UserService::Stub::async::ConfirmPasswordReset(::grpc::ClientContext* context, const ::sonet::user::ConfirmPasswordResetRequest* request, ::sonet::user::ConfirmPasswordResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::ConfirmPasswordResetRequest, ::sonet::user::ConfirmPasswordResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmPasswordReset_, context, request, response, std::move(f));
}

void UserService::Stub::async::ConfirmPasswordReset(::grpc::ClientContext* context, const ::sonet::user::ConfirmPasswordResetRequest* request, ::sonet::user::ConfirmPasswordResetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmPasswordReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ConfirmPasswordResetResponse>* UserService::Stub::PrepareAsyncConfirmPasswordResetRaw(::grpc::ClientContext* context, const ::sonet::user::ConfirmPasswordResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::ConfirmPasswordResetResponse, ::sonet::user::ConfirmPasswordResetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmPasswordReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ConfirmPasswordResetResponse>* UserService::Stub::AsyncConfirmPasswordResetRaw(::grpc::ClientContext* context, const ::sonet::user::ConfirmPasswordResetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmPasswordResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::VerifyEmail(::grpc::ClientContext* context, const ::sonet::user::VerifyEmailRequest& request, ::sonet::user::VerifyEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::VerifyEmailRequest, ::sonet::user::VerifyEmailResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VerifyEmail_, context, request, response);
}

void UserService::Stub::async::VerifyEmail(::grpc::ClientContext* context, const ::sonet::user::VerifyEmailRequest* request, ::sonet::user::VerifyEmailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::VerifyEmailRequest, ::sonet::user::VerifyEmailResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyEmail_, context, request, response, std::move(f));
}

void UserService::Stub::async::VerifyEmail(::grpc::ClientContext* context, const ::sonet::user::VerifyEmailRequest* request, ::sonet::user::VerifyEmailResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::VerifyEmailResponse>* UserService::Stub::PrepareAsyncVerifyEmailRaw(::grpc::ClientContext* context, const ::sonet::user::VerifyEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::VerifyEmailResponse, ::sonet::user::VerifyEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VerifyEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::VerifyEmailResponse>* UserService::Stub::AsyncVerifyEmailRaw(::grpc::ClientContext* context, const ::sonet::user::VerifyEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ResendVerification(::grpc::ClientContext* context, const ::sonet::user::ResendVerificationRequest& request, ::sonet::user::ResendVerificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::ResendVerificationRequest, ::sonet::user::ResendVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResendVerification_, context, request, response);
}

void UserService::Stub::async::ResendVerification(::grpc::ClientContext* context, const ::sonet::user::ResendVerificationRequest* request, ::sonet::user::ResendVerificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::ResendVerificationRequest, ::sonet::user::ResendVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResendVerification_, context, request, response, std::move(f));
}

void UserService::Stub::async::ResendVerification(::grpc::ClientContext* context, const ::sonet::user::ResendVerificationRequest* request, ::sonet::user::ResendVerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResendVerification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ResendVerificationResponse>* UserService::Stub::PrepareAsyncResendVerificationRaw(::grpc::ClientContext* context, const ::sonet::user::ResendVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::ResendVerificationResponse, ::sonet::user::ResendVerificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResendVerification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::ResendVerificationResponse>* UserService::Stub::AsyncResendVerificationRaw(::grpc::ClientContext* context, const ::sonet::user::ResendVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResendVerificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::SetupTwoFactor(::grpc::ClientContext* context, const ::sonet::user::SetupTwoFactorRequest& request, ::sonet::user::SetupTwoFactorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::SetupTwoFactorRequest, ::sonet::user::SetupTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetupTwoFactor_, context, request, response);
}

void UserService::Stub::async::SetupTwoFactor(::grpc::ClientContext* context, const ::sonet::user::SetupTwoFactorRequest* request, ::sonet::user::SetupTwoFactorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::SetupTwoFactorRequest, ::sonet::user::SetupTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupTwoFactor_, context, request, response, std::move(f));
}

void UserService::Stub::async::SetupTwoFactor(::grpc::ClientContext* context, const ::sonet::user::SetupTwoFactorRequest* request, ::sonet::user::SetupTwoFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupTwoFactor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::SetupTwoFactorResponse>* UserService::Stub::PrepareAsyncSetupTwoFactorRaw(::grpc::ClientContext* context, const ::sonet::user::SetupTwoFactorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::SetupTwoFactorResponse, ::sonet::user::SetupTwoFactorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetupTwoFactor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::SetupTwoFactorResponse>* UserService::Stub::AsyncSetupTwoFactorRaw(::grpc::ClientContext* context, const ::sonet::user::SetupTwoFactorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupTwoFactorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::VerifyTwoFactor(::grpc::ClientContext* context, const ::sonet::user::VerifyTwoFactorRequest& request, ::sonet::user::VerifyTwoFactorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::VerifyTwoFactorRequest, ::sonet::user::VerifyTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VerifyTwoFactor_, context, request, response);
}

void UserService::Stub::async::VerifyTwoFactor(::grpc::ClientContext* context, const ::sonet::user::VerifyTwoFactorRequest* request, ::sonet::user::VerifyTwoFactorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::VerifyTwoFactorRequest, ::sonet::user::VerifyTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyTwoFactor_, context, request, response, std::move(f));
}

void UserService::Stub::async::VerifyTwoFactor(::grpc::ClientContext* context, const ::sonet::user::VerifyTwoFactorRequest* request, ::sonet::user::VerifyTwoFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyTwoFactor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::VerifyTwoFactorResponse>* UserService::Stub::PrepareAsyncVerifyTwoFactorRaw(::grpc::ClientContext* context, const ::sonet::user::VerifyTwoFactorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::VerifyTwoFactorResponse, ::sonet::user::VerifyTwoFactorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VerifyTwoFactor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::VerifyTwoFactorResponse>* UserService::Stub::AsyncVerifyTwoFactorRaw(::grpc::ClientContext* context, const ::sonet::user::VerifyTwoFactorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyTwoFactorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::DisableTwoFactor(::grpc::ClientContext* context, const ::sonet::user::DisableTwoFactorRequest& request, ::sonet::user::DisableTwoFactorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::DisableTwoFactorRequest, ::sonet::user::DisableTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableTwoFactor_, context, request, response);
}

void UserService::Stub::async::DisableTwoFactor(::grpc::ClientContext* context, const ::sonet::user::DisableTwoFactorRequest* request, ::sonet::user::DisableTwoFactorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::DisableTwoFactorRequest, ::sonet::user::DisableTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableTwoFactor_, context, request, response, std::move(f));
}

void UserService::Stub::async::DisableTwoFactor(::grpc::ClientContext* context, const ::sonet::user::DisableTwoFactorRequest* request, ::sonet::user::DisableTwoFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableTwoFactor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::DisableTwoFactorResponse>* UserService::Stub::PrepareAsyncDisableTwoFactorRaw(::grpc::ClientContext* context, const ::sonet::user::DisableTwoFactorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::DisableTwoFactorResponse, ::sonet::user::DisableTwoFactorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableTwoFactor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::DisableTwoFactorResponse>* UserService::Stub::AsyncDisableTwoFactorRaw(::grpc::ClientContext* context, const ::sonet::user::DisableTwoFactorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableTwoFactorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetActiveSessions(::grpc::ClientContext* context, const ::sonet::user::GetActiveSessionsRequest& request, ::sonet::user::GetActiveSessionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::GetActiveSessionsRequest, ::sonet::user::GetActiveSessionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActiveSessions_, context, request, response);
}

void UserService::Stub::async::GetActiveSessions(::grpc::ClientContext* context, const ::sonet::user::GetActiveSessionsRequest* request, ::sonet::user::GetActiveSessionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::GetActiveSessionsRequest, ::sonet::user::GetActiveSessionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveSessions_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetActiveSessions(::grpc::ClientContext* context, const ::sonet::user::GetActiveSessionsRequest* request, ::sonet::user::GetActiveSessionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveSessions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::GetActiveSessionsResponse>* UserService::Stub::PrepareAsyncGetActiveSessionsRaw(::grpc::ClientContext* context, const ::sonet::user::GetActiveSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::GetActiveSessionsResponse, ::sonet::user::GetActiveSessionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActiveSessions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::GetActiveSessionsResponse>* UserService::Stub::AsyncGetActiveSessionsRaw(::grpc::ClientContext* context, const ::sonet::user::GetActiveSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActiveSessionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::TerminateSession(::grpc::ClientContext* context, const ::sonet::user::TerminateSessionRequest& request, ::sonet::user::TerminateSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::TerminateSessionRequest, ::sonet::user::TerminateSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TerminateSession_, context, request, response);
}

void UserService::Stub::async::TerminateSession(::grpc::ClientContext* context, const ::sonet::user::TerminateSessionRequest* request, ::sonet::user::TerminateSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::TerminateSessionRequest, ::sonet::user::TerminateSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TerminateSession_, context, request, response, std::move(f));
}

void UserService::Stub::async::TerminateSession(::grpc::ClientContext* context, const ::sonet::user::TerminateSessionRequest* request, ::sonet::user::TerminateSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TerminateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::TerminateSessionResponse>* UserService::Stub::PrepareAsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::sonet::user::TerminateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::TerminateSessionResponse, ::sonet::user::TerminateSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TerminateSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::TerminateSessionResponse>* UserService::Stub::AsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::sonet::user::TerminateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTerminateSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetUserProfile(::grpc::ClientContext* context, const ::sonet::user::GetUserProfileRequest& request, ::sonet::user::GetUserProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::GetUserProfileRequest, ::sonet::user::GetUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserProfile_, context, request, response);
}

void UserService::Stub::async::GetUserProfile(::grpc::ClientContext* context, const ::sonet::user::GetUserProfileRequest* request, ::sonet::user::GetUserProfileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::GetUserProfileRequest, ::sonet::user::GetUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserProfile_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetUserProfile(::grpc::ClientContext* context, const ::sonet::user::GetUserProfileRequest* request, ::sonet::user::GetUserProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::GetUserProfileResponse>* UserService::Stub::PrepareAsyncGetUserProfileRaw(::grpc::ClientContext* context, const ::sonet::user::GetUserProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::GetUserProfileResponse, ::sonet::user::GetUserProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::GetUserProfileResponse>* UserService::Stub::AsyncGetUserProfileRaw(::grpc::ClientContext* context, const ::sonet::user::GetUserProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::UpdateUserProfile(::grpc::ClientContext* context, const ::sonet::user::UpdateUserProfileRequest& request, ::sonet::user::UpdateUserProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::user::UpdateUserProfileRequest, ::sonet::user::UpdateUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUserProfile_, context, request, response);
}

void UserService::Stub::async::UpdateUserProfile(::grpc::ClientContext* context, const ::sonet::user::UpdateUserProfileRequest* request, ::sonet::user::UpdateUserProfileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::user::UpdateUserProfileRequest, ::sonet::user::UpdateUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserProfile_, context, request, response, std::move(f));
}

void UserService::Stub::async::UpdateUserProfile(::grpc::ClientContext* context, const ::sonet::user::UpdateUserProfileRequest* request, ::sonet::user::UpdateUserProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::UpdateUserProfileResponse>* UserService::Stub::PrepareAsyncUpdateUserProfileRaw(::grpc::ClientContext* context, const ::sonet::user::UpdateUserProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::user::UpdateUserProfileResponse, ::sonet::user::UpdateUserProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUserProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::user::UpdateUserProfileResponse>* UserService::Stub::AsyncUpdateUserProfileRaw(::grpc::ClientContext* context, const ::sonet::user::UpdateUserProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::RegisterUserRequest, ::sonet::user::RegisterUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::RegisterUserRequest* req,
             ::sonet::user::RegisterUserResponse* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::LoginUserRequest, ::sonet::user::LoginUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::LoginUserRequest* req,
             ::sonet::user::LoginUserResponse* resp) {
               return service->LoginUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::LogoutRequest, ::sonet::user::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::LogoutRequest* req,
             ::sonet::user::LogoutResponse* resp) {
               return service->LogoutUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::VerifyTokenRequest, ::sonet::user::VerifyTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::VerifyTokenRequest* req,
             ::sonet::user::VerifyTokenResponse* resp) {
               return service->VerifyToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::RefreshTokenRequest, ::sonet::user::RefreshTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::RefreshTokenRequest* req,
             ::sonet::user::RefreshTokenResponse* resp) {
               return service->RefreshToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::ChangePasswordRequest, ::sonet::user::ChangePasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::ChangePasswordRequest* req,
             ::sonet::user::ChangePasswordResponse* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::ResetPasswordRequest, ::sonet::user::ResetPasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::ResetPasswordRequest* req,
             ::sonet::user::ResetPasswordResponse* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::ConfirmPasswordResetRequest, ::sonet::user::ConfirmPasswordResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::ConfirmPasswordResetRequest* req,
             ::sonet::user::ConfirmPasswordResetResponse* resp) {
               return service->ConfirmPasswordReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::VerifyEmailRequest, ::sonet::user::VerifyEmailResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::VerifyEmailRequest* req,
             ::sonet::user::VerifyEmailResponse* resp) {
               return service->VerifyEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::ResendVerificationRequest, ::sonet::user::ResendVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::ResendVerificationRequest* req,
             ::sonet::user::ResendVerificationResponse* resp) {
               return service->ResendVerification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::SetupTwoFactorRequest, ::sonet::user::SetupTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::SetupTwoFactorRequest* req,
             ::sonet::user::SetupTwoFactorResponse* resp) {
               return service->SetupTwoFactor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::VerifyTwoFactorRequest, ::sonet::user::VerifyTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::VerifyTwoFactorRequest* req,
             ::sonet::user::VerifyTwoFactorResponse* resp) {
               return service->VerifyTwoFactor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::DisableTwoFactorRequest, ::sonet::user::DisableTwoFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::DisableTwoFactorRequest* req,
             ::sonet::user::DisableTwoFactorResponse* resp) {
               return service->DisableTwoFactor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::GetActiveSessionsRequest, ::sonet::user::GetActiveSessionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::GetActiveSessionsRequest* req,
             ::sonet::user::GetActiveSessionsResponse* resp) {
               return service->GetActiveSessions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::TerminateSessionRequest, ::sonet::user::TerminateSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::TerminateSessionRequest* req,
             ::sonet::user::TerminateSessionResponse* resp) {
               return service->TerminateSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::GetUserProfileRequest, ::sonet::user::GetUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::GetUserProfileRequest* req,
             ::sonet::user::GetUserProfileResponse* resp) {
               return service->GetUserProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::sonet::user::UpdateUserProfileRequest, ::sonet::user::UpdateUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::user::UpdateUserProfileRequest* req,
             ::sonet::user::UpdateUserProfileResponse* resp) {
               return service->UpdateUserProfile(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::RegisterUser(::grpc::ServerContext* context, const ::sonet::user::RegisterUserRequest* request, ::sonet::user::RegisterUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::LoginUser(::grpc::ServerContext* context, const ::sonet::user::LoginUserRequest* request, ::sonet::user::LoginUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::LogoutUser(::grpc::ServerContext* context, const ::sonet::user::LogoutRequest* request, ::sonet::user::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::VerifyToken(::grpc::ServerContext* context, const ::sonet::user::VerifyTokenRequest* request, ::sonet::user::VerifyTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::RefreshToken(::grpc::ServerContext* context, const ::sonet::user::RefreshTokenRequest* request, ::sonet::user::RefreshTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ChangePassword(::grpc::ServerContext* context, const ::sonet::user::ChangePasswordRequest* request, ::sonet::user::ChangePasswordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ResetPassword(::grpc::ServerContext* context, const ::sonet::user::ResetPasswordRequest* request, ::sonet::user::ResetPasswordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ConfirmPasswordReset(::grpc::ServerContext* context, const ::sonet::user::ConfirmPasswordResetRequest* request, ::sonet::user::ConfirmPasswordResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::VerifyEmail(::grpc::ServerContext* context, const ::sonet::user::VerifyEmailRequest* request, ::sonet::user::VerifyEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ResendVerification(::grpc::ServerContext* context, const ::sonet::user::ResendVerificationRequest* request, ::sonet::user::ResendVerificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::SetupTwoFactor(::grpc::ServerContext* context, const ::sonet::user::SetupTwoFactorRequest* request, ::sonet::user::SetupTwoFactorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::VerifyTwoFactor(::grpc::ServerContext* context, const ::sonet::user::VerifyTwoFactorRequest* request, ::sonet::user::VerifyTwoFactorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DisableTwoFactor(::grpc::ServerContext* context, const ::sonet::user::DisableTwoFactorRequest* request, ::sonet::user::DisableTwoFactorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetActiveSessions(::grpc::ServerContext* context, const ::sonet::user::GetActiveSessionsRequest* request, ::sonet::user::GetActiveSessionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::TerminateSession(::grpc::ServerContext* context, const ::sonet::user::TerminateSessionRequest* request, ::sonet::user::TerminateSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetUserProfile(::grpc::ServerContext* context, const ::sonet::user::GetUserProfileRequest* request, ::sonet::user::GetUserProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UpdateUserProfile(::grpc::ServerContext* context, const ::sonet::user::UpdateUserProfileRequest* request, ::sonet::user::UpdateUserProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace user

